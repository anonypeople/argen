<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-10\src\ArcDialFrame.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * ArcDialFrame.java
 * -----------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Nov-2006 : Version 1 (DG);
 * 08-Mar-2007 : Fix in hashCode() (DG);
 * 17-Oct-2007 : Updated equals() (DG);
 * 24-Oct-2007 : Added argument checks and API docs, and renamed 
 *               StandardDialFrame --&gt; ArcDialFrame (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>dial</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Area</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A standard frame for the {@link DialPlot} class.
 * 
 * @since 1.0.7
 */</comment>
<class><specifier>public</specifier> class <name>ArcDialFrame</name> <super><extends>extends <name>AbstractDialLayer</name></extends> <implements>implements <name>DialFrame</name>, 
        <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4089176959553523499L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The color used for the front of the panel.  This field is transient
     * because it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>backgroundPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The color used for the border around the window. This field is transient
     * because it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>foregroundPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The stroke for drawing the frame outline.  This field is transient
     * because it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>stroke</name></decl>;</decl_stmt>
       
    <comment type="javadoc">/**
     * The start angle.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startAngle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The end angle.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>extent</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The inner radius, relative to the framing rectangle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>innerRadius</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The outer radius, relative to the framing rectangle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>outerRadius</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** 
     * Creates a new instance of &lt;code&gt;ArcDialFrame&lt;/code&gt; that spans
     * 180 degrees. 
     */</comment>
    <constructor><specifier>public</specifier> <name>ArcDialFrame</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>180</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance of &lt;code&gt;ArcDialFrame&lt;/code&gt; that spans
     * the arc specified.
     *
     * @param startAngle  the startAngle (in degrees).
     * @param extent  the extent of the arc (in degrees, counter-clockwise).
     */</comment>
    <constructor><specifier>public</specifier> <name>ArcDialFrame</name><parameter_list>(<param><decl><type><name>double</name></type> <name>startAngle</name></decl></param>, <param><decl><type><name>double</name></type> <name>extent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <name><name>Color</name>.<name>gray</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundPaint</name></name> = new <call><name>Color</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr>100</expr></argument>, <argument><expr>150</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>2.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>innerRadius</name></name> = 0.25</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outerRadius</name></name> = 0.75</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>startAngle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>extent</name></name> = <name>extent</name></expr>;</expr_stmt>        
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the background paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @return The background paint.
     * 
     * @see #setBackgroundPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBackgroundPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>backgroundPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the background paint and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBackgroundPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the foreground paint.
     * 
     * @return The foreground paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setForegroundPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getForegroundPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>foregroundPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the foreground paint and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getForegroundPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForegroundPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>stroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the inner radius, relative to the framing rectangle.
     *
     * @return The inner radius. 
     * 
     * @see #setInnerRadius(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getInnerRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>innerRadius</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the inner radius and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     *
     * @param radius  the inner radius.
     * 
     * @see #getInnerRadius()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInnerRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>radius</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'radius' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>innerRadius</name></name> = <name>radius</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outer radius, relative to the framing rectangle.
     *
     * @return The outer radius.
     * 
     * @see #setOuterRadius(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getOuterRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>outerRadius</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the outer radius and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     *
     * @param radius  the outer radius.
     * 
     * @see #getOuterRadius()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOuterRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>radius</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'radius' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>outerRadius</name></name> = <name>radius</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the start angle.
     * 
     * @return The start angle.
     * 
     * @see #setStartAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startAngle</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the start angle and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     * 
     * @param angle  the angle.
     * 
     * @see #getStartAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the extent.
     * 
     * @return The extent.
     * 
     * @see #setExtent(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getExtent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>extent</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the extent and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     * 
     * @param extent  the extent.
     * 
     * @see #getExtent()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>extent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>extent</name></name> = <name>extent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the shape for the window for this dial.  Some dial layers will
     * request that their drawing be clipped within this window.
     *
     * @param frame  the reference frame (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The shape of the dial's window.
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getWindow</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>frame</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>innerFrame</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>innerRadius</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>innerRadius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>outerFrame</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>outerRadius</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>outerRadius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>inner</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>innerFrame</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>extent</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>outer</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>outerFrame</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name> 
                + <name><name>this</name>.<name>extent</name></name></expr></argument>, <argument><expr>-<name><name>this</name>.<name>extent</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>p</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>point1</name> =<init> <expr><call><name><name>inner</name>.<name>getStartPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>point1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>point1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><name>inner</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outer window.
     * 
     * @param frame  the frame.
     * 
     * @return The outer window.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Shape</name></type> <name>getOuterWindow</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>frame</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>radiusMargin</name> =<init> <expr>0.02</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>angleMargin</name> =<init> <expr>1.5</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>innerFrame</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>innerRadius</name></name> - <name>radiusMargin</name></expr></argument>, <argument><expr><name><name>this</name>.<name>innerRadius</name></name> 
                - <name>radiusMargin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>outerFrame</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>outerRadius</name></name> + <name>radiusMargin</name></expr></argument>, <argument><expr><name><name>this</name>.<name>outerRadius</name></name> 
                + <name>radiusMargin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>inner</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>innerFrame</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name> 
                - <name>angleMargin</name></expr></argument>, <argument><expr><name><name>this</name>.<name>extent</name></name> + 2 * <name>angleMargin</name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>outer</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>outerFrame</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name> 
                + <name>angleMargin</name> + <name><name>this</name>.<name>extent</name></name></expr></argument>, <argument><expr>-<name><name>this</name>.<name>extent</name></name> - 2 * <name>angleMargin</name></expr></argument>, 
                <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>p</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>point1</name> =<init> <expr><call><name><name>inner</name>.<name>getStartPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>point1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>point1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><name>inner</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>append</name></name><argument_list>(<argument><expr><name>outer</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the frame.
     * 
     * @param g2  the graphics target.
     * @param plot  the plot.
     * @param frame  the dial's reference frame.
     * @param view  the dial's view rectangle.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>DialPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>frame</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>view</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Shape</name></type> <name>window</name> =<init> <expr><call><name>getWindow</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>outerWindow</name> =<init> <expr><call><name>getOuterWindow</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Area</name></type> <name>area1</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>outerWindow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Area</name></type> <name>area2</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>area1</name>.<name>subtract</name></name><argument_list>(<argument><expr><name>area2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>lightGray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>area1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>outerWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;false&lt;/code&gt; to indicate that this dial layer is not
     * clipped to the dial window.
     *
     * @return &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isClippedToWindow</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ArcDialFrame</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ArcDialFrame</name></type> <name>that</name> =<init> <expr>(<name>ArcDialFrame</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>backgroundPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>foregroundPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>startAngle</name></name> != <name><name>that</name>.<name>startAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>extent</name></name> != <name><name>that</name>.<name>extent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>innerRadius</name></name> != <name><name>that</name>.<name>innerRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>outerRadius</name></name> != <name><name>that</name>.<name>outerRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>stroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return The hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>innerRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outerRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>foregroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>stroke</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if any attribute of this instance
     *     cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
