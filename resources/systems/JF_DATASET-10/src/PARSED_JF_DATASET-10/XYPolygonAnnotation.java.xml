<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-10\src\XYPolygonAnnotation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * XYPolygonAnnotation.java
 * ------------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 09-Feb-2005 : Version 1 (DG);
 * 
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A polygon annotation that can be placed on an {@link XYPlot}.  The 
 * polygon coordinates are specified in data space.
 */</comment>
<class><specifier>public</specifier> class <name>XYPolygonAnnotation</name> <super><extends>extends <name>AbstractXYAnnotation</name></extends>
                                 <implements>implements <name>Cloneable</name>, 
                                            <name>PublicCloneable</name>, 
                                            <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-6984203651995900036L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The polygon. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>polygon</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the box outline. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>stroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the box outline. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>outlinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to fill the box. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>fillPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new annotation (where, by default, the polygon is drawn 
     * with a black outline).  The array of polygon coordinates must contain
     * an even number of coordinates (each pair is an (x, y) location on the
     * plot) and the last point is automatically joined back to the first point.
     * 
     * @param polygon  the coordinates of the polygon's vertices 
     *     (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYPolygonAnnotation</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>polygon</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>polygon</name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new annotation where the box is drawn as an outline using
     * the specified &lt;code&gt;stroke&lt;/code&gt; and &lt;code&gt;outlinePaint&lt;/code&gt;.  
     * The array of polygon coordinates must contain an even number of 
     * coordinates (each pair is an (x, y) location on the plot) and the last 
     * point is automatically joined back to the first point.
     *
     * @param polygon  the coordinates of the polygon's vertices 
     *     (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the shape stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param outlinePaint  the shape color (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYPolygonAnnotation</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>polygon</name></decl></param>, 
                               <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>polygon</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new annotation.  The array of polygon coordinates must 
     * contain an even number of coordinates (each pair is an (x, y) location 
     * on the plot) and the last point is automatically joined back to the 
     * first point.
     *
     * @param polygon  the coordinates of the polygon's vertices 
     *     (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the shape stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param outlinePaint  the shape color (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param fillPaint  the paint used to fill the shape (&lt;code&gt;null&lt;/code&gt; 
     *                   permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYPolygonAnnotation</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>polygon</name></decl></param>, 
                               <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, 
                               <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>polygon</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'polygon' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>polygon</name>.<name>length</name></name> % 2 != 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The 'polygon' array must " 
                    + "contain an even number of items."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>polygon</name></name> = (<name><name>double</name><index>[]</index></name>) <call><name><name>polygon</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaint</name></name> = <name>outlinePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaint</name></name> = <name>fillPaint</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the coordinates of the polygon's vertices.  The returned array
     * is a copy, so it is safe to modify without altering the annotation's 
     * state.
     * 
     * @return The coordinates of the polygon's vertices.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name><index>[]</index></type> <name>getPolygonCoordinates</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>this</name>.<name>polygon</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fill paint.
     * 
     * @return The fill paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getFillPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline stroke.
     * 
     * @return The outline stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>stroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline paint.
     * 
     * @return The outline paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>outlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the annotation.  This method is usually called by the 
     * {@link XYPlot} class, you shouldn't need to call it directly.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param rendererIndex  the renderer index.
     * @param info  the plot rendering info.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                     <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
                     <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if we don't have at least 2 (x, y) coordinates, just return</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>polygon</name>.<name>length</name></name> &lt; 4</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>area</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>y</name></expr></argument>, <argument><expr>(<name>float</name>) <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>2</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>polygon</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name> += 2</expr></incr>) <block>{
                <expr_stmt><expr><name>x</name> = <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>y</name></expr></argument>, <argument><expr>(<name>float</name>) <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>area</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>2</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>polygon</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name> += 2</expr></incr>) <block>{
                <expr_stmt><expr><name>x</name> = <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>area</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }</block></then></if></else></if>
        

        <if>if <condition>(<expr><name><name>this</name>.<name>fillPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>stroke</name></name> != <name>null</name> &amp;&amp; <name><name>this</name>.<name>outlinePaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><call><name>getToolTipText</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getURL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>
        
    <comment type="javadoc">/**
     * Tests this annotation for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <comment type="line">// now try to reject equality</comment>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYPolygonAnnotation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYPolygonAnnotation</name></type> <name>that</name> =<init> <expr>(<name>XYPolygonAnnotation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>polygon</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>polygon</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>outlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>fillPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// seem to be the same</comment>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForDoubleArray</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>polygon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>outlinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>stroke</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>stroke</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException not thrown by this class, but may be
     *                                    by subclasses.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
