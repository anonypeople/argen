<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\CategoryPointerAnnotation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------------
 * CategoryPointerAnnotation.java
 * ------------------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 02-Oct-2006 : Version 1 (DG);
 * 06-Mar-2007 : Implemented hashCode() (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * An arrow and label that can be placed on a {@link CategoryPlot}.  The arrow 
 * is drawn at a user-definable angle so that it points towards the (category, 
 * value) location for the annotation.  
 * &lt;p&gt;
 * The arrow length (and its offset from the (category, value) location) is 
 * controlled by the tip radius and the base radius attributes.  Imagine two 
 * circles around the (category, value) coordinate: the inner circle defined by
 * the tip radius, and the outer circle defined by the base radius.  Now, draw 
 * the arrow starting at some point on the outer circle (the point is 
 * determined by the angle), with the arrow tip being drawn at a corresponding 
 * point on the inner circle.
 *
 * @since 1.0.3
 */</comment>
<class><specifier>public</specifier> class <name>CategoryPointerAnnotation</name> <super><extends>extends <name>CategoryTextAnnotation</name></extends> 
                                 <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                            <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4031161445009858551L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default tip radius (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_TIP_RADIUS</name> =<init> <expr>10.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default base radius (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_BASE_RADIUS</name> =<init> <expr>30.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default label offset (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_LABEL_OFFSET</name> =<init> <expr>3.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default arrow length (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ARROW_LENGTH</name> =<init> <expr>5.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default arrow width (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ARROW_WIDTH</name> =<init> <expr>3.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The angle of the arrow's line (in radians). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>angle</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The radius from the (x, y) point to the tip of the arrow (in Java2D 
     * units). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tipRadius</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The radius from the (x, y) point to the start of the arrow line (in 
     * Java2D units). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>baseRadius</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The length of the arrow head (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>arrowLength</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The arrow width (in Java2D units, per side). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>arrowWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The arrow stroke. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>arrowStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The arrow paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>arrowPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The radius from the base point to the anchor point for the label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>labelOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new label and arrow annotation.
     *
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param key  the category key.
     * @param value  the y-value (measured against the chart's range axis).
     * @param angle  the angle of the arrow's line (in radians).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryPointerAnnotation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tipRadius</name></name> = <name>DEFAULT_TIP_RADIUS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseRadius</name></name> = <name>DEFAULT_BASE_RADIUS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowLength</name></name> = <name>DEFAULT_ARROW_LENGTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowWidth</name></name> = <name>DEFAULT_ARROW_WIDTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelOffset</name></name> = <name>DEFAULT_LABEL_OFFSET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>

    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the angle of the arrow.
     * 
     * @return The angle (in radians).
     * 
     * @see #setAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angle</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the angle of the arrow.
     * 
     * @param angle  the angle (in radians).
     * 
     * @see #getAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>angle</name></name> = <name>angle</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tip radius.
     * 
     * @return The tip radius (in Java2D units).
     * 
     * @see #setTipRadius(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTipRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tipRadius</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tip radius.
     * 
     * @param radius  the radius (in Java2D units).
     * 
     * @see #getTipRadius()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTipRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tipRadius</name></name> = <name>radius</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the base radius.
     * 
     * @return The base radius (in Java2D units).
     * 
     * @see #setBaseRadius(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBaseRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseRadius</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base radius.
     * 
     * @param radius  the radius (in Java2D units).
     * 
     * @see #getBaseRadius()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseRadius</name></name> = <name>radius</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the label offset.
     * 
     * @return The label offset (in Java2D units).
     * 
     * @see #setLabelOffset(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLabelOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the label offset (from the arrow base, continuing in a straight 
     * line, in Java2D units).
     * 
     * @param offset  the offset (in Java2D units).
     * 
     * @see #getLabelOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the arrow length.
     * 
     * @return The arrow length.
     * 
     * @see #setArrowLength(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getArrowLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>arrowLength</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the arrow length.
     * 
     * @param length  the length.
     * 
     * @see #getArrowLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArrowLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>arrowLength</name></name> = <name>length</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the arrow width.
     * 
     * @return The arrow width (in Java2D units).
     * 
     * @see #setArrowWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getArrowWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>arrowWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the arrow width.
     * 
     * @param width  the width (in Java2D units).
     * 
     * @see #getArrowWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArrowWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>arrowWidth</name></name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Returns the stroke used to draw the arrow line.
     * 
     * @return The arrow stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setArrowStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getArrowStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>arrowStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** 
     * Sets the stroke used to draw the arrow line.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getArrowStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArrowStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>arrowStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used for the arrow.
     * 
     * @return The arrow paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setArrowPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getArrowPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>arrowPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used for the arrow.
     * 
     * @param paint  the arrow paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getArrowPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArrowPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>arrowPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the annotation.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
            <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>catIndex</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><call><name>getCategory</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>catCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>j2DX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>catIndex</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>j2DY</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>j2DX</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>j2DX</name> = <name>j2DY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j2DY</name> = <name>temp</name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>startX</name> =<init> <expr><name>j2DX</name> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>baseRadius</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>startY</name> =<init> <expr><name>j2DY</name> + <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>baseRadius</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>endX</name> =<init> <expr><name>j2DX</name> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>tipRadius</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>endY</name> =<init> <expr><name>j2DY</name> + <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>tipRadius</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>arrowBaseX</name> =<init> <expr><name>endX</name> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowLength</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>arrowBaseY</name> =<init> <expr><name>endY</name> + <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowLength</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>arrowLeftX</name> =<init> <expr><name>arrowBaseX</name> 
            + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowWidth</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>arrowLeftY</name> =<init> <expr><name>arrowBaseY</name> 
            + <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowWidth</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>arrowRightX</name> =<init> <expr><name>arrowBaseX</name> 
            - <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowWidth</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>arrowRightY</name> =<init> <expr><name>arrowBaseY</name> 
            - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name> + <name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>)</argument_list></call> * <name><name>this</name>.<name>arrowWidth</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>arrow</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>arrow</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>endX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>endY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arrow</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>arrowLeftX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>arrowLeftY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arrow</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>arrowRightX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>arrowRightY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arrow</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>, <argument><expr><name>startY</name></expr></argument>, <argument><expr><name>endX</name></expr></argument>, <argument><expr><name>endY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the label</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelX</name> =<init> <expr><name>j2DX</name> 
            + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * (<name><name>this</name>.<name>baseRadius</name></name> + <name><name>this</name>.<name>labelOffset</name></name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelY</name> =<init> <expr><name>j2DY</name> 
            + <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call> * (<name><name>this</name>.<name>baseRadius</name></name> + <name><name>this</name>.<name>labelOffset</name></name>)</expr></init></decl>;</decl_stmt>
        <comment type="block">/* Rectangle2D hotspot = */</comment> <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>labelY</name></expr></argument>, <argument><expr><call><name>getTextAnchor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO: implement the entity for the annotation</comment>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this annotation for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryPointerAnnotation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CategoryPointerAnnotation</name></type> <name>that</name> =<init> <expr>(<name>CategoryPointerAnnotation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>angle</name></name> != <name><name>that</name>.<name>angle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tipRadius</name></name> != <name><name>that</name>.<name>tipRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseRadius</name></name> != <name><name>that</name>.<name>baseRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>arrowLength</name></name> != <name><name>that</name>.<name>arrowLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>arrowWidth</name></name> != <name><name>that</name>.<name>arrowWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>arrowPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>arrowPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>arrowStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelOffset</name></name> != <name><name>that</name>.<name>labelOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tipRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>arrowStroke</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the annotation.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the annotation can't be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>arrowStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>arrowStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
