<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\DefaultPolarItemRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------------
 * DefaultPolarItemRenderer.java
 * -----------------------------
 * (C) Copyright 2004, 2006, 2007, by Solution Engineering, Inc. and 
 *     Contributors.
 *
 * Original Author:  Daniel Bridenbecker, Solution Engineering, Inc.;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 19-Jan-2004 : Version 1, contributed by DB with minor changes by DG (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 04-Oct-2004 : Renamed BooleanUtils --&gt; BooleanUtilities (DG);
 * 20-Apr-2005 : Update for change to LegendItem class (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 04-Aug-2006 : Implemented equals() and clone() (DG);
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 14-Mar-2007 : Fixed clone() method (DG);
 * 04-May-2007 : Fixed lookup for series paint and stroke (DG);
 * 18-May-2007 : Set dataset for LegendItem (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Point</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>NumberTick</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>DrawingSupplier</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PolarPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that can be used with the {@link PolarPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultPolarItemRenderer</name> <super><extends>extends <name>AbstractRenderer</name></extends>  
                                      <implements>implements <name>PolarItemRenderer</name></implements></super> <block>{
       
    <comment type="javadoc">/** The plot that the renderer is assigned to. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PolarPlot</name></type> <name>plot</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Flags that control whether the renderer fills each series or not. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BooleanList</name></type> <name>seriesFilled</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/**
     * Creates a new instance of DefaultPolarItemRenderer
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultPolarItemRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesFilled</name></name> = new <call><name>BooleanList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
   
    <comment type="javadoc">/**
     * Set the plot associated with this renderer.
     * 
     * @param plot  the plot.
     * 
     * @see #getPlot()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlot</name><parameter_list>(<param><decl><type><name>PolarPlot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>plot</name></name> = <name>plot</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return the plot associated with this renderer.
     * 
     * @return The plot.
     * 
     * @see #setPlot(PolarPlot)
     */</comment>
    <function><type><specifier>public</specifier> <name>PolarPlot</name></type> <name>getPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** 
     * Returns the drawing supplier from the plot.
     *
     * @return The drawing supplier.
     */</comment>
    <function><type><specifier>public</specifier> <name>DrawingSupplier</name></type> <name>getDrawingSupplier</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PolarPlot</name></type> <name>p</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>getDrawingSupplier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer should fill the specified 
     * series, and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param series  the series index (zero-based).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isSeriesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>b</name> =<init> <expr><call><name><name>this</name>.<name>seriesFilled</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>b</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not a series is filled.
     * 
     * @param series  the series index.
     * @param filled  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesFilled</name>.<name>setBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Plots the data for a given series.
     * 
     * @param g2  the drawing surface.
     * @param dataArea  the data area.
     * @param info  collects plot rendering info.
     * @param plot  the plot.
     * @param dataset  the dataset.
     * @param seriesIndex  the series index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawSeries</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                           <param><decl><type><name>PolarPlot</name></type> <name>plot</name></decl></param>,
                           <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                           <param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Polygon</name></type> <name>poly</name> =<init> <expr>new <call><name>Polygon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>numPoints</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>numPoints</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>theta</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>radius</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point</name></type> <name>p</name> =<init> <expr><call><name><name>plot</name>.<name>translateValueThetaRadiusToJava2D</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>poly</name>.<name>addPoint</name></name><argument_list>(<argument><expr><name><name>p</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>p</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>lookupSeriesStroke</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isSeriesFilled</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Composite</name></type> <name>savedComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(
                    <argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>savedComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>poly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draw the angular gridlines - the spokes.
     * 
     * @param g2  the drawing surface.
     * @param plot  the plot.
     * @param ticks  the ticks.
     * @param dataArea  the data area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawAngularGridLines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                     <param><decl><type><name>PolarPlot</name></type> <name>plot</name></decl></param>, 
                                     <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>,
                                     <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getAngleLabelFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getAngleGridlineStroke</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getAngleGridlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>plot</name>.<name>getAxis</name></name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxRadius</name> =<init> <expr><call><name><name>plot</name>.<name>getMaxRadius</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Point</name></type> <name>center</name> =<init> <expr><call><name><name>plot</name>.<name>translateValueThetaRadiusToJava2D</name></name><argument_list>(<argument><expr><name>axisMin</name></expr></argument>, <argument><expr><name>axisMin</name></expr></argument>,
                <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>NumberTick</name></type> <name>tick</name> =<init> <expr>(<name>NumberTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point</name></type> <name>p</name> =<init> <expr><call><name><name>plot</name>.<name>translateValueThetaRadiusToJava2D</name></name><argument_list>(
                    <argument><expr><call><name><name>tick</name>.<name>getNumber</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>maxRadius</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getAngleGridlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawLine</name></name><argument_list>(<argument><expr><name><name>center</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>center</name>.<name>y</name></name></expr></argument>, <argument><expr><name><name>p</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>p</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>plot</name>.<name>isAngleLabelsVisible</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><name><name>p</name>.<name>x</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><name><name>p</name>.<name>y</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getAngleLabelPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                        <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
     }</block></function>

    <comment type="javadoc">/**
     * Draw the radial gridlines - the rings.
     * 
     * @param g2  the drawing surface.
     * @param plot  the plot.
     * @param radialAxis  the radial axis.
     * @param ticks  the ticks.
     * @param dataArea  the data area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawRadialGridLines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                    <param><decl><type><name>PolarPlot</name></type> <name>plot</name></decl></param>,
                                    <param><decl><type><name>ValueAxis</name></type> <name>radialAxis</name></decl></param>,
                                    <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>,
                                    <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name><name>radialAxis</name>.<name>getTickLabelFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getRadiusGridlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getRadiusGridlineStroke</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>radialAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point</name></type> <name>center</name> =<init> <expr><call><name><name>plot</name>.<name>translateValueThetaRadiusToJava2D</name></name><argument_list>(<argument><expr><name>axisMin</name></expr></argument>, <argument><expr><name>axisMin</name></expr></argument>,
                <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>NumberTick</name></type> <name>tick</name> =<init> <expr>(<name>NumberTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point</name></type> <name>p</name> =<init> <expr><call><name><name>plot</name>.<name>translateValueThetaRadiusToJava2D</name></name><argument_list>(<argument><expr>90.0</expr></argument>, 
                    <argument><expr><call><name><name>tick</name>.<name>getNumber</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><name><name>p</name>.<name>x</name></name> - <name><name>center</name>.<name>x</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>upperLeftX</name> =<init> <expr><name><name>center</name>.<name>x</name></name> - <name>r</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>upperLeftY</name> =<init> <expr><name><name>center</name>.<name>y</name></name> - <name>r</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> =<init> <expr>2 * <name>r</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>ring</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>upperLeftX</name></expr></argument>, <argument><expr><name>upperLeftY</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getRadiusGridlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Return the legend for the given series.
     * 
     * @param series  the series index.
     * 
     * @return The legend item.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PolarPlot</name></type> <name>polarPlot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>polarPlot</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>polarPlot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>lookupSeriesShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                        <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if this renderer is equal to &lt;code&gt;obj&lt;/code&gt;,
     *     and &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultPolarItemRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultPolarItemRenderer</name></type> <name>that</name> =<init> <expr>(<name>DefaultPolarItemRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesFilled</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesFilled</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultPolarItemRenderer</name></type> <name>clone</name> 
                =<init> <expr>(<name>DefaultPolarItemRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesFilled</name></name> = (<name>BooleanList</name>) <call><name><name>this</name>.<name>seriesFilled</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
