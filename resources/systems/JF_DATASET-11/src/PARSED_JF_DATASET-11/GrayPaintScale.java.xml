<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\GrayPaintScale.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * GrayPaintScale.java
 * -------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Jul-2006 : Version 1 (DG);
 * 31-Jan-2007 : Renamed min and max to lowerBound and upperBound (DG);
 * 26-Sep-2007 : Fixed bug 1767315, problem in getPaint() method (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A paint scale that returns shades of gray.
 * 
 * @since 1.0.4
 */</comment>
<class><specifier>public</specifier> class <name>GrayPaintScale</name> 
        <super><implements>implements <name>PaintScale</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** The lower bound. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The upper bound. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;GrayPaintScale&lt;/code&gt; instance with default values.
     */</comment>
    <constructor><specifier>public</specifier> <name>GrayPaintScale</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new paint scale for values in the specified range.
     * 
     * @param lowerBound  the lower bound.
     * @param upperBound  the upper bound.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;lowerBound&lt;/code&gt; is not
     *       less than &lt;code&gt;upperBound&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>GrayPaintScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerBound</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperBound</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lowerBound</name> &gt;= <name>upperBound</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Requires lowerBound &lt; upperBound."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lowerBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upperBound</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the lower bound.
     * 
     * @return The lower bound.
     * 
     * @see #getUpperBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper bound.
     * 
     * @return The upper bound.
     * 
     * @see #getLowerBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a paint for the specified value.
     * 
     * @param value  the value (must be within the range specified by the
     *         lower and upper bounds for the scale).
     * 
     * @return A paint for the specified value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>this</name>.<name>lowerBound</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>v</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>this</name>.<name>upperBound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>v</name> - <name><name>this</name>.<name>lowerBound</name></name>) / (<name><name>this</name>.<name>upperBound</name></name> 
                - <name><name>this</name>.<name>lowerBound</name></name>) * 255.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Color</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;GrayPaintScale&lt;/code&gt; instance for equality with an
     * arbitrary object.  This method returns &lt;code&gt;true&lt;/code&gt; if and only
     * if:
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;GrayPaintScale&lt;/code&gt;;&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>GrayPaintScale</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>GrayPaintScale</name></type> <name>that</name> =<init> <expr>(<name>GrayPaintScale</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> != <name><name>that</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> != <name><name>that</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this &lt;code&gt;GrayPaintScale&lt;/code&gt; instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning this
     *     instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
