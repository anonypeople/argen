<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\LookupPaintScale.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * LookupPaintScale.java
 * ---------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Jul-2006 : Version 1 (DG);
 * 31-Jan-2007 : Fixed serialization support (DG);
 * 09-Mar-2007 : Fixed cloning (DG);
 * 14-Jun-2007 : Use double primitive in PaintItem (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A paint scale that uses a lookup table to associate paint instances
 * with data value ranges.
 * 
 * @since 1.0.4
 */</comment>
<class><specifier>public</specifier> class <name>LookupPaintScale</name> 
        <super><implements>implements <name>PaintScale</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Stores the paint for a value.
     */</comment>
    <class>class <name>PaintItem</name> <super><implements>implements <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{
        
        <comment type="javadoc">/** For serialization. */</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>698920578512361570L</expr></init></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The value. */</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The paint. */</comment>
        <decl_stmt><decl><type><name>transient</name> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new instance.
         * 
         * @param value  the value.
         * @param paint  the paint.
         */</comment>
        <constructor><specifier>public</specifier> <name>PaintItem</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="block">/* (non-Javadoc)
         * @see java.lang.Comparable#compareTo(java.lang.Object)
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>PaintItem</name></type> <name>that</name> =<init> <expr>(<name>PaintItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>d1</name> =<init> <expr><name><name>this</name>.<name>value</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>d2</name> =<init> <expr><name><name>that</name>.<name>value</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>d1</name> &gt; <name>d2</name></expr>)</condition><then> <block>{
                <return>return <expr>1</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>d1</name> &lt; <name>d2</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <return>return <expr>0</expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Tests this item for equality with an arbitrary object.
         * 
         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
         * 
         * @return A boolean.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PaintItem</name>)</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>PaintItem</name></type> <name>that</name> =<init> <expr>(<name>PaintItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>value</name></name> != <name><name>that</name>.<name>value</name></name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Provides serialization support.
         *
         * @param stream  the output stream.
         *
         * @throws IOException  if there is an I/O error.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="javadoc">/**
         * Provides serialization support.
         *
         * @param stream  the input stream.
         *
         * @throws IOException  if there is an I/O error.
         * @throws ClassNotFoundException  if there is a classpath problem.
         */</comment>
        <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
                <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
            <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        
    }</block></class>
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5239384246251042006L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The lower bound. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The upper bound. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>defaultPaint</name></decl>;</decl_stmt> 
    
    <comment type="javadoc">/** The lookup table. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>lookupTable</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new paint scale.
     */</comment>
    <constructor><specifier>public</specifier> <name>LookupPaintScale</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>, <argument><expr><name><name>Color</name>.<name>lightGray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new paint scale with the specified default paint.
     * 
     * @param lowerBound  the lower bound.
     * @param upperBound  the upper bound.
     * @param defaultPaint  the default paint (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LookupPaintScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerBound</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperBound</name></decl></param>, 
            <param><decl><type><name>Paint</name></type> <name>defaultPaint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lowerBound</name> &gt;= <name>upperBound</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Requires lowerBound &lt; upperBound."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>defaultPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lowerBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upperBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>defaultPaint</name></name> = <name>defaultPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lookupTable</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the default paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @return The default paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDefaultPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>defaultPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the lower bound.
     * 
     * @return The lower bound.
     * 
     * @see #getUpperBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper bound.
     * 
     * @return The upper bound.
     * 
     * @see #getLowerBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an entry to the lookup table.  Any values from &lt;code&gt;n&lt;/code&gt; up
     * to but not including the next value in the table take on the specified
     * &lt;code&gt;paint&lt;/code&gt;.
     * 
     * @param value  the data value (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint  the paint.
     * 
     * @deprecated Use {@link #add(double, Paint)}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds an entry to the lookup table.  Any values from &lt;code&gt;n&lt;/code&gt; up
     * to but not including the next value in the table take on the specified
     * &lt;code&gt;paint&lt;/code&gt;.
     * 
     * @param value  the data value.
     * @param paint  the paint.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PaintItem</name></type> <name>item</name> =<init> <expr>new <call><name>PaintItem</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lookupTable</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>lookupTable</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>lookupTable</name>.<name>add</name></name><argument_list>(<argument><expr>-(<name>index</name> + 1)</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint associated with the specified value.
     * 
     * @param value  the value.
     * 
     * @return The paint.
     * 
     * @see #getDefaultPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// handle value outside bounds...</comment>
        <if>if <condition>(<expr><name>value</name> &lt; <name><name>this</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>defaultPaint</name></name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> &gt; <name><name>this</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>defaultPaint</name></name></expr>;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>this</name>.<name>lookupTable</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>defaultPaint</name></name></expr>;</return>
        }</block></then></if>

        <comment type="line">// handle special case where value is less that item zero</comment>
        <decl_stmt><decl><type><name>PaintItem</name></type> <name>item</name> =<init> <expr>(<name>PaintItem</name>) <call><name><name>this</name>.<name>lookupTable</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> &lt; <name><name>item</name>.<name>value</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>defaultPaint</name></name></expr>;</return>
        }</block></then></if>

        <comment type="line">// for value in bounds, do the lookup...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>low</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>high</name> =<init> <expr><call><name><name>this</name>.<name>lookupTable</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>high</name> - <name>low</name> &gt; 1</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>current</name> =<init> <expr>(<name>low</name> + <name>high</name>) / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>item</name> = (<name>PaintItem</name>) <call><name><name>this</name>.<name>lookupTable</name>.<name>get</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &gt;= <name><name>item</name>.<name>value</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>low</name> = <name>current</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>high</name> = <name>current</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <if>if <condition>(<expr><name>high</name> &gt; <name>low</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>item</name> = (<name>PaintItem</name>) <call><name><name>this</name>.<name>lookupTable</name>.<name>get</name></name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &lt; <name><name>item</name>.<name>value</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>item</name> = (<name>PaintItem</name>) <call><name><name>this</name>.<name>lookupTable</name>.<name>get</name></name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>(<name>item</name> != <name>null</name> ? <name><name>item</name>.<name>paint</name></name> : <name><name>this</name>.<name>defaultPaint</name></name>)</expr>;</return>
    }</block></function>
    
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>LookupPaintScale</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LookupPaintScale</name></type> <name>that</name> =<init> <expr>(<name>LookupPaintScale</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> != <name><name>that</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> != <name><name>that</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>defaultPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>lookupTable</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>lookupTable</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning the
     *     instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>LookupPaintScale</name></type> <name>clone</name> =<init> <expr>(<name>LookupPaintScale</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>lookupTable</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lookupTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>defaultPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
