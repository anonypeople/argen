<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\Outlier.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------
 * Outlier.java
 * ------------
 * (C) Copyright 2003-2007, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 05-Aug-2003 : Version 1, contributed by David Browning (DG);
 * 28-Aug-2003 : Minor tidy-up (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 21-Nov-2007 : Implemented equals() to shut up FindBugs (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>

<comment type="javadoc">/**
 * Represents one outlier in the box and whisker plot.
 * &lt;P&gt;
 * All the coordinates in this class are in Java2D space.
 */</comment>
<class><specifier>public</specifier> class <name>Outlier</name> <super><implements>implements <name>Comparable</name></implements></super> <block>{

    <comment type="javadoc">/** 
     * The xy coordinates of the bounding box containing the outlier ellipse. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point2D</name></type> <name>point</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The radius of the ellipse */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>radius</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs an outlier item consisting of a point and the radius of the 
     * outlier ellipse
     *
     * @param xCoord  the x coordinate of the point.
     * @param yCoord  the y coordinate of the point.
     * @param radius  the radius of the ellipse.
     */</comment>
    <constructor><specifier>public</specifier> <name>Outlier</name><parameter_list>(<param><decl><type><name>double</name></type> <name>xCoord</name></decl></param>, <param><decl><type><name>double</name></type> <name>yCoord</name></decl></param>, <param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>point</name></name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xCoord</name> - <name>radius</name></expr></argument>, <argument><expr><name>yCoord</name> - <name>radius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>radius</name></name> = <name>radius</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the xy coordinates of the bounding box containing the outlier 
     * ellipse.
     *
     * @return The location of the outlier ellipse.
     */</comment>
    <function><type><specifier>public</specifier> <name>Point2D</name></type> <name>getPoint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>point</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the xy coordinates of the bounding box containing the outlier 
     * ellipse.
     *
     * @param point  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPoint</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>point</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>point</name></name> = <name>point</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x coordinate of the bounding box containing the outlier 
     * ellipse.
     *
     * @return The x coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getPoint</name><argument_list>()</argument_list></call>.<call><name>getX</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y coordinate of the bounding box containing the outlier 
     * ellipse.
     *
     * @return The y coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getPoint</name><argument_list>()</argument_list></call>.<call><name>getY</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the radius of the outlier ellipse.
     *
     * @return The radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>radius</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the radius of the outlier ellipse.
     *
     * @param radius  the new radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>radius</name></name> = <name>radius</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Compares this object with the specified object for order, based on
     * the outlier's point.
     *
     * @param   o the Object to be compared.
     * @return A negative integer, zero, or a positive integer as this object
     *      is less than, equal to, or greater than the specified object.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Outlier</name></type> <name>outlier</name> =<init> <expr>(<name>Outlier</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p1</name> =<init> <expr><call><name>getPoint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p2</name> =<init> <expr><call><name><name>outlier</name>.<name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>p1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then> 
        <else>else <if>if <condition>(<expr>(<call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call>) || (<call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then> 
        <else>else <block>{
            <return>return <expr>1</expr>;</return>
        }</block></else></if></else></if> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns a true if outlier is overlapped and false if it is not.
     * Overlapping is determined by the respective bounding boxes plus
     * a small margin.
     *
     * @param other  the other outlier.
     * 
     * @return A &lt;code&gt;boolean&lt;/code&gt; indicating whether or not an overlap has 
     *         occurred.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>overlaps</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<call><name><name>other</name>.<name>getX</name></name><argument_list>()</argument_list></call> &gt;= <call><name>getX</name><argument_list>()</argument_list></call> - (<name><name>this</name>.<name>radius</name></name> * 1.1)) 
                &amp;&amp; (<call><name><name>other</name>.<name>getX</name></name><argument_list>()</argument_list></call> &lt;= <call><name>getX</name><argument_list>()</argument_list></call> + (<name><name>this</name>.<name>radius</name></name> * 1.1)) 
                &amp;&amp; (<call><name><name>other</name>.<name>getY</name></name><argument_list>()</argument_list></call> &gt;= <call><name>getY</name><argument_list>()</argument_list></call> - (<name><name>this</name>.<name>radius</name></name> * 1.1)) 
                &amp;&amp; (<call><name><name>other</name>.<name>getY</name></name><argument_list>()</argument_list></call> &lt;= <call><name>getY</name><argument_list>()</argument_list></call> + (<name><name>this</name>.<name>radius</name></name> * 1.1)))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this outlier for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Outlier</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Outlier</name></type> <name>that</name> =<init> <expr>(<name>Outlier</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>point</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>point</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>radius</name></name> != <name><name>that</name>.<name>radius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a textual representation of the outlier.
     *
     * @return A &lt;code&gt;String&lt;/code&gt; representing the outlier.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"{" + <call><name>getX</name><argument_list>()</argument_list></call> + "," + <call><name>getY</name><argument_list>()</argument_list></call> + "}"</expr>;</return>
    }</block></function>

}</block></class>
</unit>
