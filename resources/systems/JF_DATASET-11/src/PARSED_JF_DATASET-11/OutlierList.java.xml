<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\OutlierList.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * OutlierList.java
 * ----------------
 * (C) Copyright 2003, 2004, 2007, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 05-Aug-2003 : Version 1, contributed by David Browning (DG);
 * 28-Aug-2003 : Minor tidy-up including Javadocs (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 *
 */</comment>
<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * A collection of outliers for a single entity in a box and whisker plot.
 *
 * Outliers are grouped in lists for each entity. Lists contain
 * one or more outliers, determined by whether overlaps have
 * occured. Overlapping outliers are grouped in the same list.
 *
 * Each list contains an averaged outlier, which is the same as a single
 * outlier if there is only one outlier in the list, but the average of
 * all the outliers in the list if there is more than one.
 *
 * NB This is simply my scheme for displaying outliers, and might not be
 * acceptable by the wider community.
 */</comment>
<class><specifier>public</specifier> class <name>OutlierList</name> <block>{

    <comment type="javadoc">/** Storage for the outliers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>outliers</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The averaged outlier. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Outlier</name></type> <name>averagedOutlier</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that indicates whether or not there are multiple outliers in the 
     * list. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>multiple</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new list containing a single outlier.
     * 
     * @param outlier  the outlier.
     */</comment>
    <constructor><specifier>public</specifier> <name>OutlierList</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>outlier</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outliers</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAveragedOutlier</name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds an outlier to the list.
     * 
     * @param outlier  the outlier.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>outlier</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>outliers</name>.<name>add</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of outliers in the list.
     * 
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>outliers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the averaged outlier. 
     * 
     * @return The averaged outlier.
     */</comment>
    <function><type><specifier>public</specifier> <name>Outlier</name></type> <name>getAveragedOutlier</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>averagedOutlier</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the averaged outlier.
     * 
     * @param averagedOutlier  the averaged outlier.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAveragedOutlier</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>averagedOutlier</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>averagedOutlier</name></name> = <name>averagedOutlier</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the list contains multiple outliers, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMultiple</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>multiple</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates whether or not this list represents 
     * multiple outliers.
     * 
     * @param multiple  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMultiple</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>multiple</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>multiple</name></name> = <name>multiple</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the outlier overlaps, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param other  the outlier.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOverlapped</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>other</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>other</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr><call><name><name>other</name>.<name>overlaps</name></name><argument_list>(<argument><expr><call><name>getAveragedOutlier</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Updates the averaged outlier.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateAveragedOutlier</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>totalXCoords</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>totalYCoords</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>outliers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
             <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Outlier</name></type> <name>o</name> =<init> <expr>(<name>Outlier</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>totalXCoords</name> += <call><name><name>o</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>totalYCoords</name> += <call><name><name>o</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>getAveragedOutlier</name><argument_list>()</argument_list></call>.<call><name>getPoint</name><argument_list>()</argument_list></call>.<call><name>setLocation</name><argument_list>(
            <argument><expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>totalXCoords</name> / <name>size</name></expr></argument>, <argument><expr><name>totalYCoords</name> / <name>size</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
