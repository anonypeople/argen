<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\OutlierListCollection.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------
 * OutlierListCollection.java
 * --------------------------
 * (C) Copyright 2003, 2004, 2007, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Aug-2003 : Version 1, contributed by David Browning (DG);
 * 01-Sep-2003 : Made storage internal rather than extending ArrayList (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * A collection of outlier lists for a box and whisker plot. Each collection is
 * associated with a single box and whisker entity.
 *
 * Outliers are grouped in lists for each entity. Lists contain
 * one or more outliers, determined by whether overlaps have
 * occurred. Overlapping outliers are grouped in the same list.
 *
 * @see org.jfree.chart.renderer.OutlierList
 */</comment>
<class><specifier>public</specifier> class <name>OutlierListCollection</name> <block>{

    <comment type="javadoc">/** Storage for the outlier lists. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>outlierLists</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Unbelievably, outliers which are more than 2 * interquartile range are
     * called far outs...  See Tukey EDA  (a classic one of a kind...)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>highFarOut</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag that indicates whether or not the collection contains low far 
     * out values.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lowFarOut</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new empty collection.
     */</comment>
    <constructor><specifier>public</specifier> <name>OutlierListCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outlierLists</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * A flag to indicate the presence of one or more far out values at the 
     * top end of the range.
     *
     * @return A &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isHighFarOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>highFarOut</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates the presence of one or more far out values 
     * at the top end of the range.
     *
     * @param farOut  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHighFarOut</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>farOut</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>highFarOut</name></name> = <name>farOut</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A flag to indicate the presence of one or more far out values at the 
     * bottom end of the range.
     *
     * @return A &lt;code&gt;boolean&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLowFarOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowFarOut</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates the presence of one or more far out values 
     * at the bottom end of the range.
     *
     * @param farOut  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowFarOut</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>farOut</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lowFarOut</name></name> = <name>farOut</name></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Appends the specified element as a new &lt;code&gt;OutlierList&lt;/code&gt; to the
     * end of this list if it does not overlap an outlier in an existing list.
     *
     * If it does overlap, it is appended to the outlier list which it overlaps
     * and that list is updated.
     *
     * @param outlier  element to be appended to this list.
     * 
     * @return &lt;tt&gt;true&lt;/tt&gt; (as per the general contract of Collection.add).
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Outlier</name></type> <name>outlier</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name><name>this</name>.<name>outlierLists</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>outlierLists</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>OutlierList</name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> 
        <else>else <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>updated</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>outlierLists</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
                 <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>OutlierList</name></type> <name>list</name> =<init> <expr>(<name>OutlierList</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>list</name>.<name>isOverlapped</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>updated</name> = <call><name>updateOutlierList</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr>!<name>updated</name></expr>)</condition><then> <block>{
                <comment type="line">//System.err.print(" creating new outlier list ");</comment>
                <expr_stmt><expr><name>updated</name> = <call><name><name>this</name>.<name>outlierLists</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>OutlierList</name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>updated</name></expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns an iterator for the outlier lists.
     * 
     * @return An iterator.
     */</comment>
    <function><type><specifier>public</specifier> <name>Iterator</name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>outlierLists</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>    
    }</block></function>
    
    
    <comment type="javadoc">/** 
     * Updates the outlier list by adding the outlier to the end of the list and
     * setting the averaged outlier to the average x and y coordinnate values 
     * of the outliers in the list.
     *
     * @param list  the outlier list to be updated.
     * @param outlier  the outlier to be added
     *
     * @return &lt;tt&gt;true&lt;/tt&gt; (as per the general contract of Collection.add).
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>updateOutlierList</name><parameter_list>(<param><decl><type><name>OutlierList</name></type> <name>list</name></decl></param>, <param><decl><type><name>Outlier</name></type> <name>outlier</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>list</name>.<name>add</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name>.<name>updateAveragedOutlier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name>.<name>setMultiple</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
