<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\RendererUtilities.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * RendererUtilities.java
 * ----------------------
 * (C) Copyright 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 19-Apr-2007 : Version 1 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainOrder</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>

<comment type="javadoc">/**
 * Utility methods related to the rendering process.
 * 
 * @since 1.0.6
 */</comment>
<class><specifier>public</specifier> class <name>RendererUtilities</name> <block>{
    
    <comment type="javadoc">/**
     * Finds the lower index of the range of live items in the specified data
     * series.  
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index.
     * @param xLow  the lowest x-value in the live range.
     * @param xHigh  the highest x-value in the live range.
     * 
     * @return The index of the required item.
     * 
     * @since 1.0.6
     * 
     * @see #findLiveItemsUpperBound(XYDataset, int, double, double)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLiveItemsLowerBound</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>xLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>xHigh</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>itemCount</name> &lt;= 1</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>dataset</name>.<name>getDomainOrder</name></name><argument_list>()</argument_list></call> == <name><name>DomainOrder</name>.<name>ASCENDING</name></name></expr>)</condition><then> <block>{
            <comment type="line">// for data in ascending order by x-value, we are (broadly) looking</comment>
            <comment type="line">// for the index of the highest x-value that is less that xLow</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>low</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>high</name> =<init> <expr><name>itemCount</name> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> =<init> <expr>(<name>low</name> + <name>high</name>) / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lowValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lowValue</name> &gt;= <name>xLow</name></expr>)</condition><then> <block>{
                <comment type="line">// special case where the lowest x-value is &gt;= xLow</comment>
                <return>return <expr><name>low</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>highValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>highValue</name> &lt; <name>xLow</name></expr>)</condition><then> <block>{
                <comment type="line">// special case where the highest x-value is &lt; xLow</comment>
                <return>return <expr><name>high</name></expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><name>high</name> - <name>low</name> &gt; 1</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>midV</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>midV</name> &gt;= <name>xLow</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>high</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>low</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>mid</name> = (<name>low</name> + <name>high</name>) / 2</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>mid</name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>dataset</name>.<name>getDomainOrder</name></name><argument_list>()</argument_list></call> == <name><name>DomainOrder</name>.<name>DESCENDING</name></name></expr>)</condition><then> <block>{
            <comment type="line">// when the x-values are sorted in descending order, the lower</comment>
            <comment type="line">// bound is found by calculating relative to the xHigh value</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>low</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>high</name> =<init> <expr><name>itemCount</name> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> =<init> <expr>(<name>low</name> + <name>high</name>) / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lowValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lowValue</name> &lt;= <name>xHigh</name></expr>)</condition><then> <block>{
                <return>return <expr><name>low</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>highValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>highValue</name> &gt; <name>xHigh</name></expr>)</condition><then> <block>{
                <return>return <expr><name>high</name></expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><name>high</name> - <name>low</name> &gt; 1</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>midV</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>midV</name> &gt; <name>xHigh</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>low</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>high</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>mid</name> = (<name>low</name> + <name>high</name>) / 2</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>mid</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <comment type="line">// we don't know anything about the ordering of the x-values,</comment>
            <comment type="line">// but we can still skip any initial values that fall outside the</comment>
            <comment type="line">// range...</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <comment type="line">// skip any items that don't need including...</comment>
            <while>while <condition>(<expr><name>index</name> &lt; <name>itemCount</name> &amp;&amp; <call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> 
                    &lt; <name>xLow</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Finds the index of the item in the specified series that...
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index.
     * @param xLow  the lowest x-value in the live range.
     * @param xHigh  the highest x-value in the live range.
     *
     * @return The index of the required item.
     * 
     * @since 1.0.6
     * 
     * @see #findLiveItemsLowerBound(XYDataset, int, double, double)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>findLiveItemsUpperBound</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>xLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>xHigh</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>itemCount</name> &lt;= 1</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>dataset</name>.<name>getDomainOrder</name></name><argument_list>()</argument_list></call> == <name><name>DomainOrder</name>.<name>ASCENDING</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>low</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>high</name> =<init> <expr><name>itemCount</name> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> =<init> <expr>(<name>low</name> + <name>high</name> + 1) / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lowValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lowValue</name> &gt; <name>xHigh</name></expr>)</condition><then> <block>{
                <return>return <expr><name>low</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>highValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>highValue</name> &lt;= <name>xHigh</name></expr>)</condition><then> <block>{
                <return>return <expr><name>high</name></expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><name>high</name> - <name>low</name> &gt; 1</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>midV</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>midV</name> &lt;= <name>xHigh</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>low</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>high</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>mid</name> = (<name>low</name> + <name>high</name> + 1) / 2</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>mid</name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>dataset</name>.<name>getDomainOrder</name></name><argument_list>()</argument_list></call> == <name><name>DomainOrder</name>.<name>DESCENDING</name></name></expr>)</condition><then> <block>{
            <comment type="line">// when the x-values are descending, the upper bound is found by</comment>
            <comment type="line">// comparing against xLow</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>low</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>high</name> =<init> <expr><name>itemCount</name> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> =<init> <expr>(<name>low</name> + <name>high</name>) / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lowValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>low</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lowValue</name> &lt; <name>xLow</name></expr>)</condition><then> <block>{
                <return>return <expr><name>low</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>highValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>high</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>highValue</name> &gt;= <name>xLow</name></expr>)</condition><then> <block>{
                <return>return <expr><name>high</name></expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><name>high</name> - <name>low</name> &gt; 1</expr>)</condition> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>midV</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>midV</name> &gt;= <name>xLow</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>low</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>high</name> = <name>mid</name></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>mid</name> = (<name>low</name> + <name>high</name>) / 2</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>mid</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <comment type="line">// we don't know anything about the ordering of the x-values,</comment>
            <comment type="line">// but we can still skip any trailing values that fall outside the</comment>
            <comment type="line">// range...</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>itemCount</name> - 1</expr></init></decl>;</decl_stmt>
            <comment type="line">// skip any items that don't need including...</comment>
            <while>while <condition>(<expr><name>index</name> &gt;= 0 &amp;&amp; <call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> 
                    &gt; <name>xHigh</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>index</name>--</expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>itemCount</name> - 1</expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Finds a range of item indices that is guaranteed to contain all the
     * x-values from x0 to x1 (inclusive).
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index.
     * @param xLow  the lower bound of the x-value range.
     * @param xHigh  the upper bound of the x-value range.
     * 
     * @return The indices of the boundary items.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>findLiveItems</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>xLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>xHigh</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// here we could probably be a little faster by searching for both</comment>
        <comment type="line">// indices simultaneously, but I'll look at that later if it seems</comment>
        <comment type="line">// like it matters...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i0</name> =<init> <expr><call><name>findLiveItemsLowerBound</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>xLow</name></expr></argument>, <argument><expr><name>xHigh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i1</name> =<init> <expr><call><name>findLiveItemsUpperBound</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>xLow</name></expr></argument>, <argument><expr><name>xHigh</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <name><name>int</name><index>[]</index></name> <block>{<expr><name>i0</name></expr>, <expr><name>i1</name></expr>}</block></expr>;</return>
    }</block></function>

}</block></class>
</unit>
