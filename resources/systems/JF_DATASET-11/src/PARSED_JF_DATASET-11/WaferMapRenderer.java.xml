<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-11\src\WaferMapRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * WaferMapRenderer.java
 * ---------------------
 * (C) Copyright 2003-2007, by Robert Redburn and Contributors.
 *
 * Original Author:  Robert Redburn;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 25-Nov-2003 : Version 1, contributed by Robert Redburn.  Changes have been 
 *               made to fit the JFreeChart coding style (DG);
 * 20-Apr-2005 : Small update for changes to LegendItem class (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>DrawingSupplier</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>WaferMapPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>WaferMapDataset</name></name>;</import>

<comment type="javadoc">/**
 * A renderer for wafer map plots.  Provides color managment facilities.
 */</comment>
<class><specifier>public</specifier> class <name>WaferMapRenderer</name> <super><extends>extends <name>AbstractRenderer</name></extends></super> <block>{

    <comment type="javadoc">/** paint index */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>paintIndex</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** plot */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>WaferMapPlot</name></type> <name>plot</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** paint limit */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>paintLimit</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** default paint limit */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_PAINT_LIMIT</name> =<init> <expr>35</expr></init></decl>;</decl_stmt>  
    
    <comment type="javadoc">/** default multivalue paint calculation */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>POSITION_INDEX</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default value index. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VALUE_INDEX</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** paint index method */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>paintIndexMethod</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param paintLimit  the paint limit.
     * @param paintIndexMethod  the paint index method.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>paintLimit</name></decl></param>, <param><decl><type><name>int</name></type> <name>paintIndexMethod</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>paintLimit</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>paintIndexMethod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param paintLimit  the paint limit.
     * @param paintIndexMethod  the paint index method.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapRenderer</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>paintLimit</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>paintIndexMethod</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paintIndex</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>paintLimit</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>paintLimit</name></name> = <name>DEFAULT_PAINT_LIMIT</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>paintLimit</name></name> = <call><name><name>paintLimit</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <expr_stmt><expr><name><name>this</name>.<name>paintIndexMethod</name></name> = <name>VALUE_INDEX</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>paintIndexMethod</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>isMethodValid</name><argument_list>(<argument><expr><call><name><name>paintIndexMethod</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ 
                <expr_stmt><expr><name><name>this</name>.<name>paintIndexMethod</name></name> = <call><name><name>paintIndexMethod</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Verifies that the passed paint index method is valid.
     * 
     * @param method  the method.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;/code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isMethodValid</name><parameter_list>(<param><decl><type><name>int</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>method</name></expr>)</condition> <block>{
            <case>case <expr><name>POSITION_INDEX</name></expr>: <return>return <expr>true</expr>;</return>
            </case><case>case <expr><name>VALUE_INDEX</name></expr>:    <return>return <expr>true</expr>;</return>
            </case><default>default: <return>return <expr>false</expr>;</return>
        </default>}</block></switch>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the drawing supplier from the plot.
     * 
     * @return The drawing supplier.
     */</comment>
    <function><type><specifier>public</specifier> <name>DrawingSupplier</name></type> <name>getDrawingSupplier</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WaferMapPlot</name></type> <name>p</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>getDrawingSupplier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the plot.
     * 
     * @return The plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>WaferMapPlot</name></type> <name>getPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the plot and build the paint index.
     * 
     * @param plot  the plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlot</name><parameter_list>(<param><decl><type><name>WaferMapPlot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>plot</name></name> = <name>plot</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makePaintIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for a given chip value.
     * 
     * @param value  the value.
     * 
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getChipColor</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSeriesPaint</name><argument_list>(<argument><expr><call><name>getPaintIndex</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint index for a given chip value.
     * 
     * @param value  the value.
     * 
     * @return The paint index.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getPaintIndex</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>Integer</name>) <call><name><name>this</name>.<name>paintIndex</name>.<name>get</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Builds a map of chip values to paint colors.
     * paintlimit is the maximum allowed number of colors.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>makePaintIndex</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>WaferMapDataset</name></type> <name>data</name> =<init> <expr><call><name><name>this</name>.<name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataMin</name> =<init> <expr><call><name><name>data</name>.<name>getMinValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataMax</name> =<init> <expr><call><name><name>data</name>.<name>getMaxValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Set</name></type> <name>uniqueValues</name> =<init> <expr><call><name><name>data</name>.<name>getUniqueValues</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>uniqueValues</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt;= <name><name>this</name>.<name>paintLimit</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> <comment type="line">// assign a color for each unique value</comment>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>uniqueValues</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>paintIndex</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>count</name>++</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block>{  
            <comment type="line">// more values than paints so map</comment>
            <comment type="line">// multiple values to the same color</comment>
            <switch>switch <condition>(<expr><name><name>this</name>.<name>paintIndexMethod</name></name></expr>)</condition> <block>{
                <case>case <expr><name>POSITION_INDEX</name></expr>: 
                    <expr_stmt><expr><call><name>makePositionIndex</name><argument_list>(<argument><expr><name>uniqueValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                    <break>break;</break>
                </case><case>case <expr><name>VALUE_INDEX</name></expr>:    
                    <expr_stmt><expr><call><name>makeValueIndex</name><argument_list>(<argument><expr><name>dataMax</name></expr></argument>, <argument><expr><name>dataMin</name></expr></argument>, <argument><expr><name>uniqueValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                    <break>break;</break>
                </case><default>default:
                    <break>break;</break>
            </default>}</block></switch>
        }</block></else></if>
    }</block></function>
        
    <comment type="javadoc">/**
     * Builds the paintindex by assigning colors based on the number 
     * of unique values: totalvalues/totalcolors.
     * 
     * @param uniqueValues  the set of unique values.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>makePositionIndex</name><parameter_list>(<param><decl><type><name>Set</name></type> <name>uniqueValues</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>valuesPerColor</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(
            <argument><expr>(<name>double</name>) <call><name><name>uniqueValues</name>.<name>size</name></name><argument_list>()</argument_list></call> / <name><name>this</name>.<name>paintLimit</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> <comment type="line">// assign a color for each unique value</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>paint</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>uniqueValues</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>paintIndex</name>.<name>put</name></name><argument_list>(<argument><expr><call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>++<name>count</name> % <name>valuesPerColor</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>paint</name>++</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>paint</name> &gt; <name><name>this</name>.<name>paintLimit</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>paint</name> = <name><name>this</name>.<name>paintLimit</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Builds the paintindex by assigning colors evenly across the range
     * of values:  maxValue-minValue/totalcolors
     * 
     * @param max  the maximum value.
     * @param min  the minumum value.
     * @param uniqueValues  the unique values.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>makeValueIndex</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>max</name></decl></param>, <param><decl><type><name>Number</name></type> <name>min</name></decl></param>, <param><decl><type><name>Set</name></type> <name>uniqueValues</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>valueRange</name> =<init> <expr><call><name><name>max</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> - <call><name><name>min</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>valueStep</name> =<init> <expr><name>valueRange</name> / <name><name>this</name>.<name>paintLimit</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>paint</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>cutPoint</name> =<init> <expr><call><name><name>min</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> + <name>valueStep</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>uniqueValues</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr>(<name>Number</name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &gt; <name>cutPoint</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>cutPoint</name> += <name>valueStep</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>paint</name>++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name>paint</name> &gt; <name><name>this</name>.<name>paintLimit</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>paint</name> = <name><name>this</name>.<name>paintLimit</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while> 
            <expr_stmt><expr><call><name><name>this</name>.<name>paintIndex</name>.<name>put</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Builds the list of legend entries.  called by getLegendItems in
     * WaferMapPlot to populate the plot legend.
     * 
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendCollection</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>paintIndex</name></name> != <name>null</name> &amp;&amp; <call><name><name>this</name>.<name>paintIndex</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>paintIndex</name>.<name>size</name></name><argument_list>()</argument_list></call> &lt;= <name><name>this</name>.<name>paintLimit</name></name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>paintIndex</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
                     <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <comment type="line">// in this case, every color has a unique value</comment>
                    <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init>  <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getSeriesPaint</name><argument_list>(
                        <argument><expr>((<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>).<call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>
                    )</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><name>DEFAULT_STROKE</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                            <argument><expr><name>null</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                }</block></for>               
            }</block></then>
            <else>else <block>{
                <comment type="line">// in this case, every color has a range of values</comment>
                <decl_stmt><decl><type><name>Set</name></type> <name>unique</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>paintIndex</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
                     <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                    <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>unique</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getMinPaintValue</name><argument_list>(
                            <argument><expr>(<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call>
                            + " - " + <call><name>getMaxPaintValue</name><argument_list>(
                                <argument><expr>(<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>, <argument><expr>1d</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getSeriesPaint</name><argument_list>(
                            <argument><expr>((<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>).<call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>
                        )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><name>DEFAULT_STROKE</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, 
                                <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, 
                                <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for> <comment type="line">// end foreach map entry</comment>
            }</block></else></if> <comment type="line">// end else</comment>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum chip value assigned to a color
     * in the paintIndex
     * 
     * @param index  the index.
     * 
     * @return The value.
     */</comment>
    <function><type><specifier>private</specifier> <name>Number</name></type> <name>getMinPaintValue</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>minValue</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>paintIndex</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>((<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>).<call><name>equals</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>((<name>Number</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call> &lt; <name>minValue</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>minValue</name> = ((<name>Number</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>               
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum chip value assigned to a color
     * in the paintIndex
     * 
     * @param index  the index.
     * 
     * @return The value
     */</comment>
    <function><type><specifier>private</specifier> <name>Number</name></type> <name>getMaxPaintValue</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>maxValue</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>paintIndex</name>.<name>entrySet</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>i</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name><name>Map</name>.<name>Entry</name></name></type> <name>entry</name> =<init> <expr>(<name><name>Map</name>.<name>Entry</name></name>) <call><name><name>i</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>((<name>Integer</name>) <call><name><name>entry</name>.<name>getValue</name></name><argument_list>()</argument_list></call>).<call><name>equals</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>((<name>Number</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call> &gt; <name>maxValue</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>maxValue</name> = ((<name>Number</name>) <call><name><name>entry</name>.<name>getKey</name></name><argument_list>()</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>               
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class> <comment type="line">// end class wafermaprenderer</comment>
</unit>
