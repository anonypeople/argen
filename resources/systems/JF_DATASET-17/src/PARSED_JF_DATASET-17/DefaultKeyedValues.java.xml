<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-17\src\DefaultKeyedValues.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * DefaultKeyedValues.java
 * -----------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Thomas Morgner;
 *
 * Changes:
 * --------
 * 31-Oct-2002 : Version 1 (DG);
 * 11-Feb-2003 : Fixed bug in getValue(key) method for unrecognised key (DG);
 * 05-Mar-2003 : Added methods to sort stored data 'by key' or 'by value' (DG);
 * 13-Mar-2003 : Implemented Serializable (DG);
 * 08-Apr-2003 : Modified removeValue(Comparable) method to fix bug 717049 (DG);
 * 18-Aug-2003 : Implemented Cloneable (DG);
 * 27-Aug-2003 : Moved SortOrder from org.jfree.data --&gt; org.jfree.util (DG);
 * 09-Feb-2004 : Modified getIndex() method - see bug report 893256 (DG);
 * 15-Sep-2004 : Updated clone() method and added PublicCloneable 
 *               interface (DG);
 * 25-Nov-2004 : Small update to the clone() implementation (DG);
 * 24-Feb-2005 : Added methods addValue(Comparable, double) and 
 *               setValue(Comparable, double) for convenience (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 31-Jul-2006 : Added a clear() method (DG);
 * 01-Aug-2006 : Added argument check to getIndex() method (DG);
 * 30-Apr-2007 : Added insertValue() methods (DG);
 * 31-Oct-2007 : Performance improvements by using separate lists for keys and 
 *               values (TM);
 * 21-Nov-2007 : Fixed bug in removeValue() method from previous patch (DG);
 *               
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>SortOrder</name></name>;</import>

<comment type="javadoc">/**
 * An ordered list of (key, value) items.  This class provides a default 
 * implementation of the {@link KeyedValues} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultKeyedValues</name> <super><implements>implements <name>KeyedValues</name>, 
                                           <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                           <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8468154364608194797L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the keys. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ArrayList</name></type> <name>keys</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ArrayList</name></type> <name>values</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Contains (key, Integer) mappings, where the Integer is the index for
     * the key in the list. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HashMap</name></type> <name>indexMap</name></decl>;</decl_stmt> 

  <comment type="javadoc">/**
     * Creates a new collection (initially empty).
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultKeyedValues</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>keys</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>values</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>indexMap</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of items (values) in the collection.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>indexMap</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a value.
     *
     * @param item  the item of interest (zero-based index).
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Number</name>) <call><name><name>this</name>.<name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a key.
     *
     * @param index  the item index (zero-based).
     *
     * @return The row key.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>keys</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index for a given key.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The index, or &lt;code&gt;-1&lt;/code&gt; if the key is not recognised.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>i</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>indexMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>  <comment type="line">// key not found</comment>
        }</block></then></if>
        <return>return <expr><call><name><name>i</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the keys for the values in the collection.
     *
     * @return The keys (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>List</name>) <call><name><name>this</name>.<name>keys</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for a given key.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @throws UnknownKeyException if the key is not recognised.
     * 
     * @see #getValue(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Key not found: " + <name>key</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Updates an existing value, or adds a new value to the collection.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * 
     * @see #addValue(Comparable, Number)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a new value to the collection, or updates an existing value.
     * This method passes control directly to the 
     * {@link #setValue(Comparable, Number)} method.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Updates an existing value, or adds a new value to the collection.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Updates an existing value, or adds a new value to the collection.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>keyIndex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>keyIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>set</name></name><argument_list>(<argument><expr><name>keyIndex</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>set</name></name><argument_list>(<argument><expr><name>keyIndex</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>add</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>add</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>indexMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Inserts a new value at the specified position in the dataset or, if
     * there is an existing item with the specified key, updates the value 
     * for that item and moves it to the specified position.
     * 
     * @param position  the position (in the range 0 to getItemCount()).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>insertValue</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inserts a new value at the specified position in the dataset or, if
     * there is an existing item with the specified key, updates the value 
     * for that item and moves it to the specified position.
     * 
     * @param position  the position (in the range 0 to getItemCount()).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> &lt; 0 || <name>position</name> &gt; <call><name>getItemCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"'position' out of bounds."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> == <name>position</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>set</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>set</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>remove</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          
            <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>add</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>add</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>rebuildIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Rebuilds the key to indexed-position mapping after an positioned insert
     * or a remove operation.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>rebuildIndex</name> <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>indexMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>key</name> =<init> <expr><call><name><name>this</name>.<name>keys</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>indexMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a value from the collection.
     *
     * @param index  the index of the item to remove (in the range 
     *     &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;getItemCount() - 1&lt;/code&gt;).
     *     
     * @throws IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is not within
     *     the specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>rebuildIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a value from the collection.
     *
     * @param key  the item key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * @throws UnknownKeyException if &lt;code&gt;key&lt;/code&gt; is not recognised.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"The key (" + <name>key</name> 
                    + ") is not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>removeValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all values from the collection.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>keys</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>values</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>indexMap</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts the items in the list by key.
     *
     * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sortByKeys</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DefaultKeyedValue</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>DefaultKeyedValue</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>DefaultKeyedValue</name><argument_list>(<argument><expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>keys</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>Number</name>) <call><name><name>this</name>.<name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>Comparator</name></type> <name>comparator</name> =<init> <expr>new <call><name>KeyedValueComparator</name><argument_list>(
                <argument><expr><name><name>KeyedValueComparatorType</name>.<name>BY_KEY</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DefaultKeyedValue</name></type> <name>value</name> =<init> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts the items in the list by value.  If the list contains 
     * &lt;code&gt;null&lt;/code&gt; values, they will sort to the end of the list, 
     * irrespective of the sort order.
     *
     * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sortByValues</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>DefaultKeyedValue</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>DefaultKeyedValue</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>DefaultKeyedValue</name><argument_list>(<argument><expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>keys</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>Number</name>) <call><name><name>this</name>.<name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>Comparator</name></type> <name>comparator</name> =<init> <expr>new <call><name>KeyedValueComparator</name><argument_list>(
                <argument><expr><name><name>KeyedValueComparatorType</name>.<name>BY_VALUE</name></name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>sort</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>DefaultKeyedValue</name></type> <name>value</name> =<init> <expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>addValue</name><argument_list>(<argument><expr><call><name><name>value</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>value</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Tests if this object is equal to another.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>KeyedValues</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>KeyedValues</name></type> <name>that</name> =<init> <expr>(<name>KeyedValues</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> != <call><name><name>that</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k1</name> =<init> <expr><call><name>getKey</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k2</name> =<init> <expr><call><name><name>that</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>k1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Number</name></type> <name>v1</name> =<init> <expr><call><name>getValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>v2</name> =<init> <expr><call><name><name>that</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>v1</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>v2</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr>!<call><name><name>v1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name><name>this</name>.<name>keys</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>keys</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  this class will not throw this 
     *         exception, but subclasses might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultKeyedValues</name></type> <name>clone</name> =<init> <expr>(<name>DefaultKeyedValues</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>keys</name></name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>keys</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>values</name></name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>values</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>indexMap</name></name> = (<name>HashMap</name>) <call><name><name>this</name>.<name>indexMap</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
