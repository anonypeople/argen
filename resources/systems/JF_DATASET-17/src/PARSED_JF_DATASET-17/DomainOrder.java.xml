<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-17\src\DomainOrder.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * DomainOrder.java
 * ----------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 29-Jul-2004 : Version 1 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ObjectStreamException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * Used to indicate sorting order if any (ascending, descending or none).
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>DomainOrder</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4902774943512072627L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** No order. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DomainOrder</name></type> <name>NONE</name> =<init> <expr>new <call><name>DomainOrder</name><argument_list>(<argument><expr>"DomainOrder.NONE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Ascending order. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DomainOrder</name></type> <name>ASCENDING</name> 
        =<init> <expr>new <call><name>DomainOrder</name><argument_list>(<argument><expr>"DomainOrder.ASCENDING"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Descending order. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>DomainOrder</name></type> <name>DESCENDING</name> 
        =<init> <expr>new <call><name>DomainOrder</name><argument_list>(<argument><expr>"DomainOrder.DESCENDING"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The name. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Private constructor.
     *
     * @param name  the name.
     */</comment>
    <constructor><specifier>private</specifier> <name>DomainOrder</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a string representing the object.
     *
     * @return The string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>name</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this object is equal to the specified 
     * object, and &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DomainOrder</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DomainOrder</name></type> <name>that</name> =<init> <expr>(<name>DomainOrder</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>that</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code value for the object.
     *
     * @return The hashcode
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>name</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Ensures that serialization returns the unique instances.
     * 
     * @return The object.
     * 
     * @throws ObjectStreamException if there is a problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>readResolve</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ObjectStreamException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DomainOrder</name>.<name>ASCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>DomainOrder</name>.<name>ASCENDING</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DomainOrder</name>.<name>DESCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>DomainOrder</name>.<name>DESCENDING</name></name></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>DomainOrder</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>DomainOrder</name>.<name>NONE</name></name></expr>;</return>
        }</block></then></if></else></if></else></if>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
