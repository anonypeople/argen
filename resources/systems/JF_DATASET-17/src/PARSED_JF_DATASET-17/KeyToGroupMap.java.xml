<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-17\src\KeyToGroupMap.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * KeyToGroupMap.java
 * ------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 29-Apr-2004 : Version 1 (DG);
 * 07-Jul-2004 : Added a group list to ensure group index is consistent, fixed 
 *               cloning problem (DG);
 * 18-Aug-2005 : Added casts in clone() method to suppress 1.5 compiler 
 *               warnings - see patch 1260587 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Modifier</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A class that maps keys (instances of &lt;code&gt;Comparable&lt;/code&gt;) to groups.
 */</comment>
<class><specifier>public</specifier> class <name>KeyToGroupMap</name> <super><implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2228169345475318082L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default group. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>defaultGroup</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The groups. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>groups</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A mapping between keys and groups. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>keyToGroupMap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new map with a default group named 'Default Group'.
     */</comment>
    <constructor><specifier>public</specifier> <name>KeyToGroupMap</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>"Default Group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new map with the specified default group.
     * 
     * @param defaultGroup  the default group (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>KeyToGroupMap</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>defaultGroup</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>defaultGroup</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'defaultGroup' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>defaultGroup</name></name> = <name>defaultGroup</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>groups</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>keyToGroupMap</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the number of groups in the map.
     * 
     * @return The number of groups in the map.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGroupCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>groups</name>.<name>size</name></name><argument_list>()</argument_list></call> + 1</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a list of the groups (always including the default group) in the 
     * map.  The returned list is independent of the map, so altering the list 
     * will have no effect.
     * 
     * @return The groups (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getGroups</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>groups</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>group</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>result</name>.<name>contains</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></while> 
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index for the group.
     * 
     * @param group  the group.
     * 
     * @return The group index (or -1 if the group is not represented within 
     *         the map).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGroupIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>group</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>groups</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>defaultGroup</name>.<name>equals</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <name>result</name> + 1</expr>;</expr_stmt>   
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the group that a key is mapped to.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The group (never &lt;code&gt;null&lt;/code&gt;, returns the default group if
     *         there is no mapping for the specified key).
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getGroup</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Comparable</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>defaultGroup</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Comparable</name></type> <name>group</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>keyToGroupMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>group</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name>group</name></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Maps a key to a group.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param group  the group (&lt;code&gt;null&lt;/code&gt; permitted, clears any 
     *               existing mapping).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapKeyToGroup</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>group</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Comparable</name></type> <name>currentGroup</name> =<init> <expr><call><name>getGroup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>currentGroup</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultGroup</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>currentGroup</name>.<name>equals</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getKeyCount</name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>count</name> == 1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>groups</name>.<name>remove</name></name><argument_list>(<argument><expr><name>currentGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>group</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>keyToGroupMap</name>.<name>remove</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>groups</name>.<name>contains</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>this</name>.<name>defaultGroup</name>.<name>equals</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>groups</name>.<name>add</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>this</name>.<name>keyToGroupMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of keys mapped to the specified group.  This method 
     * won't always return an accurate result for the default group, since 
     * explicit mappings are not required for this group.
     * 
     * @param group  the group (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The key count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getKeyCount</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>group</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>group</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'group' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>keyToGroupMap</name>.<name>values</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>g</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>group</name>.<name>equals</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name>++</expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the map for equality against an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>      
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>KeyToGroupMap</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>KeyToGroupMap</name></type> <name>that</name> =<init> <expr>(<name>KeyToGroupMap</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultGroup</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>defaultGroup</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>keyToGroupMap</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>keyToGroupMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the map.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if there is a problem cloning the
     *                                     map.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>KeyToGroupMap</name></type> <name>result</name> =<init> <expr>(<name>KeyToGroupMap</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name>.<name>defaultGroup</name></name> 
            = (<name>Comparable</name>) <call><name><name>KeyToGroupMap</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultGroup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name>.<name>groups</name></name> = (<name>List</name>) <call><name><name>KeyToGroupMap</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name>.<name>keyToGroupMap</name></name> = (<name>Map</name>) <call><name><name>KeyToGroupMap</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>keyToGroupMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Attempts to clone the specified object using reflection.
     * 
     * @param object  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The cloned object, or the original object if cloning failed.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Object</name></type> <name>clone</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Class</name></type> <name>c</name> =<init> <expr><call><name><name>object</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><call><name><name>c</name>.<name>getMethod</name></name><argument_list>(<argument><expr>"clone"</expr></argument>, <argument><expr>(<name><name>Class</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>Modifier</name>.<name>isPublic</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getModifiers</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>m</name>.<name>invoke</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr>(<name><name>Object</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  
                }</block></catch></try>
            }</block></then></if>
        }</block>
        <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><name>result</name> = <name>object</name></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the list.
     * 
     * @param list  the list.
     * 
     * @return A clone of the list.
     * 
     * @throws CloneNotSupportedException if the list could not be cloned.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Collection</name></type> <name>clone</name><parameter_list>(<param><decl><type><name>Collection</name></type> <name>list</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>list</name> != <name>null</name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>List</name></type> <name>clone</name> =<init> <expr>(<name>List</name>) <call><name><name>list</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>newInstance</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>list</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>clone</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>KeyToGroupMap</name>.<name>clone</name></name><argument_list>(<argument><expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><name>result</name> = <name>clone</name></expr>;</expr_stmt>
            }</block>
            <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                <throw>throw <expr>new <call><name>CloneNotSupportedException</name><argument_list>(<argument><expr>"Exception."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></catch></try>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
