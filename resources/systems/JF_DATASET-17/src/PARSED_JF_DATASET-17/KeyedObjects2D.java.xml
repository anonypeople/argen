<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-17\src\KeyedObjects2D.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * KeyedObject2D.java
 * ------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Feb-2003 : Version 1 (DG);
 * 01-Mar-2004 : Added equals() and clone() methods and implemented 
 *               Serializable (DG);
 * 03-Oct-2007 : Updated getObject() to handle modified behaviour in 
 *               KeyedObjects class, added clear() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * A data structure that stores zero, one or many objects, where each object is
 * associated with two keys (a 'row' key and a 'column' key).
 */</comment>
<class><specifier>public</specifier> class <name>KeyedObjects2D</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-1015873563138522374L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The row keys. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>rowKeys</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The column keys. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>columnKeys</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The row data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>rows</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new instance (initially empty).
     */</comment>
    <constructor><specifier>public</specifier> <name>KeyedObjects2D</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rowKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columnKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rows</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the row count.
     *
     * @return The row count.
     * 
     * @see #getColumnCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>rowKeys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column count.
     *
     * @return The column count.
     * 
     * @see #getRowCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>columnKeys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the object for a given row and column.
     *
     * @param row  the row index (in the range 0 to getRowCount() - 1).
     * @param column  the column index (in the range 0 to getColumnCount() - 1).
     *
     * @return The object (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getObject(Comparable, Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObject</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>rowData</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rowData</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>columnKey</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>columnKeys</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columnKey</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>rowData</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>rowData</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a given row.
     *
     * @param row  the row index (zero based).
     *
     * @return The row index.
     * 
     * @see #getRowIndex(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getRowKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>rowKeys</name>.<name>get</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row index for a given key, or &lt;code&gt;-1&lt;/code&gt; if the key
     * is not recognised.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The row index.
     * 
     * @see #getRowKey(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>rowKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row keys.
     *
     * @return The row keys (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getRowKeys()
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getRowKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rowKeys</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a given column.
     *
     * @param column  the column.
     *
     * @return The key.
     * 
     * @see #getColumnIndex(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getColumnKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>columnKeys</name>.<name>get</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column index for a given key, or &lt;code&gt;-1&lt;/code&gt; if the key
     * is not recognised.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The column index.
     * 
     * @see #getColumnKey(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>columnKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column keys.
     *
     * @return The column keys (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getRowKeys()
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getColumnKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>columnKeys</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the object for the given row and column keys.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The object (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;rowKey&lt;code&gt; or 
     *         &lt;code&gt;columnKey&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     * @throws UnknownKeyException if &lt;code&gt;rowKey&lt;/code&gt; or 
     *         &lt;code&gt;columnKey&lt;/code&gt; is not recognised.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObject</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>rowKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'rowKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>columnKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'columnKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>row</name> =<init> <expr><call><name><name>this</name>.<name>rowKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>row</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Row key (" + <name>rowKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>column</name> =<init> <expr><call><name><name>this</name>.<name>columnKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>column</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Column key (" + <name>columnKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>rowData</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>rowData</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>rowData</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an object to the table.  Performs the same function as setObject().
     *
     * @param object  the object.
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addObject</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, 
            <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setObject</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds or updates an object.
     *
     * @param object  the object.
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setObject</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, 
            <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>rowKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'rowKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>columnKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'columnKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>row</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rowIndex</name> =<init> <expr><call><name><name>this</name>.<name>rowKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rowIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>row</name> = (<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rowKeys</name>.<name>add</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>row</name> = new <call><name>KeyedObjects</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>rows</name>.<name>add</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>row</name>.<name>setObject</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnIndex</name> =<init> <expr><call><name><name>this</name>.<name>columnKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>columnKeys</name>.<name>add</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Removes an object from the table by setting it to &lt;code&gt;null&lt;/code&gt;.  If
     * all the objects in the specified row and/or column are now 
     * &lt;code&gt;null&lt;/code&gt;, the row and/or column is removed from the table.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #addObject(Object, Comparable, Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeObject</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rowIndex</name> =<init> <expr><call><name>getRowIndex</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rowIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Row key (" + <name>rowKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>columnIndex</name> =<init> <expr><call><name>getColumnIndex</name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>columnIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Column key (" + <name>columnKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setObject</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// 1. check whether the row is now empty.</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>allNull</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>row</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init>, <name>itemCount</name> =<init> <expr><call><name><name>row</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> 
             <incr><expr><name>item</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>row</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>allNull</name> = false</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        
        <if>if <condition>(<expr><name>allNull</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rowKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>rows</name>.<name>remove</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// 2. check whether the column is now empty.</comment>
        <expr_stmt><expr><name>allNull</name> = true</expr>;</expr_stmt>
        
        <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init>, <name>itemCount</name> =<init> <expr><call><name><name>this</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> 
             <incr><expr><name>item</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>row</name> = (<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>colIndex</name> =<init> <expr><call><name><name>row</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>colIndex</name> &gt;= 0 &amp;&amp; <call><name><name>row</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>colIndex</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>allNull</name> = false</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        
        <if>if <condition>(<expr><name>allNull</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init>, <name>itemCount</name> =<init> <expr><call><name><name>this</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> 
                 <incr><expr><name>item</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>row</name> = (<name>KeyedObjects</name>) <call><name><name>this</name>.<name>rows</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>colIndex</name> =<init> <expr><call><name><name>row</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>colIndex</name> &gt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>row</name>.<name>removeValue</name></name><argument_list>(<argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>this</name>.<name>columnKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an entire row from the table.
     *
     * @param rowIndex  the row index.
     * 
     * @see #removeColumn(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rowIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rowKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>rows</name>.<name>remove</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an entire row from the table.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws UnknownKeyException if &lt;code&gt;rowKey&lt;/code&gt; is not recognised.
     * 
     * @see #removeColumn(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getRowIndex</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Row key (" + <name>rowKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>removeRow</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an entire column from the table.
     *
     * @param columnIndex  the column index.
     * 
     * @see #removeRow(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>int</name></type> <name>columnIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>columnKey</name> =<init> <expr><call><name>getColumnKey</name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>removeColumn</name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an entire column from the table.
     *
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws UnknownKeyException if &lt;code&gt;rowKey&lt;/code&gt; is not recognised.
     * 
     * @see #removeRow(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getColumnIndex</name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Column key (" + <name>columnKey</name> 
                    + ") not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>rows</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>rowData</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>rowData</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>rowData</name>.<name>removeValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name><name>this</name>.<name>columnKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the data and associated keys.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rowKeys</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>columnKeys</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>rows</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the object to test (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>KeyedObjects2D</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>KeyedObjects2D</name></type> <name>that</name> =<init> <expr>(<name>KeyedObjects2D</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>getRowKeys</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>getColumnKeys</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rowCount</name> != <call><name><name>that</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>colCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>colCount</name> != <call><name><name>that</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name>colCount</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>v1</name> =<init> <expr><call><name>getObject</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Object</name></type> <name>v2</name> =<init> <expr><call><name><name>that</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>v1</name> == <name>null</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>v2</name> != <name>null</name></expr>)</condition><then> <block>{
                        <return>return <expr>false</expr>;</return>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr>!<call><name><name>v1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr>false</expr>;</return>
                    }</block></then></if>
                }</block></else></if>
            }</block></for>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hashcode for this object.
     * 
     * @return A hashcode.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>rowKeys</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>this</name>.<name>columnKeys</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>this</name>.<name>rows</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  this class will not throw this 
     *         exception, but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>KeyedObjects2D</name></type> <name>clone</name> =<init> <expr>(<name>KeyedObjects2D</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>columnKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>columnKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>rowKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rowKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>rows</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>rows</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>rows</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>row</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>rows</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>row</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
