<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-17\src\Range.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------
 * Range.java
 * ----------
 * (C) Copyright 2002-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Chuanhao Chiu;
 *                   Bill Kelemen; 
 *                   Nicolas Brodu;
 *                   Sergei Ivanov;
 *
 * Changes (from 23-Jun-2001)
 * --------------------------
 * 22-Apr-2002 : Version 1, loosely based by code by Bill Kelemen (DG);
 * 30-Apr-2002 : Added getLength() and getCentralValue() methods.  Changed
 *               argument check in constructor (DG);
 * 13-Jun-2002 : Added contains(double) method (DG);
 * 22-Aug-2002 : Added fix to combine method where both ranges are null, thanks
 *               to Chuanhao Chiu for reporting and fixing this (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 14-Aug-2003 : Added equals() method (DG);
 * 27-Aug-2003 : Added toString() method (BK);
 * 11-Sep-2003 : Added Clone Support (NB);
 * 23-Sep-2003 : Fixed Checkstyle issues (DG);
 * 25-Sep-2003 : Oops, Range immutable, clone not necessary (NB);
 * 05-May-2004 : Added constrain() and intersects() methods (DG);
 * 18-May-2004 : Added expand() method (DG);
 * ------------- JFreeChart 1.0.x ---------------------------------------------
 * 11-Jan-2006 : Added new method expandToInclude(Range, double) (DG);
 * 18-Dec-2007 : New methods intersects(Range) and scale(...) thanks to Sergei
 *               Ivanov (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * Represents an immutable range of values.
 */</comment>
<decl_stmt><decl><type><specifier>public</specifier> <name>strictfp</name> class</type> <name>Range</name> implements <name>Serializable</name> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-906333695431863380L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The lower bound of the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lower</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The upper bound of the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upper</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new range.
     *
     * @param lower  the lower bound (must be &lt;= upper bound).
     * @param upper  the upper bound (must be &gt;= lower bound).
     */</comment>
    <constructor><specifier>public</specifier> <name>Range</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>, <param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lower</name> &gt; <name>upper</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"Range(double, double): require lower (" + <name>lower</name> 
                + ") &lt;= upper (" + <name>upper</name> + ")."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>lower</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upper</name></name> = <name>upper</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the lower bound for the range.
     *
     * @return The lower bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lower</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper bound for the range.
     *
     * @return The upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upper</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the length of the range.
     *
     * @return The length.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upper</name></name> - <name><name>this</name>.<name>lower</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the central value for the range.
     *
     * @return The central value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCentralValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lower</name></name> / 2.0 + <name><name>this</name>.<name>upper</name></name> / 2.0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the range contains the specified value and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @param value  the value to lookup.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the range contains the specified value.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>value</name> &gt;= <name><name>this</name>.<name>lower</name></name> &amp;&amp; <name>value</name> &lt;= <name><name>this</name>.<name>upper</name></name>)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the range intersects with the specified 
     * range, and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param b0  the lower bound (should be &lt;= b1).
     * @param b1  the upper bound (should be &gt;= b0).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<param><decl><type><name>double</name></type> <name>b0</name></decl></param>, <param><decl><type><name>double</name></type> <name>b1</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>b0</name> &lt;= <name><name>this</name>.<name>lower</name></name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>b1</name> &gt; <name><name>this</name>.<name>lower</name></name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>(<name>b0</name> &lt; <name><name>this</name>.<name>upper</name></name> &amp;&amp; <name>b1</name> &gt;= <name>b0</name>)</expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the range intersects with the specified 
     * range, and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param range  another range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A boolean.
     *
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>intersects</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>intersects</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value within the range that is closest to the specified 
     * value.
     * 
     * @param value  the value.
     * 
     * @return The constrained value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>constrain</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name>value</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>value</name> &gt; <name><name>this</name>.<name>upper</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>upper</name></name></expr>;</expr_stmt>   
            }</block></then>
            <else>else <if>if <condition>(<expr><name>value</name> &lt; <name><name>this</name>.<name>lower</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>lower</name></name></expr>;</expr_stmt>   
            }</block></then></if></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a new range by combining two existing ranges.
     * &lt;P&gt;
     * Note that:
     * &lt;ul&gt;
     *   &lt;li&gt;either range can be &lt;code&gt;null&lt;/code&gt;, in which case the other 
     *       range is returned;&lt;/li&gt;
     *   &lt;li&gt;if both ranges are &lt;code&gt;null&lt;/code&gt; the return value is 
     *       &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param range1  the first range (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param range2  the second range (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A new range (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>combine</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range1</name></decl></param>, <param><decl><type><name>Range</name></type> <name>range2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>range2</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>range2</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>range1</name></expr>;</return>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>l</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>range1</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>range2</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>u</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>range1</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>range2</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a range that includes all the values in the specified 
     * &lt;code&gt;range&lt;/code&gt; AND the specified &lt;code&gt;value&lt;/code&gt;.
     * 
     * @param range  the range (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param value  the value that must be included.
     * 
     * @return A range.
     * 
     * @since 1.0.1
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>expandToInclude</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> &lt; <call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>value</name> &gt; <call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>range</name></expr>;</return>
        }</block></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a new range by adding margins to an existing range.
     * 
     * @param range  the range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param lowerMargin  the lower margin (expressed as a percentage of the 
     *                     range length).
     * @param upperMargin  the upper margin (expressed as a percentage of the 
     *                     range length).
     * 
     * @return The expanded range.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>expand</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>, 
                               <param><decl><type><name>double</name></type> <name>lowerMargin</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperMargin</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'range' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr><call><name><name>range</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> - <name>length</name> * <name>lowerMargin</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> + <name>length</name> * <name>upperMargin</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lower</name> &gt; <name>upper</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lower</name> = <name>lower</name> / 2.0 + <name>upper</name> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>upper</name> = <name>lower</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Shifts the range by the specified amount.
     * 
     * @param base  the base range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param delta  the shift amount.
     * 
     * @return A new range.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>shift</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>base</name></decl></param>, <param><decl><type><name>double</name></type> <name>delta</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>shift</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Shifts the range by the specified amount.
     * 
     * @param base  the base range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param delta  the shift amount.
     * @param allowZeroCrossing  a flag that determines whether or not the 
     *                           bounds of the range are allowed to cross
     *                           zero after adjustment.
     * 
     * @return A new range.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>shift</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>base</name></decl></param>, <param><decl><type><name>double</name></type> <name>delta</name></decl></param>, 
                              <param><decl><type><name>boolean</name></type> <name>allowZeroCrossing</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>allowZeroCrossing</name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>base</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> + <name>delta</name></expr></argument>, 
                    <argument><expr><call><name><name>base</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> + <name>delta</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name>shiftWithNoZeroCrossing</name><argument_list>(<argument><expr><call><name><name>base</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>shiftWithNoZeroCrossing</name><argument_list>(<argument><expr><call><name><name>base</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the given &lt;code&gt;value&lt;/code&gt; adjusted by &lt;code&gt;delta&lt;/code&gt; but
     * with a check to prevent the result from crossing &lt;code&gt;0.0&lt;/code&gt;.
     * 
     * @param value  the value.
     * @param delta  the adjustment.
     * 
     * @return The adjusted value.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>double</name></type> <name>shiftWithNoZeroCrossing</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>double</name></type> <name>delta</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> &gt; 0.0</expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>value</name> + <name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</return>  
        }</block></then>
        <else>else <if>if <condition>(<expr><name>value</name> &lt; 0.0</expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>value</name> + <name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>value</name> + <name>delta</name></expr>;</return>   
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Scales the range by the specified factor.
     *
     * @param base the base range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param factor the scaling factor (must be non-negative).
     *
     * @return A new range.
     *
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Range</name></type> <name>scale</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>base</name></decl></param>, <param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>factor</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'factor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>base</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> * <name>factor</name></expr></argument>,
                <argument><expr><call><name><name>base</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> * <name>factor</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Range</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr>(<name>Range</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>lower</name></name> == <name><name>range</name>.<name>lower</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>upper</name></name> == <name><name>range</name>.<name>upper</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string representation of this Range.
     *
     * @return A String "Range[lower,upper]" where lower=lower range and 
     *         upper=upper range.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>("Range[" + <name><name>this</name>.<name>lower</name></name> + "," + <name><name>this</name>.<name>upper</name></name> + "]")</expr>;</return>
    }</block></function>

}</block></decl></decl_stmt>
</unit>
