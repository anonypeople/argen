<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-20\src\Task.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------
 * Task.java
 * ---------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 10-Jan-2003 : Version 1 (DG);
 * 16-Sep-2003 : Added percentage complete (DG);
 * 30-Jul-2004 : Added clone() and equals() methods and implemented 
 *               Serializable (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>gantt</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>SimpleTimePeriod</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>TimePeriod</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A simple representation of a task.  The task has a description and a 
 * duration.  You can add sub-tasks to the task.
 */</comment>
<class><specifier>public</specifier> class <name>Task</name> <super><implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1094303785346988894L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The task description. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The time period for the task (estimated or actual). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimePeriod</name></type> <name>duration</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The percent complete (&lt;code&gt;null&lt;/code&gt; is permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Double</name></type> <name>percentComplete</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the sub-tasks (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>subtasks</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new task.
     *
     * @param description  the task description (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     * @param duration  the task duration (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>Task</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>, <param><decl><type><name>TimePeriod</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>description</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'description' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>duration</name></name> = <name>duration</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>percentComplete</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>subtasks</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new task.
     * 
     * @param description  the task description (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     * @param start  the start date (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param end  the end date (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>Task</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>, <param><decl><type><name>Date</name></type> <name>start</name></decl></param>, <param><decl><type><name>Date</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>description</name></expr></argument>, <argument><expr>new <call><name>SimpleTimePeriod</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the task description.
     *
     * @return The task description (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>description</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the task description.
     *
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>description</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'description' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the duration (actual or estimated) of the task.
     *
     * @return The task duration (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriod</name></type> <name>getDuration</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>duration</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the task duration (actual or estimated).
     *
     * @param duration  the duration (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDuration</name><parameter_list>(<param><decl><type><name>TimePeriod</name></type> <name>duration</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>duration</name></name> = <name>duration</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the percentage complete for this task.
     * 
     * @return The percentage complete (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Double</name></type> <name>getPercentComplete</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>percentComplete</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the percentage complete for the task.
     * 
     * @param percent  the percentage (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPercentComplete</name><parameter_list>(<param><decl><type><name>Double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>percentComplete</name></name> = <name>percent</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the percentage complete for the task.
     * 
     * @param percent  the percentage.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPercentComplete</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setPercentComplete</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a sub-task to the task.
     *
     * @param subtask  the subtask (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>subtask</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>subtask</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'subtask' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>subtasks</name>.<name>add</name></name><argument_list>(<argument><expr><name>subtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a sub-task from the task.
     *
     * @param subtask  the subtask.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSubtask</name><parameter_list>(<param><decl><type><name>Task</name></type> <name>subtask</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>subtasks</name>.<name>remove</name></name><argument_list>(<argument><expr><name>subtask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the sub-task count.
     *
     * @return The sub-task count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSubtaskCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>subtasks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a sub-task.
     *
     * @param index  the index.
     *
     * @return The sub-task.
     */</comment>
    <function><type><specifier>public</specifier> <name>Task</name></type> <name>getSubtask</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>Task</name>) <call><name><name>this</name>.<name>subtasks</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param object  the other object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>object</name> <name>instanceof</name> <name>Task</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Task</name></type> <name>that</name> =<init> <expr>(<name>Task</name>) <name>object</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>description</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>description</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>duration</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>duration</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>percentComplete</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>percentComplete</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subtasks</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>subtasks</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the task.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  never thrown by this class, but 
     *         subclasses may not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Task</name></type> <name>clone</name> =<init> <expr>(<name>Task</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>clone</name></expr>;</return>      
    }</block></function>

}</block></class>
</unit>
