<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-20\src\TextAnnotation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * TextAnnotation.java
 * -------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 28-Aug-2002 : Version 1 (DG);
 * 07-Nov-2002 : Fixed errors reported by Checkstyle, added accessor 
 *               methods (DG);
 * 13-Jan-2003 : Reviewed Javadocs (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 02-Jun-2003 : Added anchor and rotation settings (DG);
 * 19-Aug-2003 : Added equals() method and implemented Cloneable (DG);
 * 29-Sep-2004 : Updated equals() method (DG);
 * 06-Jun-2005 : Fixed equals() method to work with GradientPaint (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 16-Jan-2007 : Added argument checks, fixed hashCode() method and updated
 *               API docs (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A base class for text annotations.  This class records the content but not 
 * the location of the annotation.
 */</comment>
<class><specifier>public</specifier> class <name>TextAnnotation</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7008912287533127432L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_FONT</name> 
        =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default text anchor. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TextAnchor</name></type> <name>DEFAULT_TEXT_ANCHOR</name> =<init> <expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default rotation anchor. */</comment>    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TextAnchor</name></type> <name>DEFAULT_ROTATION_ANCHOR</name> =<init> <expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default rotation angle. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ROTATION_ANGLE</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The text. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The text anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>textAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rotation anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>rotationAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rotation angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rotationAngle</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a text annotation with default settings.
     *
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>TextAnnotation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'text' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>DEFAULT_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>DEFAULT_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>textAnchor</name></name> = <name>DEFAULT_TEXT_ANCHOR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAnchor</name></name> = <name>DEFAULT_ROTATION_ANCHOR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAngle</name></name> = <name>DEFAULT_ROTATION_ANGLE</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the text for the annotation.
     *
     * @return The text (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setText(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>text</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the text for the annotation.
     * 
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getText()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'text' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font for the annotation.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>font</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font for the annotation.
     * 
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>font</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the annotation.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint for the annotation.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the text anchor.
     * 
     * @return The text anchor.
     * 
     * @see #setTextAnchor(TextAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getTextAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>textAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the text anchor (the point on the text bounding rectangle that is 
     * aligned to the (x, y) coordinate of the annotation).
     * 
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTextAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextAnchor</name><parameter_list>(<param><decl><type><name>TextAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>anchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'anchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>textAnchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the rotation anchor.
     * 
     * @return The rotation anchor point (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRotationAnchor(TextAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getRotationAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rotationAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the rotation anchor point.
     * 
     * @param anchor  the anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRotationAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRotationAnchor</name><parameter_list>(<param><decl><type><name>TextAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rotationAnchor</name></name> = <name>anchor</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the rotation angle in radians.
     * 
     * @return The rotation angle.
     * 
     * @see #setRotationAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRotationAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rotationAngle</name></name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the rotation angle.  The angle is measured clockwise in radians.
     * 
     * @param angle  the angle (in radians).
     * 
     * @see #getRotationAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRotationAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rotationAngle</name></name> = <name>angle</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <comment type="line">// now try to reject equality...</comment>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>TextAnnotation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TextAnnotation</name></type> <name>that</name> =<init> <expr>(<name>TextAnnotation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>text</name></name></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>textAnchor</name></name></expr></argument>, <argument><expr><call><name><name>that</name>.<name>getTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rotationAnchor</name></name></expr></argument>, 
                <argument><expr><call><name><name>that</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rotationAngle</name></name> != <call><name><name>that</name>.<name>getRotationAngle</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        
        <comment type="line">// seem to be the same...</comment>
        <return>return <expr>true</expr>;</return>
            
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>font</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>rotationAnchor</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rotationAngle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>text</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>textAnchor</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
