<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-20\src\XYTextAnnotation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * XYTextAnnotation.java
 * ---------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 28-Aug-2002 : Version 1 (DG);
 * 07-Nov-2002 : Fixed errors reported by Checkstyle (DG);
 * 13-Jan-2003 : Reviewed Javadocs (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 02-Jul-2003 : Added new text alignment and rotation options (DG);
 * 19-Aug-2003 : Implemented Cloneable (DG);
 * 17-Jan-2003 : Added fix for bug 878706, where the annotation is placed 
 *               incorrectly for a plot with horizontal orientation (thanks to
 *               Ed Yu for the fix) (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 26-Jan-2006 : Fixed equals() method (bug 1415480) (DG);
 * 06-Mar-2007 : Added argument checks, re-implemented hashCode() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A text annotation that can be placed at a particular (x, y) location on an 
 * {@link XYPlot}.
 */</comment>
<class><specifier>public</specifier> class <name>XYTextAnnotation</name> <super><extends>extends <name>AbstractXYAnnotation</name></extends>
                              <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                         <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2946063342782506328L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, 
            <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default text anchor. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TextAnchor</name></type> <name>DEFAULT_TEXT_ANCHOR</name> =<init> <expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default rotation anchor. */</comment>    
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>TextAnchor</name></type> <name>DEFAULT_ROTATION_ANCHOR</name> =<init> <expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default rotation angle. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ROTATION_ANGLE</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The text. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The x-coordinate. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>x</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The y-coordinate. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>y</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The text anchor (to be aligned with (x, y)). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>textAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rotation anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>rotationAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rotation angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rotationAngle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new annotation to be displayed at the given coordinates.  The
     * coordinates are specified in data space (they will be converted to 
     * Java2D space for display).
     *
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param x  the x-coordinate (in data space).
     * @param y  the y-coordinate (in data space).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYTextAnnotation</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'text' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>DEFAULT_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>DEFAULT_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>textAnchor</name></name> = <name>DEFAULT_TEXT_ANCHOR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAnchor</name></name> = <name>DEFAULT_ROTATION_ANCHOR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAngle</name></name> = <name>DEFAULT_ROTATION_ANGLE</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the text for the annotation.
     *
     * @return The text (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setText(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>text</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the text for the annotation.
     * 
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getText()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'text' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font for the annotation.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>font</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font for the annotation.
     * 
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>font</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the annotation.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint for the annotation.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the text anchor.
     * 
     * @return The text anchor (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTextAnchor(TextAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getTextAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>textAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the text anchor (the point on the text bounding rectangle that is 
     * aligned to the (x, y) coordinate of the annotation).
     * 
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTextAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextAnchor</name><parameter_list>(<param><decl><type><name>TextAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>anchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'anchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>textAnchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the rotation anchor.
     * 
     * @return The rotation anchor point (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRotationAnchor(TextAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getRotationAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rotationAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the rotation anchor point.
     * 
     * @param anchor  the anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRotationAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRotationAnchor</name><parameter_list>(<param><decl><type><name>TextAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>anchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'anchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAnchor</name></name> = <name>anchor</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the rotation angle.
     * 
     * @return The rotation angle.
     * 
     * @see #setRotationAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRotationAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rotationAngle</name></name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the rotation angle.  The angle is measured clockwise in radians.
     * 
     * @param angle  the angle (in radians).
     * 
     * @see #getRotationAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRotationAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rotationAngle</name></name> = <name>angle</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x coordinate for the text anchor point (measured against the
     * domain axis).
     * 
     * @return The x coordinate (in data space).
     * 
     * @see #setX(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>x</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the x coordinate for the text anchor point (measured against the 
     * domain axis).
     * 
     * @param x  the x coordinate (in data space).
     * 
     * @see #getX()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y coordinate for the text anchor point (measured against the
     * range axis).
     * 
     * @return The y coordinate (in data space).
     * 
     * @see #setY(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>y</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y coordinate for the text anchor point (measured against the
     * range axis).
     * 
     * @param y  the y coordinate.
     * 
     * @see #getY()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></function>    

    <comment type="javadoc">/**
     * Draws the annotation.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param rendererIndex  the renderer index.
     * @param info  an optional info object that will be populated with
     *              entity information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                     <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
                     <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>anchorX</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>x</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>anchorY</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>y</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>tempAnchor</name> =<init> <expr><name>anchorX</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>anchorX</name> = <name>anchorY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>anchorY</name> = <name>tempAnchor</name></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>,
                <argument><expr><call><name>getTextAnchor</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRotationAngle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRotationAnchor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>hotspot</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>calculateRotatedStringBounds</name></name><argument_list>(
                <argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>, <argument><expr><call><name>getTextAnchor</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name>getRotationAngle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRotationAnchor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>String</name></type> <name>toolTip</name> =<init> <expr><call><name>getToolTipText</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><call><name>getURL</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>toolTip</name> != <name>null</name> || <name>url</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>hotspot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>toolTip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this annotation for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYTextAnnotation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYTextAnnotation</name></type> <name>that</name> =<init> <expr>(<name>XYTextAnnotation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>text</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>x</name></name> != <name><name>that</name>.<name>x</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>y</name></name> != <name><name>that</name>.<name>y</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>font</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>font</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rotationAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rotationAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rotationAngle</name></name> != <name><name>that</name>.<name>rotationAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>textAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>textAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for the object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <call><name><name>this</name>.<name>text</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <call><name><name>this</name>.<name>font</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>textAnchor</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>rotationAnchor</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rotationAngle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the annotation.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the annotation can't be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
