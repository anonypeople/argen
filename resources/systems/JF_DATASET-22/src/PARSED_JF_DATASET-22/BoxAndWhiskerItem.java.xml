<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\BoxAndWhiskerItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * BoxAndWhiskerItem.java
 * ----------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 27-Aug-2003 : Version 1 (DG); 
 * 01-Mar-2004 : Added equals() method and implemented Serializable (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 15-Nov-2006 : Added toString() method override (DG);
 * 02-Oct-2007 : Added new constructor (for convenience) (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents one data item within a box-and-whisker dataset.  Instances of 
 * this class are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>BoxAndWhiskerItem</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7329649623148167423L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The mean. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>mean</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The median. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>median</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The first quarter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>q1</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The third quarter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>q3</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minimum regular value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>minRegularValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum regular value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>maxRegularValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minimum outlier. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>minOutlier</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum outlier. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>maxOutlier</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The outliers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>outliers</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new box-and-whisker item.
     * 
     * @param mean  the mean (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param median  the median (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param q1  the first quartile (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param q3  the third quartile (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param minRegularValue  the minimum regular value (&lt;code&gt;null&lt;/code&gt; 
     *                         permitted).
     * @param maxRegularValue  the maximum regular value (&lt;code&gt;null&lt;/code&gt; 
     *                         permitted).
     * @param minOutlier  the minimum outlier (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param maxOutlier  the maximum outlier (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param outliers  the outliers (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>BoxAndWhiskerItem</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>mean</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>median</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>q1</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>q3</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>minRegularValue</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>maxRegularValue</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>minOutlier</name></decl></param>,
                             <param><decl><type><name>Number</name></type> <name>maxOutlier</name></decl></param>,
                             <param><decl><type><name>List</name></type> <name>outliers</name></decl></param>)</parameter_list> <block>{
                                 
        <expr_stmt><expr><name><name>this</name>.<name>mean</name></name> = <name>mean</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>median</name></name> = <name>median</name></expr>;</expr_stmt>    
        <expr_stmt><expr><name><name>this</name>.<name>q1</name></name> = <name>q1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>q3</name></name> = <name>q3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minRegularValue</name></name> = <name>minRegularValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxRegularValue</name></name> = <name>maxRegularValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minOutlier</name></name> = <name>minOutlier</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxOutlier</name></name> = <name>maxOutlier</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outliers</name></name> = <name>outliers</name></expr>;</expr_stmt>
        
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new box-and-whisker item.
     * 
     * @param mean  the mean.
     * @param median  the median
     * @param q1  the first quartile.
     * @param q3  the third quartile.
     * @param minRegularValue  the minimum regular value.
     * @param maxRegularValue  the maximum regular value.
     * @param minOutlier  the minimum outlier value.
     * @param maxOutlier  the maximum outlier value.
     * @param outliers  a list of the outliers.
     * 
     * @since 1.0.7
     */</comment>
    <constructor><specifier>public</specifier> <name>BoxAndWhiskerItem</name><parameter_list>(<param><decl><type><name>double</name></type> <name>mean</name></decl></param>, <param><decl><type><name>double</name></type> <name>median</name></decl></param>, <param><decl><type><name>double</name></type> <name>q1</name></decl></param>, <param><decl><type><name>double</name></type> <name>q3</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>minRegularValue</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxRegularValue</name></decl></param>, <param><decl><type><name>double</name></type> <name>minOutlier</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>maxOutlier</name></decl></param>, <param><decl><type><name>List</name></type> <name>outliers</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// pass values to other constructor</comment>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mean</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>median</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>q1</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>q3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>minRegularValue</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>maxRegularValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>minOutlier</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>maxOutlier</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outliers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the mean.
     * 
     * @return The mean (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMean</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>mean</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the median.
     * 
     * @return The median (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMedian</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>median</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the first quartile. 
     * 
     * @return The first quartile (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ1</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>q1</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the third quartile. 
     * 
     * @return The third quartile (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ3</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>q3</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum regular value.
     * 
     * @return The minimum regular value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinRegularValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minRegularValue</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum regular value. 
     * 
     * @return The maximum regular value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxRegularValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxRegularValue</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum outlier.
     * 
     * @return The minimum outlier (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinOutlier</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minOutlier</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum outlier.
     * 
     * @return The maximum outlier (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxOutlier</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxOutlier</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a list of outliers.
     * 
     * @return A list of outliers (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getOutliers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>outliers</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outliers</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representation of this instance, primarily for
     * debugging purposes.
     * 
     * @return A string representation of this instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "[mean=" + <name><name>this</name>.<name>mean</name></name> + ",median=" 
                + <name><name>this</name>.<name>median</name></name> + ",q1=" + <name><name>this</name>.<name>q1</name></name> + ",q3=" + <name><name>this</name>.<name>q3</name></name> + "]"</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BoxAndWhiskerItem</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>that</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>mean</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>mean</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>median</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>median</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>q1</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>q1</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>q3</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>q3</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minRegularValue</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>minRegularValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maxRegularValue</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>maxRegularValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minOutlier</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>minOutlier</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maxOutlier</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>maxOutlier</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outliers</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>outliers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
