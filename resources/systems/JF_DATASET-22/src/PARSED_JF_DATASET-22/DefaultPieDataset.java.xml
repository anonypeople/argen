<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\DefaultPieDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * DefaultPieDataset.java
 * ----------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Sam (oldman);
 *
 * Changes
 * -------
 * 17-Nov-2001 : Version 1 (DG);
 * 22-Jan-2002 : Removed legend methods from dataset implementations (DG);
 * 07-Apr-2002 : Modified implementation to guarantee data sequence to remain 
 *               in the order categories are added (oldman);
 * 23-Oct-2002 : Added getCategory(int) method and getItemCount() method, in 
 *               line with changes to the PieDataset interface (DG);
 * 04-Feb-2003 : Changed underlying data storage to DefaultKeyedValues (DG);
 * 04-Mar-2003 : Inserted DefaultKeyedValuesDataset class into hierarchy (DG);
 * 24-Apr-2003 : Switched places with DefaultKeyedValuesDataset (DG);
 * 18-Aug-2003 : Implemented Cloneable (DG);
 * 03-Mar-2005 : Implemented PublicCloneable (DG);
 * 29-Jun-2005 : Added remove() method (DG);
 * ------------- JFREECHART 1.0.0 ---------------------------------------------
 * 31-Jul-2006 : Added a clear() method to clear all values from the 
 *               dataset (DG);
 * 28-Sep-2006 : Added sortByKeys() and sortByValues() methods (DG);
 * 30-Apr-2007 : Added new insertValues() methods (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DefaultKeyedValues</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>KeyedValues</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>UnknownKeyException</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>SortOrder</name></name>;</import>

<comment type="javadoc">/**
 * A default implementation of the {@link PieDataset} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultPieDataset</name> <super><extends>extends <name>AbstractDataset</name></extends>
                               <implements>implements <name>PieDataset</name>, 
                                          <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                          <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2904745139106540618L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DefaultKeyedValues</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new dataset, initially empty.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultPieDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>DefaultKeyedValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new dataset by copying data from a {@link KeyedValues} 
     * instance.
     *
     * @param data  the data (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultPieDataset</name><parameter_list>(<param><decl><type><name>KeyedValues</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>data</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'data' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>DefaultKeyedValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>data</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>addValue</name></name><argument_list>(<argument><expr><call><name><name>data</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of items in the dataset.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the categories in the dataset.  The returned list is 
     * unmodifiable.
     *
     * @return The categories in the dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>data</name>.<name>getKeys</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for the specified item, or &lt;code&gt;null&lt;/code&gt;. 
     *
     * @param item  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount() - 1&lt;/code&gt;).
     *
     * @return The key, or &lt;code&gt;null&lt;/code&gt;.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not in the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index for a key, or -1 if the key is not recognised.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The index, or &lt;code&gt;-1&lt;/code&gt; if the key is unrecognised.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a value.
     *
     * @param item  the value index.
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; <name>item</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the data value associated with a key.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @throws UnknownKeyException if the key is not recognised.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the data value for a key and sends a {@link DatasetChangeEvent} to
     * all registered listeners.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the data value for a key and sends a {@link DatasetChangeEvent} to
     * all registered listeners.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Inserts a new value at the specified position in the dataset or, if
     * there is an existing item with the specified key, updates the value 
     * for that item and moves it to the specified position.  After the change
     * is made, this methods sends a {@link DatasetChangeEvent} to all 
     * registered listeners.
     * 
     * @param position  the position (in the range 0 to getItemCount()).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>insertValue</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Inserts a new value at the specified position in the dataset or, if
     * there is an existing item with the specified key, updates the value 
     * for that item and moves it to the specified position.  After the change
     * is made, this methods sends a {@link DatasetChangeEvent} to all 
     * registered listeners.
     * 
     * @param position  the position (in the range 0 to getItemCount()).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>insertValue</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all data from this dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners (unless the dataset was already empty).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sorts the dataset's items by key and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     * 
     * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sortByKeys</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>sortByKeys</name></name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sorts the dataset's items by value and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     * 
     * @param order  the sort order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sortByValues</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>sortByValues</name></name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests if this object is equal to another.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PieDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PieDataset</name></type> <name>that</name> =<init> <expr>(<name>PieDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>that</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call> != <name>count</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k1</name> =<init> <expr><call><name>getKey</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k2</name> =<init> <expr><call><name><name>that</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>k1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>Number</name></type> <name>v1</name> =<init> <expr><call><name>getValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>v2</name> =<init> <expr><call><name><name>that</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>v1</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>v2</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr>!<call><name><name>v1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the dataset.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException This class will not throw this 
     *         exception, but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultPieDataset</name></type> <name>clone</name> =<init> <expr>(<name>DefaultPieDataset</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>DefaultKeyedValues</name>) <call><name><name>this</name>.<name>data</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>    
    }</block></function>
    
}</block></class>
</unit>
