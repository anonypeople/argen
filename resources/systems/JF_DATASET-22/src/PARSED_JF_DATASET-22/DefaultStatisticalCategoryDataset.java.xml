<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\DefaultStatisticalCategoryDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------------------
 * DefaultStatisticalCategoryDataset.java
 * --------------------------------------
 * (C) Copyright 2002-2007, by Pascal Collet and Contributors.
 *
 * Original Author:  Pascal Collet;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 21-Aug-2002 : Version 1, contributed by Pascal Collet (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 05-Feb-2003 : Revised implementation to use KeyedObjects2D (DG);
 * 28-Aug-2003 : Moved from org.jfree.data --&gt; org.jfree.data.statistics (DG);
 * 06-Oct-2003 : Removed incorrect Javadoc text (DG);
 * 18-Nov-2004 : Updated for changes in RangeInfo interface (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 * 01-Feb-2005 : Changed minimumRangeValue and maximumRangeValue from Double
 *               to double (DG);
 * 05-Feb-2005 : Implemented equals() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 08-Aug-2006 : Reworked implementation of RangeInfo methods (DG);
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 28-Sep-2007 : Fixed cloning bug (DG);
 * 02-Oct-2007 : Fixed bug updating cached range values (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>KeyedObjects2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>RangeInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>AbstractDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A convenience class that provides a default implementation of the
 * {@link StatisticalCategoryDataset} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultStatisticalCategoryDataset</name> <super><extends>extends <name>AbstractDataset</name></extends>
        <implements>implements <name>StatisticalCategoryDataset</name>, <name>RangeInfo</name>, <name>PublicCloneable</name></implements></super> <block>{

    <comment type="javadoc">/** Storage for the data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>KeyedObjects2D</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minimumRangeValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The row index for the minimum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The column index for the minimum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueColumn</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minimum range value including the standard deviation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minimumRangeValueIncStdDev</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The row index for the minimum range value (including the standard 
     * deviation). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueIncStdDevRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The column index for the minimum range value (including the standard 
     * deviation). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueIncStdDevColumn</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maximumRangeValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The row index for the maximum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The column index for the maximum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueColumn</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum range value including the standard deviation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maximumRangeValueIncStdDev</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The row index for the maximum range value (including the standard 
     * deviation). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueIncStdDevRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The column index for the maximum range value (including the standard 
     * deviation). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueIncStdDevColumn</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultStatisticalCategoryDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>KeyedObjects2D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name> = -1</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the mean value for an item.
     *
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The mean value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMeanValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>masd</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) 
                <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>masd</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>masd</name>.<name>getMean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for an item (for this dataset, the mean value is
     * returned).
     *
     * @param row  the row index.
     * @param column  the column index.
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMeanValue</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for an item (for this dataset, the mean value is
     * returned).
     *
     * @param rowKey  the row key.
     * @param columnKey  the columnKey.
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMeanValue</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the mean value for an item.
     *
     * @param rowKey  the row key.
     * @param columnKey  the columnKey.
     *
     * @return The mean value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMeanValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>masd</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) 
                <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>masd</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>masd</name>.<name>getMean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the standard deviation value for an item.
     *
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The standard deviation (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStdDevValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>masd</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) 
                <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>masd</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>masd</name>.<name>getStandardDeviation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the standard deviation value for an item.
     *
     * @param rowKey  the row key.
     * @param columnKey  the columnKey.
     *
     * @return The standard deviation (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStdDevValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>masd</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) 
                <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>masd</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>masd</name>.<name>getStandardDeviation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column index for a given key.
     *
     * @param key  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The column index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer null argument check</comment>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a column key.
     *
     * @param column  the column index (zero-based).
     *
     * @return The column key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getColumnKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column keys.
     *
     * @return The keys.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getColumnKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row index for a given key.
     *
     * @param key  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The row index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer null argument check</comment>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a row key.
     *
     * @param row  the row index (zero-based).
     *
     * @return The row key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getRowKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row keys.
     *
     * @return The keys.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getRowKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of rows in the table.
     *
     * @return The row count.
     * 
     * @see #getColumnCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of columns in the table.
     *
     * @return The column count.
     * 
     * @see #getRowCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a mean and standard deviation to the table.
     *
     * @param mean  the mean.
     * @param standardDeviation  the standard deviation.
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>double</name></type> <name>mean</name></decl></param>, <param><decl><type><name>double</name></type> <name>standardDeviation</name></decl></param>,
                    <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mean</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>standardDeviation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a mean and standard deviation to the table.
     *
     * @param mean  the mean.
     * @param standardDeviation  the standard deviation.
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>mean</name></decl></param>, <param><decl><type><name>Number</name></type> <name>standardDeviation</name></decl></param>,
                    <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>item</name> =<init> <expr>new <call><name>MeanAndStandardDeviation</name><argument_list>(
                <argument><expr><name>mean</name></expr></argument>, <argument><expr><name>standardDeviation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>addObject</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>m</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>sd</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mean</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>m</name> = <call><name><name>mean</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>standardDeviation</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sd</name> = <call><name><name>standardDeviation</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        
        <comment type="line">// update cached range values</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>r</name> == <name><name>this</name>.<name>maximumRangeValueRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>maximumRangeValueColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>minimumRangeValueRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>minimumRangeValueColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name>)</expr>)</condition><then> <block>{
            
            <comment type="line">// iterate over all data items and update mins and maxes</comment>
            <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call> 
                        || <name>m</name> &gt; <name><name>this</name>.<name>maximumRangeValue</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>m</name> + <name>sd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call> 
                        || (<name>m</name> + <name>sd</name>) &gt; <name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name> = <name>m</name> + <name>sd</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>)</argument_list></call> 
                        || <name>m</name> &lt; <name><name>this</name>.<name>minimumRangeValue</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>m</name> - <name>sd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call> 
                        || (<name>m</name> - <name>sd</name>) &lt; <name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name> = <name>m</name> - <name>sd</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></else></if>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #add(double, double, Comparable, Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer null argument checks</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getRowIndex</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name>getColumnIndex</name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeObject</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// if this cell held a maximum and/or minimum value, we'll need to</comment>
        <comment type="line">// update the cached bounds...</comment>
        <if>if <condition>(<expr>(<name>r</name> == <name><name>this</name>.<name>maximumRangeValueRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>maximumRangeValueColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>minimumRangeValueRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>minimumRangeValueColumn</name></name>) || (<name>r</name> 
                == <name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> &amp;&amp; <name>c</name> 
                == <name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name>)</expr>)</condition><then> <block>{
            
            <comment type="line">// iterate over all data items and update mins and maxes</comment>
            <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> 
        
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>    


    <comment type="javadoc">/**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowIndex  the row index.
     * 
     * @see #removeColumn(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rowIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeRow</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeColumn(Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeRow</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnIndex  the column index.
     * 
     * @see #removeRow(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>int</name></type> <name>columnIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeColumn</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeRow(Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeColumn</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all data from the dataset and sends a {@link DatasetChangeEvent} 
     * to all registered listeners.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Iterate over all the data items and update the cached bound values.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateBounds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name> = -1</expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name>columnCount</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>m</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>sd</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>masd</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) 
                        <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>masd</name> == <name>null</name></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name>m</name> = <call><name><name>masd</name>.<name>getMeanValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sd</name> = <call><name><name>masd</name>.<name>getStandardDeviationValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    
                    <comment type="line">// update the max value</comment>
                    <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <if>if <condition>(<expr><name>m</name> &gt; <name><name>this</name>.<name>maximumRangeValue</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                    
                    <comment type="line">// update the min value</comment>
                    <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <if>if <condition>(<expr><name>m</name> &lt; <name><name>this</name>.<name>minimumRangeValue</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>m</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                    
                    <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// update the max value</comment>
                        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name> = <name>m</name> + <name>sd</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <if>if <condition>(<expr><name>m</name> + <name>sd</name> &gt; <name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name> = <name>m</name> + <name>sd</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></else></if>
                        
                        <comment type="line">// update the min value</comment>
                        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name> = <name>m</name> - <name>sd</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <if>if <condition>(<expr><name>m</name> - <name>sd</name> &lt; <name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name> = <name>m</name> - <name>sd</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevRow</name></name> = <name>r</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueIncStdDevColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></else></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The minimum value.
     * 
     * @see #getRangeUpperBound(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>includeInterval</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr>;</return>     
        }</block></else></if>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The maximum value.
     * 
     * @see #getRangeLowerBound(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>includeInterval</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr>;</return>     
        }</block></else></if>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's range.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getRangeBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>includeInterval</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call> 
                    &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Range</name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValueIncStdDev</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>maximumRangeValueIncStdDev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>)</argument_list></call> 
                    &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Range</name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultStatisticalCategoryDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultStatisticalCategoryDataset</name></type> <name>that</name> 
                =<init> <expr>(<name>DefaultStatisticalCategoryDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this dataset.
     * 
     * @return A clone of this dataset.
     * 
     * @throws CloneNotSupportedException if cloning cannot be completed.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultStatisticalCategoryDataset</name></type> <name>clone</name> 
                =<init> <expr>(<name>DefaultStatisticalCategoryDataset</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>KeyedObjects2D</name>) <call><name><name>this</name>.<name>data</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
