<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\DefaultWindDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * DefaultWindDataset.java
 * -----------------------
 * (C) Copyright 2001-2007, by Achilleus Mantzios and Contributors.
 *
 * Original Author:  Achilleus Mantzios;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 06-Feb-2002 : Version 1, based on code contributed by Achilleus 
 *               Mantzios (DG);
 * 05-May-2004 : Now extends AbstractXYDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * A default implementation of the {@link WindDataset} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultWindDataset</name> <super><extends>extends <name>AbstractXYDataset</name></extends> 
                                <implements>implements <name>WindDataset</name></implements></super> <block>{

    <comment type="javadoc">/** The keys for the series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>seriesKeys</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the series data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>allSeriesData</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new, empty, dataset.  Since there are currently no methods
     * to add data to an existing dataset, you should probably use a different
     * constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultWindDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>allSeriesData</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a dataset based on the specified data array.
     *
     * @param data  the data (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws NullPointerException if &lt;code&gt;data&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultWindDataset</name><parameter_list>(<param><decl><type><name><name>Object</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name>seriesNameListFromDataArray</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a dataset based on the specified data array.
     *
     * @param seriesNames  the names of the series (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     * @param data  the wind data.
     * 
     * @throws NullPointerException if &lt;code&gt;seriesNames&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultWindDataset</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>seriesNames</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>seriesNames</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a dataset based on the specified data array.  The array
     * can contain multiple series, each series can contain multiple items,
     * and each item is as follows:
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;data[series][item][0]&lt;/code&gt; - the date (either a 
     *   &lt;code&gt;Date&lt;/code&gt; or a &lt;code&gt;Number&lt;/code&gt; that is the milliseconds 
     *   since 1-Jan-1970);&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;data[series][item][1]&lt;/code&gt; - the wind direction (1 - 12, 
     *   like the numbers on a clock face);&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;data[series][item][2]&lt;/code&gt; - the wind force (1 - 12 on the
     *   Beaufort scale)&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param seriesKeys  the names of the series (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     * @param data  the wind dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;seriesKeys&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * @throws IllegalArgumentException if the number of series keys does not
     *     match the number of series in the array.
     * @throws NullPointerException if &lt;code&gt;data&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultWindDataset</name><parameter_list>(<param><decl><type><name>List</name></type> <name>seriesKeys</name></decl></param>, <param><decl><type><name><name>Object</name><index>[]</index><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>seriesKeys</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'seriesKeys' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>seriesKeys</name>.<name>size</name></name><argument_list>()</argument_list></call> != <name><name>data</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The number of series keys does "
                    + "not match the number of series in the data array."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>seriesKeys</name></name> = <name>seriesKeys</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>allSeriesData</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name>seriesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>seriesIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>seriesIndex</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>seriesIndex</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>List</name></type> <name>oneSeriesData</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxItemCount</name> =<init> <expr><name><name>data</name><index>[<expr><name>seriesIndex</name></expr>]</index></name>.<name>length</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>itemIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>itemIndex</name> &lt; <name>maxItemCount</name></expr>;</condition> <incr><expr><name>itemIndex</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Object</name></type> <name>xObject</name> =<init> <expr><name><name>data</name><index>[<expr><name>seriesIndex</name></expr>]</index><index>[<expr><name>itemIndex</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>xObject</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Number</name></type> <name>xNumber</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>xObject</name> <name>instanceof</name> <name>Number</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>xNumber</name> = (<name>Number</name>) <name>xObject</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <if>if <condition>(<expr><name>xObject</name> <name>instanceof</name> <name>Date</name></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>Date</name></type> <name>xDate</name> =<init> <expr>(<name>Date</name>) <name>xObject</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>xNumber</name> = new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>xDate</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>xNumber</name> = new <call><name>Integer</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>
                    <decl_stmt><decl><type><name>Number</name></type> <name>windDir</name> =<init> <expr>(<name>Number</name>) <name><name>data</name><index>[<expr><name>seriesIndex</name></expr>]</index><index>[<expr><name>itemIndex</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Number</name></type> <name>windForce</name> =<init> <expr>(<name>Number</name>) <name><name>data</name><index>[<expr><name>seriesIndex</name></expr>]</index><index>[<expr><name>itemIndex</name></expr>]</index><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>oneSeriesData</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>WindDataItem</name><argument_list>(<argument><expr><name>xNumber</name></expr></argument>, <argument><expr><name>windDir</name></expr></argument>, 
                            <argument><expr><name>windForce</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>oneSeriesData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>allSeriesData</name>.<name>add</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>, <argument><expr><name>oneSeriesData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     * 
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>allSeriesData</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in a series.
     * 
     * @param series  the series (zero-based index).
     * 
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>series</name> &lt; 0 || <name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid series index: " 
                    + <name>series</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>List</name></type> <name>oneSeriesData</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>allSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>oneSeriesData</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     * 
     * @param series  the series (zero-based index).
     * 
     * @return The series key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>series</name> &lt; 0 || <name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid series index: " 
                    + <name>series</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>seriesKeys</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for one item within a series.  This should represent
     * a point in time, encoded as milliseconds in the same way as
     * java.util.Date.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The x-value for the item within the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>oneSeriesData</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>allSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WindDataItem</name></type> <name>windItem</name> =<init> <expr>(<name>WindDataItem</name>) <call><name><name>oneSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>windItem</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for one item within a series.  This maps to the
     * {@link #getWindForce(int, int)} method and is implemented because 
     * &lt;code&gt;WindDataset&lt;/code&gt; is an extension of {@link XYDataset}.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The y-value for the item within the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getWindForce</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wind direction for one item within a series.  This is a
     * number between 0 and 12, like the numbers on an upside-down clock face.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The wind direction for the item within the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getWindDirection</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>oneSeriesData</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>allSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WindDataItem</name></type> <name>windItem</name> =<init> <expr>(<name>WindDataItem</name>) <call><name><name>oneSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>windItem</name>.<name>getWindDirection</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wind force for one item within a series.  This is a number
     * between 0 and 12, as defined by the Beaufort scale.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The wind force for the item within the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getWindForce</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>oneSeriesData</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>allSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>WindDataItem</name></type> <name>windItem</name> =<init> <expr>(<name>WindDataItem</name>) <call><name><name>oneSeriesData</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>windItem</name>.<name>getWindForce</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Utility method for automatically generating series names.
     * 
     * @param data  the wind data (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return An array of &lt;i&gt;Series N&lt;/i&gt; with N = { 1 .. data.length }.
     * 
     * @throws NullPointerException if &lt;code&gt;data&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>List</name></type> <name>seriesNameListFromDataArray</name><parameter_list>(<param><decl><type><name><name>Object</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>seriesNameList</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name>seriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>seriesNameList</name>.<name>add</name></name><argument_list>(<argument><expr>"Series " + (<name>i</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>seriesNameList</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Checks this &lt;code&gt;WindDataset&lt;/code&gt; for equality with an arbitrary
     * object.  This method returns &lt;code&gt;true&lt;/code&gt; if and only if:
     * &lt;ul&gt;
     *   &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
     *   &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of 
     *       &lt;code&gt;DefaultWindDataset&lt;/code&gt;;&lt;/li&gt;
     *   &lt;li&gt;both datasets have the same number of series containing identical
     *       values.&lt;/li&gt;
     * &lt;ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultWindDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultWindDataset</name></type> <name>that</name> =<init> <expr>(<name>DefaultWindDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesKeys</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesKeys</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>allSeriesData</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>allSeriesData</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>

<comment type="javadoc">/**
 * A wind data item.
 */</comment>
<class>class <name>WindDataItem</name> <super><implements>implements <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** The x-value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>x</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The wind direction. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>windDir</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The wind force. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>windForce</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new wind data item.
     *
     * @param x  the x-value.
     * @param windDir  the direction.
     * @param windForce  the force.
     */</comment>
    <constructor><specifier>public</specifier> <name>WindDataItem</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>x</name></decl></param>, <param><decl><type><name>Number</name></type> <name>windDir</name></decl></param>, <param><decl><type><name>Number</name></type> <name>windForce</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>windDir</name></name> = <name>windDir</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>windForce</name></name> = <name>windForce</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the x-value.
     *
     * @return The x-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>x</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wind direction.
     *
     * @return The wind direction.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getWindDirection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>windDir</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wind force.
     *
     * @return The wind force.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getWindForce</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>windForce</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Compares this item to another object.
     *
     * @param object  the other object.
     *
     * @return An int that indicates the relative comparison.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> <name>instanceof</name> <name>WindDataItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>WindDataItem</name></type> <name>item</name> =<init> <expr>(<name>WindDataItem</name>) <name>object</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>this</name>.<name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>item</name>.<name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>1</expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>x</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>item</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>0</expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></else></if></else></if>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>ClassCastException</name><argument_list>(<argument><expr>"WindDataItem.compareTo(error)"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;WindDataItem&lt;/code&gt; for equality with an arbitrary
     * object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>WindDataItem</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>WindDataItem</name></type> <name>that</name> =<init> <expr>(<name>WindDataItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>x</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>windDir</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>windDir</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>windForce</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>windForce</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
