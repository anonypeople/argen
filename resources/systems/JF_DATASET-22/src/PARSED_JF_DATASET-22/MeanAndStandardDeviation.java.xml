<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\MeanAndStandardDeviation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------------
 * MeanAndStandardDeviation.java
 * -----------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 05-Feb-2002 : Version 1 (DG);
 * 05-Feb-2005 : Added equals() method and implemented Serializable (DG);
 * 02-Oct-2007 : Added getMeanValue() and getStandardDeviationValue() methods
 *               for convenience, and toString() method for debugging (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A simple data structure that holds a mean value and a standard deviation 
 * value.  This is used in the 
 * {@link org.jfree.data.statistics.DefaultStatisticalCategoryDataset} class.
 */</comment>
<class><specifier>public</specifier> class <name>MeanAndStandardDeviation</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7413468697315721515L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The mean. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>mean</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The standard deviation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>standardDeviation</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new mean and standard deviation record.
     * 
     * @param mean  the mean.
     * @param standardDeviation  the standard deviation.
     */</comment>
    <constructor><specifier>public</specifier> <name>MeanAndStandardDeviation</name><parameter_list>(<param><decl><type><name>double</name></type> <name>mean</name></decl></param>, <param><decl><type><name>double</name></type> <name>standardDeviation</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mean</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>standardDeviation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new mean and standard deviation record.
     *
     * @param mean  the mean (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param standardDeviation  the standard deviation (&lt;code&gt;null&lt;/code&gt;
     *                           permitted.
     */</comment>
    <constructor><specifier>public</specifier> <name>MeanAndStandardDeviation</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>mean</name></decl></param>, <param><decl><type><name>Number</name></type> <name>standardDeviation</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>mean</name></name> = <name>mean</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>standardDeviation</name></name> = <name>standardDeviation</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the mean.
     *
     * @return The mean.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMean</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>mean</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the mean as a double primitive.  If the underlying mean is
     * &lt;code&gt;null&lt;/code&gt;, this method will return &lt;code&gt;Double.NaN&lt;/code&gt;.
     * 
     * @return The mean.
     * 
     * @see #getMean()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMeanValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>mean</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>mean</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the standard deviation.
     *
     * @return The standard deviation.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStandardDeviation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>standardDeviation</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the standard deviation as a double primitive.  If the underlying
     * standard deviation is &lt;code&gt;null&lt;/code&gt;, this method will return 
     * &lt;code&gt;Double.NaN&lt;/code&gt;.
     * 
     * @return The standard deviation.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStandardDeviationValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>standardDeviation</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>standardDeviation</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MeanAndStandardDeviation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>MeanAndStandardDeviation</name></type> <name>that</name> =<init> <expr>(<name>MeanAndStandardDeviation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>mean</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>mean</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>standardDeviation</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>standardDeviation</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representing this instance.
     * 
     * @return A string.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"[" + <name><name>this</name>.<name>mean</name></name> + ", " + <name><name>this</name>.<name>standardDeviation</name></name> + "]"</expr>;</return>
    }</block></function>

}</block></class>
</unit>
