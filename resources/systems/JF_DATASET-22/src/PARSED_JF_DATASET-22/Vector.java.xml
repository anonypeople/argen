<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\Vector.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------
 * Vector.java
 * -----------
 * (C) Copyright 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 30-Jan-2007 : Version 1 (DG);
 * 24-May-2007 : Added getLength() and getAngle() methods, thanks to 
 *               matinh (DG);
 * 25-May-2007 : Moved from experimental to the main source tree (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * A vector.
 * 
 * @since 1.0.6
 */</comment>
<class><specifier>public</specifier> class <name>Vector</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** The vector x. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>x</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The vector y. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>y</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Creates a new instance of &lt;code&gt;Vector&lt;/code&gt;.
     *
     * @param x  the x-component.
     * @param y  the y-component.  
     */</comment>
    <constructor><specifier>public</specifier> <name>Vector</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the x-value.
     * 
     * @return The x-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>x</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-value.
     * 
     * @return The y-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>y</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length of the vector.
     * 
     * @return The vector length.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Math</name>.<name>sqrt</name></name><argument_list>(<argument><expr>(<name><name>this</name>.<name>x</name></name> * <name><name>this</name>.<name>x</name></name>) + (<name><name>this</name>.<name>y</name></name> * <name><name>this</name>.<name>y</name></name>)</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
 
    <comment type="javadoc">/**
     * Returns the angle of the vector.
     * 
     * @return The angle of the vector.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Math</name>.<name>atan2</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>y</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this vector for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Vector</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Vector</name></type> <name>that</name> =<init> <expr>(<name>Vector</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>x</name></name> != <name><name>that</name>.<name>x</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>y</name></name> != <name><name>that</name>.<name>y</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
