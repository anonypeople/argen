<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-22\src\XYSeriesCollection.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * XYSeriesCollection.java
 * -----------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Aaron Metzger;
 *
 * Changes
 * -------
 * 15-Nov-2001 : Version 1 (DG);
 * 03-Apr-2002 : Added change listener code (DG);
 * 29-Apr-2002 : Added removeSeries, removeAllSeries methods (ARM);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 04-Aug-2003 : Added getSeries() method (DG);
 * 31-Mar-2004 : Modified to use an XYIntervalDelegate.
 * 05-May-2004 : Now extends AbstractIntervalXYDataset (DG);
 * 18-Aug-2004 : Moved from org.jfree.data --&gt; org.jfree.data.xy (DG);
 * 17-Nov-2004 : Updated for changes to DomainInfo interface (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);
 * 28-Mar-2005 : Fixed bug in getSeries(int) method (1170825) (DG);
 * 05-Oct-2005 : Made the interval delegate a dataset listener (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 27-Nov-2006 : Added clone() override (DG);
 * 08-May-2007 : Added indexOf(XYSeries) method (DG);
 * 03-Dec-2007 : Added getSeries(Comparable) method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>UnknownKeyException</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents a collection of {@link XYSeries} objects that can be used as a 
 * dataset.
 */</comment>
<class><specifier>public</specifier> class <name>XYSeriesCollection</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends>
                                <implements>implements <name>IntervalXYDataset</name>, <name>DomainInfo</name>, 
                                           <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7590013825931496766L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The series that are included in the collection. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The interval delegate (used to calculate the start and end x-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IntervalXYDelegate</name></type> <name>intervalDelegate</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs an empty dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYSeriesCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a dataset and populates it with a single series.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; ignored).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYSeriesCollection</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>intervalDelegate</name></name> = new <call><name>IntervalXYDelegate</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addChangeListener</name><argument_list>(<argument><expr><name><name>this</name>.<name>intervalDelegate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>series</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Adds a series to the collection and sends a {@link DatasetChangeEvent} 
     * to all registered listeners.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Series index out of bounds."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// fetch the series, remove the change listener, then remove the series.</comment>
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>ts</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ts</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>contains</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Removes all the series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAllSeries</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Unregister the collection as a change listener to each series in </comment>
        <comment type="line">// the collection.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
          <decl_stmt><decl><type><name>XYSeries</name></type> <name>series</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Remove all the series from the collection and notify listeners.</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of series in the collection.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of all the series in the collection.  
     * 
     * @return The list (which is unmodifiable).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getSeries</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the specified series, or -1 if that series is not
     * present in the dataset.
     * 
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The series index.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a series from the collection.
     *
     * @param series  the series index (zero-based).
     *
     * @return The series.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;series&lt;/code&gt; is not in the
     *     range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYSeries</name></type> <name>getSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Series index out of bounds"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a series from the collection.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The series with the specified key.
     * 
     * @throws UnknownKeyException if &lt;code&gt;key&lt;/code&gt; is not found in the
     *         collection.
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>XYSeries</name></type> <name>getSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYSeries</name></type> <name>series</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>series</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>series</name></expr>;</return>
            }</block></then></if>
        }</block></while>
        <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"Key not found: " + <name>key</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     *
     * @return The key for a series.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;series&lt;/code&gt; is not in the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking</comment>
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The item count.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;series&lt;/code&gt; is not in the
     *     range &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking</comment>
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>ts</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataItem</name></type> <name>xyItem</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>xyItem</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting X value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getStartX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending X value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getEndX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param index  the index of the item of interest (zero-based).
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYSeries</name></type> <name>ts</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataItem</name></type> <name>xyItem</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>xyItem</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting Y value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending Y value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this collection for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <comment type="block">/* 
         * XXX
         *  
         * what about  the interval delegate...?
         * The interval width etc wasn't considered
         * before, hence i did not add it here (AS)
         * 
         */</comment>

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYSeriesCollection</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYSeriesCollection</name></type> <name>that</name> =<init> <expr>(<name>XYSeriesCollection</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYSeriesCollection</name></type> <name>clone</name> =<init> <expr>(<name>XYSeriesCollection</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>List</name>) <call><name><name>ObjectUtilities</name>.<name>deepClone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>intervalDelegate</name></name> 
                = (<name>IntervalXYDelegate</name>) <call><name><name>this</name>.<name>intervalDelegate</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Same question as for equals (AS)</comment>
        <return>return <expr>(<name><name>this</name>.<name>data</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>data</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</return>
    }</block></function>
       
    <comment type="javadoc">/**
     * Returns the minimum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainLowerBound</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainUpperBound</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's domain.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDomainBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>includeInterval</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainBounds</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>iterateDomainBounds</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
            
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the interval width. This is used to calculate the start and end 
     * x-values, if/when the dataset is used as an {@link IntervalXYDataset}.  
     * 
     * @return The interval width.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getIntervalWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the interval width and sends a {@link DatasetChangeEvent} to all 
     * registered listeners.
     * 
     * @param width  the width (negative values not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIntervalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>width</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'width' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setFixedIntervalWidth</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the interval position factor.  
     * 
     * @return The interval position factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalPositionFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getIntervalPositionFactor</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the interval position factor. This controls where the x-value is in
     * relation to the interval surrounding the x-value (0.0 means the x-value 
     * will be positioned at the start, 0.5 in the middle, and 1.0 at the end).
     * 
     * @param factor  the factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIntervalPositionFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setIntervalPositionFactor</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns whether the interval width is automatically calculated or not.
     * 
     * @return Whether the width is automatically calculated or not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>isAutoWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates wether the interval width is automatically
     * calculated or not. 
     * 
     * @param b  a boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidth</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setAutoWidth</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
