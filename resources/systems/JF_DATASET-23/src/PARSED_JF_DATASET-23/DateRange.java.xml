<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\DateRange.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * DateRange.java
 * --------------
 * (C) Copyright 2002-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Bill Kelemen;
 *
 * Changes
 * -------
 * 22-Apr-2002 : Version 1 based on code by Bill Kelemen (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 23-Sep-2003 : Minor Javadoc update (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>

<comment type="javadoc">/**
 * A range specified in terms of two &lt;code&gt;java.util.Date&lt;/code&gt; objects.  
 * Instances of this class are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>DateRange</name> <super><extends>extends <name>Range</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4705682568375418157L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The lower bound for the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>lowerDate</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The upper bound for the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>upperDate</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>DateRange</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new range.
     *
     * @param lower  the lower bound (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param upper  the upper bound (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DateRange</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>lower</name></decl></param>, <param><decl><type><name>Date</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>lower</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>upper</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lowerDate</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperDate</name></name> = <name>upper</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new range using two values that will be interpreted as 
     * "milliseconds since midnight GMT, 1-Jan-1970".
     *
     * @param lower  the lower (oldest) date.
     * @param upper  the upper (most recent) date.
     */</comment>
    <constructor><specifier>public</specifier> <name>DateRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>, <param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lowerDate</name></name> = new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperDate</name></name> = new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new range that is based on another {@link Range}.  The 
     * other range does not have to be a {@link DateRange}.  If it is not, the 
     * upper and lower bounds are evaluated as milliseconds since midnight 
     * GMT, 1-Jan-1970.
     *
     * @param other  the other range (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DateRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>other</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>other</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the lower (earlier) date for the range.
     *
     * @return The lower date for the range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getLowerDate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerDate</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper (later) date for the range.
     *
     * @return The upper date for the range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getUpperDate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperDate</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representing the date range (useful for debugging).
     * 
     * @return A string representing the date range.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr><call><name><name>DateFormat</name>.<name>getDateTimeInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>"[" + <call><name><name>df</name>.<name>format</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lowerDate</name></name></expr></argument>)</argument_list></call> + " --&gt; " 
            + <call><name><name>df</name>.<name>format</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upperDate</name></name></expr></argument>)</argument_list></call> + "]"</expr>;</return>
    }</block></function>

}</block></class>
</unit>
