<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\Month.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------
 * Month.java
 * ----------
 * (C) Copyright 2001-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Chris Boek;
 *
 * Changes
 * -------
 * 11-Oct-2001 : Version 1 (DG);
 * 14-Nov-2001 : Added method to get year as primitive (DG);
 *               Override for toString() method (DG);
 * 18-Dec-2001 : Changed order of parameters in constructor (DG);
 * 19-Dec-2001 : Added a new constructor as suggested by Paul English (DG);
 * 29-Jan-2002 : Worked on the parseMonth() method (DG);
 * 14-Feb-2002 : Fixed bugs in the Month constructors (DG);
 * 26-Feb-2002 : Changed getStart(), getMiddle() and getEnd() methods to 
 *               evaluate with reference to a particular time zone (DG);
 * 19-Mar-2002 : Changed API for TimePeriod classes (DG);
 * 10-Sep-2002 : Added getSerialIndex() method (DG);
 * 04-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 10-Jan-2003 : Changed base class and method names (DG);
 * 13-Mar-2003 : Moved to com.jrefinery.data.time package, and implemented 
 *               Serializable (DG);
 * 21-Oct-2003 : Added hashCode() method (DG);
 * 01-Nov-2005 : Fixed bug 1345383 (argument check in constructor) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Oct-2006 : Updated API docs (DG);
 * 06-Oct-2006 : Refactored to cache first and last millisecond values (DG);
 * 04-Apr-2007 : Fixed bug in Month(Date, TimeZone) constructor (CB);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>date</name>.<name>MonthConstants</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>date</name>.<name>SerialDate</name></name>;</import>

<comment type="javadoc">/**
 * Represents a single month.  This class is immutable, which is a requirement
 * for all {@link RegularTimePeriod} subclasses.
 */</comment>
<class><specifier>public</specifier> class <name>Month</name> <super><extends>extends <name>RegularTimePeriod</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5090216912548722570L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The month (1-12). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>month</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The year in which the month falls. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>year</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The first millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>firstMillisecond</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The last millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastMillisecond</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new Month, based on the current system time.
     */</comment>
    <constructor><specifier>public</specifier> <name>Month</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new month instance.
     *
     * @param month  the month (in the range 1 to 12).
     * @param year  the year.
     */</comment>
    <constructor><specifier>public</specifier> <name>Month</name><parameter_list>(<param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>month</name> &lt; 1) || (<name>month</name> &gt; 12)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Month outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>month</name></name> = <name>month</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = <name>year</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new month instance.
     *
     * @param month  the month (in the range 1 to 12).
     * @param year  the year.
     */</comment>
    <constructor><specifier>public</specifier> <name>Month</name><parameter_list>(<param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>Year</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>month</name> &lt; 1) || (<name>month</name> &gt; 12)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Month outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>month</name></name> = <name>month</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = <call><name><name>year</name>.<name>getYear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new &lt;code&gt;Month&lt;/code&gt; instance, based on a date/time and 
     * the default time zone.
     *
     * @param time  the date/time.
     */</comment>
    <constructor><specifier>public</specifier> <name>Month</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>RegularTimePeriod</name>.<name>DEFAULT_TIME_ZONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new &lt;code&gt;Month&lt;/code&gt; instance, based on a date/time and 
     * a time zone.  The first and last millisecond values are initially
     * pegged to the given time zone also.
     *
     * @param time  the date/time.
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>Month</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>month</name></name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the year in which the month falls.
     *
     * @return The year in which the month falls (as a Year object).
     */</comment>
    <function><type><specifier>public</specifier> <name>Year</name></type> <name>getYear</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Year</name><argument_list>(<argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the year in which the month falls.
     *
     * @return The year in which the month falls (as an int).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getYearValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>year</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the month.  Note that 1=JAN, 2=FEB, ...
     *
     * @return The month.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMonth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>month</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the month.  This will be determined 
     * relative to the time zone specified in the constructor, or in the 
     * calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The first millisecond of the month.
     * 
     * @see #getLastMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstMillisecond</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the month.  This will be 
     * determined relative to the time zone specified in the constructor, or
     * in the calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The last millisecond of the month.
     * 
     * @see #getFirstMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lastMillisecond</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Recalculates the start date/time and end date/time for this time period 
     * relative to the supplied calendar (which incorporates a time zone).
     * 
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>peg</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>firstMillisecond</name></name> = <call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lastMillisecond</name></name> = <call><name>getLastMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the month preceding this one.
     *
     * @return The month preceding this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Month</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>month</name></name> != <name><name>MonthConstants</name>.<name>JANUARY</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name><name>this</name>.<name>month</name></name> - 1</expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>year</name></name> &gt; 1900</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name>.<name>DECEMBER</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the month following this one.
     *
     * @return The month following this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Month</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>month</name></name> != <name><name>MonthConstants</name>.<name>DECEMBER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name><name>this</name>.<name>month</name></name> + 1</expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>year</name></name> &lt; 9999</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name><name>MonthConstants</name>.<name>JANUARY</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a serial index number for the month.
     *
     * @return The serial index number.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSerialIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>year</name></name> * 12L + <name><name>this</name>.<name>month</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string representing the month (e.g. "January 2002").
     * &lt;P&gt;
     * To do: look at internationalisation.
     *
     * @return A string representing the month.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>SerialDate</name>.<name>monthCodeToString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>month</name></name></expr></argument>)</argument_list></call> + " " + <name><name>this</name>.<name>year</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the equality of this Month object to an arbitrary object.
     * Returns true if the target is a Month instance representing the same
     * month as this object.  In all other cases, returns false.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; if month and year of this and object are the 
     *         same.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>Month</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Month</name></type> <name>target</name> =<init> <expr>(<name>Month</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
                <return>return <expr>(<name><name>this</name>.<name>month</name></name> == <call><name><name>target</name>.<name>getMonth</name></name><argument_list>()</argument_list></call> 
                        &amp;&amp; (<name><name>this</name>.<name>year</name></name> == <call><name><name>target</name>.<name>getYearValue</name></name><argument_list>()</argument_list></call>))</expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr>false</expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr>false</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object instance.  The approach described by
     * Joshua Bloch in "Effective Java" has been used here:
     * &lt;p&gt;
     * &lt;code&gt;http://developer.java.sun.com/developer/Books/effectivejava
     * /Chapter3.pdf&lt;/code&gt;
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>17</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>month</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>year</name></name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this Month object relative to
     * the specified
     * object: negative == before, zero == same, positive == after.
     *
     * @param o1  the object to compare.
     *
     * @return negative == before, zero == same, positive == after.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another Month object</comment>
        <comment type="line">// --------------------------------------------</comment>
        <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>Month</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Month</name></type> <name>m</name> =<init> <expr>(<name>Month</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>year</name></name> - <call><name><name>m</name>.<name>getYearValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>result</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>month</name></name> - <call><name><name>m</name>.<name>getMonth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to another TimePeriod object</comment>
        <comment type="line">// -----------------------------------------------</comment>
        <else>else <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>RegularTimePeriod</name></expr>)</condition><then> <block>{
            <comment type="line">// more difficult case - evaluate later...</comment>
            <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
        }</block></then>

        <comment type="line">// CASE 3 : Comparing to a non-TimePeriod object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the month, evaluated using the supplied
     * calendar (which determines the time zone).
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The first millisecond of the month.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>month</name></name> - 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// in the following line, we'd rather call calendar.getTimeInMillis()</comment>
        <comment type="line">// to avoid object creation, but that isn't supported in Java 1.3.1</comment>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the month, evaluated using the supplied
     * calendar (which determines the time zone).
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The last millisecond of the month.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>eom</name> =<init> <expr><call><name><name>SerialDate</name>.<name>lastDayOfMonth</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>month</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>month</name></name> - 1</expr></argument>, <argument><expr><name>eom</name></expr></argument>, <argument><expr>23</expr></argument>, <argument><expr>59</expr></argument>, <argument><expr>59</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>999</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// in the following line, we'd rather call calendar.getTimeInMillis()</comment>
        <comment type="line">// to avoid object creation, but that isn't supported in Java 1.3.1</comment>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Parses the string argument as a month.
     * &lt;P&gt;
     * This method is required to accept the format "YYYY-MM".  It will also
     * accept "MM-YYYY". Anything else, at the moment, is a bonus.
     *
     * @param s  the string to parse.
     *
     * @return &lt;code&gt;null&lt;/code&gt; if the string is not parseable, the month 
     *         otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Month</name></type> <name>parseMonth</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Month</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{

            <comment type="line">// trim whitespace from either end of the string</comment>
            <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>Month</name>.<name>findSeparator</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> != -1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>s1</name> =<init> <expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s2</name> =<init> <expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Year</name></type> <name>year</name> =<init> <expr><call><name><name>Month</name>.<name>evaluateAsYear</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>month</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>year</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>month</name> = <call><name><name>SerialDate</name>.<name>stringToMonthCode</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>month</name> == -1</expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                            <argument><expr>"Can't evaluate the month."</expr></argument>
                        )</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name>month</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>year</name> = <call><name><name>Month</name>.<name>evaluateAsYear</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>year</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>month</name> = <call><name><name>SerialDate</name>.<name>stringToMonthCode</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>month</name> == -1</expr>)</condition><then> <block>{
                            <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                                <argument><expr>"Can't evaluate the month."</expr></argument>
                            )</argument_list></call></expr>;</throw>
                        }</block></then></if>
                        <expr_stmt><expr><name>result</name> = new <call><name>Month</name><argument_list>(<argument><expr><name>month</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                            <argument><expr>"Can't evaluate the year."</expr></argument>
                        )</argument_list></call></expr>;</throw>
                    }</block></else></if>
                }</block></else></if>

            }</block></then>
            <else>else <block>{
                <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                    <argument><expr>"Could not find separator."</expr></argument>
                )</argument_list></call></expr>;</throw>
            }</block></else></if>

        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Finds the first occurrence of ' ', '-', ',' or '.'
     *
     * @param s  the string to parse.
     * 
     * @return &lt;code&gt;-1&lt;/code&gt; if none of the characters where found, the
     *      position of the first occurence otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>findSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a year from a string, or returns null (format exceptions 
     * suppressed).
     *
     * @param s  the string to parse.
     *
     * @return &lt;code&gt;null&lt;/code&gt; if the string is not parseable, the year 
     *         otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Year</name></type> <name>evaluateAsYear</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Year</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Year</name>.<name>parseYear</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>TimePeriodFormatException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// suppress</comment>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

}</block></class>
</unit>
