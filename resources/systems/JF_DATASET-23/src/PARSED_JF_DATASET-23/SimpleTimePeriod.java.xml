<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\SimpleTimePeriod.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * SimpleTimePeriod.java
 * ---------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 07-Oct-2002 : Added Javadocs (DG);
 * 10-Jan-2003 : Renamed TimeAllocation --&gt; SimpleTimePeriod (DG);
 * 13-Mar-2003 : Added equals() method, and Serializable interface (DG);
 * 21-Oct-2003 : Added hashCode() method (DG);
 * 27-Jan-2005 : Implemented Comparable, to enable this class to be used
 *               in the TimeTableXYDataset class (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<comment type="javadoc">/**
 * An arbitrary period of time, measured to millisecond precision using 
 * &lt;code&gt;java.util.Date&lt;/code&gt;.
 * &lt;p&gt;
 * This class is intentionally immutable (that is, once constructed, you cannot 
 * alter the start and end attributes).
 */</comment>
<class><specifier>public</specifier> class <name>SimpleTimePeriod</name> <super><implements>implements <name>TimePeriod</name>, <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8684672361131829554L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The start date/time. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>start</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The end date/time. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>end</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new time allocation.
     *
     * @param start  the start date/time in milliseconds.
     * @param end  the end date/time in milliseconds.
     */</comment>
    <constructor><specifier>public</specifier> <name>SimpleTimePeriod</name><parameter_list>(<param><decl><type><name>long</name></type> <name>start</name></decl></param>, <param><decl><type><name>long</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new time allocation.
     *
     * @param start  the start date/time (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param end  the end date/time (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>SimpleTimePeriod</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>start</name></decl></param>, <param><decl><type><name>Date</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>start</name>.<name>getTime</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>end</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires end &gt;= start."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>end</name></name> = <name>end</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the start date/time.
     *
     * @return The start date/time (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getStart</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>start</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the end date/time.
     *
     * @return The end date/time (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getEnd</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>end</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this time period instance for equality with an arbitrary object.  
     * The object is considered equal if it is an instance of {@link TimePeriod}
     * and it has the same start and end dates.
     *
     * @param obj  the other object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>TimePeriod</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>that</name> =<init> <expr>(<name>TimePeriod</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>start</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getStart</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>end</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an integer that indicates the relative ordering of two
     * time periods.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return An integer.
     * 
     * @throws ClassCastException if &lt;code&gt;obj&lt;/code&gt; is not an instance of
     *                            {@link TimePeriod}.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{        
        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>that</name> =<init> <expr>(<name>TimePeriod</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t0</name> =<init> <expr><call><name>getStart</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t1</name> =<init> <expr><call><name>getEnd</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>m0</name> =<init> <expr><name>t0</name> + (<name>t1</name> - <name>t0</name>) / 2L</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t2</name> =<init> <expr><call><name><name>that</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t3</name> =<init> <expr><call><name><name>that</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>m1</name> =<init> <expr><name>t2</name> + (<name>t3</name> - <name>t2</name>) / 2L</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>m0</name> &lt; <name>m1</name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>m0</name> &gt; <name>m1</name></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>   
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>t0</name> &lt; <name>t2</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>t0</name> &gt; <name>t2</name></expr>)</condition><then> <block>{
                <return>return <expr>1</expr>;</return>   
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>t1</name> &lt; <name>t3</name></expr>)</condition><then> <block>{
                    <return>return <expr>-1</expr>;</return>   
                }</block></then>
                <else>else <if>if <condition>(<expr><name>t1</name> &gt; <name>t3</name></expr>)</condition><then> <block>{
                    <return>return <expr>1</expr>;</return>   
                }</block></then>
                <else>else <block>{
                    <return>return <expr>0</expr>;</return>   
                }</block></else></if></else></if>
            }</block></else></if></else></if>
        }</block></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object instance.  The approach described by
     * Joshua Bloch in "Effective Java" has been used here - see:
     * &lt;p&gt;
     * &lt;code&gt;http://developer.java.sun.com/
     * developer/Books/effectivejava/Chapter3.pdf&lt;/code&gt;
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>17</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>start</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>end</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
