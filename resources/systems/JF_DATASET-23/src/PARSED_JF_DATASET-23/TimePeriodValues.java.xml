<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\TimePeriodValues.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * TimePeriodValues.java
 * ---------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 22-Apr-2003 : Version 1 (DG);
 * 30-Jul-2003 : Added clone and equals methods while testing (DG);
 * 11-Mar-2005 : Fixed bug in bounds recalculation - see bug report 
 *               1161329 (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 03-Oct-2006 : Fixed NullPointerException in equals(), fire change event in 
 *               add() method, updated API docs (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Series</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesException</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A structure containing zero, one or many {@link TimePeriodValue} instances.  
 * The time periods can overlap, and are maintained in the order that they are 
 * added to the collection.
 * &lt;p&gt;
 * This is similar to the {@link TimeSeries} class, except that the time 
 * periods can have irregular lengths.
 */</comment>
<class><specifier>public</specifier> class <name>TimePeriodValues</name> <super><extends>extends <name>Series</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2210593619794989709L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Default value for the domain description. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DOMAIN_DESCRIPTION</name> =<init> <expr>"Time"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default value for the range description. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_RANGE_DESCRIPTION</name> =<init> <expr>"Value"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A description of the domain. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>domain</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A description of the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>range</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The list of data pairs in the series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Index of the time period with the minimum start milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minStartIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Index of the time period with the maximum start milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxStartIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Index of the time period with the minimum middle milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minMiddleIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Index of the time period with the maximum middle milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxMiddleIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Index of the time period with the minimum end milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minEndIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Index of the time period with the maximum end milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxEndIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new (empty) collection of time period values.
     *
     * @param name  the name of the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimePeriodValues</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEFAULT_DOMAIN_DESCRIPTION</name></expr></argument>, <argument><expr><name>DEFAULT_RANGE_DESCRIPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new time series that contains no data.
     * &lt;P&gt;
     * Descriptions can be specified for the domain and range.  One situation
     * where this is helpful is when generating a chart for the time series -
     * axis labels can be taken from the domain and range description.
     *
     * @param name  the name of the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param domain  the domain description.
     * @param range  the range description.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimePeriodValues</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>domain</name></decl></param>, <param><decl><type><name>String</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domain</name></name> = <name>domain</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the domain description.
     *
     * @return The domain description (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getRangeDescription()
     * @see #setDomainDescription(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDomainDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domain</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain description and fires a property change event (with the
     * property name &lt;code&gt;Domain&lt;/code&gt; if the description changes).
     *
     * @param description  the new description (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainDescription()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>old</name> =<init> <expr><name><name>this</name>.<name>domain</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domain</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>firePropertyChange</name><argument_list>(<argument><expr>"Domain"</expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range description.
     *
     * @return The range description (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDomainDescription()
     * @see #setRangeDescription(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRangeDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>range</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range description and fires a property change event with the
     * name &lt;code&gt;Range&lt;/code&gt;.
     *
     * @param description  the new description (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeDescription()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>old</name> =<init> <expr><name><name>this</name>.<name>range</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>firePropertyChange</name><argument_list>(<argument><expr>"Range"</expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the series.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns one data item for the series.
     *
     * @param index  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount() - 1&lt;/code&gt;).
     *
     * @return One data item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriodValue</name></type> <name>getDataItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>TimePeriodValue</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the time period at the specified index.
     *
     * @param index  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount() - 1&lt;/code&gt;).
     *
     * @return The time period at the specified index.
     * 
     * @see #getDataItem(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriod</name></type> <name>getTimePeriod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value at the specified index.
     *
     * @param index  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount() - 1&lt;/code&gt;).
     *
     * @return The value at the specified index (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDataItem(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to
     * all registered listeners.
     *
     * @param item  the item (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TimePeriodValue</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>item</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null item not allowed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Update the index values for the maximum and minimum bounds.
     * 
     * @param period  the time period.
     * @param index  the index of the time period.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateBounds</name><parameter_list>(<param><decl><type><name>TimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>long</name></type> <name>start</name> =<init> <expr><call><name><name>period</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>end</name> =<init> <expr><call><name><name>period</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>middle</name> =<init> <expr><name>start</name> + ((<name>end</name> - <name>start</name>) / 2)</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>minStartIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>minStart</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minStartIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>
                .<call><name>getStart</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>start</name> &lt; <name>minStart</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minStartIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>minStartIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>maxStartIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>maxStart</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>maxStartIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>
                .<call><name>getStart</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>start</name> &gt; <name>maxStart</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maxStartIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>maxStartIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>minMiddleIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>s</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minMiddleIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>e</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minMiddleIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getEnd</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>minMiddle</name> =<init> <expr><name>s</name> + (<name>e</name> - <name>s</name>) / 2</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>middle</name> &lt; <name>minMiddle</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minMiddleIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>minMiddleIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>maxMiddleIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>s</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minMiddleIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>e</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minMiddleIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getEnd</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>maxMiddle</name> =<init> <expr><name>s</name> + (<name>e</name> - <name>s</name>) / 2</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>middle</name> &gt; <name>maxMiddle</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maxMiddleIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>maxMiddleIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>minEndIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>minEnd</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>minEndIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getEnd</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>end</name> &lt; <name>minEnd</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minEndIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>minEndIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
       
        <if>if <condition>(<expr><name><name>this</name>.<name>maxEndIndex</name></name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>maxEnd</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name><name>this</name>.<name>maxEndIndex</name></name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getEnd</name><argument_list>()</argument_list></call>
                .<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>end</name> &gt; <name>maxEnd</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maxEndIndex</name></name> = <name>index</name></expr>;</expr_stmt>           
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>maxEndIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Recalculates the bounds for the collection of items.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>recalculateBounds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minStartIndex</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minMiddleIndex</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minEndIndex</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxStartIndex</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxMiddleIndex</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxEndIndex</name></name> = -1</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>tpv</name> =<init> <expr>(<name>TimePeriodValue</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateBounds</name><argument_list>(<argument><expr><call><name><name>tpv</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
     * to all registered listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * 
     * @see #add(TimePeriod, Number)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>item</name> =<init> <expr>new <call><name>TimePeriodValue</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
     * to all registered listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>item</name> =<init> <expr>new <call><name>TimePeriodValue</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Updates (changes) the value of a data item and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     *
     * @param index  the index of the data item to update.
     * @param value  the new value (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deletes data from start until end index (end inclusive) and sends a
     * {@link SeriesChangeEvent} to all registered listeners.
     *
     * @param start  the index of the first period to delete.
     * @param end  the index of the last period to delete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= (<name>end</name> - <name>start</name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>recalculateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the series for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>TimePeriodValues</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>that</name> =<init> <expr>(<name>TimePeriodValues</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getDomainDescription</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>that</name>.<name>getDomainDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getRangeDescription</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>that</name>.<name>getRangeDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> != <call><name><name>that</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>getDataItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code value for the object.
     *
     * @return The hashcode
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name><name>this</name>.<name>domain</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>domain</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>range</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>range</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>this</name>.<name>data</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>minStartIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>maxStartIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>minMiddleIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>maxMiddleIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>minEndIndex</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>maxEndIndex</name></name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the collection.
     * &lt;P&gt;
     * Notes:
     * &lt;ul&gt;
     *   &lt;li&gt;no need to clone the domain and range descriptions, since String 
     *       object is immutable;&lt;/li&gt;
     *   &lt;li&gt;we pass over to the more general method createCopy(start, end).
     *   &lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return A clone of the time series.
     * 
     * @throws CloneNotSupportedException if there is a cloning problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>clone</name> =<init> <expr><call><name>createCopy</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name>getItemCount</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new instance by copying a subset of the data in this 
     * collection.
     *
     * @param start  the index of the first item to copy.
     * @param end  the index of the last item to copy.
     *
     * @return A copy of a subset of the items.
     * 
     * @throws CloneNotSupportedException if there is a cloning problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriodValues</name></type> <name>createCopy</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>copy</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>copy</name>.<name>data</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>index</name> &lt;= <name>end</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>item</name> =<init> <expr>(<name>TimePeriodValue</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>clone</name> =<init> <expr>(<name>TimePeriodValue</name>) <call><name><name>item</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>copy</name>.<name>add</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>SeriesException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Failed to add cloned item."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>copy</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the time period with the minimum start milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinStartIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minStartIndex</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the time period with the maximum start milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxStartIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxStartIndex</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the time period with the minimum middle 
     * milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinMiddleIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minMiddleIndex</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the time period with the maximum middle 
     * milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxMiddleIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxMiddleIndex</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the time period with the minimum end milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinEndIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minEndIndex</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the time period with the maximum end milliseconds.
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxEndIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxEndIndex</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
