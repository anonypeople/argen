<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\TimeSeries.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * TimeSeries.java
 * ---------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Bryan Scott;
 *                   Nick Guenther;
 *
 * Changes
 * -------
 * 11-Oct-2001 : Version 1 (DG);
 * 14-Nov-2001 : Added listener mechanism (DG);
 * 15-Nov-2001 : Updated argument checking and exceptions in add() method (DG);
 * 29-Nov-2001 : Added properties to describe the domain and range (DG);
 * 07-Dec-2001 : Renamed TimeSeries --&gt; BasicTimeSeries (DG);
 * 01-Mar-2002 : Updated import statements (DG);
 * 28-Mar-2002 : Added a method add(TimePeriod, double) (DG);
 * 27-Aug-2002 : Changed return type of delete method to void (DG);
 * 04-Oct-2002 : Added itemCount and historyCount attributes, fixed errors 
 *               reported by Checkstyle (DG);
 * 29-Oct-2002 : Added series change notification to addOrUpdate() method (DG);
 * 28-Jan-2003 : Changed name back to TimeSeries (DG);
 * 13-Mar-2003 : Moved to com.jrefinery.data.time package and implemented 
 *               Serializable (DG);
 * 01-May-2003 : Updated equals() method (see bug report 727575) (DG);
 * 14-Aug-2003 : Added ageHistoryCountItems method (copied existing code for 
 *               contents) made a method and added to addOrUpdate.  Made a 
 *               public method to enable ageing against a specified time 
 *               (eg now) as opposed to lastest time in series (BS);
 * 15-Oct-2003 : Added fix for setItemCount method - see bug report 804425.  
 *               Modified exception message in add() method to be more 
 *               informative (DG);
 * 13-Apr-2004 : Added clear() method (DG);
 * 21-May-2004 : Added an extra addOrUpdate() method (DG);
 * 15-Jun-2004 : Fixed NullPointerException in equals() method (DG);
 * 29-Nov-2004 : Fixed bug 1075255 (DG);
 * 17-Nov-2005 : Renamed historyCount --&gt; maximumItemAge (DG);
 * 28-Nov-2005 : Changed maximumItemAge from int to long (DG);
 * 01-Dec-2005 : New add methods accept notify flag (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 24-May-2006 : Improved error handling in createCopy() methods (DG);
 * 01-Sep-2006 : Fixed bugs in removeAgedItems() methods - see bug report 
 *               1550045 (DG);
 * 22-Mar-2007 : Simplified getDataItem(RegularTimePeriod) - see patch 1685500 
 *               by Nick Guenther (DG);
 * 31-Oct-2007 : Implemented faster hashCode() (DG);
 * 21-Nov-2007 : Fixed clone() method (bug 1832432) (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Method</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Series</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesException</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents a sequence of zero or more data items in the form (period, value).
 */</comment>
<class><specifier>public</specifier> class <name>TimeSeries</name> <super><extends>extends <name>Series</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5032960206869675528L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Default value for the domain description. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_DOMAIN_DESCRIPTION</name> =<init> <expr>"Time"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Default value for the range description. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_RANGE_DESCRIPTION</name> =<init> <expr>"Value"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A description of the domain. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>domain</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A description of the range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>range</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The type of period for the data. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>Class</name></type> <name>timePeriodClass</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The list of data items in the series. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum number of items for the series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumItemCount</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The maximum age of items for the series, specified as a number of
     * time periods. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>maximumItemAge</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new (empty) time series.  By default, a daily time series is 
     * created.  Use one of the other constructors if you require a different 
     * time period.
     *
     * @param name  the series name (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEFAULT_DOMAIN_DESCRIPTION</name></expr></argument>, <argument><expr><name>DEFAULT_RANGE_DESCRIPTION</name></expr></argument>, 
                <argument><expr><name><name>Day</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new (empty) time series with the specified name and class
     * of {@link RegularTimePeriod}.
     *
     * @param name  the series name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param timePeriodClass  the type of time period (&lt;code&gt;null&lt;/code&gt; not 
     *                         permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>name</name></decl></param>, <param><decl><type><name>Class</name></type> <name>timePeriodClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>DEFAULT_DOMAIN_DESCRIPTION</name></expr></argument>, <argument><expr><name>DEFAULT_RANGE_DESCRIPTION</name></expr></argument>, 
                <argument><expr><name>timePeriodClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new time series that contains no data.
     * &lt;P&gt;
     * Descriptions can be specified for the domain and range.  One situation
     * where this is helpful is when generating a chart for the time series -
     * axis labels can be taken from the domain and range description.
     *
     * @param name  the name of the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param domain  the domain description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param range  the range description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param timePeriodClass  the type of time period (&lt;code&gt;null&lt;/code&gt; not 
     *                         permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>name</name></decl></param>, <param><decl><type><name>String</name></type> <name>domain</name></decl></param>, <param><decl><type><name>String</name></type> <name>range</name></decl></param>, 
                      <param><decl><type><name>Class</name></type> <name>timePeriodClass</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domain</name></name> = <name>domain</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timePeriodClass</name></name> = <name>timePeriodClass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumItemCount</name></name> = <name><name>Integer</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumItemAge</name></name> = <name><name>Long</name>.<name>MAX_VALUE</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the domain description.
     *
     * @return The domain description (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainDescription(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDomainDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domain</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain description and sends a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; 
     * (with the property name &lt;code&gt;Domain&lt;/code&gt;) to all registered
     * property change listeners.
     *
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainDescription()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>old</name> =<init> <expr><name><name>this</name>.<name>domain</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domain</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>firePropertyChange</name><argument_list>(<argument><expr>"Domain"</expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range description.
     *
     * @return The range description (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeDescription(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getRangeDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>range</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range description and sends a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; 
     * (with the property name &lt;code&gt;Range&lt;/code&gt;) to all registered listeners.
     *
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeDescription()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeDescription</name><parameter_list>(<param><decl><type><name>String</name></type> <name>description</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>old</name> =<init> <expr><name><name>this</name>.<name>range</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>firePropertyChange</name><argument_list>(<argument><expr>"Range"</expr></argument>, <argument><expr><name>old</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the series.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of data items for the series (the list contains 
     * {@link TimeSeriesDataItem} objects and is unmodifiable).
     *
     * @return The list of data items.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum number of items that will be retained in the series.
     * The default value is &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
     *
     * @return The maximum item count.
     * 
     * @see #setMaximumItemCount(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumItemCount</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum number of items that will be retained in the series.  
     * If you add a new item to the series such that the number of items will 
     * exceed the maximum item count, then the FIRST element in the series is 
     * automatically removed, ensuring that the maximum item count is not 
     * exceeded.
     *
     * @param maximum  the maximum (requires &gt;= 0).
     * 
     * @see #getMaximumItemCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maximum</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>maximum</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'maximum' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>maximumItemCount</name></name> = <name>maximum</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> &gt; <name>maximum</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>count</name> - <name>maximum</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum item age (in time periods) for the series.
     *
     * @return The maximum item age.
     * 
     * @see #setMaximumItemAge(long)
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMaximumItemAge</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumItemAge</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of time units in the 'history' for the series.  This 
     * provides one mechanism for automatically dropping old data from the
     * time series. For example, if a series contains daily data, you might set
     * the history count to 30.  Then, when you add a new data item, all data
     * items more than 30 days older than the latest value are automatically 
     * dropped from the series.
     *
     * @param periods  the number of time periods.
     * 
     * @see #getMaximumItemAge()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumItemAge</name><parameter_list>(<param><decl><type><name>long</name></type> <name>periods</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>periods</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'periods' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>maximumItemAge</name></name> = <name>periods</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>removeAgedItems</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// remove old items and notify if necessary</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the time period class for this series.
     * &lt;p&gt;
     * Only one time period class can be used within a single series (enforced).
     * If you add a data item with a {@link Year} for the time period, then all
     * subsequent data items must also have a {@link Year} for the time period.
     *
     * @return The time period class (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getTimePeriodClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>timePeriodClass</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a data item for the series.
     *
     * @param index  the item index (zero-based).
     *
     * @return The data item.
     * 
     * @see #getDataItem(RegularTimePeriod)
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeriesDataItem</name></type> <name>getDataItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data item for a specific period.
     *
     * @param period  the period of interest (&lt;code&gt;null&lt;/code&gt; not allowed).
     *
     * @return The data item matching the specified period (or 
     *         &lt;code&gt;null&lt;/code&gt; if there is no match).
     *
     * @see #getDataItem(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeriesDataItem</name></type> <name>getDataItem</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the time period at the specified index.
     *
     * @param index  the index of the data item.
     *
     * @return The time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>getTimePeriod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a time period that would be the next in sequence on the end of
     * the time series.
     *
     * @return The next time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>getNextTimePeriod</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>last</name> =<init> <expr><call><name>getTimePeriod</name><argument_list>(<argument><expr><call><name>getItemCount</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>last</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of all the time periods in the time series.
     *
     * @return A collection of all the time periods.
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getTimePeriods</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getTimePeriod</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of time periods in the specified series, but not in
     * this series, and therefore unique to the specified series.
     *
     * @param series  the series to check against this one.
     *
     * @return The unique time periods.
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getTimePeriodsUniqueToOtherSeries</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>period</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the index for the item (if any) that corresponds to a time 
     * period.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>period</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'period' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if> 
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>dummy</name> =<init> <expr>new <call><name>TimeSeriesDataItem</name><argument_list>(
              <argument><expr><name>period</name></expr></argument>, <argument><expr><name><name>Integer</name>.<name>MIN_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value at the specified index.
     *
     * @param index  index of a value.
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call>.<call><name>getValue</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for a time period.  If there is no data item with the 
     * specified period, this method will return &lt;code&gt;null&lt;/code&gt;.
     *
     * @param period  time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr><call><name>getValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Adds a data item to the series and sends a 
     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param item  the (timeperiod, value) pair (&lt;code&gt;null&lt;/code&gt; not 
     *              permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
        
    <comment type="javadoc">/**
     * Adds a data item to the series and sends a 
     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param item  the (timeperiod, value) pair (&lt;code&gt;null&lt;/code&gt; not 
     *              permitted).
     * @param notify  notify listeners?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>item</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'item' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name><name>this</name>.<name>timePeriodClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuffer</name></type> <name>b</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"You are trying to add data where the time period class "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"is "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>", but the TimeSeries is expecting an instance of "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>timePeriodClass</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(<argument><expr><call><name><name>b</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// make the change (if it's not a duplicate time period)...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>added</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>added</name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>last</name> =<init> <expr><call><name>getTimePeriod</name><argument_list>(<argument><expr><call><name>getItemCount</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>added</name> = true</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr>-<name>index</name> - 1</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>added</name> = true</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <decl_stmt><decl><type><name>StringBuffer</name></type> <name>b</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"You are attempting to add an observation for "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"the time period "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>" but the series already contains an observation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>" for that time period. Duplicates are not "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>b</name>.<name>append</name></name><argument_list>(<argument><expr>"permitted.  Try using the addOrUpdate() method."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(<argument><expr><call><name><name>b</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
        <if>if <condition>(<expr><name>added</name></expr>)</condition><then> <block>{
            <comment type="line">// check if this addition will exceed the maximum item count...</comment>
            <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; <name><name>this</name>.<name>maximumItemCount</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>removeAgedItems</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// remove old items if necessary, but</comment>
                                     <comment type="line">// don't notify anyone, because that</comment>
                                     <comment type="line">// happens next anyway...</comment>
            <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
     * to all registered listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}
     * to all registered listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value.
     * @param notify  notify listeners?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr>new <call><name>TimeSeriesDataItem</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends 
     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new data item to the series and sends 
     * a {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr>new <call><name>TimeSeriesDataItem</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Updates (changes) the value for a time period.  Throws a 
     * {@link SeriesException} if the period does not exist.
     *
     * @param period  the period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>temp</name> =<init> <expr>new <call><name>TimeSeriesDataItem</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>pair</name> =<init> <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>pair</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(
                <argument><expr>"TimeSeries.update(TimePeriod, Number):  period does not exist."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Updates (changes) the value of a data item.
     *
     * @param index  the index of the data item.
     * @param value  the new value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds or updates data from one series to another.  Returns another series
     * containing the values that were overwritten.
     *
     * @param series  the series to merge with this.
     *
     * @return A series containing the values that were overwritten.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeries</name></type> <name>addAndOrUpdate</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>overwritten</name> =<init> <expr>new <call><name>TimeSeries</name><argument_list>(<argument><expr>"Overwritten values from: " 
                + <call><name>getKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>series</name>.<name>getTimePeriodClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr><call><name><name>series</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>oldItem</name> =<init> <expr><call><name>addOrUpdate</name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>item</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>oldItem</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>overwritten</name>.<name>add</name></name><argument_list>(<argument><expr><name>oldItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>overwritten</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds or updates an item in the times series and sends a 
     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param period  the time period to add/update (&lt;code&gt;null&lt;/code&gt; not 
     *                permitted).
     * @param value  the new value.
     *
     * @return A copy of the overwritten data item, or &lt;code&gt;null&lt;/code&gt; if no 
     *         item was overwritten.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeriesDataItem</name></type> <name>addOrUpdate</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, 
                                          <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>addOrUpdate</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds or updates an item in the times series and sends a 
     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     *
     * @param period  the time period to add/update (&lt;code&gt;null&lt;/code&gt; not 
     *                permitted).
     * @param value  the new value (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A copy of the overwritten data item, or &lt;code&gt;null&lt;/code&gt; if no 
     *         item was overwritten.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeriesDataItem</name></type> <name>addOrUpdate</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, 
                                          <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>period</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'period' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>overwritten</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>key</name> =<init> <expr>new <call><name>TimeSeriesDataItem</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>existing</name> 
                =<init> <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>overwritten</name> = (<name>TimeSeriesDataItem</name>) <call><name><name>existing</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>existing</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>removeAgedItems</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// remove old items if necessary, but</comment>
                                     <comment type="line">// don't notify anyone, because that</comment>
                                     <comment type="line">// happens next anyway...</comment>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr>-<name>index</name> - 1</expr></argument>, <argument><expr>new <call><name>TimeSeriesDataItem</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// check if this addition will exceed the maximum item count...</comment>
            <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; <name><name>this</name>.<name>maximumItemCount</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>removeAgedItems</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// remove old items if necessary, but</comment>
                                     <comment type="line">// don't notify anyone, because that</comment>
                                     <comment type="line">// happens next anyway...</comment>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>overwritten</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Age items in the series.  Ensure that the timespan from the youngest to 
     * the oldest record in the series does not exceed maximumItemAge time 
     * periods.  Oldest items will be removed if required.
     * 
     * @param notify  controls whether or not a {@link SeriesChangeEvent} is 
     *                sent to registered listeners IF any items are removed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAgedItems</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check if there are any values earlier than specified by the history </comment>
        <comment type="line">// count...</comment>
        <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>latest</name> =<init> <expr><call><name>getTimePeriod</name><argument_list>(<argument><expr><call><name>getItemCount</name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call>.<call><name>getSerialIndex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>(<name>latest</name> - <call><name>getTimePeriod</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getSerialIndex</name><argument_list>()</argument_list></call>) 
                    &gt; <name><name>this</name>.<name>maximumItemAge</name></name></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>removed</name> = true</expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><name>removed</name> &amp;&amp; <name>notify</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Age items in the series.  Ensure that the timespan from the supplied 
     * time to the oldest record in the series does not exceed history count.  
     * oldest items will be removed if required.
     *
     * @param latest  the time to be compared against when aging data 
     *     (specified in milliseconds).
     * @param notify  controls whether or not a {@link SeriesChangeEvent} is 
     *                sent to registered listeners IF any items are removed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAgedItems</name><parameter_list>(<param><decl><type><name>long</name></type> <name>latest</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// find the serial index of the period specified by 'latest'</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>index</name> =<init> <expr><name><name>Long</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt> 
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>m</name> =<init> <expr><name><name>RegularTimePeriod</name>.<name><name/></name></name>class.<call><name>getDeclaredMethod</name><argument_list>(
                    <argument><expr>"createInstance"</expr></argument>, <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Class</name>.<name><name/></name></name>class</expr>, <expr><name><name>Date</name>.<name><name/></name></name>class</expr>, 
                    <expr><name><name>TimeZone</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>newest</name> =<init> <expr>(<name>RegularTimePeriod</name>) <call><name><name>m</name>.<name>invoke</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>timePeriodClass</name></name></expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name><name>this</name>.<name>timePeriodClass</name></name></expr>,
                            <expr>new <call><name>Date</name><argument_list>(<argument><expr><name>latest</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>index</name> = <call><name><name>newest</name>.<name>getSerialIndex</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch (<param><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <catch>catch (<param><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        
        <comment type="line">// check if there are any values earlier than specified by the history </comment>
        <comment type="line">// count...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; 0 &amp;&amp; (<name>index</name> 
                - <call><name>getTimePeriod</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getSerialIndex</name><argument_list>()</argument_list></call>) &gt; <name><name>this</name>.<name>maximumItemAge</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>removed</name> = true</expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>removed</name> &amp;&amp; <name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes all data items from the series and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Deletes the data item for the given time period and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.  If there is no
     * item with the specified time period, this method does nothing.
     *
     * @param period  the period of the item to delete (&lt;code&gt;null&lt;/code&gt; not 
     *                permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Deletes data from start until end index (end inclusive).
     *
     * @param start  the index of the first period to delete.
     * @param end  the index of the last period to delete.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>end</name> &lt; <name>start</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires start &lt;= end."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= (<name>end</name> - <name>start</name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the time series.
     * &lt;P&gt;
     * Notes:
     * &lt;ul&gt;
     *   &lt;li&gt;no need to clone the domain and range descriptions, since String 
     *     object is immutable;&lt;/li&gt;
     *   &lt;li&gt;we pass over to the more general method clone(start, end).&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return A clone of the time series.
     * 
     * @throws CloneNotSupportedException not thrown by this class, but 
     *         subclasses may differ.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>clone</name> =<init> <expr>(<name>TimeSeries</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>List</name>) <call><name><name>ObjectUtilities</name>.<name>deepClone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new timeseries by copying a subset of the data in this time
     * series.
     *
     * @param start  the index of the first time period to copy.
     * @param end  the index of the last time period to copy.
     *
     * @return A series containing a copy of this times series from start until
     *         end.
     * 
     * @throws CloneNotSupportedException if there is a cloning problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeries</name></type> <name>createCopy</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>start</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires start &gt;= 0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>end</name> &lt; <name>start</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires start &lt;= end."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>copy</name> =<init> <expr>(<name>TimeSeries</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>copy</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>index</name> &lt;= <name>end</name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> 
                    =<init> <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>clone</name> =<init> <expr>(<name>TimeSeriesDataItem</name>) <call><name><name>item</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>copy</name>.<name>add</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>SeriesException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>copy</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new timeseries by copying a subset of the data in this time 
     * series.
     *
     * @param start  the first time period to copy.
     * @param end  the last time period to copy.
     *
     * @return A time series containing a copy of this time series from start 
     *         until end.
     * 
     * @throws CloneNotSupportedException if there is a cloning problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeSeries</name></type> <name>createCopy</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>start</name></decl></param>, <param><decl><type><name>RegularTimePeriod</name></type> <name>end</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>start</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'start' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>end</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'end' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>start</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Requires start on or before end."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>emptyRange</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>startIndex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>startIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>startIndex</name> = -(<name>startIndex</name> + 1)</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>startIndex</name> == <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>emptyRange</name> = true</expr>;</expr_stmt>  <comment type="line">// start is after last data item</comment>
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>endIndex</name> &lt; 0</expr>)</condition><then> <block>{             <comment type="line">// end period is not in original series</comment>
            <expr_stmt><expr><name>endIndex</name> = -(<name>endIndex</name> + 1)</expr>;</expr_stmt> <comment type="line">// this is first item AFTER end period</comment>
            <expr_stmt><expr><name>endIndex</name> = <name>endIndex</name> - 1</expr>;</expr_stmt>    <comment type="line">// so this is last item BEFORE end </comment>
        }</block></then></if>
        <if>if <condition>(<expr><name>endIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>emptyRange</name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>emptyRange</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>copy</name> =<init> <expr>(<name>TimeSeries</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>copy</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>copy</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>createCopy</name><argument_list>(<argument><expr><name>startIndex</name></expr></argument>, <argument><expr><name>endIndex</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Tests the series for equality with an arbitrary object.
     *
     * @param object  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>object</name> <name>instanceof</name> <name>TimeSeries</name>) || !<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>s</name> =<init> <expr>(<name>TimeSeries</name>) <name>object</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><call><name>getDomainDescription</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name>.<name>getDomainDescription</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><call><name>getRangeDescription</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name>.<name>getRangeDescription</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>getClass</name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getMaximumItemAge</name><argument_list>()</argument_list></call> != <call><name><name>s</name>.<name>getMaximumItemAge</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getMaximumItemCount</name><argument_list>()</argument_list></call> != <call><name><name>s</name>.<name>getMaximumItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> != <call><name><name>s</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>getDataItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code value for the object.
     *
     * @return The hashcode
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>domain</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>domain</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> 
                : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>range</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>range</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>timePeriodClass</name></name> != <name>null</name> 
                ? <call><name><name>this</name>.<name>timePeriodClass</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <comment type="line">// it is too slow to look at every data item, so let's just look at</comment>
        <comment type="line">// the first, middle and last items...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>count</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> &gt; 2</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>count</name> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>maximumItemCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name>int</name>) <name><name>this</name>.<name>maximumItemAge</name></name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
