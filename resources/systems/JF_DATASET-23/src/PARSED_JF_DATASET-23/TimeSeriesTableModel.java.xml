<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\TimeSeriesTableModel.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * TimeSeriesTableModel.java
 * -------------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 14-Nov-2001 : Version 1 (DG);
 * 05-Apr-2002 : Removed redundant first column (DG);
 * 24-Jun-2002 : Removed unnecessary local variable (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>javax</name>.<name>swing</name>.<name>table</name>.<name>AbstractTableModel</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeListener</name></name>;</import>

<comment type="javadoc">/**
 * Wrapper around a time series to convert it to a table model for use in 
 * a &lt;code&gt;JTable&lt;/code&gt;.
 */</comment>
<class><specifier>public</specifier> class <name>TimeSeriesTableModel</name> <super><extends>extends <name>AbstractTableModel</name></extends> 
                                  <implements>implements <name>SeriesChangeListener</name></implements></super> <block>{

    <comment type="javadoc">/** The series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeSeries</name></type> <name>series</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the series is editable. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>editable</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The new time period. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularTimePeriod</name></type> <name>newTimePeriod</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The new value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>newValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeriesTableModel</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>TimeSeries</name><argument_list>(<argument><expr>"Untitled"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a table model for a time series.
     *
     * @param series  the time series.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeriesTableModel</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a table model based on a time series.
     *
     * @param series  the time series.
     * @param editable  if &lt;ocde&gt;true&lt;/code&gt;, the table is editable.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeriesTableModel</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>series</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>editable</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>series</name></name> = <name>series</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>editable</name></name> = <name>editable</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of columns in the table model.  For this particular
     * model, the column count is fixed at 2.
     *
     * @return The column count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column class in the table model.
     *
     * @param column    The column index.
     * 
     * @return The column class in the table model.
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getColumnClass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name><name>String</name>.<name><name/></name></name>class</expr>;</return>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                <return>return <expr><name><name>Double</name>.<name><name/></name></name>class</expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the name of a column
     *
     * @param column  the column index.
     *
     * @return The name of a column.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getColumnName</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr>"Period:"</expr>;</return>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                <return>return <expr>"Value:"</expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of rows in the table model.
     *
     * @return The row count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data value for a cell in the table model.
     *
     * @param row  the row number.
     * @param column  the column number.
     * 
     * @return The data value for a cell in the table model.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getValueAt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>row</name> &lt; <call><name><name>this</name>.<name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>this</name>.<name>series</name>.<name>getTimePeriod</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>this</name>.<name>series</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then>
                <else>else <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
                <return>return <expr><name><name>this</name>.<name>newTimePeriod</name></name></expr>;</return>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                    <return>return <expr><name><name>this</name>.<name>newValue</name></name></expr>;</return>
                }</block></then>
                <else>else <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the specified cell is editable.
     *
     * @param row  the row number.
     * @param column  the column number.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the specified cell is editable.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCellEditable</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>editable</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>(<name>column</name> == 0) || (<name>column</name> == 1)</expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr>false</expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr>false</expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Updates the time series.
     *
     * @param value  the new value.
     * @param row  the row.
     * @param column  the column.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueAt</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>value</name></decl></param>, <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>row</name> &lt; <call><name><name>this</name>.<name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// update the time series appropriately</comment>
            <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>Double</name></type> <name>v</name> =<init> <expr><call><name><name>Double</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>this</name>.<name>series</name>.<name>update</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                }</block>
                <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>nfe</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"Number format exception"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
                <comment type="line">// this.series.getClass().valueOf(value.toString());</comment>
                <expr_stmt><expr><name><name>this</name>.<name>newTimePeriod</name></name> = <name>null</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>column</name> == 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>newValue</name></name> = <call><name><name>Double</name>.<name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Receives notification that the time series has been changed.  Responds
     * by firing a table data change event.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>seriesChanged</name><parameter_list>(<param><decl><type><name>SeriesChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fireTableDataChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
