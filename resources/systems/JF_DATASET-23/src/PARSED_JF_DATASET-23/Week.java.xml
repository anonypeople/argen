<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-23\src\Week.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------
 * Week.java
 * ---------
 * (C) Copyright 2001-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Aimin Han;
 *
 * Changes
 * -------
 * 11-Oct-2001 : Version 1 (DG);
 * 18-Dec-2001 : Changed order of parameters in constructor (DG);
 * 19-Dec-2001 : Added a new constructor as suggested by Paul English (DG);
 * 29-Jan-2002 : Worked on the parseWeek() method (DG);
 * 13-Feb-2002 : Fixed bug in Week(Date) constructor (DG);
 * 26-Feb-2002 : Changed getStart(), getMiddle() and getEnd() methods to 
 *               evaluate with reference to a particular time zone (DG);
 * 05-Apr-2002 : Reinstated this class to the JCommon library (DG);
 * 24-Jun-2002 : Removed unnecessary main method (DG);
 * 10-Sep-2002 : Added getSerialIndex() method (DG);
 * 06-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 18-Oct-2002 : Changed to observe 52 or 53 weeks per year, consistent with 
 *               GregorianCalendar. Thanks to Aimin Han for the code (DG);
 * 02-Jan-2003 : Removed debug code (DG);
 * 13-Mar-2003 : Moved to com.jrefinery.data.time package, and implemented 
 *               Serializable (DG);
 * 21-Oct-2003 : Added hashCode() method (DG);
 * 24-May-2004 : Modified getFirstMillisecond() and getLastMillisecond() to 
 *               take account of firstDayOfWeek setting in Java's Calendar 
 *               class (DG);
 * 30-Sep-2004 : Replaced getTime().getTime() with getTimeInMillis() (DG);
 * 04-Nov-2004 : Reverted change of 30-Sep-2004, because it won't work for 
 *               JDK 1.3 (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Mar-2006 : Fix for bug 1448828, incorrect calculation of week and year
 *               for the first few days of some years (DG);
 * 05-Oct-2006 : Updated API docs (DG);
 * 06-Oct-2006 : Refactored to cache first and last millisecond values (DG);
 * 09-Jan-2007 : Fixed bug in next() (DG);
 * 28-Aug-2007 : Added new constructor to avoid problem in creating new 
 *               instances (DG);
 * 19-Dec-2007 : Fixed bug in deprecated constructor (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<comment type="javadoc">/**
 * A calendar week.  All years are considered to have 53 weeks, numbered from 1 
 * to 53, although in many cases the 53rd week is empty.  Most of the time, the
 * 1st week of the year *begins* in the previous calendar year, but it always 
 * finishes in the current year (this behaviour matches the workings of the 
 * &lt;code&gt;GregorianCalendar&lt;/code&gt; class).
 * &lt;P&gt;
 * This class is immutable, which is a requirement for all 
 * {@link RegularTimePeriod} subclasses.
 */</comment>
<class><specifier>public</specifier> class <name>Week</name> <super><extends>extends <name>RegularTimePeriod</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1856387786939865061L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Constant for the first week in the year. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FIRST_WEEK_IN_YEAR</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the last week in the year. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LAST_WEEK_IN_YEAR</name> =<init> <expr>53</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The year in which the week falls. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>short</name></type> <name>year</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The week (1-53). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>week</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The first millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>firstMillisecond</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The last millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>lastMillisecond</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new time period for the week in which the current system 
     * date/time falls.
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a time period representing the week in the specified year.
     *
     * @param week  the week (1 to 53).
     * @param year  the year (1900 to 9999).
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>(<param><decl><type><name>int</name></type> <name>week</name></decl></param>, <param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>week</name> &lt; <name>FIRST_WEEK_IN_YEAR</name>) &amp;&amp; (<name>week</name> &gt; <name>LAST_WEEK_IN_YEAR</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'week' argument must be in the range 1 - 53."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>week</name></name> = (<name>byte</name>) <name>week</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = (<name>short</name>) <name>year</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a time period representing the week in the specified year.
     *
     * @param week  the week (1 to 53).
     * @param year  the year (1900 to 9999).
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>(<param><decl><type><name>int</name></type> <name>week</name></decl></param>, <param><decl><type><name>Year</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>week</name> &lt; <name>FIRST_WEEK_IN_YEAR</name>) &amp;&amp; (<name>week</name> &gt; <name>LAST_WEEK_IN_YEAR</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'week' argument must be in the range 1 - 53."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>week</name></name> = (<name>byte</name>) <name>week</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = (<name>short</name>) <call><name><name>year</name>.<name>getYear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></constructor>

    <comment type="javadoc">/**
     * Creates a time period for the week in which the specified date/time 
     * falls.
     *
     * @param time  the time (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>RegularTimePeriod</name>.<name>DEFAULT_TIME_ZONE</name></name></expr></argument>, <argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a time period for the week in which the specified date/time 
     * falls, calculated relative to the specified time zone.
     *
     * @param time  the date/time (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>, <argument><expr><call><name><name>Locale</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a time period for the week in which the specified date/time 
     * falls, calculated relative to the specified time zone.
     *
     * @param time  the date/time (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param locale  the locale (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.7
     */</comment>
    <constructor><specifier>public</specifier> <name>Week</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>time</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'time' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>zone</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'zone' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>locale</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'locale' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// sometimes the last few days of the year are considered to fall in </comment>
        <comment type="line">// the *first* week of the following year.  Refer to the Javadocs for </comment>
        <comment type="line">// GregorianCalendar.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>tempWeek</name> =<init> <expr><call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>tempWeek</name> == 1 
                &amp;&amp; <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call> == <name><name>Calendar</name>.<name>DECEMBER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>week</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = <call>(<name>short</name>) <argument_list>(<argument><expr><call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>week</name></name> = (<name>byte</name>) <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>tempWeek</name></expr></argument>, <argument><expr><name>LAST_WEEK_IN_YEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>yyyy</name> =<init> <expr><call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// alternatively, sometimes the first few days of the year are</comment>
            <comment type="line">// considered to fall in the *last* week of the previous year...</comment>
            <if>if <condition>(<expr><call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call> == <name><name>Calendar</name>.<name>JANUARY</name></name> 
                    &amp;&amp; <name><name>this</name>.<name>week</name></name> &gt;= 52</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>yyyy</name>--</expr>;</expr_stmt> 
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>year</name></name> = (<name>short</name>) <name>yyyy</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the year in which the week falls.
     *
     * @return The year (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Year</name></type> <name>getYear</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Year</name><argument_list>(<argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the year in which the week falls, as an integer value.
     *
     * @return The year.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getYearValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>year</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the week.
     *
     * @return The week.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getWeek</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>week</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the week.  This will be determined 
     * relative to the time zone specified in the constructor, or in the 
     * calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The first millisecond of the week.
     * 
     * @see #getLastMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstMillisecond</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the week.  This will be 
     * determined relative to the time zone specified in the constructor, or
     * in the calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The last millisecond of the week.
     * 
     * @see #getFirstMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lastMillisecond</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Recalculates the start date/time and end date/time for this time period 
     * relative to the supplied calendar (which incorporates a time zone).
     * 
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>peg</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>firstMillisecond</name></name> = <call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lastMillisecond</name></name> = <call><name>getLastMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the week preceding this one.  This method will return 
     * &lt;code&gt;null&lt;/code&gt; for some lower limit on the range of weeks (currently 
     * week 1, 1900).  For week 1 of any year, the previous week is always week 
     * 53, but week 53 may not contain any days (you should check for this).
     *
     * @return The preceding week (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Week</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>week</name></name> != <name>FIRST_WEEK_IN_YEAR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name><name>this</name>.<name>week</name></name> - 1</expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// we need to work out if the previous year has 52 or 53 weeks...</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>year</name></name> &gt; 1900</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>yy</name> =<init> <expr><name><name>this</name>.<name>year</name></name> - 1</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Calendar</name></type> <name>prevYearCalendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>prevYearCalendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name><name>Calendar</name>.<name>DECEMBER</name></name></expr></argument>, <argument><expr>31</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><call><name><name>prevYearCalendar</name>.<name>getActualMaximum</name></name><argument_list>(
                        <argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the week following this one.  This method will return 
     * &lt;code&gt;null&lt;/code&gt; for some upper limit on the range of weeks (currently 
     * week 53, 9999).  For week 52 of any year, the following week is always 
     * week 53, but week 53 may not contain any days (you should check for 
     * this).
     *
     * @return The following week (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Week</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>week</name></name> &lt; 52</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name><name>this</name>.<name>week</name></name> + 1</expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>, <argument><expr><name><name>Calendar</name>.<name>DECEMBER</name></name></expr></argument>, <argument><expr>31</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>actualMaxWeek</name> 
                =<init> <expr><call><name><name>calendar</name>.<name>getActualMaximum</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>week</name></name> &lt; <name>actualMaxWeek</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name><name>this</name>.<name>week</name></name> + 1</expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>year</name></name> &lt; 9999</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name>FIRST_WEEK_IN_YEAR</name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = <name>null</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a serial index number for the week.
     *
     * @return The serial index number.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSerialIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>year</name></name> * 53L + <name><name>this</name>.<name>week</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the week, evaluated using the supplied
     * calendar (which determines the time zone).
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The first millisecond of the week.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> =<init> <expr>(<name>Calendar</name>) <call><name><name>calendar</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>week</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_WEEK</name></name></expr></argument>, <argument><expr><call><name><name>c</name>.<name>getFirstDayOfWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//return c.getTimeInMillis();  // this won't work for JDK 1.3</comment>
        <return>return <expr><call><name><name>c</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the week, evaluated using the supplied
     * calendar (which determines the time zone).
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The last millisecond of the week.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>c</name> =<init> <expr>(<name>Calendar</name>) <call><name><name>calendar</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>year</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>WEEK_OF_YEAR</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>week</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>DAY_OF_WEEK</name></name></expr></argument>, <argument><expr><call><name><name>c</name>.<name>getFirstDayOfWeek</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//return c.getTimeInMillis();  // this won't work for JDK 1.3</comment>
        <return>return <expr><call><name><name>c</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> - 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string representing the week (e.g. "Week 9, 2002").
     *
     * TODO: look at internationalisation.
     *
     * @return A string representing the week.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"Week " + <name><name>this</name>.<name>week</name></name> + ", " + <name><name>this</name>.<name>year</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the equality of this Week object to an arbitrary object.  Returns
     * true if the target is a Week instance representing the same week as this
     * object.  In all other cases, returns false.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; if week and year of this and object are the 
     *         same.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Week</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Week</name></type> <name>that</name> =<init> <expr>(<name>Week</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>week</name></name> != <name><name>that</name>.<name>week</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>year</name></name> != <name><name>that</name>.<name>year</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object instance.  The approach described by
     * Joshua Bloch in "Effective Java" has been used here:
     * &lt;p&gt;
     * &lt;code&gt;http://developer.java.sun.com/developer/Books/effectivejava
     * /Chapter3.pdf&lt;/code&gt;
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>17</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>week</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>year</name></name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this Week object relative to
     * the specified object:
     *
     * negative == before, zero == same, positive == after.
     *
     * @param o1  the object to compare.
     *
     * @return negative == before, zero == same, positive == after.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another Week object</comment>
        <comment type="line">// --------------------------------------------</comment>
        <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>Week</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Week</name></type> <name>w</name> =<init> <expr>(<name>Week</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>year</name></name> - <call><name><name>w</name>.<name>getYear</name></name><argument_list>()</argument_list></call>.<call><name>getYear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>result</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>week</name></name> - <call><name><name>w</name>.<name>getWeek</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to another TimePeriod object</comment>
        <comment type="line">// -----------------------------------------------</comment>
        <else>else <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>RegularTimePeriod</name></expr>)</condition><then> <block>{
            <comment type="line">// more difficult case - evaluate later...</comment>
            <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
        }</block></then>

        <comment type="line">// CASE 3 : Comparing to a non-TimePeriod object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Parses the string argument as a week.
     * &lt;P&gt;
     * This method is required to accept the format "YYYY-Wnn".  It will also
     * accept "Wnn-YYYY". Anything else, at the moment, is a bonus.
     *
     * @param s  string to parse.
     *
     * @return &lt;code&gt;null&lt;/code&gt; if the string is not parseable, the week 
     *         otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Week</name></type> <name>parseWeek</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Week</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{

            <comment type="line">// trim whitespace from either end of the string</comment>
            <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>Week</name>.<name>findSeparator</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> != -1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>s1</name> =<init> <expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>s2</name> =<init> <expr><call><name><name>s</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><call><name><name>s</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Year</name></type> <name>y</name> =<init> <expr><call><name><name>Week</name>.<name>evaluateAsYear</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>y</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>w</name> = <call><name><name>Week</name>.<name>stringToWeek</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>w</name> == -1</expr>)</condition><then> <block>{
                        <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                                <argument><expr>"Can't evaluate the week."</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>y</name> = <call><name><name>Week</name>.<name>evaluateAsYear</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>y</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>w</name> = <call><name><name>Week</name>.<name>stringToWeek</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>w</name> == -1</expr>)</condition><then> <block>{
                            <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                                    <argument><expr>"Can't evaluate the week."</expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                        <expr_stmt><expr><name>result</name> = new <call><name>Week</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                                <argument><expr>"Can't evaluate the year."</expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></else></if>
                }</block></else></if>

            }</block></then>
            <else>else <block>{
                <throw>throw <expr>new <call><name>TimePeriodFormatException</name><argument_list>(
                        <argument><expr>"Could not find separator."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>

        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Finds the first occurrence of ' ', '-', ',' or '.'
     *
     * @param s  the string to parse.
     *
     * @return &lt;code&gt;-1&lt;/code&gt; if none of the characters was found, the
     *      index of the first occurrence otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>findSeparator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>s</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a year from a string, or returns null (format exceptions
     * suppressed).
     *
     * @param s  string to parse.
     *
     * @return &lt;code&gt;null&lt;/code&gt; if the string is not parseable, the year 
     *         otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>Year</name></type> <name>evaluateAsYear</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Year</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Year</name>.<name>parseYear</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>TimePeriodFormatException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// suppress</comment>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Converts a string to a week.
     *
     * @param s  the string to parse.
     * @return &lt;code&gt;-1&lt;/code&gt; if the string does not contain a week number,
     *         the number of the week otherwise.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name></type> <name>stringToWeek</name><parameter_list>(<param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>replace</name></name><argument_list>(<argument><expr>'W'</expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> = <call><name><name>s</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Integer</name>.<name>parseInt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>result</name> &lt; 1) || (<name>result</name> &gt; <name>LAST_WEEK_IN_YEAR</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// suppress</comment>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
}</block></class>
</unit>
