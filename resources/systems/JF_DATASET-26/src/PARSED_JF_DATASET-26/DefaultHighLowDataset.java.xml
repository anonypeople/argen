<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-26\src\DefaultHighLowDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------
 * DefaultHighLowDataset.java
 * --------------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 21-Mar-2002 : Version 1 (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 06-May-2004 : Now extends AbstractXYDataset and added new methods from 
 *               HighLowDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 28-Nov-2006 : Added equals() method override (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<comment type="javadoc">/**
 * A simple implementation of the {@link OHLCDataset} interface.  See also
 * the {@link DefaultOHLCDataset} class, which provides another implementation
 * that is very similar.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultHighLowDataset</name> <super><extends>extends <name>AbstractXYDataset</name></extends> 
                                   <implements>implements <name>OHLCDataset</name></implements></super> <block>{

    <comment type="javadoc">/** The series key. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>seriesKey</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the dates. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name><index>[]</index></type> <name>date</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the high values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name><index>[]</index></type> <name>high</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the low values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name><index>[]</index></type> <name>low</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the open values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name><index>[]</index></type> <name>open</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the close values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name><index>[]</index></type> <name>close</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the volume values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name><index>[]</index></type> <name>volume</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new high/low/open/close dataset.
     * &lt;p&gt;
     * The current implementation allows only one series in the dataset.
     * This may be extended in a future version.
     *
     * @param seriesKey  the key for the series (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     * @param date  the dates (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param high  the high values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param low  the low values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param open  the open values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param close  the close values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param volume  the volume values (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultHighLowDataset</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>seriesKey</name></decl></param>, <param><decl><type><name><name>Date</name><index>[]</index></name></type> <name>date</name></decl></param>, 
            <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>high</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>low</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>open</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>close</name></decl></param>,
            <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>volume</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>seriesKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>date</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'date' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>seriesKey</name></name> = <name>seriesKey</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>date</name></name> = <name>date</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>high</name></name> = <call><name>createNumberArray</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>low</name></name> = <call><name>createNumberArray</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>open</name></name> = <call><name>createNumberArray</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>close</name></name> = <call><name>createNumberArray</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>volume</name></name> = <call><name>createNumberArray</name><argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the key for the series stored in this dataset.
     *
     * @param series  the index of the series (ignored, this dataset supports 
     *     only one series and this method always returns the key for series 0).
     * 
     * @return The series key (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesKey</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-value for one item in a series.  The value returned is a 
     * &lt;code&gt;Long&lt;/code&gt; instance generated from the underlying 
     * &lt;code&gt;Date&lt;/code&gt; object.  To avoid generating a new object instance,
     * you might prefer to call {@link #getXValue(int, int)}.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The x-value.
     * 
     * @see #getXValue(int, int)
     * @see #getXDate(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>Long</name><argument_list>(<argument><expr><name><name>this</name>.<name>date</name><index>[<expr><name>item</name></expr>]</index></name>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for one item in a series, as a Date.
     * &lt;p&gt;
     * This method is provided for convenience only.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The x-value as a Date.
     * 
     * @see #getX(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getXDate</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>date</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for one item in a series.
     * &lt;p&gt;
     * This method (from the {@link XYDataset} interface) is mapped to the 
     * {@link #getCloseValue(int, int)} method.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The y-value.
     * 
     * @see #getYValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getClose</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the high-value for one item in a series.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The high-value.
     * 
     * @see #getHighValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getHigh</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>high</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the high-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The high-value.
     * 
     * @see #getHigh(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHighValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>high</name> =<init> <expr><call><name>getHigh</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>high</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>high</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value for one item in a series.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The low-value.
     * 
     * @see #getLowValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getLow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>low</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The low-value.
     * 
     * @see #getLow(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>low</name> =<init> <expr><call><name>getLow</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>low</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>low</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value for one item in a series.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The open-value.
     * 
     * @see #getOpenValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getOpen</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>open</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The open-value.
     * 
     * @see #getOpen(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getOpenValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>open</name> =<init> <expr><call><name>getOpen</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>open</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>open</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value for one item in a series.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The close-value.
     * 
     * @see #getCloseValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getClose</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>close</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The close-value.
     * 
     * @see #getClose(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCloseValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>close</name> =<init> <expr><call><name>getClose</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>close</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>close</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume-value for one item in a series.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The volume-value.
     * 
     * @see #getVolumeValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getVolume</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>volume</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The volume-value.
     * 
     * @see #getVolume(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getVolumeValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>volume</name> =<init> <expr><call><name>getVolume</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>volume</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>volume</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     * &lt;p&gt;
     * This implementation only allows one series.
     *
     * @return The number of series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     *
     * @param series  the index (zero-based) of the series.
     *
     * @return The number of items in the specified series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>date</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this dataset for equality with an arbitrary instance.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultHighLowDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultHighLowDataset</name></type> <name>that</name> =<init> <expr>(<name>DefaultHighLowDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesKey</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>date</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>date</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>open</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>open</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>high</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>high</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>low</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>low</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>close</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>close</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>volume</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>volume</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Constructs an array of Number objects from an array of doubles.
     *
     * @param data  the double values to convert (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     *
     * @return The data as an array of Number objects.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Number</name><index>[]</index></type> <name>createNumberArray</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Number</name><index>[<expr><name><name>data</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Double</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
