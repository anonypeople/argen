<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-26\src\IntervalXYDelegate.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * IntervalXYDelegate.java
 * -----------------------
 * (C) Copyright 2004, 2005, 2007, by Andreas Schroeder and Contributors.
 *
 * Original Author:  Andreas Schroeder;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 31-Mar-2004 : Version 1 (AS);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 18-Aug-2004 : Moved from org.jfree.data --&gt; org.jfree.data.xy (DG);
 * 04-Nov-2004 : Added argument check for setIntervalWidth() method (DG);
 * 17-Nov-2004 : New methods to reflect changes in DomainInfo (DG);
 * 11-Jan-2005 : Removed deprecated methods in preparation for the 1.0.0 
 *               release (DG);
 * 21-Feb-2005 : Made public and added equals() method (DG);
 * 06-Oct-2005 : Implemented DatasetChangeListener to recalculate 
 *               autoIntervalWidth (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *   
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>RangeInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A delegate that handles the specification or automatic calculation of the
 * interval surrounding the x-values in a dataset.  This is used to extend
 * a regular {@link XYDataset} to support the {@link IntervalXYDataset} 
 * interface.
 * &lt;p&gt; 
 * The decorator pattern was not used because of the several possibly 
 * implemented interfaces of the decorated instance (e.g. 
 * {@link TableXYDataset}, {@link RangeInfo}, {@link DomainInfo} etc.).
 * &lt;p&gt;
 * The width can be set manually or calculated automatically. The switch
 * autoWidth allows to determine which behavior is used. The auto width 
 * calculation tries to find the smallest gap between two x-values in the
 * dataset.  If there is only one item in the series, the auto width 
 * calculation fails and falls back on the manually set interval width (which 
 * is itself defaulted to 1.0). 
 */</comment>
<class><specifier>public</specifier> class <name>IntervalXYDelegate</name> <super><implements>implements <name>DatasetChangeListener</name>,
                                           <name>DomainInfo</name>, <name>Serializable</name>, 
                                           <name>Cloneable</name>, <name>PublicCloneable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-685166711639592857L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The dataset to enhance. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XYDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag to indicate whether the width should be calculated automatically.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A value between 0.0 and 1.0 that indicates the position of the x-value
     * within the interval.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>intervalPositionFactor</name></decl>;</decl_stmt> 
    
    <comment type="javadoc">/**
     * The fixed interval width (defaults to 1.0).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>fixedIntervalWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The automatically calculated interval width.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>autoIntervalWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new delegate that.
     * 
     * @param dataset  the underlying dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalXYDelegate</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new delegate for the specified dataset.
     * 
     * @param dataset  the underlying dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param autoWidth  a flag that controls whether the interval width is 
     *                   calculated automatically.
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalXYDelegate</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>autoWidth</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dataset' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoWidth</name></name> = <name>autoWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>intervalPositionFactor</name></name> = 0.5</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoIntervalWidth</name></name> = <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>this</name>.<name>fixedIntervalWidth</name></name> = 1.0</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the interval width is automatically 
     * calculated, and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that indicates whether the interval width is automatically
     * calculated.  If the flag is set to &lt;code&gt;true&lt;/code&gt;, the interval is
     * recalculated.
     * &lt;p&gt;
     * Note: recalculating the interval amounts to changing the data values
     * represented by the dataset.  The calling dataset must fire an
     * appropriate {@link DatasetChangeEvent}.
     * 
     * @param b  a boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidth</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>autoWidth</name></name> = <name>b</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoIntervalWidth</name></name> = <call><name>recalculateInterval</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the interval position factor.
     * 
     * @return The interval position factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalPositionFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>intervalPositionFactor</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the interval position factor.  This controls how the interval is
     * aligned to the x-value.  For a value of 0.5, the interval is aligned
     * with the x-value in the center.  For a value of 0.0, the interval is
     * aligned with the x-value at the lower end of the interval, and for a 
     * value of 1.0, the interval is aligned with the x-value at the upper
     * end of the interval.
     * 
     * Note that changing the interval position factor amounts to changing the 
     * data values represented by the dataset.  Therefore, the dataset that is 
     * using this delegate is responsible for generating the 
     * appropriate {@link DatasetChangeEvent}.     
     * 
     * @param d  the new interval position factor (in the range 
     *           &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt; inclusive).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIntervalPositionFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>d</name> &lt; 0.0 || 1.0 &lt; <name>d</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Argument 'd' outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>intervalPositionFactor</name></name> = <name>d</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed interval width.
     * 
     * @return The fixed interval width.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getFixedIntervalWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedIntervalWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the fixed interval width and, as a side effect, sets the
     * &lt;code&gt;autoWidth&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt;.  
     * 
     * Note that changing the interval width amounts to changing the data 
     * values represented by the dataset.  Therefore, the dataset
     * that is using this delegate is responsible for generating the 
     * appropriate {@link DatasetChangeEvent}.
     * 
     * @param w  the width (negative values not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedIntervalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>w</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'w' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>fixedIntervalWidth</name></name> = <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoWidth</name></name> = false</expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the interval width.  This method will return either the 
     * auto calculated interval width or the manually specified interval
     * width, depending on the {@link #isAutoWidth()} result.
     * 
     * @return The interval width to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalWidth</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAutoWidth</name><argument_list>()</argument_list></call> &amp;&amp; !<call><name><name>Double</name>.<name>isInfinite</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>autoIntervalWidth</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// everything is fine: autoWidth is on, and an autoIntervalWidth </comment>
            <comment type="line">// was set.</comment>
            <return>return <expr><name><name>this</name>.<name>autoIntervalWidth</name></name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <comment type="line">// either autoWidth is off or autoIntervalWidth was not set.</comment>
            <return>return <expr><name><name>this</name>.<name>fixedIntervalWidth</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the start value of the x-interval for an item within a series.
     * 
     * @param series  the series index.
     * @param item  the item index.
     * 
     * @return The start value of the x-interval (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getStartXValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>startX</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>x</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>startX</name> = new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> 
                     - (<call><name>getIntervalPositionFactor</name><argument_list>()</argument_list></call> * <call><name>getIntervalWidth</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then></if>
        <return>return <expr><name>startX</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the start value of the x-interval for an item within a series.
     * 
     * @param series  the series index.
     * @param item  the item index.
     * 
     * @return The start value of the x-interval.
     * 
     * @see #getStartX(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartXValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> 
                - <call><name>getIntervalPositionFactor</name><argument_list>()</argument_list></call> * <call><name>getIntervalWidth</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the end value of the x-interval for an item within a series.
     * 
     * @param series  the series index.
     * @param item  the item index.
     * 
     * @return The end value of the x-interval (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getEndXValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>endX</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>x</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>endX</name> = new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> 
                + ((1.0 - <call><name>getIntervalPositionFactor</name><argument_list>()</argument_list></call>) * <call><name>getIntervalWidth</name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then></if>
        <return>return <expr><name>endX</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the end value of the x-interval for an item within a series.
     * 
     * @param series  the series index.
     * @param item  the item index.
     * 
     * @return The end value of the x-interval.
     * 
     * @see #getEndX(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEndXValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> 
                + (1.0 - <call><name>getIntervalPositionFactor</name><argument_list>()</argument_list></call>) * <call><name>getIntervalWidth</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name>getDomainBounds</name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name>getDomainBounds</name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in the dataset's domain, including
     * or excluding the interval around each x-value as specified.
     *
     * @param includeInterval  a flag that determines whether or not the 
     *                         x-interval should be taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDomainBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// first get the range without the interval, then expand it for the</comment>
        <comment type="line">// interval width</comment>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>includeInterval</name> &amp;&amp; <name>range</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>lowerAdj</name> =<init> <expr><call><name>getIntervalWidth</name><argument_list>()</argument_list></call> * <call><name>getIntervalPositionFactor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>upperAdj</name> =<init> <expr><call><name>getIntervalWidth</name><argument_list>()</argument_list></call> - <name>lowerAdj</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>range</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> - <name>lowerAdj</name></expr></argument>, 
                <argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> + <name>upperAdj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>range</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Handles events from the dataset by recalculating the interval if 
     * necessary.
     * 
     * @param e  the event.
     */</comment>    
    <function><type><specifier>public</specifier> <name>void</name></type> <name>datasetChanged</name><parameter_list>(<param><decl><type><name>DatasetChangeEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// TODO: by coding the event with some information about what changed</comment>
        <comment type="line">// in the dataset, we could make the recalculation of the interval</comment>
        <comment type="line">// more efficient in some cases...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidth</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoIntervalWidth</name></name> = <call><name>recalculateInterval</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Recalculate the minimum width "from scratch".
     * 
     * @return The minimum width.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>recalculateInterval</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>calculateIntervalForSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the interval width for a given series.
     *  
     * @param series  the series index.
     * 
     * @return The interval width.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>calculateIntervalForSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>itemCount</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>prev</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>x</name> - <name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>prev</name> = <name>x</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the delegate for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>IntervalXYDelegate</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>IntervalXYDelegate</name></type> <name>that</name> =<init> <expr>(<name>IntervalXYDelegate</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidth</name></name> != <name><name>that</name>.<name>autoWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>intervalPositionFactor</name></name> != <name><name>that</name>.<name>intervalPositionFactor</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedIntervalWidth</name></name> != <name><name>that</name>.<name>fixedIntervalWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * @return A clone of this delegate.
     * 
     * @throws CloneNotSupportedException if the object cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
