<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-26\src\NormalizedMatrixSeries.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * NormalizedMatrixSeries.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Barak Naveh and Contributors.
 *
 * Original Author:  Barak Naveh;;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 10-Jul-2003 : Version 1 contributed by Barak Naveh (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>


<comment type="javadoc">/**
 * Represents a dense normalized matrix M[i,j] where each Mij item of the
 * matrix has a value (default is 0). When a matrix item is observed using
 * &lt;code&gt;getItem&lt;/code&gt; method, it is normalized, that is, divided by the
 * total sum of all items. It can be also be scaled by setting a scale factor.
 */</comment>
<class><specifier>public</specifier> class <name>NormalizedMatrixSeries</name> <super><extends>extends <name>MatrixSeries</name></extends></super> <block>{
    
    <comment type="javadoc">/** The default scale factor. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_SCALE_FACTOR</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A factor that multiplies each item in this series when observed using 
     * getItem method.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>m_scaleFactor</name> =<init> <expr><name>DEFAULT_SCALE_FACTOR</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The sum of all items in this matrix */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>m_totalSum</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructor for NormalizedMatrixSeries.
     *
     * @param name  the series name.
     * @param rows  the number of rows.
     * @param columns  the number of columns.
     */</comment>
    <constructor><specifier>public</specifier> <name>NormalizedMatrixSeries</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>rows</name></decl></param>, <param><decl><type><name>int</name></type> <name>columns</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * we assum super is always initialized to all-zero matrix, so the
         * total sum should be 0 upon initialization. However, we set it to
         * Double.MIN_VALUE to get the same effect and yet avoid division by 0
         * upon initialization.
         */</comment>
        <expr_stmt><expr><name><name>this</name>.<name>m_totalSum</name></name> = <name><name>Double</name>.<name>MIN_VALUE</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns an item.
     * 
     * @param itemIndex  the index.
     * 
     * @return The value.
     * 
     * @see org.jfree.data.xy.MatrixSeries#getItem(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name>getItemRow</name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><call><name>getItemColumn</name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>mij</name> =<init> <expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> * <name><name>this</name>.<name>m_scaleFactor</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mij</name> / <name><name>this</name>.<name>m_totalSum</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>n</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the factor that multiplies each item in this series when observed
     * using getItem mehtod.
     *
     * @param factor new factor to set.
     *
     * @see #DEFAULT_SCALE_FACTOR
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setScaleFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>m_scaleFactor</name></name> = <name>factor</name></expr>;</expr_stmt>
        <comment type="line">// FIXME: this should generate a series change event</comment>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the factor that multiplies each item in this series when
     * observed using getItem mehtod.
     *
     * @return The factor
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getScaleFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>m_scaleFactor</name></name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Updates the value of the specified item in this matrix series.
     *
     * @param i the row of the item.
     * @param j the column of the item.
     * @param mij the new value for the item.
     * 
     * @see #get(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>j</name></decl></param>, <param><decl><type><name>double</name></type> <name>mij</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>m_totalSum</name></name> -= <call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>m_totalSum</name></name> += <name>mij</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>super</name>.<name>update</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>mij</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * @see org.jfree.data.xy.MatrixSeries#zeroAll()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zeroAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>m_totalSum</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>zeroAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
