<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\JF_DATASET-26\src\XYDataItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * XYDataItem.java
 * ---------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Aug-2003 : Renamed XYDataPair --&gt; XYDataItem (DG);
 * 03-Feb-2004 : Fixed bug in equals() method (DG);
 * 21-Feb-2005 : Added setY(double) method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 30-Nov-2007 : Implemented getXValue() and getYValue(), plus toString() for 
 *               debugging use (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents one (x, y) data item for an {@link XYSeries}.
 */</comment>
<class><specifier>public</specifier> class <name>XYDataItem</name> <super><implements>implements <name>Cloneable</name>, <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2751513470325494890L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The x-value (&lt;code&gt;null&lt;/code&gt; not permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>x</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The y-value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>y</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new data item.
     *
     * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; NOT permitted).
     * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYDataItem</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>x</name></decl></param>, <param><decl><type><name>Number</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>x</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'x' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new data item.
     *
     * @param x  the x-value.
     * @param y  the y-value.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYDataItem</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the x-value.
     *
     * @return The x-value (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>x</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-value as a double primitive.
     * 
     * @return The x-value.
     * 
     * @see #getX()
     * @see #getYValue()
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getXValue</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// this.x is not allowed to be null...</comment>
        <return>return <expr><call><name><name>this</name>.<name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value.
     *
     * @return The y-value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>y</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-value as a double primitive.
     * 
     * @return The y-value.
     * 
     * @see #getY()
     * @see #getXValue()
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getYValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>y</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>y</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the y-value for this data item.  Note that there is no 
     * corresponding method to change the x-value.
     *
     * @param y  the new y-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setY</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-value for this data item.  Note that there is no 
     * corresponding method to change the x-value.
     *
     * @param y  the new y-value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setY</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this object relative to 
     * another object.
     * &lt;P&gt;
     * For the order we consider only the x-value:
     * negative == "less-than", zero == "equal", positive == "greater-than".
     *
     * @param o1  the object being compared to.
     *
     * @return An integer indicating the order of this data pair object
     *      relative to another object.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another TimeSeriesDataPair object</comment>
        <comment type="line">// -------------------------------------------------------</comment>
        <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>XYDataItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYDataItem</name></type> <name>dataItem</name> =<init> <expr>(<name>XYDataItem</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>compare</name> =<init> <expr><call><name><name>this</name>.<name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> 
                             - <call><name><name>dataItem</name>.<name>getX</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>compare</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>compare</name> &lt; 0.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to a general object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of this object.
     *
     * @return A clone.
     * 
     * @throws CloneNotSupportedException not thrown by this class, but 
     *         subclasses may differ.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests if this object is equal to another.
     *
     * @param obj  the object to test against for equality (&lt;code&gt;null&lt;/code&gt;
     *             permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYDataItem</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYDataItem</name></type> <name>that</name> =<init> <expr>(<name>XYDataItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>x</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>x</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>y</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>        
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>x</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>y</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>y</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representing this instance, primarily for debugging
     * use.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"[" + <call><name>getXValue</name><argument_list>()</argument_list></call> + ", " + <call><name>getYValue</name><argument_list>()</argument_list></call> + "]"</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
