<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-28\src\DefaultTableXYDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------
 * DefaultTableXYDataset.java
 * --------------------------
 * (C) Copyright 2003-2007, by Richard Atkinson and Contributors.
 *
 * Original Author:  Richard Atkinson;
 * Contributor(s):   Jody Brownell;
 *                   David Gilbert (for Object Refinery Limited);
 *                   Andreas Schroeder;
 *
 * Changes:
 * --------
 * 27-Jul-2003 : XYDataset that forces each series to have a value for every 
 *               X-point which is essential for stacked XY area charts (RA);
 * 18-Aug-2003 : Fixed event notification when removing and updating 
 *               series (RA);
 * 22-Sep-2003 : Functionality moved from TableXYDataset to 
 *               DefaultTableXYDataset (RA);
 * 23-Dec-2003 : Added patch for large datasets, submitted by Jody 
 *               Brownell (DG);
 * 16-Feb-2004 : Added pruning methods (DG);
 * 31-Mar-2004 : Provisional implementation of IntervalXYDataset (AS);
 * 01-Apr-2004 : Sound implementation of IntervalXYDataset (AS);
 * 05-May-2004 : Now extends AbstractIntervalXYDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 18-Aug-2004 : Moved from org.jfree.data --&gt; org.jfree.data.xy (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 * 05-Oct-2005 : Made the interval delegate a dataset listener (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * An {@link XYDataset} where every series shares the same x-values (required 
 * for generating stacked area charts).
 */</comment>
<class><specifier>public</specifier> class <name>DefaultTableXYDataset</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends> 
                                   <implements>implements <name>TableXYDataset</name>, 
                                              <name>IntervalXYDataset</name>, <name>DomainInfo</name></implements></super> <block>{
    
    <comment type="javadoc">/** 
     * Storage for the data - this list will contain zero, one or many 
     * XYSeries objects. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>data</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the x values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HashSet</name></type> <name>xPoints</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not events are propogated. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>propagateEvents</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls auto pruning. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoPrune</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The delegate used to control the interval width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>IntervalXYDelegate</name></type> <name>intervalDelegate</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new empty dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultTableXYDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new empty dataset.
     * 
     * @param autoPrune  a flag that controls whether or not x-values are 
     *                   removed whenever the corresponding y-values are all 
     *                   &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultTableXYDataset</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>autoPrune</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>autoPrune</name></name> = <name>autoPrune</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xPoints</name></name> = new <call><name>HashSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>intervalDelegate</name></name> = new <call><name>IntervalXYDelegate</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addChangeListener</name><argument_list>(<argument><expr><name><name>this</name>.<name>intervalDelegate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not x-values are removed from 
     * the dataset when the corresponding y-values are all &lt;code&gt;null&lt;/code&gt;.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoPrune</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoPrune</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a series to the collection and sends a {@link DatasetChangeEvent} 
     * to all registered listeners.  The series should be configured to NOT 
     * allow duplicate x-values.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>series</name>.<name>getAllowDuplicateXValues</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"Cannot accept XYSeries that allow duplicate values. "
                + "Use XYSeries(seriesName, &lt;sort&gt;, false) constructor."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>updateXPoints</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds any unique x-values from 'series' to the dataset, and also adds any
     * x-values that are in the dataset but not in 'series' to the series.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateXPoints</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>HashSet</name></type> <name>seriesXPoints</name> =<init> <expr>new <call><name>HashSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>savedState</name> =<init> <expr><name><name>this</name>.<name>propagateEvents</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = false</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>itemNo</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>itemNo</name> &lt; <call><name><name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>itemNo</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>xValue</name> =<init> <expr><call><name><name>series</name>.<name>getX</name></name><argument_list>(<argument><expr><name>itemNo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>seriesXPoints</name>.<name>add</name></name><argument_list>(<argument><expr><name>xValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>xPoints</name>.<name>contains</name></name><argument_list>(<argument><expr><name>xValue</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>xPoints</name>.<name>add</name></name><argument_list>(<argument><expr><name>xValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>seriesNo</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>seriesNo</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>seriesNo</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>XYSeries</name></type> <name>dataSeries</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesNo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>!<call><name><name>dataSeries</name>.<name>equals</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>dataSeries</name>.<name>add</name></name><argument_list>(<argument><expr><name>xValue</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if> 
                }</block></for>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>xPoints</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>xPoint</name> =<init> <expr>(<name>Number</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>seriesXPoints</name>.<name>contains</name></name><argument_list>(<argument><expr><name>xPoint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>series</name>.<name>add</name></name><argument_list>(<argument><expr><name>xPoint</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = <name>savedState</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Updates the x-values for all the series in the dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateXPoints</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = false</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>s</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>s</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>updateXPoints</name><argument_list>(<argument><expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoPrune</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>prune</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = true</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of series in the collection.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of x values in the dataset.
     *
     * @return The number of x values in the dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>xPoints</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then> 
        <else>else <block>{
            <return>return <expr><call><name><name>this</name>.<name>xPoints</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The series (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>XYSeries</name></type> <name>getSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The key for a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check arguments...delegated</comment>
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The number of items in the specified series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check arguments...delegated</comment>
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The x-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>s</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataItem</name></type> <name>dataItem</name> =<init> <expr><call><name><name>s</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>dataItem</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting X value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getStartX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending X value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getEndX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param index  the index of the item of interest (zero-based).
     *
     * @return The y-value for the specified series and item (possibly 
     *         &lt;code&gt;null&lt;/code&gt;). 
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>ts</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataItem</name></type> <name>dataItem</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>dataItem</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting Y value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending Y value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes all the series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAllSeries</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// Unregister the collection as a change listener to each series in</comment>
        <comment type="line">// the collection.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYSeries</name></type> <name>series</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Remove all the series from the collection and notify listeners.</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>xPoints</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>XYSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// check arguments...</comment>
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// remove the series...</comment>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>contains</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>xPoints</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the collection and sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param series  the series (zero based index).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// check arguments...</comment>
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt; <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// fetch the series, remove the change listener, then remove the series.</comment>
        <decl_stmt><decl><type><name>XYSeries</name></type> <name>s</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>xPoints</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>autoPrune</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>prune</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes the items from all series for a given x value.
     *
     * @param x  the x-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAllValuesForX</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>x</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'x' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>savedState</name> =<init> <expr><name><name>this</name>.<name>propagateEvents</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = false</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>s</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>s</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYSeries</name></type> <name>series</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>remove</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>this</name>.<name>propagateEvents</name></name> = <name>savedState</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>xPoints</name>.<name>remove</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if all the y-values for the specified x-value
     * are &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param x  the x-value.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>canPrune</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>s</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>s</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>s</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYSeries</name></type> <name>series</name> =<init> <expr>(<name>XYSeries</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>series</name>.<name>getY</name></name><argument_list>(<argument><expr><call><name><name>series</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes all x-values for which all the y-values are &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>prune</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>HashSet</name></type> <name>hs</name> =<init> <expr>(<name>HashSet</name>) <call><name><name>this</name>.<name>xPoints</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>hs</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr>(<name>Number</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>canPrune</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>removeAllValuesForX</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></function>
    
    <comment type="javadoc">/**
     * This method receives notification when a series belonging to the dataset
     * changes.  It responds by updating the x-points for the entire dataset 
     * and sending a {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param event  information about the change.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>seriesChanged</name><parameter_list>(<param><decl><type><name>SeriesChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>propagateEvents</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>updateXPoints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this collection for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultTableXYDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultTableXYDataset</name></type> <name>that</name> =<init> <expr>(<name>DefaultTableXYDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoPrune</name></name> != <name><name>that</name>.<name>autoPrune</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>propagateEvents</name></name> != <name><name>that</name>.<name>propagateEvents</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>intervalDelegate</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>intervalDelegate</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name><name>this</name>.<name>data</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>data</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> 
                 + (<name><name>this</name>.<name>xPoints</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>xPoints</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>propagateEvents</name></name> ? 1 : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>autoPrune</name></name> ? 1 : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainLowerBound</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainUpperBound</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's domain.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDomainBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>includeInterval</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getDomainBounds</name></name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>iterateDomainBounds</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the interval position factor. 
     * 
     * @return The interval position factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalPositionFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getIntervalPositionFactor</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the interval position factor. Must be between 0.0 and 1.0 inclusive.
     * If the factor is 0.5, the gap is in the middle of the x values. If it
     * is lesser than 0.5, the gap is farther to the left and if greater than
     * 0.5 it gets farther to the right.
     *  
     * @param d the new interval position factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIntervalPositionFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setIntervalPositionFactor</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * returns the full interval width. 
     * 
     * @return The interval width to use.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getIntervalWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>getIntervalWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the interval width to a fixed value, and sends a 
     * {@link DatasetChangeEvent} to all registered listeners. 
     * 
     * @param d  the new interval width (must be &gt; 0).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIntervalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setFixedIntervalWidth</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns whether the interval width is automatically calculated or not.
     * 
     * @return A flag that determines whether or not the interval width is 
     *         automatically calculated.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAutoWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>isAutoWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates whether the interval width is automatically
     * calculated or not. 
     * 
     * @param b  a boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidth</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervalDelegate</name>.<name>setAutoWidth</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
 
}</block></class>
</unit>
