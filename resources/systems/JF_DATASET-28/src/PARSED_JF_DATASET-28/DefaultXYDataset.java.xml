<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-28\src\DefaultXYDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * DefaultXYDataset.java
 * ---------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 06-Jul-2006 : Version 1 (DG);
 * 02-Nov-2006 : Fixed a problem with adding a new series with the same key
 *               as an existing series (see bug 1589392) (DG);
 * 25-Jan-2007 : Implemented PublicCloneable (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainOrder</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A default implementation of the {@link XYDataset} interface that stores
 * data values in arrays of double primitives.
 * 
 * @since 1.0.2
 */</comment>
<class><specifier>public</specifier> class <name>DefaultXYDataset</name> <super><extends>extends <name>AbstractXYDataset</name></extends> 
        <implements>implements <name>XYDataset</name>, <name>PublicCloneable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Storage for the series keys.  This list must be kept in sync with the
     * seriesList.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>seriesKeys</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Storage for the series in the dataset.  We use a list because the
     * order of the series is significant.  This list must be kept in sync 
     * with the seriesKeys list.
     */</comment> 
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>seriesList</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;DefaultXYDataset&lt;/code&gt; instance, initially 
     * containing no data.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultXYDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesList</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.  
     *
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     *
     * @return The key for the series.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;series&lt;/code&gt; is not in the 
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Series index out of bounds"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>Comparable</name>) <call><name><name>this</name>.<name>seriesKeys</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the series with the specified key, or -1 if there 
     * is no such series in the dataset.
     * 
     * @param seriesKey  the series key (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The index, or -1.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>seriesKey</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesKeys</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>seriesKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the order of the domain (x-) values in the dataset.  In this
     * implementation, we cannot guarantee that the x-values are ordered, so 
     * this method returns &lt;code&gt;DomainOrder.NONE&lt;/code&gt;.
     * 
     * @return &lt;code&gt;DomainOrder.NONE&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>DomainOrder</name>.<name>NONE</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * 
     * @return The item count.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;series&lt;/code&gt; is not in the 
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Series index out of bounds"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>seriesArray</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>seriesArray</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for an item within a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount(series)&lt;/code&gt;).
     *     
     * @return The x-value.
     * 
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is not 
     *     within the specified range.
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not 
     *     within the specified range.
     * 
     * @see #getX(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getXValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>seriesData</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>seriesData</name><index>[<expr>0</expr>]</index><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for an item within a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount(series)&lt;/code&gt;).
     *     
     * @return The x-value.
     * 
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is not 
     *     within the specified range.
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not 
     *     within the specified range.
     * 
     * @see #getXValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name>getXValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for an item within a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount(series)&lt;/code&gt;).
     *     
     * @return The y-value.
     * 
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is not 
     *     within the specified range.
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not 
     *     within the specified range.
     * 
     * @see #getY(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getYValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>seriesData</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>seriesData</name><index>[<expr>1</expr>]</index><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for an item within a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getItemCount(series)&lt;/code&gt;).
     *     
     * @return The y-value.
     * 
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is not 
     *     within the specified range.
     * @throws ArrayIndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is not 
     *     within the specified range.
     *     
     * @see #getX(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name>getYValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a series or if a series with the same key already exists replaces
     * the data for that series, then sends a {@link DatasetChangeEvent} to 
     * all registered listeners.
     * 
     * @param seriesKey  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param data  the data (must be an array with length 2, containing two 
     *     arrays of equal length, the first containing the x-values and the
     *     second containing the y-values). 
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>seriesKey</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>seriesKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'seriesKey' cannot be null."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>data</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The 'data' is null."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>data</name>.<name>length</name></name> != 2</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'data' array must have length == 2."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>data</name><index>[<expr>0</expr>]</index></name>.<name>length</name> != <name><name>data</name><index>[<expr>1</expr>]</index></name>.<name>length</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"The 'data' array must contain two arrays with equal length."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesIndex</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>seriesKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>seriesIndex</name> == -1</expr>)</condition><then> <block>{  <comment type="line">// add a new series</comment>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesKeys</name>.<name>add</name></name><argument_list>(<argument><expr><name>seriesKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>add</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{  <comment type="line">// replace an existing series</comment>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>remove</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>add</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the dataset, then sends a 
     * {@link DatasetChangeEvent} to all registered listeners.
     * 
     * @param seriesKey  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>seriesKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>seriesIndex</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>seriesKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>seriesIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesKeys</name>.<name>remove</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>remove</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;DefaultXYDataset&lt;/code&gt; instance for equality with an
     * arbitrary object.  This method returns &lt;code&gt;true&lt;/code&gt; if and only if:
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of 
     *         &lt;code&gt;DefaultXYDataset&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;both datasets have the same number of series, each containing 
     *         exactly the same values.&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultXYDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>that</name> =<init> <expr>(<name>DefaultXYDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesKeys</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesKeys</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>d1</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>d2</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>that</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d1x</name> =<init> <expr><name><name>d1</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d2x</name> =<init> <expr><name><name>d2</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>d1x</name></expr></argument>, <argument><expr><name>d2x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d1y</name> =<init> <expr><name><name>d1</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>d2y</name> =<init> <expr><name><name>d2</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>            
            <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>d1y</name></expr></argument>, <argument><expr><name>d2y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>seriesKeys</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>this</name>.<name>seriesList</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates an independent copy of this dataset.
     * 
     * @return The cloned dataset.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning the
     *     dataset (for instance, if a non-cloneable object is used for a
     *     series key).
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultXYDataset</name></type> <name>clone</name> =<init> <expr>(<name>DefaultXYDataset</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesKeys</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesList</name></name> = new <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr>(<name><name>double</name><index>[]</index><index>[]</index></name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr><name><name>data</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>y</name> =<init> <expr><name><name>data</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>xx</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>x</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>yy</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>y</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>x</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>y</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>seriesList</name>.<name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>new <name><name>double</name><index>[]</index><index>[]</index></name> <block>{<expr><name>xx</name></expr>, <expr><name>yy</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
