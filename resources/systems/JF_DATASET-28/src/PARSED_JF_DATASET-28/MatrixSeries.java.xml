<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-28\src\MatrixSeries.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * MatrixSeries.java
 * -----------------
 * (C) Copyright 2003-2007, by Barak Naveh and Contributors.
 *
 * Original Author:  Barak Naveh;;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Zhitao Wang;
 *
 * Changes
 * -------
 * 10-Jul-2003 : Version 1 contributed by Barak Naveh (DG);
 * 10-Feb-2004 : Fixed Checkstyle complaints (DG);
 * 21-May-2004 : Fixed bug 940188 - problem in getItemColumn() and 
 *               getItemRow() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 27-Nov-2006 : Fixed bug in equals() method (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Series</name></name>;</import>

<comment type="javadoc">/**
 * Represents a dense matrix M[i,j] where each Mij item of the matrix has a
 * value (default is 0).
 */</comment>
<class><specifier>public</specifier> class <name>MatrixSeries</name> <super><extends>extends <name>Series</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7934188527308315704L</expr></init></decl>;</decl_stmt>    
    
    <comment type="javadoc">/** Series matrix values */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new matrix series.
     * &lt;p&gt;
     * By default, all matrix items are initialzed to 0.
     * &lt;/p&gt;
     *
     * @param name  series name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param rows  the number of rows.
     * @param columns  the number of columns.
     */</comment>
    <constructor><specifier>public</specifier> <name>MatrixSeries</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>int</name></type> <name>rows</name></decl></param>, <param><decl><type><name>int</name></type> <name>columns</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <name><name>double</name><index>[<expr><name>rows</name></expr>]</index><index>[<expr><name>columns</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zeroAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of columns in this matrix series.
     *
     * @return The number of columns in this matrix series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnsCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>data</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Return the matrix item at the specified index.  Note that this method
     * creates a new &lt;code&gt;Double&lt;/code&gt; instance every time it is called.
     *
     * @param itemIndex item index.
     *
     * @return The matrix item at the specified index.
     * 
     * @see #get(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name>getItemRow</name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><call><name>getItemColumn</name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>n</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the column of the specified item.
     *
     * @param itemIndex the index of the item.
     *
     * @return The column of the specified item.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemColumn</name><parameter_list>(<param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//assert itemIndex &gt;= 0 &amp;&amp; itemIndex &lt; getItemCount();</comment>
        <return>return <expr><name>itemIndex</name> % <call><name>getColumnsCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the number of items in the series.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRowCount</name><argument_list>()</argument_list></call> * <call><name>getColumnsCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the row of the specified item.
     *
     * @param itemIndex the index of the item.
     *
     * @return The row of the specified item.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemRow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//assert itemIndex &gt;= 0 &amp;&amp; itemIndex &lt; getItemCount();</comment>
        <return>return <expr><name>itemIndex</name> / <call><name>getColumnsCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the number of rows in this matrix series.
     *
     * @return The number of rows in this matrix series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>data</name>.<name>length</name></name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the value of the specified item in this matrix series.
     *
     * @param i the row of the item.
     * @param j the column of the item.
     *
     * @return The value of the specified item in this matrix series.
     * 
     * @see #getItem(int)
     * @see #update(int, int, double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>j</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Updates the value of the specified item in this matrix series.
     *
     * @param i the row of the item.
     * @param j the column of the item.
     * @param mij the new value for the item.
     * 
     * @see #get(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>j</name></decl></param>, <param><decl><type><name>double</name></type> <name>mij</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> = <name>mij</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Sets all matrix values to zero and sends a 
     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered 
     * listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zeroAll</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rows</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name>getColumnsCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>row</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>row</name> &lt; <name>rows</name></expr>;</condition> <incr><expr><name>row</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>column</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>column</name> &lt; <name>columns</name></expr>;</condition> <incr><expr><name>column</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name><name>this</name>.<name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>column</name></expr>]</index></name> = 0.0</expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MatrixSeries</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>that</name> =<init> <expr>(<name>MatrixSeries</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<call><name>getRowCount</name><argument_list>()</argument_list></call> == <call><name><name>that</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name>getColumnsCount</name><argument_list>()</argument_list></call> == <call><name><name>that</name>.<name>getColumnsCount</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <call><name>getRowCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <call><name>getColumnsCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> != <call><name><name>that</name>.<name>get</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
