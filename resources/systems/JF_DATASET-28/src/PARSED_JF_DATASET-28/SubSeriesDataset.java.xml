<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-28\src\SubSeriesDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * SubseriesDataset.java
 * ---------------------
 * (C) Copyright 2001-2007, by Bill Kelemen and Contributors.
 *
 * Original Author:  Bill Kelemen;
 * Contributor(s):   Sylvain Vieujot;
 *                   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 06-Dec-2001 : Version 1 (BK);
 * 05-Feb-2002 : Added SignalsDataset (and small change to HighLowDataset 
 *               interface) as requested by Sylvain Vieujot (DG);
 * 28-Feb-2002 : Fixed bug: missing map[series] in IntervalXYDataset and 
 *               SignalsDataset methods (BK);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 06-May-2004 : Now extends AbstractIntervalXYDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 29-Nov-2005 : Removed SignalsDataset (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>AbstractIntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>OHLCDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>

<comment type="javadoc">/**
 * This class will create a dataset with one or more series from another
 * {@link SeriesDataset}. 
 */</comment>
<class><specifier>public</specifier> class <name>SubSeriesDataset</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends>
                              <implements>implements <name>OHLCDataset</name>,
                                         <name>IntervalXYDataset</name>,
                                         <name>CombinationDataset</name></implements></super> <block>{

    <comment type="javadoc">/** The parent dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SeriesDataset</name></type> <name>parent</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for map. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name><index>[]</index></type> <name>map</name></decl>;</decl_stmt>  <comment type="line">// maps our series into our parent's</comment>

    <comment type="javadoc">/**
     * Creates a SubSeriesDataset using one or more series from 
     * &lt;code&gt;parent&lt;/code&gt;.  The series to use are passed as an array of int.
     *
     * @param parent  underlying dataset
     * @param map  int[] of series from parent to include in this Dataset
     */</comment>
    <constructor><specifier>public</specifier> <name>SubSeriesDataset</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>parent</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>map</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>map</name></name> = <name>map</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a SubSeriesDataset using one series from &lt;code&gt;parent&lt;/code&gt;.
     * The series to is passed as an int.
     *
     * @param parent  underlying dataset
     * @param series  series from parent to include in this Dataset
     */</comment>
    <constructor><specifier>public</specifier> <name>SubSeriesDataset</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>parent</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr>new <name><name>int</name><index>[]</index></name> <block>{<expr><name>series</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From HighLowDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the high-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The high-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getHigh</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getHigh</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the high-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The high-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHighValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>high</name> =<init> <expr><call><name>getHigh</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>high</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>high</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The low-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getLow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getLow</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The low-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>low</name> =<init> <expr><call><name>getLow</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>low</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>low</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The open-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getOpen</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getOpen</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The open-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getOpenValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>open</name> =<init> <expr><call><name>getOpen</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>open</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>open</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The close-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getClose</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getClose</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The close-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCloseValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>close</name> =<init> <expr><call><name>getClose</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>close</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>close</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link OHLCDataset}.
     *
     * @param series  the series (zero based index).
     * @param item  the item (zero based index).
     *
     * @return The volume.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getVolume</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getVolume</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The volume-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getVolumeValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>volume</name> =<init> <expr><call><name>getVolume</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>volume</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>volume</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From XYDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the X-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based);
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The X-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>XYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getX</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the Y-value for the specified series and item.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The Y-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>XYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getY</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in a series.
     * &lt;p&gt;
     * Note: throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series if not from a 
     * {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     *
     * @return The number of items in a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<name>XYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getItemCount</name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From SeriesDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     *
     * @return The number of series in the dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>map</name>.<name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The name of a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>parent</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From IntervalXYDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The starting X value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>parent</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getStartX</name><argument_list>(
                <argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>
            )</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getX</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The ending X value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>parent</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getEndX</name><argument_list>(
                <argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>
            )</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getX</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The starting Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>parent</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getStartY</name><argument_list>(
                <argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>
            )</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The ending Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>,  <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>parent</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>this</name>.<name>parent</name></name>).<call><name>getEndY</name><argument_list>(
                <argument><expr><name><name>this</name>.<name>map</name><index>[<expr><name>series</name></expr>]</index></name></expr></argument>, <argument><expr><name>item</name></expr></argument>
            )</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// New methods from CombinationDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the parent Dataset of this combination.
     *
     * @return The parent Dataset of this combination.
     */</comment>
    <function><type><specifier>public</specifier> <name>SeriesDataset</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>parent</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a map or indirect indexing form our series into parent's series.
     *
     * @return A map or indirect indexing form our series into parent's series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>getMap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name><name>int</name><index>[]</index></name>) <call><name><name>this</name>.<name>map</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
