<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-29\src\ComparableObjectSeries.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * ComparableObjectSeries.java
 * ---------------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 19-Oct-2006 : New class (DG);
 * 31-Oct-2007 : Implemented faster hashCode() (DG);
 * 27-Nov-2007 : Changed clear() from protected to public (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Series</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>SeriesException</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A (possibly ordered) list of (Comparable, Object) data items.
 *
 * @since 1.0.3
 */</comment>
<class><specifier>public</specifier> class <name>ComparableObjectSeries</name> <super><extends>extends <name>Series</name></extends> 
        <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** Storage for the data items in the series. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum number of items for the series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumItemCount</name> =<init> <expr><name><name>Integer</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the items are automatically sorted. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoSort</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not duplicate x-values are allowed. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>allowDuplicateXValues</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new empty series.  By default, items added to the series will 
     * be sorted into ascending order by x-value, and duplicate x-values will 
     * be allowed (these defaults can be modified with another constructor.
     *
     * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>ComparableObjectSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Constructs a new series that contains no data.  You can specify 
     * whether or not duplicate x-values are allowed for the series.
     *
     * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param autoSort  a flag that controls whether or not the items in the 
     *                  series are sorted.
     * @param allowDuplicateXValues  a flag that controls whether duplicate 
     *                               x-values are allowed.
     */</comment>
    <constructor><specifier>public</specifier> <name>ComparableObjectSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>autoSort</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>allowDuplicateXValues</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoSort</name></name> = <name>autoSort</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>allowDuplicateXValues</name></name> = <name>allowDuplicateXValues</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the flag that controls whether the items in the series are 
     * automatically sorted.  There is no setter for this flag, it must be 
     * defined in the series constructor.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAutoSort</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoSort</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether duplicate x-values are allowed.  
     * This flag can only be set in the constructor.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAllowDuplicateXValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>allowDuplicateXValues</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the series.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum number of items that will be retained in the series.
     * The default value is &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
     *
     * @return The maximum item count.
     * @see #setMaximumItemCount(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumItemCount</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum number of items that will be retained in the series.  
     * If you add a new item to the series such that the number of items will 
     * exceed the maximum item count, then the first element in the series is 
     * automatically removed, ensuring that the maximum item count is not 
     * exceeded.
     * &lt;p&gt;
     * Typically this value is set before the series is populated with data,
     * but if it is applied later, it may cause some items to be removed from
     * the series (in which case a {@link SeriesChangeEvent} will be sent to
     * all registered listeners.
     *
     * @param maximum  the maximum number of items for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maximum</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumItemCount</name></name> = <name>maximum</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>dataRemoved</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>maximum</name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            <expr_stmt><expr><name>dataRemoved</name> = true</expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>dataRemoved</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds new data to the series and sends a {@link SeriesChangeEvent} to 
     * all registered listeners.
     * &lt;P&gt;
     * Throws an exception if the x-value is a duplicate AND the 
     * allowDuplicateXValues flag is false.
     *
     * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>x</name></decl></param>, <param><decl><type><name>Object</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// argument checking delegated...</comment>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds new data to the series and, if requested, sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * Throws an exception if the x-value is a duplicate AND the 
     * allowDuplicateXValues flag is false.
     *
     * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  a flag the controls whether or not a 
     *                {@link SeriesChangeEvent} is sent to all registered 
     *                listeners.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>x</name></decl></param>, <param><decl><type><name>Object</name></type> <name>y</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate argument checking to XYDataItem...</comment>
        <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr>new <call><name>ComparableObjectItem</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a data item to the series and, if requested, sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     *
     * @param item  the (x, y) item (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  a flag that controls whether or not a 
     *                {@link SeriesChangeEvent} is sent to all registered 
     *                listeners.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>ComparableObjectItem</name></type> <name>item</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>item</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'item' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>autoSort</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr>-<name>index</name> - 1</expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>allowDuplicateXValues</name></name></expr>)</condition><then> <block>{
                    <comment type="line">// need to make sure we are adding *after* any duplicates</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><name>index</name> &lt; <name>size</name> 
                           &amp;&amp; <call><name><name>item</name>.<name>compareTo</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition> <block>{
                        <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                    }</block></while>
                    <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(<argument><expr>"X-value already exists."</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></else></if>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr>!<name><name>this</name>.<name>allowDuplicateXValues</name></name></expr>)</condition><then> <block>{
                <comment type="line">// can't allow duplicate values, so we need to check whether</comment>
                <comment type="line">// there is an item with the given x-value already</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getComparable</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
                    <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(<argument><expr>"X-value already exists."</expr></argument>)</argument_list></call></expr>;</throw>      
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>getItemCount</name><argument_list>()</argument_list></call> &gt; <name><name>this</name>.<name>maximumItemCount</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>                    
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the item with the specified x-value, or a negative 
     * index if the series does not contain an item with that x-value.  Be 
     * aware that for an unsorted series, the index is found by iterating 
     * through all items in the series.
     * 
     * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoSort</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr>new <call><name>ComparableObjectItem</name><argument_list>(
                    <argument><expr><name>x</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr>(<name>ComparableObjectItem</name>) 
                        <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>item</name>.<name>getComparable</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><name>i</name></expr>;</return>   
                }</block></then></if>
            }</block></for>
            <return>return <expr>-1</expr>;</return>
        }</block></else></if>
    }</block></function> 

    <comment type="javadoc">/**
     * Updates an item in the series.
     * 
     * @param x  the x-value (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param y  the y-value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @throws SeriesException if there is no existing item with the specified
     *         x-value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>update</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>x</name></decl></param>, <param><decl><type><name>Object</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>indexOf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>SeriesException</name><argument_list>(<argument><expr>"No observation for x = " + <name>x</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>item</name>.<name>setObject</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Updates the value of an item in the series and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     * 
     * @param index  the item (zero based index).
     * @param y  the new value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>updateByIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Object</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setObject</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Return the data item with the specified index.
     *
     * @param index  the index.
     *
     * @return The data item with the specified index.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ComparableObjectItem</name></type> <name>getDataItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>ComparableObjectItem</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Deletes a range of items from the series and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     *
     * @param start  the start index (zero-based).
     * @param end  the end index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>delete</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>end</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes all data items from the series and, unless the series is 
     * already empty, sends a {@link SeriesChangeEvent} to all registered 
     * listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes the item at the specified index and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     * 
     * @param index  the index.
     * 
     * @return The item removed.
     */</comment>
    <function><type><specifier>protected</specifier> <name>ComparableObjectItem</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>result</name> =<init> <expr>(<name>ComparableObjectItem</name>) <call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(
                <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fireSeriesChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes the item with the specified x-value and sends a 
     * {@link SeriesChangeEvent} to all registered listeners.
     * 
     * @param x  the x-value.

     * @return The item removed.
     */</comment>
    <function><type><specifier>public</specifier> <name>ComparableObjectItem</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>remove</name><argument_list>(<argument><expr><call><name>indexOf</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this series for equality with an arbitrary object.
     *
     * @param obj  the object to test against for equality 
     *             (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ComparableObjectSeries</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ComparableObjectSeries</name></type> <name>that</name> =<init> <expr>(<name>ComparableObjectSeries</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>maximumItemCount</name></name> != <name><name>that</name>.<name>maximumItemCount</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoSort</name></name> != <name><name>that</name>.<name>autoSort</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>allowDuplicateXValues</name></name> != <name><name>that</name>.<name>allowDuplicateXValues</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// it is too slow to look at every data item, so let's just look at</comment>
        <comment type="line">// the first, middle and last items...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>count</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> &gt; 2</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ComparableObjectItem</name></type> <name>item</name> =<init> <expr><call><name>getDataItem</name><argument_list>(<argument><expr><name>count</name> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call><name><name>item</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <name><name>this</name>.<name>maximumItemCount</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>autoSort</name></name> ? 1 : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>allowDuplicateXValues</name></name> ? 1 : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
