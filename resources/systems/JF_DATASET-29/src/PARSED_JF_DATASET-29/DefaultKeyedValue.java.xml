<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-29\src\DefaultKeyedValue.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * DefaultKeyedValue.java
 * ----------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 31-Oct-2002 : Version 1 (DG);
 * 13-Mar-2003 : Added equals() method, and implemented Serializable (DG);
 * 18-Aug-2003 : Implemented Cloneable (DG);
 * 18-Aug-2004 : Moved from org.jfree.data --&gt; org.jfree.data.base (DG);
 * 15-Sep-2004 : Added PublicCloneable interface (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 11-Jun-2007 : Added toString() method to help with debugging (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A (key, value) pair.  This class provides a default implementation 
 * of the {@link KeyedValue} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultKeyedValue</name> <super><implements>implements <name>KeyedValue</name>, 
                                          <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                          <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7388924517460437712L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The key. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>key</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new (key, value) item.
     *
     * @param key  the key (should be immutable).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultKeyedValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the key.
     *
     * @return The key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>key</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value.
     *
     * @return The value (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>value</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value.
     *
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this key-value pair for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultKeyedValue</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// TODO: modify this so that we check for equality with any KeyedValue</comment>
        <comment type="line">// rather than specifically a DefaultKeyedValue</comment>
        <decl_stmt><decl><type><name>DefaultKeyedValue</name></type> <name>that</name> =<init> <expr>(<name>DefaultKeyedValue</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// TODO: the following checks for null should be handled in a utility </comment>
        <comment type="line">// method</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>key</name></name> != <name>null</name> ? !<call><name><name>this</name>.<name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>key</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>value</name></name> != <name>null</name> 
                ? !<call><name><name>this</name>.<name>value</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>value</name></name></expr></argument>)</argument_list></call> : <name><name>that</name>.<name>value</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name><name>this</name>.<name>key</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>key</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>value</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>value</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone.  It is assumed that both the key and value are 
     * immutable objects, so only the references are cloned, not the objects 
     * themselves.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException Not thrown by this class, but 
     *         subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultKeyedValue</name></type> <name>clone</name> =<init> <expr>(<name>DefaultKeyedValue</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Returns a string representing this instance, primarily useful for 
     * debugging.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"(" + <call><name><name>this</name>.<name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call> + ", " + <call><name><name>this</name>.<name>value</name>.<name>toString</name></name><argument_list>()</argument_list></call> + ")"</expr>;</return>
    }</block></function>

}</block></class>
</unit>
