<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-29\src\KeyedObjects.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * KeyedObjects.java
 * -----------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 31-Oct-2002 : Version 1 (DG);
 * 11-Jan-2005 : Minor tidy up (DG);
 * 28-Sep-2007 : Clean up equals() method (DG);
 * 03-Oct-2007 : Make method behaviour consistent with DefaultKeyedValues (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A collection of (key, object) pairs.
 */</comment>
<class><specifier>public</specifier> class <name>KeyedObjects</name> <super><implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1321582394193530984L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new collection (initially empty).
     */</comment>
    <constructor><specifier>public</specifier> <name>KeyedObjects</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of items (values) in the collection.
     *
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an object from the list.
     *
     * @param item  the item index (zero-based).
     *
     * @return The object (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObject</name><parameter_list>(<param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyedObject</name></type> <name>kobj</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>kobj</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>kobj</name>.<name>getObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key at the specified position in the list.
     *
     * @param index  the item index (zero-based).
     *
     * @return The row key.
     *
     * @throws IndexOutOfBoundsException if &lt;code&gt;item&lt;/code&gt; is out of bounds.
     * 
     * @see #getIndex(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyedObject</name></type> <name>item</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index for a given key, or &lt;code&gt;-1&lt;/code&gt;.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The index, or &lt;code&gt;-1&lt;/code&gt; if the key is unrecognised.
     * 
     * @see #getKey(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>KeyedObject</name></type> <name>ko</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>ko</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list containing all the keys in the list.
     *
     * @return The keys (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getKeys</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>KeyedObject</name></type> <name>ko</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>ko</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the object for a given key. If the key is not recognised, the 
     * method should return &lt;code&gt;null&lt;/code&gt;.
     *
     * @param key  the key.
     *
     * @return The object (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #addObject(Comparable, Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getObject</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"The key (" + <name>key</name> 
                    + ") is not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>getObject</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a new object to the collection, or overwrites an existing object.  
     * This is the same as the {@link #setObject(Comparable, Object)} method.
     *
     * @param key  the key.
     * @param object  the object.
     * 
     * @see #getObject(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addObject</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Replaces an existing object, or adds a new object to the collection.
     * This is the same as the {@link #addObject(Comparable, Object)} 
     * method.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param object  the object.
     * 
     * @see #getObject(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setObject</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>keyIndex</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>keyIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>KeyedObject</name></type> <name>ko</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>keyIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>ko</name>.<name>setObject</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>KeyedObject</name></type> <name>ko</name> =<init> <expr>new <call><name>KeyedObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>ko</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Inserts a new value at the specified position in the dataset or, if
     * there is an existing item with the specified key, updates the value 
     * for that item and moves it to the specified position.
     * 
     * @param position  the position (in the range &lt;code&gt;0&lt;/code&gt; to 
     *                  &lt;code&gt;getItemCount()&lt;/code&gt;).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>insertValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>position</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Object</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> &lt; 0 || <name>position</name> &gt; <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"'position' out of bounds."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pos</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>KeyedObject</name></type> <name>item</name> =<init> <expr>new <call><name>KeyedObject</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>position</name> &lt;= <call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a value from the collection.
     *
     * @param index  the index of the item to remove.
     * 
     * @see #removeValue(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a value from the collection.
     *
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeValue(int)
     * 
     * @throws UnknownKeyException if the key is not recognised.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking </comment>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>getIndex</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>UnknownKeyException</name><argument_list>(<argument><expr>"The key (" + <call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call> 
                    + ") is not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>removeValue</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all values from the collection.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of this object.  Keys in the list should be immutable
     * and are not cloned.  Objects in the list are cloned only if they
     * implement {@link PublicCloneable}.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>clone</name> =<init> <expr>(<name>KeyedObjects</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>KeyedObject</name></type> <name>ko</name> =<init> <expr>(<name>KeyedObject</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>ko</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>clone</name></expr>;</return>      
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>KeyedObjects</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>KeyedObjects</name></type> <name>that</name> =<init> <expr>(<name>KeyedObjects</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> != <call><name><name>that</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k1</name> =<init> <expr><call><name>getKey</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Comparable</name></type> <name>k2</name> =<init> <expr><call><name><name>that</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>k1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>k2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>Object</name></type> <name>o1</name> =<init> <expr><call><name>getObject</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>o2</name> =<init> <expr><call><name><name>that</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>o1</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>o2</name> != <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr>!<call><name><name>o1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr>false</expr>;</return>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name><name>this</name>.<name>data</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>data</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</return>
    }</block></function>
  
}</block></class>
</unit>
