<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-29\src\KeyedValueComparator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * KeyedValueComparator.java
 * -------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 05-Mar-2003 : Version 1 (DG);
 * 27-Aug-2003 : Moved SortOrder from org.jfree.data --&gt; org.jfree.util (DG);
 * 12-Jan-2005 : Added accessor methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Comparator</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>SortOrder</name></name>;</import>

<comment type="javadoc">/**
 * A utility class that can compare and order two {@link KeyedValue} instances 
 * and sort them into ascending or descending order by key or by value.
 */</comment>
<class><specifier>public</specifier> class <name>KeyedValueComparator</name> <super><implements>implements <name>Comparator</name></implements></super> <block>{

    <comment type="javadoc">/** The comparator type. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>KeyedValueComparatorType</name></type> <name>type</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The sort order. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SortOrder</name></type> <name>order</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new comparator.
     *
     * @param type  the type (&lt;code&gt;BY_KEY&lt;/code&gt; or &lt;code&gt;BY_VALUE&lt;/code&gt;, 
     *              &lt;code&gt;null&lt;/code&gt; not permitted).
     * @param order  the order (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>KeyedValueComparator</name><parameter_list>(<param><decl><type><name>KeyedValueComparatorType</name></type> <name>type</name></decl></param>, 
                                <param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>order</name></name> = <name>order</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the type.
     * 
     * @return The type (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>KeyedValueComparatorType</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>type</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the sort order.
     * 
     * @return The sort order (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>SortOrder</name></type> <name>getOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>order</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Compares two {@link KeyedValue} instances and returns an 
     * &lt;code&gt;int&lt;/code&gt; that indicates the relative order of the two objects.
     *
     * @param o1  object 1.
     * @param o2  object 2.
     *
     * @return An int indicating the relative order of the objects.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>, <param><decl><type><name>Object</name></type> <name>o2</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>o2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>o1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>KeyedValue</name></type> <name>kv1</name> =<init> <expr>(<name>KeyedValue</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>KeyedValue</name></type> <name>kv2</name> =<init> <expr>(<name>KeyedValue</name>) <name>o2</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>type</name></name> == <name><name>KeyedValueComparatorType</name>.<name>BY_KEY</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>order</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>SortOrder</name>.<name>ASCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>kv1</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>kv2</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>order</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>SortOrder</name>.<name>DESCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>kv2</name>.<name>getKey</name></name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>kv1</name>.<name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unrecognised sort order."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>type</name></name> == <name><name>KeyedValueComparatorType</name>.<name>BY_VALUE</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>n1</name> =<init> <expr><call><name><name>kv1</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>n2</name> =<init> <expr><call><name><name>kv2</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n2</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>-1</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>n1</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr>1</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>d1</name> =<init> <expr><call><name><name>n1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>d2</name> =<init> <expr><call><name><name>n2</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>this</name>.<name>order</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>SortOrder</name>.<name>ASCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>d1</name> &gt; <name>d2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>d1</name> &lt; <name>d2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>order</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>SortOrder</name>.<name>DESCENDING</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>d1</name> &gt; <name>d2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>d1</name> &lt; <name>d2</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
                }</block></else></if></else></if>
            }</block></then>
            <else>else <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unrecognised sort order."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if></else></if>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unrecognised type."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
