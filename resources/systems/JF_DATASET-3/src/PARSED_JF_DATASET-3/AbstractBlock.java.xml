<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\AbstractBlock.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 * 
 * ------------------
 * AbstractBlock.java
 * ------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 02-Feb-2005 : Added accessor methods for margin (DG);
 * 04-Feb-2005 : Added equals() method and implemented Serializable (DG);
 * 03-May-2005 : Added null argument checks (DG);
 * 06-May-2005 : Added convenience methods for setting margin, border and 
 *               padding (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 16-Mar-2007 : Changed border from BlockBorder to BlockFrame, updated 
 *               equals(), and implemented Cloneable (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A convenience class for creating new classes that implement 
 * the {@link Block} interface.
 */</comment>
<class><specifier>public</specifier> class <name>AbstractBlock</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7689852412141274563L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The id for the block. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The margin around the outside of the block. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>margin</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The frame (or border) for the block. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BlockFrame</name></type> <name>frame</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The padding between the block content and the border. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>padding</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The natural width of the block (may be overridden if there are 
     * constraints in sizing).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>width</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The natural height of the block (may be overridden if there are 
     * constraints in sizing).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>height</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The current bounds for the block (position of the block in Java2D space).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>bounds</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new block.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractBlock</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>width</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>height</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bounds</name></name> = new <call><name><name>Rectangle2D</name>.<name>Float</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>margin</name></name> = <name><name>RectangleInsets</name>.<name>ZERO_INSETS</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>frame</name></name> = <name><name>BlockBorder</name>.<name>NONE</name></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name><name>RectangleInsets</name>.<name>ZERO_INSETS</name></name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the id.
     * 
     * @return The id (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setID(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>id</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the id for the block.
     * 
     * @param id  the id (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getID()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setID</name><parameter_list>(<param><decl><type><name>String</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>id</name></name> = <name>id</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the natural width of the block, if this is known in advance.
     * The actual width of the block may be overridden if layout constraints
     * make this necessary.  
     * 
     * @return The width.
     * 
     * @see #setWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>width</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the natural width of the block, if this is known in advance.
     * 
     * @param width  the width (in Java2D units)
     * 
     * @see #getWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>width</name></name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the natural height of the block, if this is known in advance.
     * The actual height of the block may be overridden if layout constraints
     * make this necessary.  
     * 
     * @return The height.
     * 
     * @see #setHeight(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>height</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the natural width of the block, if this is known in advance.
     * 
     * @param height  the width (in Java2D units)
     * 
     * @see #getHeight()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>height</name></name> = <name>height</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the margin.
     * 
     * @return The margin (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>margin</name></name></expr>;</return>
    }</block></function>
        
    <comment type="javadoc">/**
     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no 
     * padding).
     * 
     * @param margin  the margin (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMargin</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>margin</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'margin' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>margin</name></name> = <name>margin</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the margin.
     * 
     * @param top  the top margin.
     * @param left  the left margin.
     * @param bottom  the bottom margin.
     * @param right  the right margin.
     * 
     * @see #getMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>top</name></decl></param>, <param><decl><type><name>double</name></type> <name>left</name></decl></param>, <param><decl><type><name>double</name></type> <name>bottom</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setMargin</name><argument_list>(<argument><expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the border.
     * 
     * @return The border (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @deprecated Use {@link #getFrame()} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>BlockBorder</name></type> <name>getBorder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>frame</name></name> <name>instanceof</name> <name>BlockBorder</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>BlockBorder</name>) <name><name>this</name>.<name>frame</name></name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the border for the block (use {@link BlockBorder#NONE} for
     * no border).
     * 
     * @param border  the border (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBorder()
     * 
     * @deprecated Use {@link #setFrame(BlockFrame)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBorder</name><parameter_list>(<param><decl><type><name>BlockBorder</name></type> <name>border</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFrame</name><argument_list>(<argument><expr><name>border</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a black border with the specified line widths.
     * 
     * @param top  the top border line width.
     * @param left  the left border line width.
     * @param bottom  the bottom border line width.
     * @param right  the right border line width.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBorder</name><parameter_list>(<param><decl><type><name>double</name></type> <name>top</name></decl></param>, <param><decl><type><name>double</name></type> <name>left</name></decl></param>, <param><decl><type><name>double</name></type> <name>bottom</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFrame</name><argument_list>(<argument><expr>new <call><name>BlockBorder</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the current frame (border).
     * 
     * @return The frame.
     * 
     * @since 1.0.5
     * @see #setFrame(BlockFrame)
     */</comment>
    <function><type><specifier>public</specifier> <name>BlockFrame</name></type> <name>getFrame</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>frame</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the frame (or border).
     * 
     * @param frame  the frame (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.5
     * @see #getFrame()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFrame</name><parameter_list>(<param><decl><type><name>BlockFrame</name></type> <name>frame</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>frame</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'frame' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>frame</name></name> = <name>frame</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the padding.
     * 
     * @return The padding (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPadding(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>padding</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no 
     * padding).
     * 
     * @param padding  the padding (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPadding()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPadding</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>padding</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>padding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'padding' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name>padding</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the padding.
     * 
     * @param top  the top padding.
     * @param left  the left padding.
     * @param bottom  the bottom padding.
     * @param right  the right padding.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPadding</name><parameter_list>(<param><decl><type><name>double</name></type> <name>top</name></decl></param>, <param><decl><type><name>double</name></type> <name>left</name></decl></param>, <param><decl><type><name>double</name></type> <name>bottom</name></decl></param>, 
                           <param><decl><type><name>double</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setPadding</name><argument_list>(<argument><expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-offset for the content within the block.
     * 
     * @return The x-offset.
     * 
     * @see #getContentYOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getContentXOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>margin</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>getLeft</name><argument_list>()</argument_list></call> 
            + <call><name><name>this</name>.<name>padding</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-offset for the content within the block.
     * 
     * @return The y-offset.
     * 
     * @see #getContentXOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getContentYOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>margin</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>getTop</name><argument_list>()</argument_list></call> 
            + <call><name><name>this</name>.<name>padding</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the contents of the block, with no constraints, and returns 
     * the block size.
     * 
     * @param g2  the graphics device.
     * 
     * @return The block size (in Java2D units, never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{  
        <return>return <expr><call><name>arrange</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Arranges the contents of the block, within the given constraints, and 
     * returns the block size.
     * 
     * @param g2  the graphics device.
     * @param constraint  the constraint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The block size (in Java2D units, never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Size2D</name></type> <name>base</name> =<init> <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>constraint</name>.<name>calculateConstrainedSize</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the current bounds of the block.
     * 
     * @return The bounds.
     * 
     * @see #setBounds(Rectangle2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getBounds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>bounds</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the bounds of the block.
     * 
     * @param bounds  the bounds (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBounds()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBounds</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>bounds</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bounds</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'bounds' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>bounds</name></name> = <name>bounds</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculate the width available for content after subtracting 
     * the margin, border and padding space from the specified fixed 
     * width.
     * 
     * @param fixedWidth  the fixed width.
     * 
     * @return The available space.
     * 
     * @see #trimToContentHeight(double)
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>trimToContentWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>fixedWidth</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>margin</name>.<name>trimWidth</name></name><argument_list>(<argument><expr><name>fixedWidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>trimWidth</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>padding</name>.<name>trimWidth</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculate the height available for content after subtracting 
     * the margin, border and padding space from the specified fixed 
     * height.
     * 
     * @param fixedHeight  the fixed height.
     * 
     * @return The available space.
     * 
     * @see #trimToContentWidth(double)
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>trimToContentHeight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>fixedHeight</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>margin</name>.<name>trimHeight</name></name><argument_list>(<argument><expr><name>fixedHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>trimHeight</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>padding</name>.<name>trimHeight</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint for the content of this block that will result in
     * the bounds of the block matching the specified constraint.
     * 
     * @param c  the outer constraint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The content constraint.
     */</comment>
    <function><type><specifier>protected</specifier> <name>RectangleConstraint</name></type> <name>toContentConstraint</name><parameter_list>(<param><decl><type><name>RectangleConstraint</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'c' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>c</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>c</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>c</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>wr</name> =<init> <expr><call><name><name>c</name>.<name>getWidthRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>c</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>hr</name> =<init> <expr><call><name><name>c</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ww</name> =<init> <expr><call><name>trimToContentWidth</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>hh</name> =<init> <expr><call><name>trimToContentHeight</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>wwr</name> =<init> <expr><call><name>trimToContentWidth</name><argument_list>(<argument><expr><name>wr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>hhr</name> =<init> <expr><call><name>trimToContentHeight</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr><name>ww</name></expr></argument>, <argument><expr><name>wwr</name></expr></argument>, <argument><expr><call><name><name>c</name>.<name>getWidthConstraintType</name></name><argument_list>()</argument_list></call></expr></argument>, 
            <argument><expr><name>hh</name></expr></argument>, <argument><expr><name>hhr</name></expr></argument>, <argument><expr><call><name><name>c</name>.<name>getHeightConstraintType</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>Range</name></type> <name>trimToContentWidth</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>lowerBound</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upperBound</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lowerBound</name> = <call><name>trimToContentWidth</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> &lt; <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>upperBound</name> = <call><name>trimToContentWidth</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lowerBound</name></expr></argument>, <argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <function><type><specifier>private</specifier> <name>Range</name></type> <name>trimToContentHeight</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>lowerBound</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upperBound</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lowerBound</name> = <call><name>trimToContentHeight</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> &lt; <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>upperBound</name> = <call><name>trimToContentHeight</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lowerBound</name></expr></argument>, <argument><expr><name>upperBound</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds the margin, border and padding to the specified content width.
     * 
     * @param contentWidth  the content width.
     * 
     * @return The adjusted width.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateTotalWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>contentWidth</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name>contentWidth</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>padding</name>.<name>extendWidth</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>extendWidth</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>margin</name>.<name>extendWidth</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds the margin, border and padding to the specified content height.
     * 
     * @param contentHeight  the content height.
     * 
     * @return The adjusted height.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateTotalHeight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>contentHeight</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name>contentHeight</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>padding</name>.<name>extendHeight</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>extendHeight</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>margin</name>.<name>extendHeight</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reduces the specified area by the amount of space consumed 
     * by the margin.
     * 
     * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The trimmed area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>trimMargin</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>margin</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>area</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Reduces the specified area by the amount of space consumed 
     * by the border.
     * 
     * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The trimmed area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>trimBorder</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>frame</name>.<name>getInsets</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>area</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reduces the specified area by the amount of space consumed 
     * by the padding.
     * 
     * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The trimmed area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>trimPadding</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>padding</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>area</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the border around the perimeter of the specified area.
     * 
     * @param g2  the graphics device.
     * @param area  the area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawBorder</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>frame</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this block for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>AbstractBlock</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>AbstractBlock</name></type> <name>that</name> =<init> <expr>(<name>AbstractBlock</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>id</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>frame</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>frame</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>bounds</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>bounds</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>margin</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>margin</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>padding</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>padding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>height</name></name> != <name><name>that</name>.<name>height</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>width</name></name> != <name><name>that</name>.<name>width</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this block.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem creating the
     *         clone.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>AbstractBlock</name></type> <name>clone</name> =<init> <expr>(<name>AbstractBlock</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>bounds</name></name> = (<name>Rectangle2D</name>) <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>frame</name></name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PublicCloneable</name></type> <name>pc</name> =<init> <expr>(<name>PublicCloneable</name>) <name><name>this</name>.<name>frame</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>clone</name>.<name>frame</name></name> = (<name>BlockFrame</name>) <call><name><name>pc</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bounds</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bounds</name></name> = (<name>Rectangle2D</name>) <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
