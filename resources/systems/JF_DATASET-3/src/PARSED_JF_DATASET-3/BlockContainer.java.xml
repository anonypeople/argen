<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\BlockContainer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 * 
 * -------------------
 * BlockContainer.java
 * -------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 02-Feb-2005 : Added isEmpty() method (DG);
 * 04-Feb-2005 : Added equals(), clone() and implemented Serializable (DG);
 * 08-Feb-2005 : Updated for changes in RectangleConstraint (DG);
 * 20-Apr-2005 : Added new draw() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Jul-2006 : Perform translation directly on drawing area, not via 
 *               Graphics2D (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>StandardEntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A container for a collection of {@link Block} objects.  The container uses 
 * an {@link Arrangement} object to handle the position of each block.
 */</comment>
<class><specifier>public</specifier> class <name>BlockContainer</name> <super><extends>extends <name>AbstractBlock</name></extends> 
                            <implements>implements <name>Block</name>, 
                                       <name>Cloneable</name>, <name>PublicCloneable</name>,
                                       <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8199508075695195293L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The blocks within the container. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>blocks</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The object responsible for laying out the blocks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Arrangement</name></type> <name>arrangement</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance with default settings.
     */</comment>
    <constructor><specifier>public</specifier> <name>BlockContainer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>BorderArrangement</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance with the specified arrangement.
     * 
     * @param arrangement  the arrangement manager (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>BlockContainer</name><parameter_list>(<param><decl><type><name>Arrangement</name></type> <name>arrangement</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>arrangement</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'arrangement' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>arrangement</name></name> = <name>arrangement</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>blocks</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>    

    <comment type="javadoc">/**
     * Returns the arrangement (layout) manager for the container.
     * 
     * @return The arrangement manager (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Arrangement</name></type> <name>getArrangement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>arrangement</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the arrangement (layout) manager.
     * 
     * @param arrangement  the arrangement (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArrangement</name><parameter_list>(<param><decl><type><name>Arrangement</name></type> <name>arrangement</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>arrangement</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'arrangement' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>arrangement</name></name> = <name>arrangement</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if there are no blocks in the container, and
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>blocks</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an unmodifiable list of the {@link Block} objects managed by 
     * this arrangement.
     * 
     * @return A list of blocks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getBlocks</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>blocks</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a block to the container.
     * 
     * @param block  the block (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Block</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a block to the container.
     * 
     * @param block  the block (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Block</name></type> <name>block</name></decl></param>, <param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>blocks</name>.<name>add</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>arrangement</name>.<name>add</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all the blocks from the container.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>blocks</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>arrangement</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the contents of the block, within the given constraints, and 
     * returns the block size.
     * 
     * @param g2  the graphics device.
     * @param constraint  the constraint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The block size (in Java2D units, never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>arrangement</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the container and all the blocks within it.
     * 
     * @param g2  the graphics device.
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the block within the specified area.
     * 
     * @param g2  the graphics device.
     * @param area  the area.
     * @param params  passed on to blocks within the container 
     *                (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return An instance of {@link EntityBlockResult}, or &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Object</name></type> <name>params</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check if we need to collect chart entities from the container</comment>
        <decl_stmt><decl><type><name>EntityBlockParams</name></type> <name>ebp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StandardEntityCollection</name></type> <name>sec</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> <name>instanceof</name> <name>EntityBlockParams</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ebp</name> = (<name>EntityBlockParams</name>) <name>params</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>ebp</name>.<name>getGenerateEntities</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sec</name> = new <call><name>StandardEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>contentArea</name> =<init> <expr>(<name>Rectangle2D</name>) <call><name><name>area</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>contentArea</name> = <call><name>trimMargin</name><argument_list>(<argument><expr><name>contentArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBorder</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>contentArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contentArea</name> = <call><name>trimBorder</name><argument_list>(<argument><expr><name>contentArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contentArea</name> = <call><name>trimPadding</name><argument_list>(<argument><expr><name>contentArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>blocks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Block</name></type> <name>block</name> =<init> <expr>(<name>Block</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>block</name>.<name>getBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>drawArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>bounds</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bounds</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name></type> <name>r</name> =<init> <expr><call><name><name>block</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>drawArea</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>sec</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>r</name> <name>instanceof</name> <name>EntityBlockResult</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>EntityBlockResult</name></type> <name>ebr</name> =<init> <expr>(<name>EntityBlockResult</name>) <name>r</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>EntityCollection</name></type> <name>ec</name> =<init> <expr><call><name><name>ebr</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>sec</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></while>
        <decl_stmt><decl><type><name>BlockResult</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sec</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>BlockResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>setEntityCollection</name></name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this container for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BlockContainer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>BlockContainer</name></type> <name>that</name> =<init> <expr>(<name>BlockContainer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>arrangement</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>arrangement</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>blocks</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>blocks</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the container.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>BlockContainer</name></type> <name>clone</name> =<init> <expr>(<name>BlockContainer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// TODO : complete this</comment>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
