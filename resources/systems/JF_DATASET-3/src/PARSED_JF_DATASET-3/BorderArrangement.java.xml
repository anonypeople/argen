<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\BorderArrangement.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * BorderArrangement.java
 * ----------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 08-Feb-2005 : Updated for changes in RectangleConstraint (DG);
 * 24-Feb-2005 : Improved arrangeRR() method (DG);
 * 03-May-2005 : Implemented Serializable and added equals() method (DG);
 * 13-May-2005 : Fixed bugs in the arrange() method (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * An arrangement manager that lays out blocks in a similar way to
 * Swing's BorderLayout class.
 */</comment>
<class><specifier>public</specifier> class <name>BorderArrangement</name> <super><implements>implements <name>Arrangement</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>506071142274883745L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The block (if any) at the center of the layout. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Block</name></type> <name>centerBlock</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The block (if any) at the top of the layout. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Block</name></type> <name>topBlock</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The block (if any) at the bottom of the layout. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Block</name></type> <name>bottomBlock</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The block (if any) at the left of the layout. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Block</name></type> <name>leftBlock</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The block (if any) at the right of the layout. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Block</name></type> <name>rightBlock</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance.
     */</comment>
    <constructor><specifier>public</specifier> <name>BorderArrangement</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Adds a block to the arrangement manager at the specified edge.
     * 
     * @param block  the block (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param key  the edge (an instance of {@link RectangleEdge}) or 
     *             &lt;code&gt;null&lt;/code&gt; for the center block.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Block</name></type> <name>block</name></decl></param>, <param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>centerBlock</name></name> = <name>block</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr>(<name>RectangleEdge</name>) <name>key</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>topBlock</name></name> = <name>block</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>bottomBlock</name></name> = <name>block</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>leftBlock</name></name> = <name>block</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>rightBlock</name></name> = <name>block</name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the items in the specified container, subject to the given 
     * constraint.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     * 
     * @return The block size.
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, 
                          <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>contentConstraint</name> 
                =<init> <expr><call><name><name>container</name>.<name>toContentConstraint</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>contentSize</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>w</name> =<init> <expr><call><name><name>contentConstraint</name>.<name>getWidthConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>h</name> =<init> <expr><call><name><name>contentConstraint</name>.<name>getHeightConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contentSize</name> = <call><name>arrangeNN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contentSize</name> = <call><name>arrangeFN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contentSize</name> = <call><name>arrangeFF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contentSize</name> = <call><name>arrangeFR</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>contentSize</name> = <call><name>arrangeRR</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getWidthRange</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then></if></else></if></else></if>
        }</block></then></if></else></if></else></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><call><name><name>container</name>.<name>calculateTotalWidth</name></name><argument_list>(<argument><expr><call><name><name>contentSize</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>container</name>.<name>calculateTotalHeight</name></name><argument_list>(<argument><expr><call><name><name>contentSize</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Performs an arrangement without constraints.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * 
     * @return The container size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeNN</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>w</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>h</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>topBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
            		<argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>leftBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
       }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>rightBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>h</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>centerBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
            		<argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> + <name><name>w</name><index>[<expr>4</expr>]</index></name> + <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>centerHeight</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><name><name>h</name><index>[<expr>0</expr>]</index></name> + <name><name>h</name><index>[<expr>1</expr>]</index></name> + <name>centerHeight</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>topBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>width</name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr><name>height</name> - <name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>leftBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, 
            		<argument><expr><name>centerHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rightBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>centerHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>centerBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
            		<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>2</expr>]</index></name> - <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>centerHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs an arrangement with a fixed width and a range for the height.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     * 
     * @return The container size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFR</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Size2D</name></type> <name>size1</name> =<init> <expr><call><name>arrangeFN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><call><name><name>size1</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>size1</name></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>constrain</name><argument_list>(<argument><expr><call><name><name>size1</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedHeight</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>arrange</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>   
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Arranges the container width a fixed width and no constraint on the 
     * height.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param width  the fixed width.
     * 
     * @return The container size after arranging the contents.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFN</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>w</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>h</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c1</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
        		<argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, 
        		<argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>topBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr>0.0</expr></argument>, 
        		<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, 
        		<argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>leftBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>maxW</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c3</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>maxW</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>maxW</name></expr></argument>)</argument_list></call></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>rightBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>h</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c4</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>2</expr>]</index></name> 
                    - <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                    <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>    
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>centerBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><name><name>h</name><index>[<expr>0</expr>]</index></name> + <name><name>h</name><index>[<expr>1</expr>]</index></name> + <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>arrange</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Performs an arrangement with range constraints on both the vertical 
     * and horizontal sides.
     * 
     * @param container  the container.
     * @param widthRange  the allowable range for the container width.
     * @param heightRange  the allowable range for the container height.
     * @param g2  the graphics device.
     * 
     * @return The container size.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeRR</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, 
                               <param><decl><type><name>Range</name></type> <name>widthRange</name></decl></param>, <param><decl><type><name>Range</name></type> <name>heightRange</name></decl></param>, 
                               <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>w</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>h</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c1</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>widthRange</name></expr></argument>, 
            		<argument><expr><name>heightRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>topBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Range</name></type> <name>heightRange2</name> =<init> <expr><call><name><name>Range</name>.<name>shift</name></name><argument_list>(<argument><expr><name>heightRange</name></expr></argument>, <argument><expr>-<name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>widthRange</name></expr></argument>, 
            		<argument><expr><name>heightRange2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Range</name></type> <name>heightRange3</name> =<init> <expr><call><name><name>Range</name>.<name>shift</name></name><argument_list>(<argument><expr><name>heightRange</name></expr></argument>, <argument><expr>-(<name><name>h</name><index>[<expr>0</expr>]</index></name> + <name><name>h</name><index>[<expr>1</expr>]</index></name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c3</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>widthRange</name></expr></argument>, 
            		<argument><expr><name>heightRange3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>leftBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Range</name></type> <name>widthRange2</name> =<init> <expr><call><name><name>Range</name>.<name>shift</name></name><argument_list>(<argument><expr><name>widthRange</name></expr></argument>, <argument><expr>-<name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c4</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>widthRange2</name></expr></argument>, 
            		<argument><expr><name>heightRange3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>rightBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>h</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>widthRange3</name> =<init> <expr><call><name><name>Range</name>.<name>shift</name></name><argument_list>(<argument><expr><name>widthRange</name></expr></argument>, <argument><expr>-(<name><name>w</name><index>[<expr>2</expr>]</index></name> + <name><name>w</name><index>[<expr>3</expr>]</index></name>)</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c5</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>widthRange3</name></expr></argument>, 
            		<argument><expr><name>heightRange3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// TODO:  the width and height ranges should be reduced by the </comment>
            <comment type="line">// height required for the top and bottom, and the width required</comment>
            <comment type="line">// by the left and right </comment>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>centerBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>4</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> + <name><name>w</name><index>[<expr>4</expr>]</index></name> + <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><name><name>h</name><index>[<expr>0</expr>]</index></name> + <name><name>h</name><index>[<expr>1</expr>]</index></name> + <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>topBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>width</name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr><name>height</name> - <name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>leftBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rightBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>centerBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
            		<argument><expr><name>width</name> - <name><name>w</name><index>[<expr>2</expr>]</index></name> - <name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>height</name> - <name><name>h</name><index>[<expr>0</expr>]</index></name> - <name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Arranges the items within a container.
     * 
     * @param container  the container.
     * @param constraint  the constraint.
     * @param g2  the graphics device.
     * 
     * @return The container size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFF</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>w</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>h</name> =<init> <expr>new <name><name>double</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>w</name><index>[<expr>0</expr>]</index></name> = <call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c1</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, 
            		<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>topBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>0</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>w</name><index>[<expr>1</expr>]</index></name> = <name><name>w</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr>1</expr>]</index></name> = <name><name>size</name>.<name>height</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>h</name><index>[<expr>2</expr>]</index></name> = <call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>h</name><index>[<expr>1</expr>]</index></name> - <name><name>h</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c3</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>leftBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>            
        }</block></then></if>
        <expr_stmt><expr><name><name>h</name><index>[<expr>3</expr>]</index></name> = <name><name>h</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c4</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr>0.0</expr></argument>, 
            		<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
            		<argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>rightBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr>3</expr>]</index></name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>            
        }</block></then></if>
        <expr_stmt><expr><name><name>h</name><index>[<expr>4</expr>]</index></name> = <name><name>h</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>w</name><index>[<expr>4</expr>]</index></name> = <call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name><name>w</name><index>[<expr>3</expr>]</index></name> - <name><name>w</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c5</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>centerBlock</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
       
        <if>if <condition>(<expr><name><name>this</name>.<name>topBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>topBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name><name>w</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>bottomBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name> + <name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>,
            		<argument><expr><name><name>w</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>leftBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>leftBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, 
            		<argument><expr><name><name>h</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rightBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rightBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name> + <name><name>w</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>,
            		<argument><expr><name><name>w</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBlock</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>centerBlock</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name><name>w</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>w</name><index>[<expr>4</expr>]</index></name></expr></argument>,
            		<argument><expr><name><name>h</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears the layout.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>centerBlock</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>topBlock</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bottomBlock</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>leftBlock</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rightBlock</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this arrangement for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BorderArrangement</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>BorderArrangement</name></type> <name>that</name> =<init> <expr>(<name>BorderArrangement</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>topBlock</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>topBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bottomBlock</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>bottomBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>leftBlock</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>leftBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rightBlock</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>rightBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>centerBlock</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>centerBlock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
