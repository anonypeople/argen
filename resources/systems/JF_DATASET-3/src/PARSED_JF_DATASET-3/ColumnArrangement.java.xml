<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\ColumnArrangement.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * ColumnArrangement.java
 * ----------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 04-Feb-2005 : Added equals() and implemented Serializable (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>HorizontalAlignment</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>VerticalAlignment</name></name>;</import>

<comment type="javadoc">/**
 * Arranges blocks in a column layout.  This class is immutable.
 */</comment>
<class><specifier>public</specifier> class <name>ColumnArrangement</name> <super><implements>implements <name>Arrangement</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5315388482898581555L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The horizontal alignment of blocks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HorizontalAlignment</name></type> <name>horizontalAlignment</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The vertical alignment of blocks within each row. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>VerticalAlignment</name></type> <name>verticalAlignment</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The horizontal gap between columns. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>horizontalGap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The vertical gap between items in a column. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>verticalGap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance.
     */</comment>
    <constructor><specifier>public</specifier> <name>ColumnArrangement</name><parameter_list>()</parameter_list> <block>{   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance.
     * 
     * @param hAlign  the horizontal alignment (currently ignored).
     * @param vAlign  the vertical alignment (currently ignored).
     * @param hGap  the horizontal gap.
     * @param vGap  the vertical gap.
     */</comment>
    <constructor><specifier>public</specifier> <name>ColumnArrangement</name><parameter_list>(<param><decl><type><name>HorizontalAlignment</name></type> <name>hAlign</name></decl></param>, 
                             <param><decl><type><name>VerticalAlignment</name></type> <name>vAlign</name></decl></param>,
                             <param><decl><type><name>double</name></type> <name>hGap</name></decl></param>, <param><decl><type><name>double</name></type> <name>vGap</name></decl></param>)</parameter_list> <block>{        
        <expr_stmt><expr><name><name>this</name>.<name>horizontalAlignment</name></name> = <name>hAlign</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verticalAlignment</name></name> = <name>vAlign</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>horizontalGap</name></name> = <name>hGap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verticalGap</name></name> = <name>vGap</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Adds a block to be managed by this instance.  This method is usually 
     * called by the {@link BlockContainer}, you shouldn't need to call it 
     * directly.
     * 
     * @param block  the block.
     * @param key  a key that controls the position of the block.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Block</name></type> <name>block</name></decl></param>, <param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// since the flow layout is relatively straightforward, no information</comment>
        <comment type="line">// needs to be recorded here</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates and sets the bounds of all the items in the specified 
     * container, subject to the given constraint.  The &lt;code&gt;Graphics2D&lt;/code&gt;
     * can be used by some items (particularly items containing text) to 
     * calculate sizing parameters.
     * 
     * @param container  the container whose items are being arranged.
     * @param g2  the graphics device.
     * @param constraint  the size constraint.
     * 
     * @return The size of the container after arrangement of the contents.
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                          <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>w</name> =<init> <expr><call><name><name>constraint</name>.<name>getWidthConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>h</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeightConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeNN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeFF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return> 
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeRF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeRR</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then></if></else></if></else></if>
        }</block></then></if></else></if></else></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>()</argument_list></call></expr>;</return>  <comment type="line">// TODO: complete this</comment>
        
    }</block></function>

    <comment type="javadoc">/**
     * Calculates and sets the bounds of all the items in the specified 
     * container, subject to the given constraint.  The &lt;code&gt;Graphics2D&lt;/code&gt;
     * can be used by some items (particularly items containing text) to 
     * calculate sizing parameters.
     * 
     * @param container  the container whose items are being arranged.
     * @param g2  the graphics device.
     * @param constraint  the size constraint.
     * 
     * @return The container size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFF</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// TODO: implement properly</comment>
        <return>return <expr><call><name>arrangeNF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates and sets the bounds of all the items in the specified 
     * container, subject to the given constraint.  The &lt;code&gt;Graphics2D&lt;/code&gt;
     * can be used by some items (particularly items containing text) to 
     * calculate sizing parameters.
     * 
     * @param container  the container whose items are being arranged.
     * @param constraint  the size constraint.
     * @param g2  the graphics device.
     * 
     * @return The container size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeNF</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
    
        <decl_stmt><decl><type><name>List</name></type> <name>blocks</name> =<init> <expr><call><name><name>container</name>.<name>getBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>height</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>height</name> = <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>itemsInColumn</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Block</name></type> <name>block</name> =<init> <expr>(<name>Block</name>) <call><name><name>blocks</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>block</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>y</name> + <name><name>size</name>.<name>height</name></name> &lt;= <name>height</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>itemsInColumn</name>.<name>add</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>block</name>.<name>setBounds</name></name><argument_list>(
                    <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>size</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = <name>y</name> + <name><name>size</name>.<name>height</name></name> + <name><name>this</name>.<name>verticalGap</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxWidth</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxWidth</name></expr></argument>, <argument><expr><name><name>size</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name><name>itemsInColumn</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// place in this column (truncated) anyway</comment>
                    <expr_stmt><expr><call><name><name>block</name>.<name>setBounds</name></name><argument_list>(
                        <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                            <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>height</name></name></expr></argument>, <argument><expr><name>height</name> - <name>y</name></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name> = 0.0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> = <name>x</name> + <name><name>size</name>.<name>width</name></name> + <name><name>this</name>.<name>horizontalGap</name></name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <comment type="line">// start new column</comment>
                    <expr_stmt><expr><call><name><name>itemsInColumn</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> = <name>x</name> + <name>maxWidth</name> + <name><name>this</name>.<name>horizontalGap</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name> = 0.0</expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxWidth</name> = <name><name>size</name>.<name>width</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>block</name>.<name>setBounds</name></name><argument_list>(
                        <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                            <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>size</name>.<name>height</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name> = <name><name>size</name>.<name>height</name></name> + <name><name>this</name>.<name>verticalGap</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>itemsInColumn</name>.<name>add</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><name>x</name> + <name>maxWidth</name></expr></argument>, <argument><expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>  
    }</block></function>

    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeRR</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// first arrange without constraints, and see if this fits within</comment>
        <comment type="line">// the required ranges...</comment>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>s1</name> =<init> <expr><call><name>arrangeNN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name><name>s1</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>s1</name></expr>;</return>  <comment type="line">// TODO: we didn't check the width yet</comment>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedHeight</name></name><argument_list>(
                <argument><expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>arrangeRF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the blocks in the container using a fixed height and a
     * range for the width.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     * 
     * @return The size of the container after arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeRF</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Size2D</name></type> <name>s</name> =<init> <expr><call><name>arrangeNF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>constraint</name>.<name>getWidthRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name><name>s</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>s</name></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedWidth</name></name><argument_list>(
                <argument><expr><call><name><name>constraint</name>.<name>getWidthRange</name></name><argument_list>()</argument_list></call>.<call><name>constrain</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>arrangeFF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Arranges the blocks without any constraints.  This puts all blocks
     * into a single column.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * 
     * @return The size after the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeNN</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>blocks</name> =<init> <expr><call><name><name>container</name>.<name>getBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockCount</name> =<init> <expr><call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>blockCount</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name><index>[]</index></type> <name>sizes</name> =<init> <expr>new <name><name>Size2D</name><index>[<expr><call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Block</name></type> <name>block</name> =<init> <expr>(<name>Block</name>) <call><name><name>blocks</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>block</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>height</name> = <name>height</name> + <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxWidth</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name>.<name>width</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>block</name>.<name>setBounds</name></name><argument_list>(
                    <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                        <argument><expr>0.0</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name>.<name>width</name></expr></argument>, <argument><expr><name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name>.<name>height</name></expr></argument>
                    )</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = <name>y</name> + <name><name>sizes</name><index>[<expr><name>i</name></expr>]</index></name>.<name>height</name> + <name><name>this</name>.<name>verticalGap</name></name></expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>blockCount</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>height</name> = <name>height</name> + <name><name>this</name>.<name>verticalGap</name></name> * (<name>blockCount</name> - 1)</expr>;</expr_stmt>   
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>horizontalAlignment</name></name> != <name><name>HorizontalAlignment</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <comment type="line">//Block b = (Block) blocks.get(i);</comment>
                    <if>if <condition>(<expr><name><name>this</name>.<name>horizontalAlignment</name></name> 
                            == <name><name>HorizontalAlignment</name>.<name>CENTER</name></name></expr>)</condition><then> <block>{
                        <comment type="line">//TODO: shift block right by half</comment>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name><name>this</name>.<name>horizontalAlignment</name></name> 
                            == <name><name>HorizontalAlignment</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
                        <comment type="line">//TODO: shift block over to right</comment>
                    }</block></then></if></else></if>
                }</block></for>            
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><name>maxWidth</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears any cached information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// no action required.</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ColumnArrangement</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>ColumnArrangement</name></type> <name>that</name> =<init> <expr>(<name>ColumnArrangement</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>horizontalAlignment</name></name> != <name><name>that</name>.<name>horizontalAlignment</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>verticalAlignment</name></name> != <name><name>that</name>.<name>verticalAlignment</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>horizontalGap</name></name> != <name><name>that</name>.<name>horizontalGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>verticalGap</name></name> != <name><name>that</name>.<name>verticalGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    

}</block></class>
</unit>
