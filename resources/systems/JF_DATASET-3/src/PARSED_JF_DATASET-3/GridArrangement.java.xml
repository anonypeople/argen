<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\GridArrangement.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * GridArrangement.java
 * --------------------
 * (C) Copyright 2005, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 08-Feb-2005 : Version 1 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>

<comment type="javadoc">/**
 * Arranges blocks in a grid within their container.
 */</comment>
<class><specifier>public</specifier> class <name>GridArrangement</name> <super><implements>implements <name>Arrangement</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2563758090144655938L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rows. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>rows</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The columns. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>columns</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new grid arrangement.
     * 
     * @param rows  the row count.
     * @param columns  the column count.
     */</comment>
    <constructor><specifier>public</specifier> <name>GridArrangement</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rows</name></decl></param>, <param><decl><type><name>int</name></type> <name>columns</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rows</name></name> = <name>rows</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>columns</name></name> = <name>columns</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Adds a block and a key which can be used to determine the position of 
     * the block in the arrangement.  This method is called by the container 
     * (you don't need to call this method directly) and gives the arrangement
     * an opportunity to record the details if they are required.
     * 
     * @param block  the block.
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>Block</name></type> <name>block</name></decl></param>, <param><decl><type><name>Object</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// can safely ignore   </comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the blocks within the specified container, subject to the given
     * constraint.
     * 
     * @param container  the container.
     * @param constraint  the constraint.
     * @param g2  the graphics device.
     * 
     * @return The size following the arrangement.
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                          <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>w</name> =<init> <expr><call><name><name>constraint</name>.<name>getWidthConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LengthConstraintType</name></type> <name>h</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeightConstraintType</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeNN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not yet implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <comment type="line">// find optimum height, then map to range</comment>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not yet implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <comment type="line">// find optimum height</comment>
                <return>return <expr><call><name>arrangeFN</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <return>return <expr><call><name>arrangeFF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <comment type="line">// find optimum height and map to range</comment>
                <return>return <expr><call><name>arrangeFR</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</return>  
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>w</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
            <comment type="line">// find optimum width and map to range</comment>
            <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <comment type="line">// find optimum height</comment>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not yet implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <comment type="line">// fixed width</comment>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not yet implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then>
            <else>else <if>if <condition>(<expr><name>h</name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Not yet implemented."</expr></argument>)</argument_list></call></expr>;</throw>  
            }</block></then></if></else></if></else></if>
        }</block></then></if></else></if></else></if>
        <return>return <expr>new <call><name>Size2D</name><argument_list>()</argument_list></call></expr>;</return>  <comment type="line">// TODO: complete this</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the container with no constraint on the width or height.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * 
     * @return The size.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeNN</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>maxW</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxH</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>blocks</name> =<init> <expr><call><name><name>container</name>.<name>getBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>blocks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Block</name></type> <name>b</name> =<init> <expr>(<name>Block</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Size2D</name></type> <name>s</name> =<init> <expr><call><name><name>b</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>RectangleConstraint</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>maxW</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxW</name></expr></argument>, <argument><expr><name><name>s</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxH</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxH</name></expr></argument>, <argument><expr><name><name>s</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><name><name>this</name>.<name>columns</name></name> * <name>maxW</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><name><name>this</name>.<name>rows</name></name> * <name>maxH</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>arrangeFF</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the container with a fixed overall width and height.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     * 
     * @return The size following the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFF</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> /  <name><name>this</name>.<name>columns</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / <name><name>this</name>.<name>rows</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>blocks</name> =<init> <expr><call><name><name>container</name>.<name>getBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name><name>this</name>.<name>columns</name></name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <name><name>this</name>.<name>rows</name></name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>r</name> * <name><name>this</name>.<name>columns</name></name> + <name>c</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index</name> == <call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <break>break;</break>   
                }</block></then></if>
                <decl_stmt><decl><type><name>Block</name></type> <name>b</name> =<init> <expr>(<name>Block</name>) <call><name><name>blocks</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>b</name>.<name>setBounds</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><name>c</name> * <name>width</name></expr></argument>, <argument><expr><name>r</name> * <name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>
                )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><name><name>this</name>.<name>columns</name></name> * <name>width</name></expr></argument>, <argument><expr><name><name>this</name>.<name>rows</name></name> * <name>height</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Arrange with a fixed width and a height within a given range.
     * 
     * @param container  the container.
     * @param constraint  the constraint.
     * @param g2  the graphics device.
     * 
     * @return The size of the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFR</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c1</name> =<init> <expr><call><name><name>constraint</name>.<name>toUnconstrainedHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>size1</name> =<init> <expr><call><name>arrange</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><call><name><name>size1</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>size1</name></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>constraint</name>.<name>getHeightRange</name></name><argument_list>()</argument_list></call>.<call><name>constrain</name><argument_list>(<argument><expr><call><name><name>size1</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>c2</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedHeight</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>arrange</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Arrange with a fixed width and a height within a given range.
     * 
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     * 
     * @return The size of the arrangement.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Size2D</name></type> <name>arrangeFN</name><parameter_list>(<param><decl><type><name>BlockContainer</name></type> <name>container</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                               <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><call><name><name>constraint</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> /  <name><name>this</name>.<name>columns</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>constraint2</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedWidth</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>blocks</name> =<init> <expr><call><name><name>container</name>.<name>getBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxH</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <name><name>this</name>.<name>rows</name></name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name><name>this</name>.<name>columns</name></name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><name>r</name> * <name><name>this</name>.<name>columns</name></name> + <name>c</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>index</name> == <call><name><name>blocks</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <break>break;</break>   
                }</block></then></if>
                <decl_stmt><decl><type><name>Block</name></type> <name>b</name> =<init> <expr>(<name>Block</name>) <call><name><name>blocks</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Size2D</name></type> <name>s</name> =<init> <expr><call><name><name>b</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>maxH</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxH</name></expr></argument>, <argument><expr><call><name><name>s</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>constraint3</name> =<init> <expr><call><name><name>constraint</name>.<name>toFixedHeight</name></name><argument_list>(
            <argument><expr><name>maxH</name> * <name><name>this</name>.<name>rows</name></name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>arrange</name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint3</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears any cached layout information retained by the arrangement.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// nothing to clear   </comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Compares this layout manager for equality with an arbitrary object.
     * 
     * @param obj  the object.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>GridArrangement</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>GridArrangement</name></type> <name>that</name> =<init> <expr>(<name>GridArrangement</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>columns</name></name> != <name><name>that</name>.<name>columns</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rows</name></name> != <name><name>that</name>.<name>rows</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
