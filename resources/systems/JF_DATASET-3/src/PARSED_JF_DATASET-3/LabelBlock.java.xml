<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\LabelBlock.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * LabelBlock.java
 * ---------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Pierre-Marie Le Biot;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 19-Apr-2005 : Added optional tooltip and URL text items,
 *               draw() method now returns entities if 
 *               requested (DG);
 * 13-May-2005 : Added methods to set the font (DG);
 * 01-Sep-2005 : Added paint management (PMLB);
 *               Implemented equals() and clone() (PublicCloneable) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Jul-2006 : Fixed entity area in draw() method (DG);
 * 16-Mar-2007 : Fixed serialization when using GradientPaint (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>ChartEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>StandardEntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlock</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlockAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A block containing a label.
 */</comment>
<class><specifier>public</specifier> class <name>LabelBlock</name> <super><extends>extends <name>AbstractBlock</name></extends> 
                                <implements>implements <name>Block</name>, <name>PublicCloneable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>249626098864178017L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The text for the label - retained in case the label needs 
     * regenerating (for example, to change the font). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>text</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextBlock</name></type> <name>label</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The tool tip text (can be &lt;code&gt;null&lt;/code&gt;). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toolTipText</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The URL text (can be &lt;code&gt;null&lt;/code&gt;). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>urlText</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default color. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new label block.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LabelBlock</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_PAINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new label block.
     * 
     * @param text  the text for the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LabelBlock</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name>DEFAULT_PAINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new label block.
     *
     * @param text  the text for the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LabelBlock</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>, <param><decl><type><name>Font</name></type> <name>font</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{        
        <expr_stmt><expr><name><name>this</name>.<name>text</name></name> = <name>text</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>toolTipText</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>urlText</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the font.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>font</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the font and regenerates the label.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>text</name></name></expr></argument>, <argument><expr><name>font</name></expr></argument>, <argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the paint.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paint</name></name></expr>;</return>   
    }</block></function>
   
    <comment type="javadoc">/**
     * Sets the paint and regenerates the label.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>text</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tool tip text.
     * 
     * @return The tool tip text (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setToolTipText(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToolTipText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>toolTipText</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tool tip text.
     * 
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getToolTipText()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToolTipText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toolTipText</name></name> = <name>text</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the URL text.
     * 
     * @return The URL text (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setURLText(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURLText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>urlText</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the URL text.
     * 
     * @param text  the text (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getURLText()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURLText</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>urlText</name></name> = <name>text</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Arranges the contents of the block, within the given constraints, and 
     * returns the block size.
     * 
     * @param g2  the graphics device.
     * @param constraint  the constraint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The block size (in Java2D units, never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>arrange</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>RectangleConstraint</name></type> <name>constraint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Size2D</name></type> <name>s</name> =<init> <expr><call><name><name>this</name>.<name>label</name>.<name>calculateDimensions</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Size2D</name><argument_list>(<argument><expr><call><name>calculateTotalWidth</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name>calculateTotalHeight</name><argument_list>(<argument><expr><call><name><name>s</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the block.
     * 
     * @param g2  the graphics device.
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the block within the specified area.
     * 
     * @param g2  the graphics device.
     * @param area  the area.
     * @param params  ignored (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return Always &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Object</name></type> <name>params</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>area</name> = <call><name>trimMargin</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBorder</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>area</name> = <call><name>trimBorder</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>area</name> = <call><name>trimPadding</name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// check if we need to collect chart entities from the container</comment>
        <decl_stmt><decl><type><name>EntityBlockParams</name></type> <name>ebp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StandardEntityCollection</name></type> <name>sec</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> <name>instanceof</name> <name>EntityBlockParams</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ebp</name> = (<name>EntityBlockParams</name>) <name>params</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>ebp</name>.<name>getGenerateEntities</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sec</name> = new <call><name>StandardEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>entityArea</name> = (<name>Shape</name>) <call><name><name>area</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>label</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BlockResult</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ebp</name> != <name>null</name> &amp;&amp; <name>sec</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>toolTipText</name></name> != <name>null</name> || <name><name>this</name>.<name>urlText</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ChartEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>ChartEntity</name><argument_list>(<argument><expr><name>entityArea</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>toolTipText</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>urlText</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   
                <expr_stmt><expr><call><name><name>sec</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>BlockResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setEntityCollection</name></name><argument_list>(<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;LabelBlock&lt;/code&gt; for equality with an arbitrary 
     * object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>LabelBlock</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LabelBlock</name></type> <name>that</name> =<init> <expr>(<name>LabelBlock</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>text</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>text</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>font</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>font</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>toolTipText</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>toolTipText</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>urlText</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>urlText</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of this &lt;code&gt;LabelBlock&lt;/code&gt; instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
