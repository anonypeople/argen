<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-3\src\RectangleConstraint.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * RectangleConstraint.java
 * ------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 22-Oct-2004 : Version 1 (DG);
 * 02-Feb-2005 : Added toString() method (DG);
 * 08-Feb-2005 : Separated height and width constraints (DG);
 * 13-May-2005 : Added convenience constructor and new methods for 
 *               transforming constraints (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>

<comment type="javadoc">/**
 * A description of a constraint for resizing a rectangle.  Constraints are
 * immutable.
 */</comment>
<class><specifier>public</specifier> class <name>RectangleConstraint</name> <block>{

    <comment type="javadoc">/**
     * An instance representing no constraint. 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RectangleConstraint</name></type> <name>NONE</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(
            <argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>, 
            <argument><expr>0.0</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>width</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The width range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>widthRange</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The width constraint type. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LengthConstraintType</name></type> <name>widthConstraintType</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The fixed or maximum height. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>height</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>heightRange</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The constraint type. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LengthConstraintType</name></type> <name>heightConstraintType</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new "fixed width and height" instance.
     * 
     * @param w  the fixed width.
     * @param h  the fixed height.
     */</comment>
    <constructor><specifier>public</specifier> <name>RectangleConstraint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>, <param><decl><type><name>double</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, 
                <argument><expr><name>h</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new "range width and height" instance.
     * 
     * @param w  the width range.
     * @param h  the height range.
     */</comment>
    <constructor><specifier>public</specifier> <name>RectangleConstraint</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>w</name></decl></param>, <param><decl><type><name>Range</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, 
                <argument><expr>0.0</expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new constraint with a range for the width and a
     * fixed height.
     * 
     * @param w  the width range.
     * @param h  the fixed height.
     */</comment>
    <constructor><specifier>public</specifier> <name>RectangleConstraint</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>w</name></decl></param>, <param><decl><type><name>double</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, 
                <argument><expr><name>h</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new constraint with a fixed width and a range for
     * the height.
     * 
     * @param w  the fixed width.
     * @param h  the height range.
     */</comment>
    <constructor><specifier>public</specifier> <name>RectangleConstraint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>, <param><decl><type><name>Range</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, 
                <argument><expr>0.0</expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new constraint.
     * 
     * @param w  the fixed or maximum width.
     * @param widthRange  the width range.
     * @param widthConstraintType  the width type.
     * @param h  the fixed or maximum height.
     * @param heightRange  the height range.
     * @param heightConstraintType  the height type.
     */</comment>
    <constructor><specifier>public</specifier> <name>RectangleConstraint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>w</name></decl></param>, <param><decl><type><name>Range</name></type> <name>widthRange</name></decl></param>, 
                               <param><decl><type><name>LengthConstraintType</name></type> <name>widthConstraintType</name></decl></param>,
                               <param><decl><type><name>double</name></type> <name>h</name></decl></param>, <param><decl><type><name>Range</name></type> <name>heightRange</name></decl></param>, 
                               <param><decl><type><name>LengthConstraintType</name></type> <name>heightConstraintType</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>widthConstraintType</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'widthType' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>heightConstraintType</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'heightType' argument."</expr></argument>)</argument_list></call></expr>;</throw> 
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>width</name></name> = <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>widthRange</name></name> = <name>widthRange</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>widthConstraintType</name></name> = <name>widthConstraintType</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>height</name></name> = <name>h</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>heightRange</name></name> = <name>heightRange</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>heightConstraintType</name></name> = <name>heightConstraintType</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the fixed width.
     * 
     * @return The width.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>width</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the width range.
     * 
     * @return The range (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getWidthRange</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>widthRange</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the constraint type.
     * 
     * @return The constraint type (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>LengthConstraintType</name></type> <name>getWidthConstraintType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>widthConstraintType</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fixed height.
     * 
     * @return The height.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>height</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the width range.
     * 
     * @return The range (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getHeightRange</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>heightRange</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the constraint type.
     * 
     * @return The constraint type (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>LengthConstraintType</name></type> <name>getHeightConstraintType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>heightConstraintType</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the height attributes,
     * but has no width constraint.
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toUnconstrainedWidth</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>widthConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>this</name></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>this</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>widthRange</name></name></expr></argument>, 
                    <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>height</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>heightRange</name></name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>heightConstraintType</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the width attributes,
     * but has no height constraint.
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toUnconstrainedHeight</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>this</name></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>this</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>widthRange</name></name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>widthConstraintType</name></name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name><name>this</name>.<name>heightRange</name></name></expr></argument>, 
                    <argument><expr><name><name>LengthConstraintType</name>.<name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the height attributes,
     * but has a fixed width constraint.
     * 
     * @param width  the fixed width.
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toFixedWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>this</name>.<name>widthRange</name></name></expr></argument>, 
                <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>height</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>heightRange</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>heightConstraintType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the width attributes,
     * but has a fixed height constraint.
     * 
     * @param height  the fixed height.
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toFixedHeight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>this</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>widthRange</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>widthConstraintType</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>this</name>.<name>heightRange</name></name></expr></argument>, 
                <argument><expr><name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the height attributes,
     * but has a range width constraint.
     * 
     * @param range  the width range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toRangeWidth</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'range' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>, 
                <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>height</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>heightRange</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>heightConstraintType</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a constraint that matches this one on the width attributes,
     * but has a range height constraint.
     * 
     * @param range  the height range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new constraint.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleConstraint</name></type> <name>toRangeHeight</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'range' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <return>return <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name><name>this</name>.<name>width</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>widthRange</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>widthConstraintType</name></name></expr></argument>, <argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>range</name></expr></argument>, 
                <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representation of this instance, mostly used for
     * debugging purposes.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"RectangleConstraint[" 
                + <call><name><name>this</name>.<name>widthConstraintType</name>.<name>toString</name></name><argument_list>()</argument_list></call> + ": width=" 
                + <name><name>this</name>.<name>width</name></name> + ", height=" + <name><name>this</name>.<name>height</name></name> + "]"</expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the new size that reflects the constraints defined by this 
     * instance.
     * 
     * @param base  the base size.
     * 
     * @return The constrained size.
     */</comment>
    <function><type><specifier>public</specifier> <name>Size2D</name></type> <name>calculateConstrainedSize</name><parameter_list>(<param><decl><type><name>Size2D</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Size2D</name></type> <name>result</name> =<init> <expr>new <call><name>Size2D</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>widthConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name>.<name>width</name></name> = <name><name>base</name>.<name>width</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
               <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>base</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
               <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <call><name><name>this</name>.<name>heightRange</name>.<name>constrain</name></name><argument_list>(<argument><expr><name><name>base</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
               <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>this</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>widthConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name>.<name>width</name></name> = <call><name><name>this</name>.<name>widthRange</name>.<name>constrain</name></name><argument_list>(<argument><expr><name><name>base</name>.<name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>base</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <call><name><name>this</name>.<name>heightRange</name>.<name>constrain</name></name><argument_list>(<argument><expr><name><name>base</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>this</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>widthConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name>.<name>width</name></name> = <name><name>this</name>.<name>width</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>NONE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>base</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <call><name><name>this</name>.<name>heightRange</name>.<name>constrain</name></name><argument_list>(<argument><expr><name><name>base</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>heightConstraintType</name></name> == <name><name>LengthConstraintType</name>.<name>FIXED</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name>.<name>height</name></name> = <name><name>this</name>.<name>height</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
