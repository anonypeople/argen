<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-30\src\JDBCCategoryDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * JDBCCategoryDataset.java
 * ------------------------
 * (C) Copyright 2002-2007, by Bryan Scott and Contributors.
 *
 * Original Author:  Bryan Scott; Andy;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Thomas Morgner;
 *
 * Changes
 * -------
 * 26-Apr-2002 : Creation based on JdbcXYDataSet, using code contributed from 
 *               Andy;
 * 13-Aug-2002 : Updated Javadocs, import statements and formatting (DG);
 * 03-Sep-2002 : Added fix for bug 591385 (DG);
 * 18-Sep-2002 : Updated to support BIGINT (BS);
 * 16-Oct-2002 : Added fix for bug 586667 (DG);
 * 03-Feb-2003 : Added Types.DECIMAL (see bug report 677814) (DG);
 * 13-Jun-2003 : Added Types.TIME as suggest by Bryan Scott in the forum (DG);
 * 30-Jun-2003 : CVS Write test (BS);
 * 30-Jul-2003 : Added empty contructor and executeQuery(connection,string) 
 *               method (BS);
 * 29-Aug-2003 : Added a 'transpose' flag, so that data can be easily 
 *               transposed if required (DG);
 * 10-Sep-2003 : Added support for additional JDBC types (DG);
 * 24-Sep-2003 : Added clearing results from previous queries to executeQuery
 *               following being highlighted on online forum (BS);
 * 02-Dec-2003 : Throwing exceptions allows to handle errors, removed default 
 *               constructor, as without a connection, a query can never be 
 *               executed (TM);
 * 04-Dec-2003 : Added missing Javadocs (DG);
 * ------------- JFREECHART 1.0.0 ---------------------------------------------
 * 08-Mar-2006 : Fixed bug 1445748 where an exception is thrown if 
 *               executeQuery() is called more than once (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>jdbc</name></name>;</package>

<import>import <name><name>java</name>.<name>sql</name>.<name>Connection</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>DriverManager</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSet</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>SQLException</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Statement</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Types</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>DefaultCategoryDataset</name></name>;</import>

<comment type="javadoc">/**
 * A {@link CategoryDataset} implementation over a database JDBC result set.
 * The dataset is populated via a call to {@link #executeQuery(String)} with 
 * the string SQL query.  The SQL query must return at least two columns.  The 
 * first column will be the category name and remaining columns values (each
 * column represents a series).  Subsequent calls to 
 * {@link #executeQuery(String)} will refresh the dataset.
 * &lt;p&gt;
 * The database connection is read-only and no write back facility exists.
 * &lt;p&gt;
 * NOTE: Many people have found this class too restrictive in general use.  
 * For the greatest flexibility, please consider writing your own code to read 
 * data from a &lt;code&gt;ResultSet&lt;/code&gt; and populate a 
 * {@link DefaultCategoryDataset} directly.
 */</comment>
<class><specifier>public</specifier> class <name>JDBCCategoryDataset</name> <super><extends>extends <name>DefaultCategoryDataset</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3080395327918844965L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The database connection. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag the controls whether or not the table is transposed.  The default 
     * is 'true' because this provides the behaviour described in the 
     * documentation.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>transpose</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>


    <comment type="javadoc">/**
     * Creates a new dataset with a database connection.
     *
     * @param  url  the URL of the database connection.
     * @param  driverName  the database driver class name.
     * @param  user  the database user.
     * @param  passwd  the database user's password.
     * 
     * @throws ClassNotFoundException if the driver cannot be found.
     * @throws SQLException if there is an error obtaining a connection to the 
     *                      database.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCCategoryDataset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>driverName</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>user</name></decl></param>,
                               <param><decl><type><name>String</name></type> <name>passwd</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>driverName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <call><name><name>DriverManager</name>.<name>getConnection</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create a new dataset with the given database connection.
     *
     * @param connection  the database connection.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCCategoryDataset</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>connection</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"A connection must be supplied."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <name>connection</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new dataset with the given database connection, and executes 
     * the supplied query to populate the dataset.
     *
     * @param connection  the connection.
     * @param query  the query.
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCCategoryDataset</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>connection</name></decl></param>, <param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the table values are 
     * transposed when added to the dataset.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTranspose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>transpose</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not the table values are transposed
     * when added to the dataset.
     *
     * @param transpose  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTranspose</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>transpose</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>transpose</name></name> = <name>transpose</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Populates the dataset by executing the supplied query against the 
     * existing database connection.  If no connection exists then no action 
     * is taken.
     * &lt;p&gt;
     * The results from the query are extracted and cached locally, thus 
     * applying an upper limit on how many rows can be retrieved successfully.
     *
     * @param query  the query.
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeQuery</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name><name>this</name>.<name>connection</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Populates the dataset by executing the supplied query against the 
     * existing database connection.  If no connection exists then no action 
     * is taken.
     * &lt;p&gt;
     * The results from the query are extracted and cached locally, thus 
     * applying an upper limit on how many rows can be retrieved successfully.
     *
     * @param con  the connection.
     * @param query  the query.
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeQuery</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>con</name></decl></param>, <param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultSet</name></type> <name>resultSet</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>statement</name> = <call><name><name>con</name>.<name>createStatement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resultSet</name> = <call><name><name>statement</name>.<name>executeQuery</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ResultSetMetaData</name></type> <name>metaData</name> =<init> <expr><call><name><name>resultSet</name>.<name>getMetaData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>metaData</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>columnCount</name> &lt; 2</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>SQLException</name><argument_list>(
                    <argument><expr>"JDBCCategoryDataset.executeQuery() : insufficient columns "
                    + "returned from the database."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>

            <comment type="line">// Remove any previous old data</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr>--<name>i</name> &gt;= 0</expr>)</condition> <block>{
                <expr_stmt><expr><call><name>removeRow</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <while>while <condition>(<expr><call><name><name>resultSet</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <comment type="line">// first column contains the row key...</comment>
                <decl_stmt><decl><type><name>Comparable</name></type> <name>rowKey</name> =<init> <expr><call><name><name>resultSet</name>.<name>getString</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>column</name> =<init> <expr>2</expr></init></decl>;</init> <condition><expr><name>column</name> &lt;= <name>columnCount</name></expr>;</condition> <incr><expr><name>column</name>++</expr></incr>) <block>{

                    <decl_stmt><decl><type><name>Comparable</name></type> <name>columnKey</name> =<init> <expr><call><name><name>metaData</name>.<name>getColumnName</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>columnType</name> =<init> <expr><call><name><name>metaData</name>.<name>getColumnType</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <switch>switch <condition>(<expr><name>columnType</name></expr>)</condition> <block>{
                        <case>case <expr><name><name>Types</name>.<name>TINYINT</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>SMALLINT</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>INTEGER</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>BIGINT</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>FLOAT</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>DOUBLE</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>DECIMAL</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>NUMERIC</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>REAL</name></name></expr>: <block>{
                            <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr>(<name>Number</name>) <call><name><name>resultSet</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name><name>this</name>.<name>transpose</name></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else>else <block>{
                                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                            <break>break;</break>
                        }</block>
                        </case><case>case <expr><name><name>Types</name>.<name>DATE</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>TIME</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>TIMESTAMP</name></name></expr>: <block>{
                            <decl_stmt><decl><type><name>Date</name></type> <name>date</name> =<init> <expr>(<name>Date</name>) <call><name><name>resultSet</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr>new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name><name>this</name>.<name>transpose</name></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else>else <block>{
                                <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                            <break>break;</break>
                        }</block>
                        </case><case>case <expr><name><name>Types</name>.<name>CHAR</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>VARCHAR</name></name></expr>:
                        </case><case>case <expr><name><name>Types</name>.<name>LONGVARCHAR</name></name></expr>: <block>{
                            <decl_stmt><decl><type><name>String</name></type> <name>string</name> 
                                =<init> <expr>(<name>String</name>) <call><name><name>resultSet</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <try>try <block>{
                                <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>Double</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <if>if <condition>(<expr><name><name>this</name>.<name>transpose</name></name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then>
                                <else>else <block>{
                                    <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                            }</block>
                            <catch>catch (<param><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></param>) <block>{
                                <comment type="line">// suppress (value defaults to null)</comment>
                            }</block></catch></try>
                            <break>break;</break>
                        }</block>
                        </case><default>default:
                            <comment type="line">// not a value, can't use it (defaults to null)</comment>
                            <break>break;</break>
                    </default>}</block></switch>
                }</block></for>
            }</block></while>

            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <if>if <condition>(<expr><name>resultSet</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>resultSet</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// report this?</comment>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>statement</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>statement</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <comment type="line">// report this?</comment>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

}</block></class>
</unit>
