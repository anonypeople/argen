<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-31\src\CombinedDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * CombinedDataset.java
 * --------------------
 * (C) Copyright 2001-2007, by Bill Kelemen and Contributors.
 *
 * Original Author:  Bill Kelemen;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 06-Dec-2001 : Version 1 (BK);
 * 27-Dec-2001 : Fixed bug in getChildPosition method (BK);
 * 29-Dec-2001 : Fixed bug in getChildPosition method with complex 
 *               CombinePlot (BK);
 * 05-Feb-2002 : Small addition to the interface HighLowDataset, as requested 
 *               by Sylvain Vieujot (DG);
 * 14-Feb-2002 : Added bug fix for IntervalXYDataset methods, submitted by 
 *               Gyula Kun-Szabo (DG);
 * 11-Jun-2002 : Updated for change in event constructor (DG);
 * 04-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 06-May-2004 : Now extends AbstractIntervalXYDataset and added other methods 
 *               that return double primitives (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>AbstractIntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>OHLCDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>

<comment type="javadoc">/**
 * This class can combine instances of {@link XYDataset}, {@link OHLCDataset} 
 * and {@link IntervalXYDataset} together exposing the union of all the series 
 * under one dataset.  
 */</comment>
<class><specifier>public</specifier> class <name>CombinedDataset</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends>
                             <implements>implements <name>XYDataset</name>, 
                                        <name>OHLCDataset</name>, 
                                        <name>IntervalXYDataset</name>,
                                        <name>CombinationDataset</name></implements></super> <block>{

    <comment type="javadoc">/** Storage for the datasets we combine. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>datasetInfo</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor for an empty combination.
     */</comment>
    <constructor><specifier>public</specifier> <name>CombinedDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a CombinedDataset initialized with an array of SeriesDatasets.
     *
     * @param data  array of SeriesDataset that contains the SeriesDatasets to 
     *              combine.
     */</comment>
    <constructor><specifier>public</specifier> <name>CombinedDataset</name><parameter_list>(<param><decl><type><name><name>SeriesDataset</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds one SeriesDataset to the combination. Listeners are notified of the
     * change.
     *
     * @param data  the SeriesDataset to add.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fastAdd</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an array of SeriesDataset's to the combination. Listeners are
     * notified of the change.
     *
     * @param data  array of SeriesDataset to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name><name>SeriesDataset</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>fastAdd</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Adds one series from a SeriesDataset to the combination. Listeners are
     * notified of the change.
     *
     * @param data  the SeriesDataset where series is contained
     * @param series  series to add
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr>new <call><name>SubSeriesDataset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Fast add of a SeriesDataset. Does not notify listeners of the change.
     *
     * @param data  SeriesDataset to add
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>fastAdd</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>data</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>datasetInfo</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>DatasetInfo</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From SeriesDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     *
     * @return The number of series in the dataset.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>datasetInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The key for a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>di</name>.<name>data</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From XYDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the X-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from 
     * a {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The X-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>XYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getX</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the Y-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from 
     * a {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The Y-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>XYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getY</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in a series.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from 
     * a {@link XYDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     *
     * @return The number of items in a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>XYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getItemCount</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From HighLowDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the high-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from a
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The high-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getHigh</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getHigh</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the high-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The high-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHighValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>high</name> =<init> <expr><call><name>getHigh</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>high</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>high</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from a
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The low-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getLow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getLow</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the low-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The low-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>low</name> =<init> <expr><call><name>getLow</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>low</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>low</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from a
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The open-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getOpen</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getOpen</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the open-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The open-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getOpenValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>open</name> =<init> <expr><call><name>getOpen</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>open</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>open</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from a
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The close-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getClose</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getClose</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the close-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The close-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCloseValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>close</name> =<init> <expr><call><name>getClose</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>close</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>close</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume value for the specified series and item.
     * &lt;P&gt;
     * Note:  throws &lt;code&gt;ClassCastException&lt;/code&gt; if the series is not from a
     * {@link OHLCDataset}.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The volume value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getVolume</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>OHLCDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getVolume</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the volume-value (as a double primitive) for an item within a 
     * series.
     * 
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     * 
     * @return The volume-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getVolumeValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>volume</name> =<init> <expr><call><name>getVolume</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>volume</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>volume</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// From IntervalXYDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>di</name>.<name>data</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getStartX</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getX</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>di</name>.<name>data</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getEndX</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getX</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The starting Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>di</name>.<name>data</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getStartY</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the index of the series of interest (zero-based).
     * @param item  the index of the item of interest (zero-based).
     *
     * @return The ending Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DatasetInfo</name></type> <name>di</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>di</name>.<name>data</name></name> <name>instanceof</name> <name>IntervalXYDataset</name></expr>)</condition><then> <block>{
            <return>return <expr>((<name>IntervalXYDataset</name>) <name><name>di</name>.<name>data</name></name>).<call><name>getEndY</name><argument_list>(<argument><expr><name><name>di</name>.<name>series</name></name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// New methods from CombinationDataset</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the parent Dataset of this combination. If there is more than
     * one parent, or a child is found that is not a CombinationDataset, then
     * returns &lt;code&gt;null&lt;/code&gt;.
     *
     * @return The parent Dataset of this combination or &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>SeriesDataset</name></type> <name>getParent</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>SeriesDataset</name></type> <name>parent</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasetInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>SeriesDataset</name></type> <name>child</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<name>data</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>child</name> <name>instanceof</name> <name>CombinationDataset</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>SeriesDataset</name></type> <name>childParent</name> 
                    =<init> <expr>((<name>CombinationDataset</name>) <name>child</name>).<call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>parent</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>parent</name> = <name>childParent</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>parent</name> != <name>childParent</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if></else></if>
            }</block></then>
            <else>else <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>parent</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a map or indirect indexing form our series into parent's series.
     * Prior to calling this method, the client should check getParent() to make
     * sure the CombinationDataset uses the same parent. If not, the map
     * returned by this method will be invalid or null.
     *
     * @return A map or indirect indexing form our series into parent's series.
     *
     * @see #getParent()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name><index>[]</index></type> <name>getMap</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>map</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasetInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>SeriesDataset</name></type> <name>child</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<name>data</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>child</name> <name>instanceof</name> <name>CombinationDataset</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>childMap</name> =<init> <expr>((<name>CombinationDataset</name>) <name>child</name>).<call><name>getMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>childMap</name> == <name>null</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>null</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>map</name> = <call><name>joinMap</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>childMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// New Methods</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the child position.
     *
     * @param child  the child dataset.
     *
     * @return The position.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getChildPosition</name><parameter_list>(<param><decl><type><name>Dataset</name></type> <name>child</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasetInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>SeriesDataset</name></type> <name>childDataset</name> =<init> <expr><call><name>getDatasetInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<name>data</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>childDataset</name> <name>instanceof</name> <name>CombinedDataset</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>m</name> =<init> <expr>((<name>CombinedDataset</name>) <name>childDataset</name>)
                    .<call><name>getChildPosition</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>m</name> &gt;= 0</expr>)</condition><then> <block>{
                    <return>return <expr><name>n</name> + <name>m</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>child</name> == <name>childDataset</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>n</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr>-1</expr>;</return>
    }</block></function>

    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// Private</comment>
    <comment type="line">///////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the DatasetInfo object associated with the series.
     *
     * @param series  the index of the series.
     *
     * @return The DatasetInfo object associated with the series.
     */</comment>
    <function><type><specifier>private</specifier> <name>DatasetInfo</name></type> <name>getDatasetInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>DatasetInfo</name>) <call><name><name>this</name>.<name>datasetInfo</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Joins two map arrays (int[]) together.
     *
     * @param a  the first array.
     * @param b  the second array.
     *
     * @return A copy of { a[], b[] }.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name><index>[]</index></type> <name>joinMap</name><parameter_list>(<param><decl><type><name><name>int</name><index>[]</index></name></type> <name>a</name></decl></param>, <param><decl><type><name><name>int</name><index>[]</index></name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>a</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>b</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>b</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>a</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>int</name><index>[<expr><name><name>a</name>.<name>length</name></name> + <name><name>b</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>a</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>a</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Private class to store as pairs (SeriesDataset, series) for all combined
     * series.
     */</comment>
    <class><specifier>private</specifier> class <name>DatasetInfo</name> <block>{

        <comment type="javadoc">/** The dataset. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>SeriesDataset</name></type> <name>data</name></decl>;</decl_stmt>

        <comment type="javadoc">/** The series. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>series</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Creates a new dataset info record.
         *
         * @param data  the dataset.
         * @param series  the series.
         */</comment>
        <constructor><name>DatasetInfo</name><parameter_list>(<param><decl><type><name>SeriesDataset</name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>series</name></name> = <name>series</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>

}</block></class>
</unit>
