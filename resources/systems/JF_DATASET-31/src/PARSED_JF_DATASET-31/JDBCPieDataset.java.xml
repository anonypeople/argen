<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-31\src\JDBCPieDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * JDBCPieDataset.java
 * -------------------
 * (C) Copyright 2002-2007, by Bryan Scott and Contributors.
 *
 * Original Author:  Bryan Scott; Andy
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Thomas Morgner;
 *
 * Changes
 * -------
 * 26-Apr-2002 : Creation based on JdbcXYDataSet, but extending 
 *               DefaultPieDataset (BS);
 * 24-Jun-2002 : Removed unnecessary import and local variable (DG);
 * 13-Aug-2002 : Updated Javadoc comments and imports, removed default 
 *               constructor (DG);
 * 18-Sep-2002 : Updated to support BIGINT (BS);
 * 21-Jan-2003 : Renamed JdbcPieDataset --&gt; JDBCPieDataset (DG);
 * 03-Feb-2003 : Added Types.DECIMAL (see bug report 677814) (DG);
 * 05-Jun-2003 : Updated to support TIME, optimised executeQuery method (BS);
 * 30-Jul-2003 : Added empty contructor and executeQuery(connection,string) 
 *               method (BS);
 * 02-Dec-2003 : Throwing exceptions allows to handle errors, removed default 
 *               constructor, as without a connection, a query can never be 
 *               executed (TM);
 * 04-Dec-2003 : Added missing Javadocs (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>jdbc</name></name>;</package>

<import>import <name><name>java</name>.<name>sql</name>.<name>Connection</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>DriverManager</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSet</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>SQLException</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Statement</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Timestamp</name></name>;</import>
<import>import <name><name>java</name>.<name>sql</name>.<name>Types</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DefaultPieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>

<comment type="javadoc">/**
 * A {@link PieDataset} that reads data from a database via JDBC.
 * &lt;P&gt;
 * A query should be supplied that returns data in two columns, the first 
 * containing VARCHAR data, and the second containing numerical data.  The 
 * data is cached in-memory and can be refreshed at any time.
 */</comment>
<class><specifier>public</specifier> class <name>JDBCPieDataset</name> <super><extends>extends <name>DefaultPieDataset</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8753216855496746108L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The database connection. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Connection</name></type> <name>connection</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new JDBCPieDataset and establishes a new database connection.
     *
     * @param url  the URL of the database connection.
     * @param driverName  the database driver class name.
     * @param user  the database user.
     * @param password  the database users password.
     * 
     * @throws ClassNotFoundException if the driver cannot be found.
     * @throws SQLException if there is a problem obtaining a database 
     *                      connection.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCPieDataset</name><parameter_list>(<param><decl><type><name>String</name></type> <name>url</name></decl></param>,
                          <param><decl><type><name>String</name></type> <name>driverName</name></decl></param>,
                          <param><decl><type><name>String</name></type> <name>user</name></decl></param>,
                          <param><decl><type><name>String</name></type> <name>password</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        
        <expr_stmt><expr><call><name><name>Class</name>.<name>forName</name></name><argument_list>(<argument><expr><name>driverName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <call><name><name>DriverManager</name>.<name>getConnection</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new JDBCPieDataset using a pre-existing database connection.
     * &lt;P&gt;
     * The dataset is initially empty, since no query has been supplied yet.
     *
     * @param con  the database connection.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCPieDataset</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>con</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>con</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"A connection must be supplied."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>connection</name></name> = <name>con</name></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Creates a new JDBCPieDataset using a pre-existing database connection.
     * &lt;P&gt;
     * The dataset is initialised with the supplied query.
     *
     * @param con  the database connection.
     * @param query  the database connection.
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <constructor><specifier>public</specifier> <name>JDBCPieDataset</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>con</name></decl></param>, <param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     *  ExecuteQuery will attempt execute the query passed to it against the
     *  existing database connection.  If no connection exists then no action
     *  is taken.
     *  The results from the query are extracted and cached locally, thus
     *  applying an upper limit on how many rows can be retrieved successfully.
     *
     * @param  query  the query to be executed.
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeQuery</name><parameter_list>(<param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>executeQuery</name><argument_list>(<argument><expr><name><name>this</name>.<name>connection</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     *  ExecuteQuery will attempt execute the query passed to it against the
     *  existing database connection.  If no connection exists then no action
     *  is taken.
     *  The results from the query are extracted and cached locally, thus
     *  applying an upper limit on how many rows can be retrieved successfully.
     *
     * @param  query  the query to be executed
     * @param  con  the connection the query is to be executed against
     * 
     * @throws SQLException if there is a problem executing the query.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>executeQuery</name><parameter_list>(<param><decl><type><name>Connection</name></type> <name>con</name></decl></param>, <param><decl><type><name>String</name></type> <name>query</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>Statement</name></type> <name>statement</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultSet</name></type> <name>resultSet</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>statement</name> = <call><name><name>con</name>.<name>createStatement</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>resultSet</name> = <call><name><name>statement</name>.<name>executeQuery</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ResultSetMetaData</name></type> <name>metaData</name> =<init> <expr><call><name><name>resultSet</name>.<name>getMetaData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>metaData</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columnCount</name> != 2</expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>SQLException</name><argument_list>(
                    <argument><expr>"Invalid sql generated.  PieDataSet requires 2 columns only"</expr></argument>
                )</argument_list></call></expr>;</throw>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>columnType</name> =<init> <expr><call><name><name>metaData</name>.<name>getColumnType</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>resultSet</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name><name>resultSet</name>.<name>getString</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name>columnType</name></expr>)</condition> <block>{
                    <case>case <expr><name><name>Types</name>.<name>NUMERIC</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>REAL</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>INTEGER</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>DOUBLE</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>FLOAT</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>DECIMAL</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>BIGINT</name></name></expr>:
                        <expr_stmt><expr><name>value</name> = <call><name><name>resultSet</name>.<name>getDouble</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    </case><case>case <expr><name><name>Types</name>.<name>DATE</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>TIME</name></name></expr>:
                    </case><case>case <expr><name><name>Types</name>.<name>TIMESTAMP</name></name></expr>:
                        <decl_stmt><decl><type><name>Timestamp</name></type> <name>date</name> =<init> <expr><call><name><name>resultSet</name>.<name>getTimestamp</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>value</name> = <call><name><name>date</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    </case><default>default:
                        <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(
                            <argument><expr>"JDBCPieDataset - unknown data type"</expr></argument>
                        )</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </default>}</block></switch>
            }</block></while>

            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block>
        <finally>finally <block>{
            <if>if <condition>(<expr><name>resultSet</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>resultSet</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"JDBCPieDataset: swallowing exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>statement</name> != <name>null</name></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>statement</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"JDBCPieDataset: swallowing exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>


    <comment type="javadoc">/**
     * Close the database connection
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>connection</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>err</name>.<name>println</name></name><argument_list>(<argument><expr>"JdbcXYDataset: swallowing exception."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
