<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-31\src\MatrixSeriesCollection.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * MatrixSeriesCollection.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Barak Naveh and Contributors.
 *
 * Original Author:  Barak Naveh;;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 10-Jul-2003 : Version 1 contributed by Barak Naveh (DG);
 * 05-May-2004 : Now extends AbstractXYZDataset (DG);
 * 15-Jul-2004 : Switched getZ() and getZValue() methods (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 27-Nov-2006 : Added clone() override (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents a collection of {@link MatrixSeries} that can be used as a 
 * dataset.
 *
 * @see org.jfree.data.xy.MatrixSeries
 */</comment>
<class><specifier>public</specifier> class <name>MatrixSeriesCollection</name> <super><extends>extends <name>AbstractXYZDataset</name></extends>
                                    <implements>implements <name>XYZDataset</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3197705779242543945L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The series that are included in the collection. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>seriesList</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs an empty dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>MatrixSeriesCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <comment type="javadoc">/**
     * Constructs a dataset and populates it with a single matrix series.
     *
     * @param series the time series.
     */</comment>
    <constructor><specifier>public</specifier> <name>MatrixSeriesCollection</name><parameter_list>(<param><decl><type><name>MatrixSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesList</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>series</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     *
     * @param seriesIndex zero-based series index.
     *
     * @return The number of items in the specified series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call>.<call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the series having the specified index.
     *
     * @param seriesIndex zero-based series index.
     *
     * @return The series.
     *
     * @throws IllegalArgumentException
     */</comment>
    <function><type><specifier>public</specifier> <name>MatrixSeries</name></type> <name>getSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>seriesIndex</name> &lt; 0) || (<name>seriesIndex</name> &gt; <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>series</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the number of series in the collection.
     *
     * @return The number of series in the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param seriesIndex zero-based series index.
     *
     * @return The key for a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the j index value of the specified Mij matrix item in the
     * specified matrix series.
     *
     * @param seriesIndex zero-based series index.
     * @param itemIndex zero-based item index.
     *
     * @return The j index value for the specified matrix item.
     *
     * @see org.jfree.data.xy.XYDataset#getXValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call><name><name>series</name>.<name>getItemColumn</name></name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// I know it's bad to create object. better idea?</comment>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the i index value of the specified Mij matrix item in the
     * specified matrix series.
     *
     * @param seriesIndex zero-based series index.
     * @param itemIndex zero-based item index.
     *
     * @return The i index value for the specified matrix item.
     *
     * @see org.jfree.data.xy.XYDataset#getYValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><call><name><name>series</name>.<name>getItemRow</name></name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// I know it's bad to create object. better idea?</comment>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the Mij item value of the specified Mij matrix item in the
     * specified matrix series.
     *
     * @param seriesIndex the series (zero-based index).
     * @param itemIndex zero-based item index.
     *
     * @return The Mij item value for the specified matrix item.
     *
     * @see org.jfree.data.xy.XYZDataset#getZValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getZ</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>itemIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>z</name> =<init> <expr><call><name><name>series</name>.<name>getItem</name></name><argument_list>(<argument><expr><name>itemIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>z</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Adds a series to the collection.
     * &lt;P&gt;
     * Notifies all registered listeners that the dataset has changed.
     * &lt;/p&gt;
     *
     * @param series the series.
     *
     * @throws IllegalArgumentException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>MatrixSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check arguments...</comment>
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Cannot add null series."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// FIXME: Check that there isn't already a series with the same key</comment>
        
        <comment type="line">// add the series...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Tests this collection for equality with an arbitrary object.
     *
     * @param obj the object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>MatrixSeriesCollection</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>MatrixSeriesCollection</name></type> <name>c</name> =<init> <expr>(<name>MatrixSeriesCollection</name>) <name>obj</name></expr></init></decl>;</decl_stmt>

            <return>return <expr><call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesList</name></name></expr></argument>, <argument><expr><name><name>c</name>.<name>seriesList</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name><name>this</name>.<name>seriesList</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>seriesList</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>MatrixSeriesCollection</name></type> <name>clone</name> =<init> <expr>(<name>MatrixSeriesCollection</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesList</name></name> = (<name>List</name>) <call><name><name>ObjectUtilities</name>.<name>deepClone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes all the series from the collection.
     * &lt;P&gt;
     * Notifies all registered listeners that the dataset has changed.
     * &lt;/p&gt;
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeAllSeries</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Unregister the collection as a change listener to each series in </comment>
        <comment type="line">// the collection.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>seriesList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Remove all the series from the collection and notify listeners.</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Removes a series from the collection.
     * &lt;P&gt;
     * Notifies all registered listeners that the dataset has changed.
     * &lt;/p&gt;
     *
     * @param series the series.
     *
     * @throws IllegalArgumentException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>MatrixSeries</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check arguments...</comment>
        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Cannot remove null series."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// remove the series...</comment>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>seriesList</name>.<name>contains</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Removes a series from the collection.
     * &lt;P&gt;
     * Notifies all registered listeners that the dataset has changed.
     *
     * @param seriesIndex the series (zero based index).
     *
     * @throws IllegalArgumentException
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesIndex</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// check arguments...</comment>
        <if>if <condition>(<expr>(<name>seriesIndex</name> &lt; 0) || (<name>seriesIndex</name> &gt; <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// fetch the series, remove the change listener, then remove the series.</comment>
        <decl_stmt><decl><type><name>MatrixSeries</name></type> <name>series</name> =<init> <expr>(<name>MatrixSeries</name>) <call><name><name>this</name>.<name>seriesList</name>.<name>get</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesList</name>.<name>remove</name></name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
