<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-31\src\WaferMapDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * WaferMapDataset.java
 * --------------------
 * (C)opyright 2003-2007, by Robert Redburn and Contributors.
 *
 * Original Author:  Robert Redburn;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 25-Nov-2003 : Version 1 contributed by Robert Redburn (with some 
 *               modifications to match style conventions) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeSet</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DefaultKeyedValues2D</name></name>;</import>

<comment type="javadoc">/**
 * A dataset that can be used with the {@link org.jfree.chart.plot.WaferMapPlot}
 * class.
 */</comment>
<class><specifier>public</specifier> class <name>WaferMapDataset</name> <super><extends>extends <name>AbstractDataset</name></extends></super> <block>{

    <comment type="javadoc">/** 
     * Storage structure for the data values (row key is chipx, column is 
     * chipy)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DefaultKeyedValues2D</name></type> <name>data</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** wafer x dimension */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxChipX</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** wafer y dimension */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxChipY</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** space to draw between chips */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>chipSpace</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** maximum value in this dataset */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Double</name></type> <name>maxValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** minimum value in this dataset */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Double</name></type> <name>minValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** default chip spacing */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_CHIP_SPACE</name> =<init> <expr>1d</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new dataset using the default chipspace.
     * 
     * @param maxChipX  the wafer x-dimension.
     * @param maxChipY  the wafer y-dimension.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxChipX</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxChipY</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>maxChipX</name></expr></argument>, <argument><expr><name>maxChipY</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new dataset.
     * 
     * @param maxChipX  the wafer x-dimension. 
     * @param maxChipY  the wafer y-dimension.
     * @param chipSpace  the space between chips.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxChipX</name></decl></param>, <param><decl><type><name>int</name></type> <name>maxChipY</name></decl></param>, <param><decl><type><name>Number</name></type> <name>chipSpace</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><name><name>this</name>.<name>maxValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>DefaultKeyedValues2D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>maxChipX</name></name> = <name>maxChipX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxChipY</name></name> = <name>maxChipY</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>chipSpace</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>chipSpace</name></name> = <name>DEFAULT_CHIP_SPACE</name></expr>;</expr_stmt> 
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>chipSpace</name></name> = <call><name><name>chipSpace</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></constructor>

    <comment type="javadoc">/**
     * Sets a value in the dataset.
     * 
     * @param value  the value.
     * @param chipx  the x-index for the chip.
     * @param chipy  the y-index for the chip.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>chipx</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>chipy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>chipx</name></expr></argument>, <argument><expr><name>chipy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a value to the dataset.
     * 
     * @param v  the value.
     * @param x  the x-index.
     * @param y  the y-index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>v</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a value in the dataset and updates min and max value entries.
     * 
     * @param value  the value.
     * @param chipx  the x-index.
     * @param chipy  the y-index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>chipx</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>chipy</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>chipx</name></expr></argument>, <argument><expr><name>chipy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isMaxValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>maxValue</name></name> = (<name>Double</name>) <name>value</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isMinValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>minValue</name></name> = (<name>Double</name>) <name>value</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of unique values.
     * 
     * @return The number of unique values.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUniqueValueCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getUniqueValues</name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the set of unique values.
     * 
     * @return The set of unique values.
     */</comment>
    <function><type><specifier>public</specifier> <name>Set</name></type> <name>getUniqueValues</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Set</name></type> <name>unique</name> =<init> <expr>new <call><name>TreeSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//step through all the values and add them to the hash</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <call><name><name>this</name>.<name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>unique</name>.<name>add</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>unique</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data value for a chip.
     * 
     * @param chipx  the x-index.
     * @param chipy  the y-index.
     * 
     * @return The data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getChipValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>chipx</name></decl></param>, <param><decl><type><name>int</name></type> <name>chipy</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getChipValue</name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>chipx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>chipy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for a given chip x and y or null.
     * 
     * @param chipx  the x-index.
     * @param chipy  the y-index.
     * 
     * @return The data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getChipValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>chipx</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>chipy</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rowIndex</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>chipx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rowIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>colIndex</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>chipy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>colIndex</name> &lt; 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests to see if the passed value is larger than the stored maxvalue.
     * 
     * @param check  the number to check.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMaxValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>check</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>check</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>this</name>.<name>maxValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests to see if the passed value is smaller than the stored minvalue.
     * 
     * @param check  the number to check.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>check</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>check</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>this</name>.<name>minValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Returns the maximum value stored in the dataset.
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxValue</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/** 
     * Returns the minimum value stored in the dataset.
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minValue</name></name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the wafer x-dimension.
     * 
     * @return The number of chips in the x-dimension.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxChipX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxChipX</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets wafer x dimension.
     * 
     * @param maxChipX  the number of chips in the x-dimension.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxChipX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxChipX</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxChipX</name></name> = <name>maxChipX</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of chips in the y-dimension.
     * 
     * @return The number of chips.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxChipY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxChipY</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of chips in the y-dimension.
     * 
     * @param maxChipY  the number of chips.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxChipY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>maxChipY</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxChipY</name></name> = <name>maxChipY</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the space to draw between chips.
     * 
     * @return The space.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getChipSpace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>chipSpace</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the space to draw between chips.
     * 
     * @param space  the space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChipSpace</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>chipSpace</name></name> = <name>space</name></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
