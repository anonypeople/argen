<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-32\src\HistogramBin.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * HistogramBin.java
 * -----------------
 * (C) Copyright 2003-2007, by Jelai Wang and Contributors.
 *
 * Original Author:  Jelai Wang (jelaiw AT mindspring.com);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 06-Jul-2003 : Version 1, contributed by Jelai Wang (DG);
 * 07-Jul-2003 : Changed package and added Javadocs (DG);
 * 01-Mar-2004 : Moved from org.jfree.data --&gt; org.jfree.data.statistics (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * A bin for the {@link HistogramDataset} class.
 */</comment>
<class><specifier>public</specifier> class <name>HistogramBin</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7614685080015589931L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The number of items in the bin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The start boundary. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startBoundary</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The end boundary. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>endBoundary</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new bin.
     * 
     * @param startBoundary  the start boundary.
     * @param endBoundary  the end boundary.
     */</comment>
    <constructor><specifier>public</specifier> <name>HistogramBin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>startBoundary</name></decl></param>, <param><decl><type><name>double</name></type> <name>endBoundary</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>startBoundary</name> &gt; <name>endBoundary</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"HistogramBin():  startBoundary &gt; endBoundary."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startBoundary</name></name> = <name>startBoundary</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endBoundary</name></name> = <name>endBoundary</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of items in the bin.
     * 
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>count</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Increments the item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>incrementCount</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name>++</expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the start boundary.
     * 
     * @return The start boundary.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartBoundary</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startBoundary</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the end boundary.
     * 
     * @return The end boundary.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEndBoundary</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>endBoundary</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the bin width.
     * 
     * @return The bin width.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBinWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>endBoundary</name></name> - <name><name>this</name>.<name>startBoundary</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object to test against.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>HistogramBin</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>b0</name> =<init> <expr><name><name>bin</name>.<name>startBoundary</name></name> == <name><name>this</name>.<name>startBoundary</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> =<init> <expr><name><name>bin</name>.<name>endBoundary</name></name> == <name><name>this</name>.<name>endBoundary</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> =<init> <expr><name><name>bin</name>.<name>count</name></name> == <name><name>this</name>.<name>count</name></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>b0</name> &amp;&amp; <name>b1</name> &amp;&amp; <name>b2</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the bin.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException not thrown by this class.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>
    
}</block></class>
</unit>
