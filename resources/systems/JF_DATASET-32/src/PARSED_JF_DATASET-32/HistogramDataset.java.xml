<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-32\src\HistogramDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * HistogramDataset.java
 * ---------------------
 * (C) Copyright 2003-2007, by Jelai Wang and Contributors.
 *
 * Original Author:  Jelai Wang (jelaiw AT mindspring.com);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Cameron Hayne;
 *                   Rikard Bj?rklind;
 *
 * Changes
 * -------
 * 06-Jul-2003 : Version 1, contributed by Jelai Wang (DG);
 * 07-Jul-2003 : Changed package and added Javadocs (DG);
 * 15-Oct-2003 : Updated Javadocs and removed array sorting (JW);
 * 09-Jan-2004 : Added fix by "Z." posted in the JFreeChart forum (DG);
 * 01-Mar-2004 : Added equals() and clone() methods and implemented 
 *               Serializable.  Also added new addSeries() method (DG);
 * 06-May-2004 : Now extends AbstractIntervalXYDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 20-May-2005 : Speed up binning - see patch 1026151 contributed by Cameron
 *               Hayne (DG);
 * 08-Jun-2005 : Fixed bug in getSeriesKey() method (DG);
 * 22-Nov-2005 : Fixed cast in getSeriesKey() method - see patch 1329287 (DG);
 * ------------- JFREECHART 1.0.0 ---------------------------------------------
 * 03-Aug-2006 : Improved precision of bin boundary calculation (DG);
 * 07-Sep-2006 : Fixed bug 1553088 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>AbstractIntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A dataset that can be used for creating histograms.
 * 
 * @see SimpleHistogramDataset
 */</comment>
<class><specifier>public</specifier> class <name>HistogramDataset</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends> 
                              <implements>implements <name>IntervalXYDataset</name>, 
                                         <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                         <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-6341668077370231153L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A list of maps. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>list</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The histogram type. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>HistogramType</name></type> <name>type</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new (empty) dataset with a default type of 
     * {@link HistogramType}.FREQUENCY.
     */</comment>
    <constructor><specifier>public</specifier> <name>HistogramDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>list</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name><name>HistogramType</name>.<name>FREQUENCY</name></name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the histogram type. 
     * 
     * @return The type (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>HistogramType</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{ 
        <return>return <expr><name><name>this</name>.<name>type</name></name></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Sets the histogram type and sends a {@link DatasetChangeEvent} to all 
     * registered listeners.
     * 
     * @param type  the type (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setType</name><parameter_list>(<param><decl><type><name>HistogramType</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'type' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a series to the dataset, using the specified number of bins.
     * 
     * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param values the values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param bins  the number of bins (must be at least 1).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>values</name></decl></param>, <param><decl><type><name>int</name></type> <name>bins</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>minimum</name> =<init> <expr><call><name>getMinimum</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maximum</name> =<init> <expr><call><name>getMaximum</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addSeries</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>bins</name></expr></argument>, <argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a series to the dataset. Any data value less than minimum will be
     * assigned to the first bin, and any data value greater than maximum will
     * be assigned to the last bin.  Values falling on the boundary of 
     * adjacent bins will be assigned to the higher indexed bin.
     * 
     * @param key  the series key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param values  the raw observations.
     * @param bins  the number of bins (must be at least 1).
     * @param minimum  the lower bound of the bin range.
     * @param maximum  the upper bound of the bin range.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, 
                          <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>values</name></decl></param>, 
                          <param><decl><type><name>int</name></type> <name>bins</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>minimum</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>maximum</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>values</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'values' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>bins</name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'bins' value must be at least 1."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>binWidth</name> =<init> <expr>(<name>maximum</name> - <name>minimum</name>) / <name>bins</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><name>minimum</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upper</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>binList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><name>bins</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>bins</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name></decl>;</decl_stmt>
            <comment type="line">// make sure bins[bins.length]'s upper boundary ends at maximum</comment>
            <comment type="line">// to avoid the rounding issue. the bins[0] lower boundary is</comment>
            <comment type="line">// guaranteed start from min</comment>
            <if>if <condition>(<expr><name>i</name> == <name>bins</name> - 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bin</name> = new <call><name>HistogramBin</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>upper</name> = <name>minimum</name> + (<name>i</name> + 1) * <name>binWidth</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bin</name> = new <call><name>HistogramBin</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = <name>upper</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>binList</name>.<name>add</name></name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>        
        <comment type="line">// fill the bins</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>binIndex</name> =<init> <expr><name>bins</name> - 1</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> &lt; <name>maximum</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>fraction</name> =<init> <expr>(<name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> - <name>minimum</name>) / (<name>maximum</name> - <name>minimum</name>)</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fraction</name> &lt; 0.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>fraction</name> = 0.0</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>binIndex</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>fraction</name> * <name>bins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// rounding could result in binIndex being equal to bins</comment>
                <comment type="line">// which will cause an IndexOutOfBoundsException - see bug</comment>
                <comment type="line">// report 1553088</comment>
                <if>if <condition>(<expr><name>binIndex</name> &gt;= <name>bins</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>binIndex</name> = <name>bins</name> - 1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <call><name><name>binList</name>.<name>get</name></name><argument_list>(<argument><expr><name>binIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>bin</name>.<name>incrementCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// generic map for each series</comment>
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr>"key"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr>"bins"</expr></argument>, <argument><expr><name>binList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr>"values.length"</expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name><name>values</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>map</name>.<name>put</name></name><argument_list>(<argument><expr>"bin width"</expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>binWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>list</name>.<name>add</name></name><argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum value in an array of values.
     * 
     * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted and 
     *                zero-length array not permitted).
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>getMinimum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>values</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>values</name> == <name>null</name> || <name><name>values</name>.<name>length</name></name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null or zero length 'values' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr><name><name>Double</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> &lt; <name>min</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>min</name> = <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>min</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum value in an array of values.
     * 
     * @param values  the values (&lt;code&gt;null&lt;/code&gt; not permitted and 
     *                zero-length array not permitted).
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>getMaximum</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>values</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>values</name> == <name>null</name> || <name><name>values</name>.<name>length</name></name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null or zero length 'values' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>-<name><name>Double</name>.<name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> &gt; <name>max</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>max</name> = <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>max</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the bins for a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * 
     * @return A list of bins.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><name>List</name></type> <name>getBins</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> =<init> <expr>(<name>Map</name>) <call><name><name>this</name>.<name>list</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>List</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"bins"</expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns the total number of observations for a series.
     * 
     * @param series  the series index.
     * 
     * @return The total.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getTotal</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> =<init> <expr>(<name>Map</name>) <call><name><name>this</name>.<name>list</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>Integer</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"values.length"</expr></argument>)</argument_list></call>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns the bin width for a series.
     * 
     * @param series  the series index (zero based).
     * 
     * @return The bin width.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>getBinWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> =<init> <expr>(<name>Map</name>) <call><name><name>this</name>.<name>list</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>((<name>Double</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"bin width"</expr></argument>)</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of series in the dataset.
     * 
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{ 
        <return>return <expr><call><name><name>this</name>.<name>list</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the key for a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * 
     * @return The series key.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Map</name></type> <name>map</name> =<init> <expr>(<name>Map</name>) <call><name><name>this</name>.<name>list</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>(<name>Comparable</name>) <call><name><name>map</name>.<name>get</name></name><argument_list>(<argument><expr>"key"</expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of data items for a series.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * 
     * @return The item count.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getBins</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns the X value for a bin.  This value won't be used for plotting 
     * histograms, since the renderer will ignore it.  But other renderers can 
     * use it (for example, you could use the dataset to create a line
     * chart).
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The start value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>bins</name> =<init> <expr><call><name>getBins</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <call><name><name>bins</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr>(<call><name><name>bin</name>.<name>getStartBoundary</name></name><argument_list>()</argument_list></call> + <call><name><name>bin</name>.<name>getEndBoundary</name></name><argument_list>()</argument_list></call>) / 2.</expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for a bin (calculated to take into account the 
     * histogram type).
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The y-value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>bins</name> =<init> <expr><call><name>getBins</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <call><name><name>bins</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr><call><name>getTotal</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>binWidth</name> =<init> <expr><call><name>getBinWidth</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>type</name></name> == <name><name>HistogramType</name>.<name>FREQUENCY</name></name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>bin</name>.<name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>type</name></name> == <name><name>HistogramType</name>.<name>RELATIVE_FREQUENCY</name></name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>bin</name>.<name>getCount</name></name><argument_list>()</argument_list></call> / <name>total</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>type</name></name> == <name><name>HistogramType</name>.<name>SCALE_AREA_TO_1</name></name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>bin</name>.<name>getCount</name></name><argument_list>()</argument_list></call> / (<name>binWidth</name> * <name>total</name>)</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{ <comment type="line">// pretty sure this shouldn't ever happen</comment>
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the start value for a bin.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The start value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>bins</name> =<init> <expr><call><name>getBins</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <call><name><name>bins</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>bin</name>.<name>getStartBoundary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the end value for a bin.
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The end value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>bins</name> =<init> <expr><call><name>getBins</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>HistogramBin</name>) <call><name><name>bins</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>bin</name>.<name>getEndBoundary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the start y-value for a bin (which is the same as the y-value, 
     * this method exists only to support the general form of the 
     * {@link IntervalXYDataset} interface).
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The y-value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the end y-value for a bin (which is the same as the y-value, 
     * this method exists only to support the general form of the 
     * {@link IntervalXYDataset} interface).
     * 
     * @param series  the series index (in the range &lt;code&gt;0&lt;/code&gt; to 
     *     &lt;code&gt;getSeriesCount() - 1&lt;/code&gt;).
     * @param item  the item index (zero based).
     * 
     * @return The Y value.
     * 
     * @throws IndexOutOfBoundsException if &lt;code&gt;series&lt;/code&gt; is outside the
     *     specified range.
     */</comment>    
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this dataset for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>HistogramDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>HistogramDataset</name></type> <name>that</name> =<init> <expr>(<name>HistogramDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>type</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>list</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>list</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the dataset.
     * 
     * @return A clone of the dataset.
     * 
     * @throws CloneNotSupportedException if the object cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>

}</block></class>
</unit>
