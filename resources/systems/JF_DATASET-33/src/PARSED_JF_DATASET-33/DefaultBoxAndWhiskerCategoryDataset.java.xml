<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-33\src\DefaultBoxAndWhiskerCategoryDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------------------------
 * DefaultBoxAndWhiskerCategoryDataset.java
 * ----------------------------------------
 * (C) Copyright 2003-2007, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 05-Aug-2003 : Version 1, contributed by David Browning (DG);
 * 27-Aug-2003 : Moved from org.jfree.data --&gt; org.jfree.data.statistics (DG);
 * 12-Nov-2003 : Changed 'data' from private to protected and added a new 'add' 
 *               method as proposed by Tim Bardzil.  Also removed old code (DG);
 * 01-Mar-2004 : Added equals() method (DG);
 * 18-Nov-2004 : Updates for changes in RangeInfo interface (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 17-Apr-2007 : Fixed bug 1701822 (DG);
 * 13-Jun-2007 : Fixed error in previous patch (DG);
 * 28-Sep-2007 : Fixed cloning bug (DG);
 * 02-Oct-2007 : Fixed bug in updating cached bounds (DG);
 * 03-Oct-2007 : Fixed another bug in updating cached bounds, added removal
 *               methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>KeyedObjects2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>RangeInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>AbstractDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A convenience class that provides a default implementation of the
 * {@link BoxAndWhiskerCategoryDataset} interface.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultBoxAndWhiskerCategoryDataset</name> <super><extends>extends <name>AbstractDataset</name></extends>
        <implements>implements <name>BoxAndWhiskerCategoryDataset</name>, <name>RangeInfo</name>, <name>PublicCloneable</name></implements></super> <block>{

    <comment type="javadoc">/** Storage for the data. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>KeyedObjects2D</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minimumRangeValue</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The row index for the cell that the minimum range value comes from. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The column index for the cell that the minimum range value comes from. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumRangeValueColumn</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum range value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maximumRangeValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The row index for the cell that the maximum range value comes from. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueRow</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The column index for the cell that the maximum range value comes from. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumRangeValueColumn</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultBoxAndWhiskerCategoryDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>KeyedObjects2D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a list of values relating to one box-and-whisker entity to the 
     * table.  The various median values are calculated.
     *
     * @param list  a collection of values from which the various medians will 
     *              be calculated.
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>List</name></type> <name>list</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr><call><name><name>BoxAndWhiskerCalculator</name>
                .<name>calculateBoxAndWhiskerStatistics</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a list of values relating to one Box and Whisker entity to the 
     * table.  The various median values are calculated.
     *
     * @param item  a box and whisker item (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #add(List, Comparable, Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, 
            <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>addObject</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// update cached min and max values</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name><name>this</name>.<name>maximumRangeValueRow</name></name> == <name>r</name> &amp;&amp; <name><name>this</name>.<name>maximumRangeValueColumn</name></name> 
                == <name>c</name>) || (<name><name>this</name>.<name>minimumRangeValueRow</name></name> == <name>r</name> 
                &amp;&amp; <name><name>this</name>.<name>minimumRangeValueColumn</name></name> == <name>c</name>)</expr>)</condition><then>  <block>{
            <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
        
            <decl_stmt><decl><type><name>double</name></type> <name>minval</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>item</name>.<name>getMinOutlier</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>minval</name> = <call><name><name>item</name>.<name>getMinOutlier</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>maxval</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>item</name>.<name>getMaxOutlier</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>maxval</name> = <call><name><name>item</name>.<name>getMaxOutlier</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        
            <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>maxval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>maxval</name> &gt; <name><name>this</name>.<name>maximumRangeValue</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>maxval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
        
            <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>minval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>minval</name> &lt; <name><name>this</name>.<name>minimumRangeValue</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>minval</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></else></if>
        
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    
    <comment type="javadoc">/**
     * Removes an item from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #add(BoxAndWhiskerItem, Comparable, Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer null argument checks</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getRowIndex</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> =<init> <expr><call><name>getColumnIndex</name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeObject</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// if this cell held a maximum and/or minimum value, we'll need to</comment>
        <comment type="line">// update the cached bounds...</comment>
        <if>if <condition>(<expr>(<name><name>this</name>.<name>maximumRangeValueRow</name></name> == <name>r</name> &amp;&amp; <name><name>this</name>.<name>maximumRangeValueColumn</name></name> 
                == <name>c</name>) || (<name><name>this</name>.<name>minimumRangeValueRow</name></name> == <name>r</name> 
                &amp;&amp; <name><name>this</name>.<name>minimumRangeValueColumn</name></name> == <name>c</name>)</expr>)</condition><then>  <block>{
            <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowIndex  the row index.
     * 
     * @see #removeColumn(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rowIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeRow</name></name><argument_list>(<argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key.
     * 
     * @see #removeColumn(Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeRow</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeRow</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnIndex  the column index.
     * 
     * @see #removeRow(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>int</name></type> <name>columnIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeColumn</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnKey  the column key.
     * 
     * @see #removeRow(Comparable)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeColumn</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>removeColumn</name></name><argument_list>(<argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all data from the dataset and sends a {@link DatasetChangeEvent} 
     * to all registered listeners.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Return an item from within the dataset.
     * 
     * @param row  the row index.
     * @param column  the column index.
     * 
     * @return The item.
     */</comment>
    <function><type><specifier>public</specifier> <name>BoxAndWhiskerItem</name></type> <name>getItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for an item.
     *
     * @param row  the row index.
     * @param column  the column index.
     *
     * @return The value.
     * 
     * @see #getMedianValue(int, int)
     * @see #getValue(Comparable, Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMedianValue</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value for an item.
     *
     * @param rowKey  the row key.
     * @param columnKey  the columnKey.
     *
     * @return The value.
     * 
     * @see #getMedianValue(Comparable, Comparable)
     * @see #getValue(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMedianValue</name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the mean value for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The mean value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMeanValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the mean value for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The mean value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMeanValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the median value for an item.
     *
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The median value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMedianValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMedian</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the median value for an item.
     *
     * @param rowKey  the row key.
     * @param columnKey  the columnKey.
     *
     * @return The median value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMedianValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMedian</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first quartile value.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The first quartile value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ1Value</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getQ1</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first quartile value.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The first quartile value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ1Value</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getQ1</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the third quartile value.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The third quartile value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ3Value</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getQ3</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the third quartile value.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The third quartile value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getQ3Value</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getQ3</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column index for a given key.
     *
     * @param key  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The column index.
     * 
     * @see #getColumnKey(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a column key.
     *
     * @param column  the column index (zero-based).
     *
     * @return The column key.
     * 
     * @see #getColumnIndex(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getColumnKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column keys.
     *
     * @return The keys.
     * 
     * @see #getRowKeys()
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getColumnKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row index for a given key.
     *
     * @param key  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The row index.
     * 
     * @see #getRowKey(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer null argument check</comment>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a row key.
     *
     * @param row  the row index (zero-based).
     *
     * @return The row key.
     * 
     * @see #getRowIndex(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getRowKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row keys.
     *
     * @return The keys.
     * 
     * @see #getColumnKeys()
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getRowKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of rows in the table.
     *
     * @return The row count.
     * 
     * @see #getColumnCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of columns in the table.
     *
     * @return The column count.
     * 
     * @see #getRowCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The minimum value.
     * 
     * @see #getRangeUpperBound(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The maximum value.
     * 
     * @see #getRangeLowerBound(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's range.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getRangeBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the minimum regular (non outlier) value for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The minimum regular value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinRegularValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMinRegularValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum regular (non outlier) value for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The minimum regular value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinRegularValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMinRegularValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum regular (non outlier) value for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The maximum regular value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxRegularValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMaxRegularValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum regular (non outlier) value for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The maximum regular value.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxRegularValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMaxRegularValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum outlier (non farout) value for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The minimum outlier.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinOutlier</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMinOutlier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum outlier (non farout) value for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The minimum outlier.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinOutlier</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMinOutlier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum outlier (non farout) value for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return The maximum outlier.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxOutlier</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMaxOutlier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum outlier (non farout) value for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return The maximum outlier.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaxOutlier</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getMaxOutlier</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of outlier values for an item.
     * 
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * 
     * @return A list of outlier values.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getOutliers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getOutliers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of outlier values for an item.
     * 
     * @param rowKey  the row key.
     * @param columnKey  the column key.
     * 
     * @return A list of outlier values.
     * 
     * @see #getItem(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getOutliers</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr>(<name>BoxAndWhiskerItem</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(
                <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>item</name>.<name>getOutliers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Resets the cached bounds, by iterating over the entire dataset to find
     * the current bounds.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateBounds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name><name>Double</name>.<name>NaN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = -1</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name>columnCount</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>BoxAndWhiskerItem</name></type> <name>item</name> =<init> <expr><call><name>getItem</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Number</name></type> <name>min</name> =<init> <expr><call><name><name>item</name>.<name>getMinOutlier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>min</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>double</name></type> <name>minv</name> =<init> <expr><call><name><name>min</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>minv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><name>minv</name> &lt; <name><name>this</name>.<name>minimumRangeValue</name></name> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(
                                    <argument><expr><name><name>this</name>.<name>minimumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>minv</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>Number</name></type> <name>max</name> =<init> <expr><call><name><name>item</name>.<name>getMaxOutlier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>max</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>double</name></type> <name>maxv</name> =<init> <expr><call><name><name>max</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>maxv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><name>maxv</name> &gt; <name><name>this</name>.<name>maximumRangeValue</name></name> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(
                                    <argument><expr><name><name>this</name>.<name>maximumRangeValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>maxv</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueRow</name></name> = <name>r</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValueColumn</name></name> = <name>c</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this dataset for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>DefaultBoxAndWhiskerCategoryDataset</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DefaultBoxAndWhiskerCategoryDataset</name></type> <name>dataset</name> 
                    =<init> <expr>(<name>DefaultBoxAndWhiskerCategoryDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>dataset</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this dataset.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not possible.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultBoxAndWhiskerCategoryDataset</name></type> <name>clone</name> 
                =<init> <expr>(<name>DefaultBoxAndWhiskerCategoryDataset</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>KeyedObjects2D</name>) <call><name><name>this</name>.<name>data</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
