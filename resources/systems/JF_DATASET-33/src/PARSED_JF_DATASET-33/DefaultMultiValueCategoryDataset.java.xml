<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-33\src\DefaultMultiValueCategoryDataset.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------------------
 * DefaultMultiValueCategoryDataset.java
 * -------------------------------------
 * (C) Copyright 2007, by David Forslund and Contributors.
 *
 * Original Author:  David Forslund;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);;
 *
 * Changes
 * -------
 * 08-Oct-2007 : Version 1, see patch 1780779 (DG);
 * 06-Nov-2007 : Return EMPTY_LIST not null from getValues() (DG);
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>


<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>KeyedObjects2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>RangeInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>AbstractDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A category dataset that defines multiple values for each item.
 * 
 * @since 1.0.7
 */</comment>
<class><specifier>public</specifier> class <name>DefaultMultiValueCategoryDataset</name> <super><extends>extends <name>AbstractDataset</name></extends> 
        <implements>implements <name>MultiValueCategoryDataset</name>, <name>RangeInfo</name>, <name>PublicCloneable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Storage for the data.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>KeyedObjects2D</name></type> <name>data</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The minimum range value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>minimumRangeValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The maximum range value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>maximumRangeValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The range of values.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>rangeBounds</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultMultiValueCategoryDataset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>KeyedObjects2D</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeBounds</name></name> = new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a list of values to the dataset (&lt;code&gt;null&lt;/code&gt; and Double.NaN 
     * items are automatically removed) and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param values  a list of values (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>List</name></type> <name>values</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>values</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'values' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>rowKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'rowKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>columnKey</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'columnKey' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>List</name></type> <name>vlist</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>values</name>.<name>listIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> =<init> <expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>Number</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>(<name>Number</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>vlist</name>.<name>add</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>vlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>addObject</name></name><argument_list>(<argument><expr><name>vlist</name></expr></argument>, <argument><expr><name>rowKey</name></expr></argument>, <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><call><name><name>vlist</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>maxval</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>minval</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>vlist</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>(<name>Number</name>) <call><name><name>vlist</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>   
                <expr_stmt><expr><name>minval</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minval</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxval</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maxval</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        
            <comment type="line">// update the cached range values...</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>maximumRangeValue</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>maxval</name> &gt; <call><name><name>this</name>.<name>maximumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>maximumRangeValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if>if <condition>(<expr><name><name>this</name>.<name>minimumRangeValue</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>minval</name> &lt; <call><name><name>this</name>.<name>minimumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>minimumRangeValue</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>minval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name><name>this</name>.<name>rangeBounds</name></name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>minimumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>this</name>.<name>maximumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list (possibly empty) of the values for the specified item.
     * The returned list should be unmodifiable.
     * 
     * @param row  the row index (zero-based).
     * @param column   the column index (zero-based).
     * 
     * @return The list of values.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getValues</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>values</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>values</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>Collections</name>.<name>EMPTY_LIST</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list (possibly empty) of the values for the specified item.
     * The returned list should be unmodifiable.
     * 
     * @param rowKey  the row key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param columnKey  the column key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The list of values.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getValues</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>rowKey</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>columnKey</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr>(<name>List</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>rowKey</name></expr></argument>, 
                <argument><expr><name>columnKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the average value for the specified item.
     *
     * @param row  the row key.
     * @param column  the column key.
     * 
     * @return The average value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>row</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>l</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>average</name> =<init> <expr>0.0d</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> != <name>null</name> &amp;&amp; <call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>(<name>Number</name>) <call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>average</name> += <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name> += 1</expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>average</name> = <name>average</name> / <name>count</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>average</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the average value for the specified item.
     *
     * @param row  the row index.
     * @param column  the column index.
     * 
     * @return The average value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>l</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>data</name>.<name>getObject</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>average</name> =<init> <expr>0.0d</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> != <name>null</name> &amp;&amp; <call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>l</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>(<name>Number</name>) <call><name><name>l</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>average</name> += <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name> += 1</expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>average</name> = <name>average</name> / <name>count</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>average</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column index for a given key.
     *
     * @param key  the column key.
     * 
     * @return The column index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a column key.
     *
     * @param column the column index (zero-based).
     * 
     * @return The column key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getColumnKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column keys.
     *
     * @return The keys.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getColumnKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row index for a given key.
     *
     * @param key the row key.
     * 
     * @return The row index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowIndex</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a row key.
     *
     * @param row the row index (zero-based).
     * 
     * @return The row key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getRowKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>row</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the row keys.
     *
     * @return The keys.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getRowKeys</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of rows in the table.
     *
     * @return The row count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRowCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of columns in the table.
     *
     * @return The column count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum y-value in the dataset.
     *
     * @param includeInterval a flag that determines whether or not the
     *                        y-interval is taken into account.
     *                        
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>minimumRangeValue</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>minimumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum y-value in the dataset.
     *
     * @param includeInterval a flag that determines whether or not the
     *                        y-interval is taken into account.
     *                        
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>maximumRangeValue</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>maximumRangeValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's range.
     *
     * @param includeInterval a flag that determines whether or not the
     *                        y-interval is taken into account.
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getRangeBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeBounds</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this dataset for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultMultiValueCategoryDataset</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DefaultMultiValueCategoryDataset</name></type> <name>that</name> 
                =<init> <expr>(<name>DefaultMultiValueCategoryDataset</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if the dataset cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultMultiValueCategoryDataset</name></type> <name>clone</name> 
                =<init> <expr>(<name>DefaultMultiValueCategoryDataset</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = (<name>KeyedObjects2D</name>) <call><name><name>this</name>.<name>data</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
