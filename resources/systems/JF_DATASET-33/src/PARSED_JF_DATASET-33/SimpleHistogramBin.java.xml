<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-33\src\SimpleHistogramBin.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * SimpleHistogramBin.java
 * -----------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 10-Jan-2005 : Version 1 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A bin for the {@link SimpleHistogramDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>SimpleHistogramBin</name> <super><implements>implements <name>Comparable</name>, 
                                           <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                           <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>3480862537505941742L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The lower bound for the bin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The upper bound for the bin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the lower bound is included in the bin 
     * range. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeLowerBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the upper bound is included in the bin 
     * range. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeUpperBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The item count. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>itemCount</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new bin.
     * 
     * @param lowerBound  the lower bound (inclusive).
     * @param upperBound  the upper bound (inclusive);
     */</comment>
    <constructor><specifier>public</specifier> <name>SimpleHistogramBin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerBound</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperBound</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>lowerBound</name></expr></argument>, <argument><expr><name>upperBound</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new bin.
     * 
     * @param lowerBound  the lower bound.
     * @param upperBound  the upper bound.
     * @param includeLowerBound  include the lower bound?
     * @param includeUpperBound  include the upper bound?
     */</comment>
    <constructor><specifier>public</specifier> <name>SimpleHistogramBin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerBound</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperBound</name></decl></param>,
                              <param><decl><type><name>boolean</name></type> <name>includeLowerBound</name></decl></param>, 
                              <param><decl><type><name>boolean</name></type> <name>includeUpperBound</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lowerBound</name> &gt;= <name>upperBound</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid bounds"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lowerBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upperBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>includeLowerBound</name></name> = <name>includeLowerBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>includeUpperBound</name></name> = <name>includeUpperBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>itemCount</name></name> = 0</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the lower bound.
     * 
     * @return The lower bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerBound</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Return the upper bound.
     * 
     * @return The upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperBound</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the item count.
     * 
     * @return The item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>itemCount</name></name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Sets the item count.
     * 
     * @param count  the item count.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>itemCount</name></name> = <name>count</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified value belongs in the bin, 
     * and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param value  the value.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>accepts</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> &lt; <name><name>this</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> &gt; <name><name>this</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> == <name><name>this</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>includeLowerBound</name></name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value</name> == <name><name>this</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>includeUpperBound</name></name></expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this bin overlaps with the specified bin,
     * and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param bin  the other bin (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>overlapsWith</name><parameter_list>(<param><decl><type><name>SimpleHistogramBin</name></type> <name>bin</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> &lt; <name><name>bin</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> &gt; <name><name>bin</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> == <name><name>bin</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>includeUpperBound</name></name> &amp;&amp; <name><name>bin</name>.<name>includeLowerBound</name></name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> == <name><name>bin</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>includeLowerBound</name></name> &amp;&amp; <name><name>bin</name>.<name>includeUpperBound</name></name></expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Compares the bin to an arbitrary object and returns the relative 
     * ordering.
     * 
     * @param obj  the object.
     * 
     * @return An integer indicating the relative ordering of the this bin and 
     *         the given object.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>SimpleHistogramBin</name>)</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>SimpleHistogramBin</name></type> <name>bin</name> =<init> <expr>(<name>SimpleHistogramBin</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> &lt; <name><name>bin</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> &gt; <name><name>bin</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <comment type="line">// lower bounds are the same</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> &lt; <name><name>bin</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>-1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> &gt; <name><name>bin</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <return>return <expr>0</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this bin for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>SimpleHistogramBin</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>SimpleHistogramBin</name></type> <name>that</name> =<init> <expr>(<name>SimpleHistogramBin</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> != <name><name>that</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> != <name><name>that</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>includeLowerBound</name></name> != <name><name>that</name>.<name>includeLowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>includeUpperBound</name></name> != <name><name>that</name>.<name>includeUpperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>itemCount</name></name> != <name><name>that</name>.<name>itemCount</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the bin.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException not thrown by this class.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>
    
}</block></class>
</unit>
