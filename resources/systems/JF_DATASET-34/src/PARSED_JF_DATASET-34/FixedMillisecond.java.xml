<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-34\src\FixedMillisecond.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * FixedMillisecond.java
 * ---------------------
 * (C) Copyright 2002-2007 by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 19-Mar-2002 : Version 1, based on original Millisecond implementation (DG);
 * 24-Jun-2002 : Removed unnecessary imports (DG);
 * 10-Sep-2002 : Added getSerialIndex() method (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 13-Mar-2003 : Moved to com.jrefinery.data.time package and implemented 
 *               Serializable (DG);
 * 21-Oct-2003 : Added hashCode() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Oct-2006 : Added peg() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<comment type="javadoc">/**
 * Wrapper for a &lt;code&gt;java.util.Date&lt;/code&gt; object that allows it to be used 
 * as a {@link RegularTimePeriod}.  This class is immutable, which is a 
 * requirement for all {@link RegularTimePeriod} subclasses.
 */</comment>
<class><specifier>public</specifier> class <name>FixedMillisecond</name> <super><extends>extends <name>RegularTimePeriod</name></extends> 
                              <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7867521484545646931L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>time</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a millisecond based on the current system time.
     */</comment>
    <constructor><specifier>public</specifier> <name>FixedMillisecond</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a millisecond.
     *
     * @param millisecond  the millisecond (same encoding as java.util.Date).
     */</comment>
    <constructor><specifier>public</specifier> <name>FixedMillisecond</name><parameter_list>(<param><decl><type><name>long</name></type> <name>millisecond</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>millisecond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a millisecond.
     *
     * @param time  the time.
     */</comment>
    <constructor><specifier>public</specifier> <name>FixedMillisecond</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>time</name></name> = <name>time</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the date/time.
     *
     * @return The date/time.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>time</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This method is overridden to do nothing.
     * 
     * @param calendar  ignored
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>peg</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// nothing to do        </comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond preceding this one.
     *
     * @return The millisecond preceding this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t</name> =<init> <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name> != <name><name>Long</name>.<name>MIN_VALUE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>FixedMillisecond</name><argument_list>(<argument><expr><name>t</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond following this one.
     *
     * @return The millisecond following this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t</name> =<init> <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name> != <name><name>Long</name>.<name>MAX_VALUE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>FixedMillisecond</name><argument_list>(<argument><expr><name>t</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the equality of this object against an arbitrary Object.
     *
     * @param object  the object to compare
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> <name>instanceof</name> <name>FixedMillisecond</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FixedMillisecond</name></type> <name>m</name> =<init> <expr>(<name>FixedMillisecond</name>) <name>object</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>m</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>false</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this Millisecond object
     * relative to the specified
     * object: negative == before, zero == same, positive == after.
     *
     * @param o1    the object to compare.
     *
     * @return negative == before, zero == same, positive == after.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>difference</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another Second object</comment>
        <comment type="line">// -------------------------------------------</comment>
        <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>FixedMillisecond</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>FixedMillisecond</name></type> <name>t1</name> =<init> <expr>(<name>FixedMillisecond</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>difference</name> = <call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call> - <call><name><name>t1</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>difference</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>difference</name> &lt; 0</expr>)</condition><then> <block>{
                   <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to another TimePeriod object</comment>
        <comment type="line">// -----------------------------------------------</comment>
        <else>else <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>RegularTimePeriod</name></expr>)</condition><then> <block>{
            <comment type="line">// more difficult case - evaluate later...</comment>
            <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
        }</block></then>

        <comment type="line">// CASE 3 : Comparing to a non-TimePeriod object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the time period.
     *
     * @return The first millisecond of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns the first millisecond of the time period.
     *
     * @param calendar  the calendar.
     *
     * @return The first millisecond of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the time period.
     *
     * @return The last millisecond of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the time period.
     *
     * @param calendar  the calendar.
     *
     * @return The last millisecond of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond closest to the middle of the time period.
     *
     * @return The millisecond closest to the middle of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMiddleMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond closest to the middle of the time period.
     *
     * @param calendar  the calendar.
     *
     * @return The millisecond closest to the middle of the time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMiddleMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a serial index number for the millisecond.
     *
     * @return The serial index number.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSerialIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>time</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
