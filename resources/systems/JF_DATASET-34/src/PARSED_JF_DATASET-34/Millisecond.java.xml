<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-34\src\Millisecond.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * Millisecond.java
 * ----------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 11-Oct-2001 : Version 1 (DG);
 * 19-Dec-2001 : Added new constructors as suggested by Paul English (DG);
 * 26-Feb-2002 : Added new getStart() and getEnd() methods (DG);
 * 29-Mar-2002 : Fixed bug in getStart(), getEnd() and compareTo() methods (DG);
 * 10-Sep-2002 : Added getSerialIndex() method (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 10-Jan-2003 : Changed base class and method names (DG);
 * 13-Mar-2003 : Moved to com.jrefinery.data.time package and implemented 
 *               Serializable (DG);
 * 21-Oct-2003 : Added hashCode() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Oct-2006 : Updated API docs (DG);
 * 06-Oct-2006 : Refactored to cache first and last millisecond values (DG);
 * 04-Apr-2007 : In Millisecond(Date, TimeZone), peg milliseconds to the
 *               specified zone (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<comment type="javadoc">/**
 * Represents a millisecond.  This class is immutable, which is a requirement 
 * for all {@link RegularTimePeriod} subclasses.
 */</comment>
<class><specifier>public</specifier> class <name>Millisecond</name> <super><extends>extends <name>RegularTimePeriod</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5316836467277638485L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A constant for the first millisecond in a second. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>FIRST_MILLISECOND_IN_SECOND</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the last millisecond in a second. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LAST_MILLISECOND_IN_SECOND</name> =<init> <expr>999</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The day. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Day</name></type> <name>day</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The hour in the day. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>hour</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minute. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>minute</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The second. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>byte</name></type> <name>second</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The millisecond. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>millisecond</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The pegged millisecond. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>long</name></type> <name>firstMillisecond</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs a millisecond based on the current system time.
     */</comment>
    <constructor><specifier>public</specifier> <name>Millisecond</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a millisecond.
     *
     * @param millisecond  the millisecond (0-999).
     * @param second  the second.
     */</comment>
    <constructor><specifier>public</specifier> <name>Millisecond</name><parameter_list>(<param><decl><type><name>int</name></type> <name>millisecond</name></decl></param>, <param><decl><type><name>Second</name></type> <name>second</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>millisecond</name></name> = <name>millisecond</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>second</name></name> = (<name>byte</name>) <call><name><name>second</name>.<name>getSecond</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minute</name></name> = (<name>byte</name>) <call><name><name>second</name>.<name>getMinute</name></name><argument_list>()</argument_list></call>.<call><name>getMinute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>hour</name></name> = (<name>byte</name>) <call><name><name>second</name>.<name>getMinute</name></name><argument_list>()</argument_list></call>.<call><name>getHourValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>day</name></name> = <call><name><name>second</name>.<name>getMinute</name></name><argument_list>()</argument_list></call>.<call><name>getDay</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new millisecond.
     * 
     * @param millisecond  the millisecond (0-999).
     * @param second  the second (0-59).
     * @param minute  the minute (0-59).
     * @param hour  the hour (0-23).
     * @param day  the day (1-31).
     * @param month  the month (1-12).
     * @param year  the year (1900-9999).
     */</comment>    
    <constructor><specifier>public</specifier> <name>Millisecond</name><parameter_list>(<param><decl><type><name>int</name></type> <name>millisecond</name></decl></param>, <param><decl><type><name>int</name></type> <name>second</name></decl></param>, <param><decl><type><name>int</name></type> <name>minute</name></decl></param>, <param><decl><type><name>int</name></type> <name>hour</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>day</name></decl></param>, <param><decl><type><name>int</name></type> <name>month</name></decl></param>, <param><decl><type><name>int</name></type> <name>year</name></decl></param>)</parameter_list> <block>{
                           
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>millisecond</name></expr></argument>, <argument><expr>new <call><name>Second</name><argument_list>(<argument><expr><name>second</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a millisecond.
     *
     * @param time  the time.
     */</comment>
    <constructor><specifier>public</specifier> <name>Millisecond</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name><name>RegularTimePeriod</name>.<name>DEFAULT_TIME_ZONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a millisecond.
     *
     * @param time  the instant in time.
     * @param zone  the time zone.
     */</comment>
    <constructor><specifier>public</specifier> <name>Millisecond</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>time</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>millisecond</name></name> = <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>second</name></name> = (<name>byte</name>) <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>SECOND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minute</name></name> = (<name>byte</name>) <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>hour</name></name> = (<name>byte</name>) <call><name><name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>day</name></name> = new <call><name>Day</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>peg</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the second.
     *
     * @return The second.
     */</comment>
    <function><type><specifier>public</specifier> <name>Second</name></type> <name>getSecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Second</name><argument_list>(<argument><expr><name><name>this</name>.<name>second</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>minute</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>hour</name></name></expr></argument>, 
                <argument><expr><call><name><name>this</name>.<name>day</name>.<name>getDayOfMonth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>day</name>.<name>getMonth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>this</name>.<name>day</name>.<name>getYear</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond.
     *
     * @return The millisecond.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>millisecond</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the second.  This will be determined 
     * relative to the time zone specified in the constructor, or in the 
     * calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The first millisecond of the second.
     * 
     * @see #getLastMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstMillisecond</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the second.  This will be 
     * determined relative to the time zone specified in the constructor, or
     * in the calendar instance passed in the most recent call to the 
     * {@link #peg(Calendar)} method.
     *
     * @return The last millisecond of the second.
     * 
     * @see #getFirstMillisecond()
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstMillisecond</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Recalculates the start date/time and end date/time for this time period 
     * relative to the supplied calendar (which incorporates a time zone).
     * 
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>peg</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>firstMillisecond</name></name> = <call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond preceding this one.
     *
     * @return The millisecond preceding this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>previous</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>millisecond</name></name> != <name>FIRST_MILLISECOND_IN_SECOND</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Millisecond</name><argument_list>(<argument><expr><name><name>this</name>.<name>millisecond</name></name> - 1</expr></argument>, <argument><expr><call><name>getSecond</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>Second</name></type> <name>previous</name> =<init> <expr>(<name>Second</name>) <call><name>getSecond</name><argument_list>()</argument_list></call>.<call><name>previous</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>previous</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Millisecond</name><argument_list>(<argument><expr><name>LAST_MILLISECOND_IN_SECOND</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the millisecond following this one.
     *
     * @return The millisecond following this one.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>millisecond</name></name> != <name>LAST_MILLISECOND_IN_SECOND</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>Millisecond</name><argument_list>(<argument><expr><name><name>this</name>.<name>millisecond</name></name> + 1</expr></argument>, <argument><expr><call><name>getSecond</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>Second</name></type> <name>next</name> =<init> <expr>(<name>Second</name>) <call><name>getSecond</name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>next</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Millisecond</name><argument_list>(<argument><expr><name>FIRST_MILLISECOND_IN_SECOND</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a serial index number for the millisecond.
     *
     * @return The serial index number.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getSerialIndex</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>hourIndex</name> =<init> <expr><call><name><name>this</name>.<name>day</name>.<name>getSerialIndex</name></name><argument_list>()</argument_list></call> * 24L + <name><name>this</name>.<name>hour</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>minuteIndex</name> =<init> <expr><name>hourIndex</name> * 60L + <name><name>this</name>.<name>minute</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>secondIndex</name> =<init> <expr><name>minuteIndex</name> * 60L + <name><name>this</name>.<name>second</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>secondIndex</name> * 1000L + <name><name>this</name>.<name>millisecond</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the equality of this object against an arbitrary Object.
     * &lt;P&gt;
     * This method will return true ONLY if the object is a Millisecond object
     * representing the same millisecond as this instance.
     *
     * @param obj  the object to compare
     *
     * @return &lt;code&gt;true&lt;/code&gt; if milliseconds and seconds of this and object
     *      are the same.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>Millisecond</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Millisecond</name></type> <name>that</name> =<init> <expr>(<name>Millisecond</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>millisecond</name></name> != <name><name>that</name>.<name>millisecond</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>second</name></name> != <name><name>that</name>.<name>second</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minute</name></name> != <name><name>that</name>.<name>minute</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>hour</name></name> != <name><name>that</name>.<name>hour</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>day</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>day</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object instance.  The approach described by 
     * Joshua Bloch in "Effective Java" has been used here:
     * &lt;p&gt;
     * &lt;code&gt;http://developer.java.sun.com/developer/Books/effectivejava
     * /Chapter3.pdf&lt;/code&gt;
     * 
     * @return A hashcode.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>17</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>millisecond</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name>getSecond</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this Millisecond object
     * relative to the specified object:
     *
     * negative == before, zero == same, positive == after.
     *
     * @param obj  the object to compare
     *
     * @return negative == before, zero == same, positive == after.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>difference</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another Second object</comment>
        <comment type="line">// -------------------------------------------</comment>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>Millisecond</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Millisecond</name></type> <name>ms</name> =<init> <expr>(<name>Millisecond</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>difference</name> = <call><name>getFirstMillisecond</name><argument_list>()</argument_list></call> - <call><name><name>ms</name>.<name>getFirstMillisecond</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>difference</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>difference</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to another TimePeriod object</comment>
        <comment type="line">// -----------------------------------------------</comment>
        <else>else <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>RegularTimePeriod</name></expr>)</condition><then> <block>{
            <comment type="line">// more difficult case - evaluate later...</comment>
            <expr_stmt><expr><name>result</name> = 0</expr>;</expr_stmt>
        }</block></then>

        <comment type="line">// CASE 3 : Comparing to a non-TimePeriod object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the first millisecond of the time period.
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The first millisecond of the time period.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getFirstMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> =<init> <expr><call><name><name>this</name>.<name>day</name>.<name>getYear</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> =<init> <expr><call><name><name>this</name>.<name>day</name>.<name>getMonth</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>day</name> =<init> <expr><call><name><name>this</name>.<name>day</name>.<name>getDayOfMonth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>, <argument><expr><name><name>this</name>.<name>hour</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>minute</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>millisecond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//return calendar.getTimeInMillis();  // this won't work for JDK 1.3</comment>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the last millisecond of the time period.
     *
     * @param calendar  the calendar (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The last millisecond of the time period.
     *
     * @throws NullPointerException if &lt;code&gt;calendar&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>long</name></type> <name>getLastMillisecond</name><parameter_list>(<param><decl><type><name>Calendar</name></type> <name>calendar</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name>calendar</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
