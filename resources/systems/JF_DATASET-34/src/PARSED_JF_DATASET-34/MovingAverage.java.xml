<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-34\src\MovingAverage.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * MovingAverage.java
 * ------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Benoit Xhenseval;
 *
 * Changes
 * -------
 * 28-Jan-2003 : Version 1 (DG);
 * 10-Mar-2003 : Added createPointMovingAverage() method contributed by Benoit 
 *               Xhenseval (DG);
 * 01-Aug-2003 : Added new method for TimeSeriesCollection, and fixed bug in 
 *               XYDataset method (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYSeries</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYSeriesCollection</name></name>;</import>

<comment type="javadoc">/**
 * A utility class for calculating moving averages of time series data.
 */</comment>
<class><specifier>public</specifier> class <name>MovingAverage</name> <block>{

    <comment type="javadoc">/**
     * Creates a new {@link TimeSeriesCollection} containing a moving average 
     * series for each series in the source collection.
     * 
     * @param source  the source collection.
     * @param suffix  the suffix added to each source series name to create the
     *                corresponding moving average series name.
     * @param periodCount  the number of periods in the moving average 
     *                     calculation.
     * @param skip  the number of initial periods to skip.
     * 
     * @return A collection of moving average time series.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeSeriesCollection</name></type> <name>createMovingAverage</name><parameter_list>(
        <param><decl><type><name>TimeSeriesCollection</name></type> <name>source</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>, <param><decl><type><name>int</name></type> <name>periodCount</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{
    
        <comment type="line">// check arguments</comment>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"MovingAverage.createMovingAverage() : null source."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>periodCount</name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"periodCount must be greater than or equal to 1."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>TimeSeriesCollection</name></type> <name>result</name> =<init> <expr>new <call><name>TimeSeriesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>source</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>sourceSeries</name> =<init> <expr><call><name><name>source</name>.<name>getSeries</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TimeSeries</name></type> <name>maSeries</name> =<init> <expr><call><name>createMovingAverage</name><argument_list>(
                <argument><expr><name>sourceSeries</name></expr></argument>, <argument><expr><call><name><name>sourceSeries</name>.<name>getKey</name></name><argument_list>()</argument_list></call> + <name>suffix</name></expr></argument>, <argument><expr><name>periodCount</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>addSeries</name></name><argument_list>(<argument><expr><name>maSeries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
        }</block></for>
        
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a new {@link TimeSeries} containing moving average values for 
     * the given series.  If the series is empty (contains zero items), the 
     * result is an empty series.
     *
     * @param source  the source series.
     * @param name  the name of the new series.
     * @param periodCount  the number of periods used in the average 
     *                     calculation.
     * @param skip  the number of initial periods to skip.
     *
     * @return The moving average series.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeSeries</name></type> <name>createMovingAverage</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>source</name></decl></param>,
                                                 <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                                 <param><decl><type><name>int</name></type> <name>periodCount</name></decl></param>,
                                                 <param><decl><type><name>int</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// check arguments</comment>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null source."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>periodCount</name> &lt; 1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"periodCount must be greater than or equal to 1."</expr></argument>
            )</argument_list></call></expr>;</throw>

        }</block></then></if>

        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result</name> =<init> <expr>new <call><name>TimeSeries</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>source</name>.<name>getTimePeriodClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>source</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{

            <comment type="line">// if the initial averaging period is to be excluded, then </comment>
            <comment type="line">// calculate the index of the</comment>
            <comment type="line">// first data item to have an average calculated...</comment>
            <decl_stmt><decl><type><name>long</name></type> <name>firstSerial</name> 
                =<init> <expr><call><name><name>source</name>.<name>getDataItem</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>.<call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>getSerialIndex</name><argument_list>()</argument_list></call> + <name>skip</name></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>source</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{

                <comment type="line">// get the current data item...</comment>
                <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>current</name> =<init> <expr><call><name><name>source</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>period</name> =<init> <expr><call><name><name>current</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>serial</name> =<init> <expr><call><name><name>period</name>.<name>getSerialIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>serial</name> &gt;= <name>firstSerial</name></expr>)</condition><then> <block>{
                    <comment type="line">// work out the average for the earlier values...</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>sum</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>serialLimit</name> =<init> <expr><call><name><name>period</name>.<name>getSerialIndex</name></name><argument_list>()</argument_list></call> - <name>periodCount</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>finished</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

                    <while>while <condition>(<expr>(<name>offset</name> &lt; <name>periodCount</name>) &amp;&amp; (!<name>finished</name>)</expr>)</condition> <block>{
                        <if>if <condition>(<expr>(<name>i</name> - <name>offset</name>) &gt;= 0</expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>item</name> 
                                =<init> <expr><call><name><name>source</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name> - <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>p</name> =<init> <expr><call><name><name>item</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Number</name></type> <name>v</name> =<init> <expr><call><name><name>item</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>long</name></type> <name>currentIndex</name> =<init> <expr><call><name><name>p</name>.<name>getSerialIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>currentIndex</name> &gt; <name>serialLimit</name></expr>)</condition><then> <block>{
                                <if>if <condition>(<expr><name>v</name> != <name>null</name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>sum</name> = <name>sum</name> + <call><name><name>v</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>n</name> = <name>n</name> + 1</expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then>
                            <else>else <block>{
                                <expr_stmt><expr><name>finished</name> = true</expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then></if>
                        <expr_stmt><expr><name>offset</name> = <name>offset</name> + 1</expr>;</expr_stmt>
                    }</block></while>
                    <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>sum</name> / <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>

            }</block></for>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Creates a new {@link TimeSeries} containing moving average values for 
     * the given series, calculated by number of points (irrespective of the 
     * 'age' of those points).  If the series is empty (contains zero items), 
     * the result is an empty series.
     * &lt;p&gt;
     * Developed by Benoit Xhenseval (www.ObjectLab.co.uk).
     *
     * @param source  the source series.
     * @param name  the name of the new series.
     * @param pointCount  the number of POINTS used in the average calculation 
     *                    (not periods!)
     *
     * @return The moving average series.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TimeSeries</name></type> <name>createPointMovingAverage</name><parameter_list>(<param><decl><type><name>TimeSeries</name></type> <name>source</name></decl></param>,
                                                      <param><decl><type><name>String</name></type> <name>name</name></decl></param>, 
                                                      <param><decl><type><name>int</name></type> <name>pointCount</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// check arguments</comment>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'source'."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>pointCount</name> &lt; 2</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"periodCount must be greater than or equal to 2."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>TimeSeries</name></type> <name>result</name> =<init> <expr>new <call><name>TimeSeries</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>source</name>.<name>getTimePeriodClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rollingSumForPeriod</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>source</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <comment type="line">// get the current data item...</comment>
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>current</name> =<init> <expr><call><name><name>source</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>period</name> =<init> <expr><call><name><name>current</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rollingSumForPeriod</name> += <call><name><name>current</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>i</name> &gt; <name>pointCount</name> - 1</expr>)</condition><then> <block>{
                <comment type="line">// remove the point i-periodCount out of the rolling sum.</comment>
                <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>startOfMovingAvg</name> 
                    =<init> <expr><call><name><name>source</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>i</name> - <name>pointCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>rollingSumForPeriod</name> 
                    -= <call><name><name>startOfMovingAvg</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>rollingSumForPeriod</name> / <name>pointCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>i</name> == <name>pointCount</name> - 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr><name>rollingSumForPeriod</name> / <name>pointCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new {@link XYDataset} containing the moving averages of each 
     * series in the &lt;code&gt;source&lt;/code&gt; dataset.
     *
     * @param source  the source dataset.
     * @param suffix  the string to append to source series names to create 
     *                target series names.
     * @param period  the averaging period.
     * @param skip  the length of the initial skip period.
     *
     * @return The dataset.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>XYDataset</name></type> <name>createMovingAverage</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>source</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>,
                                                <param><decl><type><name>long</name></type> <name>period</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>long</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{

        <return>return <expr><call><name>createMovingAverage</name><argument_list>(
            <argument><expr><name>source</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr>(<name>double</name>) <name>period</name></expr></argument>, <argument><expr>(<name>double</name>) <name>skip</name></expr></argument>
        )</argument_list></call></expr>;</return>
        
    }</block></function>


    <comment type="javadoc">/**
     * Creates a new {@link XYDataset} containing the moving averages of each 
     * series in the &lt;code&gt;source&lt;/code&gt; dataset.
     *
     * @param source  the source dataset.
     * @param suffix  the string to append to source series names to create 
     *                target series names.
     * @param period  the averaging period.
     * @param skip  the length of the initial skip period.
     *
     * @return The dataset.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>XYDataset</name></type> <name>createMovingAverage</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>source</name></decl></param>, <param><decl><type><name>String</name></type> <name>suffix</name></decl></param>,
                                                <param><decl><type><name>double</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// check arguments</comment>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null source (XYDataset)."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>XYSeriesCollection</name></type> <name>result</name> =<init> <expr>new <call><name>XYSeriesCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>source</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYSeries</name></type> <name>s</name> =<init> <expr><call><name>createMovingAverage</name><argument_list>(
                <argument><expr><name>source</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>source</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> + <name>suffix</name></expr></argument>, <argument><expr><name>period</name></expr></argument>, <argument><expr><name>skip</name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>addSeries</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Creates a new {@link XYSeries} containing the moving averages of one 
     * series in the &lt;code&gt;source&lt;/code&gt; dataset.
     *
     * @param source  the source dataset.
     * @param series  the series index (zero based).
     * @param name  the name for the new series.
     * @param period  the averaging period.
     * @param skip  the length of the initial skip period.
     *
     * @return The dataset.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>XYSeries</name></type> <name>createMovingAverage</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>source</name></decl></param>, 
                                               <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                               <param><decl><type><name>double</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>skip</name></decl></param>)</parameter_list> <block>{

                                               
        <comment type="line">// check arguments</comment>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null source (XYDataset)."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>period</name> &lt; <name><name>Double</name>.<name>MIN_VALUE</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"period must be positive."</expr></argument>)</argument_list></call></expr>;</throw>

        }</block></then></if>

        <if>if <condition>(<expr><name>skip</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"skip must be &gt;= 0.0."</expr></argument>)</argument_list></call></expr>;</throw>

        }</block></then></if>

        <decl_stmt><decl><type><name>XYSeries</name></type> <name>result</name> =<init> <expr>new <call><name>XYSeries</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>source</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{

            <comment type="line">// if the initial averaging period is to be excluded, then </comment>
            <comment type="line">// calculate the lowest x-value to have an average calculated...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>first</name> =<init> <expr><call><name><name>source</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> + <name>skip</name></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>source</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{

                <comment type="line">// get the current data item...</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>source</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>x</name> &gt;= <name>first</name></expr>)</condition><then> <block>{
                    <comment type="line">// work out the average for the earlier values...</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>sum</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>limit</name> =<init> <expr><name>x</name> - <name>period</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>boolean</name></type> <name>finished</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

                    <while>while <condition>(<expr>!<name>finished</name></expr>)</condition> <block>{
                        <if>if <condition>(<expr>(<name>i</name> - <name>offset</name>) &gt;= 0</expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>source</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>i</name> - <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>Number</name></type> <name>yy</name> =<init> <expr><call><name><name>source</name>.<name>getY</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>i</name> - <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>xx</name> &gt; <name>limit</name></expr>)</condition><then> <block>{
                                <if>if <condition>(<expr><name>yy</name> != <name>null</name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><name>sum</name> = <name>sum</name> + <call><name><name>yy</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name>n</name> = <name>n</name> + 1</expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then>
                            <else>else <block>{
                                <expr_stmt><expr><name>finished</name> = true</expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>finished</name> = true</expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><name>offset</name> = <name>offset</name> + 1</expr>;</expr_stmt>
                    }</block></while>
                    <if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>sum</name> / <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>

            }</block></for>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

}</block></class>
</unit>
