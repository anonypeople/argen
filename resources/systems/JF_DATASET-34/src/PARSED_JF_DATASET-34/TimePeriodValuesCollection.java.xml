<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-34\src\TimePeriodValuesCollection.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------------
 * TimePeriodValuesCollection.java
 * -------------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 22-Apr-2003 : Version 1 (DG);
 * 05-May-2004 : Now extends AbstractIntervalXYDataset (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 06-Oct-2004 : Updated for changes in DomainInfo interface (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 03-Oct-2006 : Deprecated get/setDomainIsPointsInTime() (DG);
 * 11-Jun-2007 : Fixed bug in getDomainBounds() method, and changed default
 *               value for domainIsPointsInTime to false (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>AbstractIntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A collection of {@link TimePeriodValues} objects.
 * &lt;P&gt;
 * This class implements the {@link org.jfree.data.xy.XYDataset} interface, as 
 * well as the extended {@link IntervalXYDataset} interface.  This makes it a 
 * convenient dataset for use with the {@link org.jfree.chart.plot.XYPlot} 
 * class.
 */</comment>
<class><specifier>public</specifier> class <name>TimePeriodValuesCollection</name> <super><extends>extends <name>AbstractIntervalXYDataset</name></extends>
        <implements>implements <name>IntervalXYDataset</name>, <name>DomainInfo</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3077934065236454199L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the time series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The position within a time period to return as the x-value (START, 
     * MIDDLE or END). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimePeriodAnchor</name></type> <name>xPosition</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that indicates that the domain is 'points in time'.  If this 
     * flag is true, only the x-value is used to determine the range of values 
     * in the domain, the start and end x-values are ignored.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainIsPointsInTime</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs an empty dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimePeriodValuesCollection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>(<name>TimePeriodValues</name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a dataset containing a single series.  Additional series can 
     * be added.
     *
     * @param series  the series (&lt;code&gt;null&lt;/code&gt; ignored).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimePeriodValuesCollection</name><parameter_list>(<param><decl><type><name>TimePeriodValues</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xPosition</name></name> = <name><name>TimePeriodAnchor</name>.<name>MIDDLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainIsPointsInTime</name></name> = false</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>series</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the position of the X value within each time period.
     * 
     * @return The position (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setXPosition(TimePeriodAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriodAnchor</name></type> <name>getXPosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>xPosition</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the position of the x axis within each time period.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getXPosition()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXPosition</name><parameter_list>(<param><decl><type><name>TimePeriodAnchor</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'position' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>xPosition</name></name> = <name>position</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of series in the collection.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a series.
     *
     * @param series  the index of the series (zero-based).
     *
     * @return The series.
     */</comment>
    <function><type><specifier>public</specifier> <name>TimePeriodValues</name></type> <name>getSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>series</name> &lt; 0) || (<name>series</name> &gt;= <call><name>getSeriesCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index 'series' out of range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>TimePeriodValues</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the key for a series.
     *
     * @param series  the index of the series (zero-based).
     *
     * @return The key for a series.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking</comment>
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getKey</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a series to the collection.  A 
     * {@link org.jfree.data.general.DatasetChangeEvent} is sent to all 
     * registered listeners.
     *
     * @param series  the time series.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSeries</name><parameter_list>(<param><decl><type><name>TimePeriodValues</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>add</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes the specified series from the collection.
     *
     * @param series  the series to remove (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>TimePeriodValues</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>series</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'series' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>remove</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>series</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireDatasetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes a series from the collection.
     *
     * @param index  the series index (zero-based).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSeries</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>series</name> =<init> <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>series</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>removeSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of items in the specified series.
     * &lt;P&gt;
     * This method is provided for convenience.
     *
     * @param series  the index of the series of interest (zero-based).
     *
     * @return The number of items in the specified series.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSeries</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>getItemCount</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The x-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>ts</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>dp</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>period</name> =<init> <expr><call><name><name>dp</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Long</name><argument_list>(<argument><expr><call><name>getX</name><argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the x-value for a time period.
     *
     * @param period  the time period.
     *
     * @return The x-value.
     */</comment>
    <function><type><specifier>private</specifier> <name>long</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>TimePeriod</name></type> <name>period</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>START</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>period</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>period</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> 
                / 2 + <call><name><name>period</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call> / 2</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>END</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>period</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"TimePeriodAnchor unknown."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting X value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>ts</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>dp</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>dp</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>getStart</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending X value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>ts</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>dp</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Long</name><argument_list>(<argument><expr><call><name><name>dp</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call>.<call><name>getEnd</name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The y-value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>ts</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>this</name>.<name>data</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimePeriodValue</name></type> <name>dp</name> =<init> <expr><call><name><name>ts</name>.<name>getDataItem</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>dp</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getStartY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending Y value for the specified series and item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getEndY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The minimum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainLowerBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name>getDomainBounds</name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The maximum value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainUpperBound</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name>getDomainBounds</name><argument_list>(<argument><expr><name>includeInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of the values in this dataset's domain.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     * 
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDomainBounds</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>includeInterval</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>interval</name> =<init> <expr><name>includeInterval</name> || <name><name>this</name>.<name>domainIsPointsInTime</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>temp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>data</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>TimePeriodValues</name></type> <name>series</name> =<init> <expr>(<name>TimePeriodValues</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>series</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>count</name> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TimePeriod</name></type> <name>start</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(
                        <argument><expr><call><name><name>series</name>.<name>getMinStartIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TimePeriod</name></type> <name>end</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(<argument><expr><call><name><name>series</name>.<name>getMaxEndIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<name>interval</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>START</name></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>maxStart</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(
                                <argument><expr><call><name><name>series</name>.<name>getMaxStartIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>temp</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>start</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, 
                                <argument><expr><call><name><name>maxStart</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>minMiddle</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(
                                <argument><expr><call><name><name>series</name>.<name>getMinMiddleIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>s1</name> =<init> <expr><call><name><name>minMiddle</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>e1</name> =<init> <expr><call><name><name>minMiddle</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>maxMiddle</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(
                                <argument><expr><call><name><name>series</name>.<name>getMaxMiddleIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>s2</name> =<init> <expr><call><name><name>maxMiddle</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>long</name></type> <name>e2</name> =<init> <expr><call><name><name>maxMiddle</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>temp</name> = new <call><name>Range</name><argument_list>(<argument><expr><name>s1</name> + (<name>e1</name> - <name>s1</name>) / 2</expr></argument>, 
                                <argument><expr><name>s2</name> + (<name>e2</name> - <name>s2</name>) / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> == <name><name>TimePeriodAnchor</name>.<name>END</name></name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>TimePeriod</name></type> <name>minEnd</name> =<init> <expr><call><name><name>series</name>.<name>getTimePeriod</name></name><argument_list>(
                                <argument><expr><call><name><name>series</name>.<name>getMinEndIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>temp</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>minEnd</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, 
                                <argument><expr><call><name><name>end</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if></else></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>temp</name> = new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>start</name>.<name>getStart</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>end</name>.<name>getEnd</name></name><argument_list>()</argument_list></call>.<call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>TimePeriodValuesCollection</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>TimePeriodValuesCollection</name></type> <name>that</name> =<init> <expr>(<name>TimePeriodValuesCollection</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainIsPointsInTime</name></name> != <name><name>that</name>.<name>domainIsPointsInTime</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>xPosition</name></name> != <name><name>that</name>.<name>xPosition</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>   
    }</block></function>

    <comment type="line">// --- DEPRECATED METHODS -------------------------------------------------</comment>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether the domain is treated as 'points 
     * in time'.  This flag is used when determining the max and min values for 
     * the domain.  If true, then only the x-values are considered for the max 
     * and min values.  If false, then the start and end x-values will also be 
     * taken into consideration
     *
     * @return The flag.
     * 
     * @deprecated This flag is no longer used by JFreeChart (as of version 
     *     1.0.3).
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDomainIsPointsInTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainIsPointsInTime</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether the domain is treated as 'points in 
     * time', or time periods.
     *
     * @param flag  the new value of the flag.
     * 
     * @deprecated This flag is no longer used by JFreeChart (as of version 
     *     1.0.3).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainIsPointsInTime</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>domainIsPointsInTime</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
