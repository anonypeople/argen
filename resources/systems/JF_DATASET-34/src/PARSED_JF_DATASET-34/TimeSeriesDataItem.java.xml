<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-34\src\TimeSeriesDataItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * TimeSeriesDataItem.java
 * -----------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 11-Oct-2001 : Version 1 (DG);
 * 15-Nov-2001 : Updated Javadoc comments (DG);
 * 29-Nov-2001 : Added cloning (DG);
 * 24-Jun-2002 : Removed unnecessary import (DG);
 * 07-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 13-Mar-2003 : Renamed TimeSeriesDataPair --&gt; TimeSeriesDataItem, moved to
 *               com.jrefinery.data.time package, implemented Serializable (DG)
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * Represents one data item in a time series.
 * &lt;P&gt;
 * The time period can be any of the following:
 * &lt;ul&gt;
 * &lt;li&gt;{@link Year}&lt;/li&gt;
 * &lt;li&gt;{@link Quarter}&lt;/li&gt;
 * &lt;li&gt;{@link Month}&lt;/li&gt;
 * &lt;li&gt;{@link Week}&lt;/li&gt;
 * &lt;li&gt;{@link Day}&lt;/li&gt;
 * &lt;li&gt;{@link Hour}&lt;/li&gt;
 * &lt;li&gt;{@link Minute}&lt;/li&gt;
 * &lt;li&gt;{@link Second}&lt;/li&gt;
 * &lt;li&gt;{@link Millisecond}&lt;/li&gt;
 * &lt;li&gt;{@link FixedMillisecond}&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * The time period is an immutable property of the data item.  Data items will
 * often be sorted within a list, and allowing the time period to be changed
 * could destroy the sort order.
 * &lt;P&gt;
 * Implements the &lt;code&gt;Comparable&lt;/code&gt; interface so that standard Java 
 * sorting can be used to keep the data items in order.
 *
 */</comment>
<class><specifier>public</specifier> class <name>TimeSeriesDataItem</name> <super><implements>implements <name>Cloneable</name>, <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2235346966016401302L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The time period. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularTimePeriod</name></type> <name>period</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The value associated with the time period. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new data item that associates a value with a time period.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeriesDataItem</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>period</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'period' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>period</name></name> = <name>period</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new data item that associates a value with a time period.
     *
     * @param period  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value  the value associated with the time period.
     */</comment>
    <constructor><specifier>public</specifier> <name>TimeSeriesDataItem</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>period</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>period</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the time period.
     *
     * @return The time period (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>getPeriod</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>period</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value.
     *
     * @return The value (&lt;code&gt;null&lt;/code&gt; possible).
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>value</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value for this data item.
     *
     * @param value  the value (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param o  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>TimeSeriesDataItem</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>timeSeriesDataItem</name> =<init> <expr>(<name>TimeSeriesDataItem</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>period</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>period</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>timeSeriesDataItem</name>.<name>period</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>timeSeriesDataItem</name>.<name>period</name></name> != <name>null</name></expr>)</condition><then> <block>{
           <return>return <expr>false</expr>;</return>
        }</block></then></if></else></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>value</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>value</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>timeSeriesDataItem</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>timeSeriesDataItem</name>.<name>value</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if></else></if>

        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name><name>this</name>.<name>period</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>period</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + (<name><name>this</name>.<name>value</name></name> != <name>null</name> ? <call><name><name>this</name>.<name>value</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an integer indicating the order of this data pair object
     * relative to another object.
     * &lt;P&gt;
     * For the order we consider only the timing:
     * negative == before, zero == same, positive == after.
     *
     * @param o1  The object being compared to.
     *
     * @return An integer indicating the order of the data item object 
     *         relative to another object.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o1</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

        <comment type="line">// CASE 1 : Comparing to another TimeSeriesDataItem object</comment>
        <comment type="line">// -------------------------------------------------------</comment>
        <if>if <condition>(<expr><name>o1</name> <name>instanceof</name> <name>TimeSeriesDataItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>TimeSeriesDataItem</name></type> <name>datapair</name> =<init> <expr>(<name>TimeSeriesDataItem</name>) <name>o1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name>getPeriod</name><argument_list>()</argument_list></call>.<call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>datapair</name>.<name>getPeriod</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>

        <comment type="line">// CASE 2 : Comparing to a general object</comment>
        <comment type="line">// ---------------------------------------------</comment>
        <else>else <block>{
            <comment type="line">// consider time periods to be ordered after general objects</comment>
            <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Clones the data item.  Note: there is no need to clone the period or 
     * value since they are immutable classes.
     *
     * @return A clone of the data item.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>clone</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>clone</name> = <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></param>) <block>{ <comment type="line">// won't get here...</comment>
            <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
