<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\ChartPanel.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ChartPanel.java
 * ---------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Andrzej Porebski;
 *                   Soren Caspersen;
 *                   Jonathan Nash;
 *                   Hans-Jurgen Greiner;
 *                   Andreas Schneider;
 *                   Daniel van Enckevort;
 *                   David M O'Donnell;
 *                   Arnaud Lelievre;
 *                   Matthias Rose;
 *                   Onno vd Akker;
 *                   Sergei Ivanov;
 *
 * Changes (from 28-Jun-2001)
 * --------------------------
 * 28-Jun-2001 : Integrated buffering code contributed by S???ren 
 *               Caspersen (DG);
 * 18-Sep-2001 : Updated header and fixed DOS encoding problem (DG);
 * 22-Nov-2001 : Added scaling to improve display of charts in small sizes (DG);
 * 26-Nov-2001 : Added property editing, saving and printing (DG);
 * 11-Dec-2001 : Transferred saveChartAsPNG method to new ChartUtilities 
 *               class (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 16-Jan-2002 : Added an optional crosshair, based on the implementation by 
 *               Jonathan Nash. Renamed the tooltips class (DG);
 * 23-Jan-2002 : Implemented zooming based on code by Hans-Jurgen Greiner (DG);
 * 05-Feb-2002 : Improved tooltips setup.  Renamed method attemptSaveAs() 
 *               --&gt; doSaveAs() and made it public rather than private (DG);
 * 28-Mar-2002 : Added a new constructor (DG);
 * 09-Apr-2002 : Changed initialisation of tooltip generation, as suggested by 
 *               Hans-Jurgen Greiner (DG);
 * 27-May-2002 : New interactive zooming methods based on code by Hans-Jurgen 
 *               Greiner. Renamed JFreeChartPanel --&gt; ChartPanel, moved 
 *               constants to ChartPanelConstants interface (DG);
 * 31-May-2002 : Fixed a bug with interactive zooming and added a way to 
 *               control if the zoom rectangle is filled in or drawn as an 
 *               outline. A mouse drag gesture towards the top left now causes 
 *               an autoRangeBoth() and is a way to undo zooms (AS);
 * 11-Jun-2002 : Reinstated handleClick method call in mouseClicked() to get 
 *               crosshairs working again (DG);
 * 13-Jun-2002 : Added check for null popup menu in mouseDragged method (DG);
 * 18-Jun-2002 : Added get/set methods for minimum and maximum chart 
 *               dimensions (DG);
 * 25-Jun-2002 : Removed redundant code (DG);
 * 27-Aug-2002 : Added get/set methods for popup menu (DG);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 22-Oct-2002 : Added translation methods for screen &lt;--&gt; Java2D, contributed
 *               by Daniel van Enckevort (DG);
 * 05-Nov-2002 : Added a chart reference to the ChartMouseEvent class (DG);
 * 22-Nov-2002 : Added test in zoom method for inverted axes, supplied by 
 *               David M O'Donnell (DG);
 * 14-Jan-2003 : Implemented ChartProgressListener interface (DG);
 * 14-Feb-2003 : Removed deprecated setGenerateTooltips method (DG);
 * 12-Mar-2003 : Added option to enforce filename extension (see bug id 
 *               643173) (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL);
 * 18-Sep-2003 : Added getScaleX() and getScaleY() methods (protected) as 
 *               requested by Irv Thomae (DG);
 * 12-Nov-2003 : Added zooming support for the FastScatterPlot class (DG);
 * 24-Nov-2003 : Minor Javadoc updates (DG);
 * 04-Dec-2003 : Added anchor point for crosshair calculation (DG);
 * 17-Jan-2004 : Added new methods to set tooltip delays to be used in this 
 *               chart panel. Refer to patch 877565 (MR);
 * 02-Feb-2004 : Fixed bug in zooming trigger and added zoomTriggerDistance 
 *               attribute (DG);
 * 08-Apr-2004 : Changed getScaleX() and getScaleY() from protected to 
 *               public (DG);
 * 15-Apr-2004 : Added zoomOutFactor and zoomInFactor (DG);
 * 21-Apr-2004 : Fixed zooming bug in mouseReleased() method (DG);
 * 13-Jul-2004 : Added check for null chart (DG);
 * 04-Oct-2004 : Renamed ShapeUtils --&gt; ShapeUtilities (DG); 
 * 11-Nov-2004 : Moved constants back in from ChartPanelConstants (DG);
 * 12-Nov-2004 : Modified zooming mechanism to support zooming within 
 *               subplots (DG);
 * 26-Jan-2005 : Fixed mouse zooming for horizontal category plots (DG);
 * 11-Apr-2005 : Added getFillZoomRectangle() method, renamed 
 *               setHorizontalZoom() --&gt; setDomainZoomable(), 
 *               setVerticalZoom() --&gt; setRangeZoomable(), added 
 *               isDomainZoomable() and isRangeZoomable(), added 
 *               getHorizontalAxisTrace() and getVerticalAxisTrace(),
 *               renamed autoRangeBoth() --&gt; restoreAutoBounds(),
 *               autoRangeHorizontal() --&gt; restoreAutoDomainBounds(),
 *               autoRangeVertical() --&gt; restoreAutoRangeBounds() (DG);
 * 12-Apr-2005 : Removed working areas, added getAnchorPoint() method,
 *               added protected accessors for tracelines (DG);
 * 18-Apr-2005 : Made constants final (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 01-Jun-2005 : Fixed zooming for combined plots - see bug report 
 *               1212039, fix thanks to Onno vd Akker (DG);
 * 25-Nov-2005 : Reworked event listener mechanism (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 01-Aug-2006 : Fixed minor bug in restoreAutoRangeBounds() (DG);
 * 04-Sep-2006 : Renamed attemptEditChartProperties() --&gt; 
 *               doEditChartProperties() and made public (DG);
 * 13-Sep-2006 : Don't generate ChartMouseEvents if the panel's chart is null
 *               (fixes bug 1556951) (DG);
 * 05-Mar-2007 : Applied patch 1672561 by Sergei Ivanov, to fix zoom rectangle
 *               drawing for dynamic charts (DG);
 * 17-Apr-2007 : Fix NullPointerExceptions in zooming for combined plots (DG);
 * 24-May-2007 : When the look-and-feel changes, update the popup menu if there 
 *               is one (DG);
 * 06-Jun-2007 : Fixed coordinates for drawing buffer image (DG);
 * 24-Sep-2007 : Added zoomAroundAnchor flag, and handle clearing of chart
 *               buffer (DG);
 * 25-Oct-2007 : Added default directory attribute (DG);
 * 07-Nov-2007 : Fixed (rare) bug in refreshing off-screen image (DG);
 *               
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AWTEvent</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Dimension</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Image</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Insets</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Point</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>ActionEvent</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>ActionListener</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>MouseEvent</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>MouseListener</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>MouseMotionListener</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>print</name>.<name>PageFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>print</name>.<name>Printable</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>print</name>.<name>PrinterException</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>print</name>.<name>PrinterJob</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EventListener</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>JFileChooser</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JMenu</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JMenuItem</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JOptionPane</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JPanel</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JPopupMenu</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>SwingUtilities</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>ToolTipManager</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>event</name>.<name>EventListenerList</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>editor</name>.<name>ChartEditor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>editor</name>.<name>ChartEditorManager</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>ChartEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartProgressEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartProgressListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Zoomable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>ExtensionFileFilter</name></name>;</import>

<comment type="javadoc">/**
 * A Swing GUI component for displaying a {@link JFreeChart} object.
 * &lt;P&gt;
 * The panel registers with the chart to receive notification of changes to any
 * component of the chart.  The chart is redrawn automatically whenever this 
 * notification is received.
 */</comment>
<class><specifier>public</specifier> class <name>ChartPanel</name> <super><extends>extends <name>JPanel</name></extends> <implements>implements <name>ChartChangeListener</name>,
        <name>ChartProgressListener</name>, <name>ActionListener</name>, <name>MouseListener</name>, 
        <name>MouseMotionListener</name>, <name>Printable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>6046366297214274674L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Default setting for buffer usage. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_BUFFER_USED</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default panel width. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_WIDTH</name> =<init> <expr>680</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default panel height. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_HEIGHT</name> =<init> <expr>420</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default limit below which chart scaling kicks in. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MINIMUM_DRAW_WIDTH</name> =<init> <expr>300</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default limit below which chart scaling kicks in. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MINIMUM_DRAW_HEIGHT</name> =<init> <expr>200</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default limit below which chart scaling kicks in. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MAXIMUM_DRAW_WIDTH</name> =<init> <expr>800</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default limit below which chart scaling kicks in. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_MAXIMUM_DRAW_HEIGHT</name> =<init> <expr>600</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum size required to perform a zoom on a rectangle */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ZOOM_TRIGGER_DISTANCE</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Properties action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PROPERTIES_COMMAND</name> =<init> <expr>"PROPERTIES"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Save action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SAVE_COMMAND</name> =<init> <expr>"SAVE"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Print action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PRINT_COMMAND</name> =<init> <expr>"PRINT"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom in (both axes) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_IN_BOTH_COMMAND</name> =<init> <expr>"ZOOM_IN_BOTH"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom in (domain axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_IN_DOMAIN_COMMAND</name> =<init> <expr>"ZOOM_IN_DOMAIN"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom in (range axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_IN_RANGE_COMMAND</name> =<init> <expr>"ZOOM_IN_RANGE"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom out (both axes) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_OUT_BOTH_COMMAND</name> =<init> <expr>"ZOOM_OUT_BOTH"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom out (domain axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_OUT_DOMAIN_COMMAND</name> =<init> <expr>"ZOOM_DOMAIN_BOTH"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom out (range axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_OUT_RANGE_COMMAND</name> =<init> <expr>"ZOOM_RANGE_BOTH"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom reset (both axes) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_RESET_BOTH_COMMAND</name> =<init> <expr>"ZOOM_RESET_BOTH"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom reset (domain axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_RESET_DOMAIN_COMMAND</name> =<init> <expr>"ZOOM_RESET_DOMAIN"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Zoom reset (range axis only) action command. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ZOOM_RESET_RANGE_COMMAND</name> =<init> <expr>"ZOOM_RESET_RANGE"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The chart that is displayed in the panel. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JFreeChart</name></type> <name>chart</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for registered (chart) mouse listeners. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>EventListenerList</name></type> <name>chartMouseListeners</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the off-screen buffer is used. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useBuffer</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that indicates that the buffer should be refreshed. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>refreshBuffer</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A buffer for the rendered chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Image</name></type> <name>chartBuffer</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The height of the chart buffer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>chartBufferHeight</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The width of the chart buffer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>chartBufferWidth</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The minimum width for drawing a chart (uses scaling for smaller widths). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumDrawWidth</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The minimum height for drawing a chart (uses scaling for smaller 
     * heights). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minimumDrawHeight</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The maximum width for drawing a chart (uses scaling for bigger 
     * widths). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumDrawWidth</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The maximum height for drawing a chart (uses scaling for bigger 
     * heights). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maximumDrawHeight</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The popup menu for the frame. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JPopupMenu</name></type> <name>popup</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The drawing info collected the last time the chart was drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ChartRenderingInfo</name></type> <name>info</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The chart anchor point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point2D</name></type> <name>anchor</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The scale factor used to draw the chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>scaleX</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The scale factor used to draw the chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>scaleY</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The plot orientation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not domain zooming is enabled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainZoomable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not range zooming is enabled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeZoomable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The zoom rectangle starting point (selected by the user with a mouse 
     * click).  This is a point on the screen, not the chart (which may have
     * been scaled up or down to fit the panel).  
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point</name></type> <name>zoomPoint</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The zoom rectangle (selected by the user with the mouse). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>zoomRectangle</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Controls if the zoom rectangle is drawn as an outline or filled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fillZoomRectangle</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum distance required to drag the mouse to trigger a zoom. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>zoomTriggerDistance</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not horizontal tracing is enabled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>horizontalAxisTrace</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not vertical tracing is enabled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>verticalAxisTrace</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A vertical trace line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Line2D</name></type> <name>verticalTraceLine</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A horizontal trace line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Line2D</name></type> <name>horizontalTraceLine</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming in on a chart (both axes). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomInBothMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming in on a chart (domain axis). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomInDomainMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming in on a chart (range axis). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomInRangeMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming out on a chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomOutBothMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming out on a chart (domain axis). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomOutDomainMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for zooming out on a chart (range axis). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomOutRangeMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for resetting the zoom (both axes). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomResetBothMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for resetting the zoom (domain axis only). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomResetDomainMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Menu item for resetting the zoom (range axis only). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JMenuItem</name></type> <name>zoomResetRangeMenuItem</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default directory for saving charts to file.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>File</name></type> <name>defaultDirectoryForSaveAs</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not file extensions are enforced. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>enforceFileExtensions</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that indicates if original tooltip delays are changed. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ownToolTipDelaysActive</name></decl>;</decl_stmt>  
    
    <comment type="javadoc">/** Original initial tooltip delay of ToolTipManager.sharedInstance(). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>originalToolTipInitialDelay</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Original reshow tooltip delay of ToolTipManager.sharedInstance(). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>originalToolTipReshowDelay</name></decl>;</decl_stmt>  

    <comment type="javadoc">/** Original dismiss tooltip delay of ToolTipManager.sharedInstance(). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>originalToolTipDismissDelay</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Own initial tooltip delay to be used in this chart panel. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>ownToolTipInitialDelay</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Own reshow tooltip delay to be used in this chart panel. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>ownToolTipReshowDelay</name></decl>;</decl_stmt>  

    <comment type="javadoc">/** Own dismiss tooltip delay to be used in this chart panel. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>ownToolTipDismissDelay</name></decl>;</decl_stmt>    

    <comment type="javadoc">/** The factor used to zoom in on an axis range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zoomInFactor</name> =<init> <expr>0.5</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The factor used to zoom out on an axis range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>zoomOutFactor</name> =<init> <expr>2.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that controls whether zoom operations are centred on the
     * current anchor point, or the centre point of the relevant axis.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>zoomAroundAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> 
            =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a panel that displays the specified chart.
     *
     * @param chart  the chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(
            <argument><expr><name>chart</name></expr></argument>,
            <argument><expr><name>DEFAULT_WIDTH</name></expr></argument>,
            <argument><expr><name>DEFAULT_HEIGHT</name></expr></argument>,
            <argument><expr><name>DEFAULT_MINIMUM_DRAW_WIDTH</name></expr></argument>,
            <argument><expr><name>DEFAULT_MINIMUM_DRAW_HEIGHT</name></expr></argument>,
            <argument><expr><name>DEFAULT_MAXIMUM_DRAW_WIDTH</name></expr></argument>,
            <argument><expr><name>DEFAULT_MAXIMUM_DRAW_HEIGHT</name></expr></argument>,
            <argument><expr><name>DEFAULT_BUFFER_USED</name></expr></argument>,
            <argument><expr>true</expr></argument>,  <comment type="line">// properties</comment>
            <argument><expr>true</expr></argument>,  <comment type="line">// save</comment>
            <argument><expr>true</expr></argument>,  <comment type="line">// print</comment>
            <argument><expr>true</expr></argument>,  <comment type="line">// zoom</comment>
            <argument><expr>true</expr></argument>   <comment type="line">// tooltips</comment>
        )</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a panel containing a chart.
     *
     * @param chart  the chart.
     * @param useBuffer  a flag controlling whether or not an off-screen buffer
     *                   is used.
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useBuffer</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>chart</name></expr></argument>,
             <argument><expr><name>DEFAULT_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_HEIGHT</name></expr></argument>,
             <argument><expr><name>DEFAULT_MINIMUM_DRAW_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_MINIMUM_DRAW_HEIGHT</name></expr></argument>,
             <argument><expr><name>DEFAULT_MAXIMUM_DRAW_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_MAXIMUM_DRAW_HEIGHT</name></expr></argument>,
             <argument><expr><name>useBuffer</name></expr></argument>,
             <argument><expr>true</expr></argument>,  <comment type="line">// properties</comment>
             <argument><expr>true</expr></argument>,  <comment type="line">// save</comment>
             <argument><expr>true</expr></argument>,  <comment type="line">// print</comment>
             <argument><expr>true</expr></argument>,  <comment type="line">// zoom</comment>
             <argument><expr>true</expr></argument>   <comment type="line">// tooltips</comment>
             )</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a JFreeChart panel.
     *
     * @param chart  the chart.
     * @param properties  a flag indicating whether or not the chart property
     *                    editor should be available via the popup menu.
     * @param save  a flag indicating whether or not save options should be
     *              available via the popup menu.
     * @param print  a flag indicating whether or not the print option
     *               should be available via the popup menu.
     * @param zoom  a flag indicating whether or not zoom options should
     *              be added to the popup menu.
     * @param tooltips  a flag indicating whether or not tooltips should be
     *                  enabled for the chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>properties</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>save</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>print</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>zoom</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>tooltips</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>chart</name></expr></argument>,
             <argument><expr><name>DEFAULT_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_HEIGHT</name></expr></argument>,
             <argument><expr><name>DEFAULT_MINIMUM_DRAW_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_MINIMUM_DRAW_HEIGHT</name></expr></argument>,
             <argument><expr><name>DEFAULT_MAXIMUM_DRAW_WIDTH</name></expr></argument>,
             <argument><expr><name>DEFAULT_MAXIMUM_DRAW_HEIGHT</name></expr></argument>,
             <argument><expr><name>DEFAULT_BUFFER_USED</name></expr></argument>,
             <argument><expr><name>properties</name></expr></argument>,
             <argument><expr><name>save</name></expr></argument>,
             <argument><expr><name>print</name></expr></argument>,
             <argument><expr><name>zoom</name></expr></argument>,
             <argument><expr><name>tooltips</name></expr></argument>
             )</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a JFreeChart panel.
     *
     * @param chart  the chart.
     * @param width  the preferred width of the panel.
     * @param height  the preferred height of the panel.
     * @param minimumDrawWidth  the minimum drawing width.
     * @param minimumDrawHeight  the minimum drawing height.
     * @param maximumDrawWidth  the maximum drawing width.
     * @param maximumDrawHeight  the maximum drawing height.
     * @param useBuffer  a flag that indicates whether to use the off-screen
     *                   buffer to improve performance (at the expense of 
     *                   memory).
     * @param properties  a flag indicating whether or not the chart property
     *                    editor should be available via the popup menu.
     * @param save  a flag indicating whether or not save options should be
     *              available via the popup menu.
     * @param print  a flag indicating whether or not the print option
     *               should be available via the popup menu.
     * @param zoom  a flag indicating whether or not zoom options should be 
     *              added to the popup menu.
     * @param tooltips  a flag indicating whether or not tooltips should be 
     *                  enabled for the chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>width</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>height</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>minimumDrawWidth</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>minimumDrawHeight</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>maximumDrawWidth</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>maximumDrawHeight</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>useBuffer</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>properties</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>save</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>print</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>zoom</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>tooltips</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>this</name>.<name>setChart</name></name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>chartMouseListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>info</name></name> = new <call><name>ChartRenderingInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPreferredSize</name><argument_list>(<argument><expr>new <call><name>Dimension</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>useBuffer</name></name> = <name>useBuffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumDrawWidth</name></name> = <name>minimumDrawWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumDrawHeight</name></name> = <name>minimumDrawHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumDrawWidth</name></name> = <name>maximumDrawWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumDrawHeight</name></name> = <name>maximumDrawHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>zoomTriggerDistance</name></name> = <name>DEFAULT_ZOOM_TRIGGER_DISTANCE</name></expr>;</expr_stmt>

        <comment type="line">// set up popup menu...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>popup</name></name> = <name>null</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>properties</name> || <name>save</name> || <name>print</name> || <name>zoom</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>popup</name></name> = <call><name>createPopupMenu</name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>save</name></expr></argument>, <argument><expr><name>print</name></expr></argument>, <argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>enableEvents</name><argument_list>(<argument><expr><name><name>AWTEvent</name>.<name>MOUSE_EVENT_MASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>enableEvents</name><argument_list>(<argument><expr><name><name>AWTEvent</name>.<name>MOUSE_MOTION_EVENT_MASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDisplayToolTips</name><argument_list>(<argument><expr><name>tooltips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addMouseListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addMouseMotionListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>defaultDirectoryForSaveAs</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>enforceFileExtensions</name></name> = true</expr>;</expr_stmt>

        <comment type="line">// initialize ChartPanel-specific tool tip delays with</comment>
        <comment type="line">// values the from ToolTipManager.sharedInstance()</comment>
        <decl_stmt><decl><type><name>ToolTipManager</name></type> <name>ttm</name> =<init> <expr><call><name><name>ToolTipManager</name>.<name>sharedInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>       
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipInitialDelay</name></name> = <call><name><name>ttm</name>.<name>getInitialDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipDismissDelay</name></name> = <call><name><name>ttm</name>.<name>getDismissDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipReshowDelay</name></name> = <call><name><name>ttm</name>.<name>getReshowDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the chart contained in the panel.
     *
     * @return The chart (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>JFreeChart</name></type> <name>getChart</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>chart</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the chart that is displayed in the panel.
     *
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChart</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// stop listening for changes to the existing chart</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>chart</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>removeProgressListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// add the new chart</comment>
        <expr_stmt><expr><name><name>this</name>.<name>chart</name></name> = <name>chart</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>chart</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>addProgressListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>domainZoomable</name></name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>rangeZoomable</name></name> = false</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>plot</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>domainZoomable</name></name> = <call><name><name>z</name>.<name>isDomainZoomable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>rangeZoomable</name></name> = <call><name><name>z</name>.<name>isRangeZoomable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <call><name><name>z</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainZoomable</name></name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>rangeZoomable</name></name> = false</expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useBuffer</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum drawing width for charts.
     * &lt;P&gt;
     * If the width available on the panel is less than this, then the chart is
     * drawn at the minimum width then scaled down to fit.
     *
     * @return The minimum drawing width.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinimumDrawWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minimumDrawWidth</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the minimum drawing width for the chart on this panel.
     * &lt;P&gt;
     * At the time the chart is drawn on the panel, if the available width is
     * less than this amount, the chart will be drawn using the minimum width
     * then scaled down to fit the available space.
     *
     * @param width  The width.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumDrawWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minimumDrawWidth</name></name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum drawing width for charts.
     * &lt;P&gt;
     * If the width available on the panel is greater than this, then the chart
     * is drawn at the maximum width then scaled up to fit.
     *
     * @return The maximum drawing width.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumDrawWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumDrawWidth</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum drawing width for the chart on this panel.
     * &lt;P&gt;
     * At the time the chart is drawn on the panel, if the available width is
     * greater than this amount, the chart will be drawn using the maximum
     * width then scaled up to fit the available space.
     *
     * @param width  The width.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumDrawWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumDrawWidth</name></name> = <name>width</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum drawing height for charts.
     * &lt;P&gt;
     * If the height available on the panel is less than this, then the chart
     * is drawn at the minimum height then scaled down to fit.
     *
     * @return The minimum drawing height.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinimumDrawHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minimumDrawHeight</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the minimum drawing height for the chart on this panel.
     * &lt;P&gt;
     * At the time the chart is drawn on the panel, if the available height is
     * less than this amount, the chart will be drawn using the minimum height
     * then scaled down to fit the available space.
     *
     * @param height  The height.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumDrawHeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minimumDrawHeight</name></name> = <name>height</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum drawing height for charts.
     * &lt;P&gt;
     * If the height available on the panel is greater than this, then the
     * chart is drawn at the maximum height then scaled up to fit.
     *
     * @return The maximum drawing height.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaximumDrawHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumDrawHeight</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum drawing height for the chart on this panel.
     * &lt;P&gt;
     * At the time the chart is drawn on the panel, if the available height is
     * greater than this amount, the chart will be drawn using the maximum
     * height then scaled up to fit the available space.
     *
     * @param height  The height.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumDrawHeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumDrawHeight</name></name> = <name>height</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the X scale factor for the chart.  This will be 1.0 if no 
     * scaling has been used.
     * 
     * @return The scale factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getScaleX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>scaleX</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the Y scale factory for the chart.  This will be 1.0 if no 
     * scaling has been used.
     * 
     * @return The scale factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getScaleY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>scaleY</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the anchor point.
     * 
     * @return The anchor point (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Point2D</name></type> <name>getAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>anchor</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the anchor point.  This method is provided for the use of 
     * subclasses, not end users.
     * 
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setAnchor</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>anchor</name></name> = <name>anchor</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the popup menu.
     *
     * @return The popup menu.
     */</comment>
    <function><type><specifier>public</specifier> <name>JPopupMenu</name></type> <name>getPopupMenu</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>popup</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the popup menu for the panel.
     *
     * @param popup  the popup menu (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPopupMenu</name><parameter_list>(<param><decl><type><name>JPopupMenu</name></type> <name>popup</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>popup</name></name> = <name>popup</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the chart rendering info from the most recent chart redraw.
     *
     * @return The chart rendering info.
     */</comment>
    <function><type><specifier>public</specifier> <name>ChartRenderingInfo</name></type> <name>getChartRenderingInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>info</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A convenience method that switches on mouse-based zooming.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; enables zooming and rectangle fill on 
     *              zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMouseZoomable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setMouseZoomable</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A convenience method that switches on mouse-based zooming.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; if zooming enabled
     * @param fillRectangle  &lt;code&gt;true&lt;/code&gt; if zoom rectangle is filled,
     *                       false if rectangle is shown as outline only.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMouseZoomable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>fillRectangle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainZoomable</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRangeZoomable</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFillZoomRectangle</name><argument_list>(<argument><expr><name>fillRectangle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that determines whether or not zooming is enabled for 
     * the domain axis.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainZoomable</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not zooming is enable for the 
     * domain axis.  A check is made to ensure that the current plot supports
     * zooming for the domain values.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; enables zooming if possible.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainZoomable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>plot</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>domainZoomable</name></name> = <name>flag</name> &amp;&amp; (<call><name><name>z</name>.<name>isDomainZoomable</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>  
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainZoomable</name></name> = false</expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that determines whether or not zooming is enabled for 
     * the range axis.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeZoomable</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * A flag that controls mouse-based zooming on the vertical axis.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; enables zooming.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeZoomable</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>plot</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>rangeZoomable</name></name> = <name>flag</name> &amp;&amp; (<call><name><name>z</name>.<name>isRangeZoomable</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>  
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeZoomable</name></name> = false</expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the zoom rectangle is
     * filled when drawn.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFillZoomRectangle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillZoomRectangle</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * A flag that controls how the zoom rectangle is drawn.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; instructs to fill the rectangle on
     *              zoom, otherwise it will be outlined.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFillZoomRectangle</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fillZoomRectangle</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the zoom trigger distance.  This controls how far the mouse must
     * move before a zoom action is triggered.
     * 
     * @return The distance (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getZoomTriggerDistance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>zoomTriggerDistance</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the zoom trigger distance.  This controls how far the mouse must 
     * move before a zoom action is triggered.
     * 
     * @param distance  the distance (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setZoomTriggerDistance</name><parameter_list>(<param><decl><type><name>int</name></type> <name>distance</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>zoomTriggerDistance</name></name> = <name>distance</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not a horizontal axis trace
     * line is drawn over the plot area at the current mouse location.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getHorizontalAxisTrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>horizontalAxisTrace</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * A flag that controls trace lines on the horizontal axis.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; enables trace lines for the mouse
     *      pointer on the horizontal axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHorizontalAxisTrace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>horizontalAxisTrace</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the horizontal trace line.
     * 
     * @return The horizontal trace line (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Line2D</name></type> <name>getHorizontalTraceLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>horizontalTraceLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the horizontal trace line.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setHorizontalTraceLine</name><parameter_list>(<param><decl><type><name>Line2D</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>horizontalTraceLine</name></name> = <name>line</name></expr>;</expr_stmt>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not a vertical axis trace
     * line is drawn over the plot area at the current mouse location.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getVerticalAxisTrace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>verticalAxisTrace</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * A flag that controls trace lines on the vertical axis.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; enables trace lines for the mouse
     *              pointer on the vertical axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVerticalAxisTrace</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verticalAxisTrace</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the vertical trace line.
     * 
     * @return The vertical trace line (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Line2D</name></type> <name>getVerticalTraceLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>verticalTraceLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the vertical trace line.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setVerticalTraceLine</name><parameter_list>(<param><decl><type><name>Line2D</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>verticalTraceLine</name></name> = <name>line</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the default directory for the "save as" option.
     * 
     * @return The default directory (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>File</name></type> <name>getDefaultDirectoryForSaveAs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>defaultDirectoryForSaveAs</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the default directory for the "save as" option.  If you set this
     * to &lt;code&gt;null&lt;/code&gt;, the user's default directory will be used.
     * 
     * @param directory  the directory (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDefaultDirectoryForSaveAs</name><parameter_list>(<param><decl><type><name>File</name></type> <name>directory</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>directory</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>directory</name>.<name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                        <argument><expr>"The 'directory' argument is not a directory."</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>defaultDirectoryForSaveAs</name></name> = <name>directory</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if file extensions should be enforced, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @return The flag.
     * 
     * @see #setEnforceFileExtensions(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEnforceFileExtensions</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>enforceFileExtensions</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not file extensions are enforced.
     *
     * @param enforce  the new flag value.
     * 
     * @see #isEnforceFileExtensions()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEnforceFileExtensions</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>enforce</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>enforceFileExtensions</name></name> = <name>enforce</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not zoom operations are 
     * centered around the current anchor point.
     * 
     * @return A boolean.
     * 
     * @since 1.0.7
     * 
     * @see #setZoomAroundAnchor(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getZoomAroundAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>zoomAroundAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not zoom operations are
     * centered around the current anchor point.
     * 
     * @param zoomAroundAnchor  the new flag value.
     * 
     * @since 1.0.7
     * 
     * @see #getZoomAroundAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setZoomAroundAnchor</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>zoomAroundAnchor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name> = <name>zoomAroundAnchor</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Switches the display of tooltips for the panel on or off.  Note that 
     * tooltips can only be displayed if the chart has been configured to
     * generate tooltip items.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; to enable tooltips, &lt;code&gt;false&lt;/code&gt; to
     *              disable tooltips.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayToolTips</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ToolTipManager</name>.<name>sharedInstance</name></name><argument_list>()</argument_list></call>.<call><name>registerComponent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>ToolTipManager</name>.<name>sharedInstance</name></name><argument_list>()</argument_list></call>.<call><name>unregisterComponent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string for the tooltip.
     *
     * @param e  the mouse event.
     *
     * @return A tool tip or &lt;code&gt;null&lt;/code&gt; if no tooltip is available.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToolTipText</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>info</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ChartEntity</name></type> <name>entity</name> =<init> <expr><call><name><name>entities</name>.<name>getEntity</name></name><argument_list>(
                        <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>left</name></name>) / <name><name>this</name>.<name>scaleX</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>top</name></name>) / <name><name>this</name>.<name>scaleY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>entity</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>entity</name>.<name>getToolTipText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Translates a Java2D point on the chart to a screen location.
     *
     * @param java2DPoint  the Java2D point.
     *
     * @return The screen location.
     */</comment>
    <function><type><specifier>public</specifier> <name>Point</name></type> <name>translateJava2DToScreen</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>java2DPoint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>java2DPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleX</name></name> + <name><name>insets</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>java2DPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleY</name></name> + <name><name>insets</name>.<name>top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Translates a panel (component) location to a Java2D point.
     *
     * @param screenPoint  the screen location (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     *
     * @return The Java2D coordinates.
     */</comment>
    <function><type><specifier>public</specifier> <name>Point2D</name></type> <name>translateScreenToJava2D</name><parameter_list>(<param><decl><type><name>Point</name></type> <name>screenPoint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr>(<call><name><name>screenPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>left</name></name>) / <name><name>this</name>.<name>scaleX</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>(<call><name><name>screenPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>top</name></name>) / <name><name>this</name>.<name>scaleY</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Applies any scaling that is in effect for the chart drawing to the
     * given rectangle.
     *  
     * @param rect  the rectangle.
     * 
     * @return A new scaled rectangle.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>scale</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>rect</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>rect</name>.<name>getX</name></name><argument_list>()</argument_list></call> * <call><name>getScaleX</name><argument_list>()</argument_list></call> + <name><name>insets</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>rect</name>.<name>getY</name></name><argument_list>()</argument_list></call> * <call><name><name>this</name>.<name>getScaleY</name></name><argument_list>()</argument_list></call> + <name><name>insets</name>.<name>top</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>rect</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name><name>this</name>.<name>getScaleX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>rect</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <call><name><name>this</name>.<name>getScaleY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the chart entity at a given point.
     * &lt;P&gt;
     * This method will return null if there is (a) no entity at the given 
     * point, or (b) no entity collection has been generated.
     *
     * @param viewX  the x-coordinate.
     * @param viewY  the y-coordinate.
     *
     * @return The chart entity (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ChartEntity</name></type> <name>getEntityForPoint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>viewX</name></decl></param>, <param><decl><type><name>int</name></type> <name>viewY</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ChartEntity</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>info</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr>(<name>viewX</name> - <name><name>insets</name>.<name>left</name></name>) / <name><name>this</name>.<name>scaleX</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>(<name>viewY</name> - <name><name>insets</name>.<name>top</name></name>) / <name><name>this</name>.<name>scaleY</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <name>entities</name> != <name>null</name> ? <call><name><name>entities</name>.<name>getEntity</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> : <name>null</name></expr>;</expr_stmt> 
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the offscreen buffer
     * needs to be refreshed.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRefreshBuffer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>refreshBuffer</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the refresh buffer flag.  This flag is used to avoid unnecessary
     * redrawing of the chart when the offscreen image buffer is used.
     *
     * @param flag  &lt;code&gt;true&lt;/code&gt; indicates that the buffer should be 
     *              refreshed.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRefreshBuffer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Paints the component by drawing the chart to fill the entire component,
     * but allowing for the insets (which will be non-zero if a border has been
     * set for this component).  To increase performance (at the expense of
     * memory), an off-screen buffer image can be used.
     *
     * @param g  the graphics device for drawing on.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>paintComponent</name><parameter_list>(<param><decl><type><name>Graphics</name></type> <name>g</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>paintComponent</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>chart</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <call><name><name>g</name>.<name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// first determine the size of the chart rendering area...</comment>
        <decl_stmt><decl><type><name>Dimension</name></type> <name>size</name> =<init> <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>available</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name><name>insets</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>insets</name>.<name>top</name></name></expr></argument>,
                <argument><expr><call><name><name>size</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>left</name></name> - <name><name>insets</name>.<name>right</name></name></expr></argument>,
                <argument><expr><call><name><name>size</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>top</name></name> - <name><name>insets</name>.<name>bottom</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// work out if scaling is required...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>scale</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>drawWidth</name> =<init> <expr><call><name><name>available</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>drawHeight</name> =<init> <expr><call><name><name>available</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>scaleX</name></name> = 1.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>scaleY</name></name> = 1.0</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>drawWidth</name> &lt; <name><name>this</name>.<name>minimumDrawWidth</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>scaleX</name></name> = <name>drawWidth</name> / <name><name>this</name>.<name>minimumDrawWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>drawWidth</name> = <name><name>this</name>.<name>minimumDrawWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>drawWidth</name> &gt; <name><name>this</name>.<name>maximumDrawWidth</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>scaleX</name></name> = <name>drawWidth</name> / <name><name>this</name>.<name>maximumDrawWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>drawWidth</name> = <name><name>this</name>.<name>maximumDrawWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> = true</expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name>drawHeight</name> &lt; <name><name>this</name>.<name>minimumDrawHeight</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>scaleY</name></name> = <name>drawHeight</name> / <name><name>this</name>.<name>minimumDrawHeight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>drawHeight</name> = <name><name>this</name>.<name>minimumDrawHeight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>drawHeight</name> &gt; <name><name>this</name>.<name>maximumDrawHeight</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>scaleY</name></name> = <name>drawHeight</name> / <name><name>this</name>.<name>maximumDrawHeight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>drawHeight</name> = <name><name>this</name>.<name>maximumDrawHeight</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>scale</name> = true</expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>chartArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>drawWidth</name></expr></argument>, 
                <argument><expr><name>drawHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// are we using the chart buffer?</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>useBuffer</name></name></expr>)</condition><then> <block>{

            <comment type="line">// if buffer is being refreshed, it needs clearing unless it is</comment>
            <comment type="line">// new - use the following flag to track this...</comment>
            <decl_stmt><decl><type><name>boolean</name></type> <name>clearBuffer</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            
            <comment type="line">// do we need to resize the buffer?</comment>
            <if>if <condition>(<expr>(<name><name>this</name>.<name>chartBuffer</name></name> == <name>null</name>) 
                    || (<name><name>this</name>.<name>chartBufferWidth</name></name> != <call><name><name>available</name>.<name>getWidth</name></name><argument_list>()</argument_list></call>)
                    || (<name><name>this</name>.<name>chartBufferHeight</name></name> != <call><name><name>available</name>.<name>getHeight</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>chartBufferWidth</name></name> = (<name>int</name>) <call><name><name>available</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>chartBufferHeight</name></name> = (<name>int</name>) <call><name><name>available</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>chartBuffer</name></name> = <call><name>createImage</name><argument_list>(<argument><expr><name><name>this</name>.<name>chartBufferWidth</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>chartBufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//                GraphicsConfiguration gc = g2.getDeviceConfiguration();</comment>
<comment type="line">//                this.chartBuffer = gc.createCompatibleImage(</comment>
<comment type="line">//                        this.chartBufferWidth, this.chartBufferHeight, </comment>
<comment type="line">//                        Transparency.TRANSLUCENT);</comment>
                <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><name>clearBuffer</name> = false</expr>;</expr_stmt>  <comment type="line">// buffer is new, no clearing required</comment>
            }</block></then></if>

            <comment type="line">// do we need to redraw the buffer?</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>refreshBuffer</name></name></expr>)</condition><then> <block>{

                <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = false</expr>;</expr_stmt> <comment type="line">// clear the flag</comment>

                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bufferArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                        <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>chartBufferWidth</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>chartBufferHeight</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Graphics2D</name></type> <name>bufferG2</name> =<init> <expr>(<name>Graphics2D</name>) 
                        <call><name><name>this</name>.<name>chartBuffer</name>.<name>getGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>clearBuffer</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>bufferG2</name>.<name>clearRect</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>this</name>.<name>chartBufferWidth</name></name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>chartBufferHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>scale</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>AffineTransform</name></type> <name>saved</name> =<init> <expr><call><name><name>bufferG2</name>.<name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>AffineTransform</name></type> <name>st</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getScaleInstance</name></name><argument_list>(
                            <argument><expr><name><name>this</name>.<name>scaleX</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>scaleY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>bufferG2</name>.<name>transform</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bufferG2</name></expr></argument>, <argument><expr><name>chartArea</name></expr></argument>, <argument><expr><name><name>this</name>.<name>anchor</name></name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>bufferG2</name>.<name>setTransform</name></name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bufferG2</name></expr></argument>, <argument><expr><name>bufferArea</name></expr></argument>, <argument><expr><name><name>this</name>.<name>anchor</name></name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

            }</block></then></if>

            <comment type="line">// zap the buffer onto the panel...</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawImage</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>chartBuffer</name></name></expr></argument>, <argument><expr><name><name>insets</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>insets</name>.<name>top</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then>

        <comment type="line">// or redrawing the chart every time...</comment>
        <else>else <block>{

            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>saved</name> =<init> <expr><call><name><name>g2</name>.<name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>translate</name></name><argument_list>(<argument><expr><name><name>insets</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>insets</name>.<name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>scale</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AffineTransform</name></type> <name>st</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getScaleInstance</name></name><argument_list>(
                        <argument><expr><name><name>this</name>.<name>scaleX</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>scaleY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>transform</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>chartArea</name></expr></argument>, <argument><expr><name><name>this</name>.<name>anchor</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setTransform</name></name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></else></if>
        
        <comment type="line">// Redraw the zoom rectangle (if present)</comment>
        <expr_stmt><expr><call><name>drawZoomRectangle</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>anchor</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>verticalTraceLine</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>horizontalTraceLine</name></name> = <name>null</name></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of changes to the chart, and redraws the chart.
     *
     * @param event  details of the chart change event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>chartChanged</name><parameter_list>(<param><decl><type><name>ChartChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>refreshBuffer</name></name> = true</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>plot</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <call><name><name>z</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of a chart progress event.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>chartProgress</name><parameter_list>(<param><decl><type><name>ChartProgressEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// does nothing - override if necessary</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Handles action events generated by the popup menu.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>command</name> =<init> <expr><call><name><name>event</name>.<name>getActionCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// many of the zoom methods need a screen location - all we have is </comment>
        <comment type="line">// the zoomPoint, but it might be null.  Here we grab the x and y</comment>
        <comment type="line">// coordinates, or use defaults...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>screenX</name> =<init> <expr>-1.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>screenY</name> =<init> <expr>-1.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>zoomPoint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>screenX</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>screenY</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PROPERTIES_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>doEditChartProperties</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>SAVE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name>doSaveAs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch (<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>) <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>PRINT_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>createChartPrintJob</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_IN_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomInBoth</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_IN_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomInDomain</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_IN_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomInRange</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_OUT_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomOutBoth</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_OUT_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomOutDomain</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_OUT_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>zoomOutRange</name><argument_list>(<argument><expr><name>screenX</name></expr></argument>, <argument><expr><name>screenY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_RESET_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>restoreAutoBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_RESET_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>restoreAutoDomainBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZOOM_RESET_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>restoreAutoRangeBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'mouse entered' event. This method changes the tooltip delays
     * of ToolTipManager.sharedInstance() to the possibly different values set 
     * for this chart panel. 
     *
     * @param e  the mouse event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseEntered</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>!<name><name>this</name>.<name>ownToolTipDelaysActive</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ToolTipManager</name></type> <name>ttm</name> =<init> <expr><call><name><name>ToolTipManager</name>.<name>sharedInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name>this</name>.<name>originalToolTipInitialDelay</name></name> = <call><name><name>ttm</name>.<name>getInitialDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setInitialDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>ownToolTipInitialDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name><name>this</name>.<name>originalToolTipReshowDelay</name></name> = <call><name><name>ttm</name>.<name>getReshowDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setReshowDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>ownToolTipReshowDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name>this</name>.<name>originalToolTipDismissDelay</name></name> = <call><name><name>ttm</name>.<name>getDismissDelay</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setDismissDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>ownToolTipDismissDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
            <expr_stmt><expr><name><name>this</name>.<name>ownToolTipDelaysActive</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'mouse exited' event. This method resets the tooltip delays of
     * ToolTipManager.sharedInstance() to their
     * original values in effect before mouseEntered()
     *
     * @param e  the mouse event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseExited</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>ownToolTipDelaysActive</name></name></expr>)</condition><then> <block>{
            <comment type="line">// restore original tooltip dealys </comment>
            <decl_stmt><decl><type><name>ToolTipManager</name></type> <name>ttm</name> =<init> <expr><call><name><name>ToolTipManager</name>.<name>sharedInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>       
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setInitialDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>originalToolTipInitialDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setReshowDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>originalToolTipReshowDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ttm</name>.<name>setDismissDelay</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>originalToolTipDismissDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>ownToolTipDelaysActive</name></name> = false</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'mouse pressed' event.
     * &lt;P&gt;
     * This event is the popup trigger on Unix/Linux.  For Windows, the popup
     * trigger is the 'mouse released' event.
     *
     * @param e  The mouse event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mousePressed</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>zoomRectangle</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>screenDataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>screenDataArea</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>zoomPoint</name></name> = <call><name>getPointInRectangle</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>screenDataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>this</name>.<name>zoomPoint</name></name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><call><name><name>e</name>.<name>isPopupTrigger</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>popup</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>displayPopupMenu</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a point based on (x, y) but constrained to be within the bounds
     * of the given rectangle.  This method could be moved to JCommon.
     * 
     * @param x  the x-coordinate.
     * @param y  the y-coordinate.
     * @param area  the rectangle (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A point within the rectangle.
     */</comment>
    <function><type><specifier>private</specifier> <name>Point</name></type> <name>getPointInRectangle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>x</name> = (<name>int</name>) <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, 
                <argument><expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        <expr_stmt><expr><name>y</name> = (<name>int</name>) <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, 
                <argument><expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'mouse dragged' event.
     *
     * @param e  the mouse event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseDragged</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the popup menu has already been triggered, then ignore dragging...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>popup</name></name> != <name>null</name> &amp;&amp; <call><name><name>this</name>.<name>popup</name>.<name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <comment type="line">// if no initial zoom point was set, ignore dragging...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>zoomPoint</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <call><name>getGraphics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Erase the previous zoom rectangle (if any)...</comment>
        <expr_stmt><expr><call><name>drawZoomRectangle</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>hZoom</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>vZoom</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>hZoom</name> = <name><name>this</name>.<name>rangeZoomable</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vZoom</name> = <name><name>this</name>.<name>domainZoomable</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>hZoom</name> = <name><name>this</name>.<name>domainZoomable</name></name></expr>;</expr_stmt>              
            <expr_stmt><expr><name>vZoom</name> = <name><name>this</name>.<name>rangeZoomable</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>scaledDataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>(
                <argument><expr>(<name>int</name>) <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hZoom</name> &amp;&amp; <name>vZoom</name></expr>)</condition><then> <block>{
            <comment type="line">// selected rectangle shouldn't extend outside the data area...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>xmax</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ymax</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>zoomRectangle</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>xmax</name> - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ymax</name> - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>hZoom</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xmax</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>zoomRectangle</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>xmax</name> - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>vZoom</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>ymax</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>zoomRectangle</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><call><name><name>scaledDataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>scaledDataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ymax</name> - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>

        <comment type="line">// Draw the new zoom rectangle...</comment>
        <expr_stmt><expr><call><name>drawZoomRectangle</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'mouse released' event.  On Windows, we need to check if this 
     * is a popup trigger, but only if we haven't already been tracking a zoom
     * rectangle.
     *
     * @param e  information about the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseReleased</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>zoomRectangle</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>hZoom</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>vZoom</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>hZoom</name> = <name><name>this</name>.<name>rangeZoomable</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>vZoom</name> = <name><name>this</name>.<name>domainZoomable</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>hZoom</name> = <name><name>this</name>.<name>domainZoomable</name></name></expr>;</expr_stmt>              
                <expr_stmt><expr><name>vZoom</name> = <name><name>this</name>.<name>rangeZoomable</name></name></expr>;</expr_stmt>
            }</block></else></if>
            
            <decl_stmt><decl><type><name>boolean</name></type> <name>zoomTrigger1</name> =<init> <expr><name>hZoom</name> &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &gt;= <name><name>this</name>.<name>zoomTriggerDistance</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>zoomTrigger2</name> =<init> <expr><name>vZoom</name> &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call> 
                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &gt;= <name><name>this</name>.<name>zoomTriggerDistance</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>zoomTrigger1</name> || <name>zoomTrigger2</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>(<name>hZoom</name> &amp;&amp; (<call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call>)) 
                    || (<name>vZoom</name> &amp;&amp; (<call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call>))</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>restoreAutoBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>x</name>, <name>y</name>, <name>w</name>, <name>h</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>screenDataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>(
                            <argument><expr>(<name>int</name>) <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr>(<name>int</name>) <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// for mouseReleased event, (horizontalZoom || verticalZoom)</comment>
                    <comment type="line">// will be true, so we can just test for either being false;</comment>
                    <comment type="line">// otherwise both are true</comment>
                    <if>if <condition>(<expr>!<name>vZoom</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>x</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> = <call><name><name>screenDataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>w</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>zoomRectangle</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>screenDataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> 
                                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>h</name> = <call><name><name>screenDataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr>!<name>hZoom</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>x</name> = <call><name><name>screenDataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>w</name> = <call><name><name>screenDataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>h</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>zoomRectangle</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>screenDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> 
                                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>x</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> = <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>w</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>zoomRectangle</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>screenDataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> 
                                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>h</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>zoomRectangle</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>screenDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> 
                                - <call><name><name>this</name>.<name>zoomPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if>
                    <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>zoomArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>zoom</name><argument_list>(<argument><expr><name>zoomArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name><name>this</name>.<name>zoomPoint</name></name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>zoomRectangle</name></name> = <name>null</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">// Erase the zoom rectangle</comment>
                <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <call><name>getGraphics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>drawZoomRectangle</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>zoomPoint</name></name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>zoomRectangle</name></name> = <name>null</name></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then>

        <else>else <if>if <condition>(<expr><call><name><name>e</name>.<name>isPopupTrigger</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>popup</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>displayPopupMenu</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of mouse clicks on the panel. These are
     * translated and passed on to any registered chart mouse click listeners.
     *
     * @param event  Information about the mouse event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseClicked</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>event</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>left</name></name>) / <name><name>this</name>.<name>scaleX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>event</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>top</name></name>) / <name><name>this</name>.<name>scaleY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>anchor</name></name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>chart</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>setNotify</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// force a redraw </comment>
        <comment type="line">// new entity code...</comment>
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>listeners</name> =<init> <expr><call><name><name>this</name>.<name>chartMouseListeners</name>.<name>getListeners</name></name><argument_list>(
                <argument><expr><name><name>ChartMouseListener</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>listeners</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>ChartEntity</name></type> <name>entity</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>info</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>entity</name> = <call><name><name>entities</name>.<name>getEntity</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>ChartMouseEvent</name></type> <name>chartEvent</name> =<init> <expr>new <call><name>ChartMouseEvent</name><argument_list>(<argument><expr><call><name>getChart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>event</name></expr></argument>, 
                <argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>listeners</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name> -= 1</expr></incr>) <block>{
            <expr_stmt><expr>((<name>ChartMouseListener</name>) <name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>chartMouseClicked</name><argument_list>(<argument><expr><name>chartEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Implementation of the MouseMotionListener's method.
     *
     * @param e  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mouseMoved</name><parameter_list>(<param><decl><type><name>MouseEvent</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <call><name>getGraphics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>horizontalAxisTrace</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawHorizontalAxisTrace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>verticalAxisTrace</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawVerticalAxisTrace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>listeners</name> =<init> <expr><call><name><name>this</name>.<name>chartMouseListeners</name>.<name>getListeners</name></name><argument_list>(
                <argument><expr><name><name>ChartMouseListener</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>listeners</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>e</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>left</name></name>) / <name><name>this</name>.<name>scaleX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<call><name><name>e</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name><name>insets</name>.<name>top</name></name>) / <name><name>this</name>.<name>scaleY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ChartEntity</name></type> <name>entity</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>info</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>entity</name> = <call><name><name>entities</name>.<name>getEntity</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <comment type="line">// we can only generate events if the panel's chart is not null</comment>
        <comment type="line">// (see bug report 1556951)</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>chart</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ChartMouseEvent</name></type> <name>event</name> =<init> <expr>new <call><name>ChartMouseEvent</name><argument_list>(<argument><expr><call><name>getChart</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>listeners</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name> -= 1</expr></incr>) <block>{
                <expr_stmt><expr>((<name>ChartMouseListener</name>) <name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>chartMouseMoved</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on an anchor point (specified in screen coordinate space).
     *
     * @param x  the x value (in screen coordinates).
     * @param y  the y value (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomInBoth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>zoomInDomain</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zoomInRange</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Decreases the length of the domain axis, centered about the given
     * coordinate on the screen.  The length of the domain axis is reduced
     * by the value of {@link #getZoomInFactor()}.
     *
     * @param x  the x coordinate (in screen coordinates).
     * @param y  the y-coordinate (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomInDomain</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>plot</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>plot</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomInFactor</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(<argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Decreases the length of the range axis, centered about the given
     * coordinate on the screen.  The length of the range axis is reduced by
     * the value of {@link #getZoomInFactor()}.
     *
     * @param x  the x-coordinate (in screen coordinates).
     * @param y  the y coordinate (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomInRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>z</name>.<name>zoomRangeAxes</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomInFactor</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(<argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms out on an anchor point (specified in screen coordinate space).
     *
     * @param x  the x value (in screen coordinates).
     * @param y  the y value (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomOutBoth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>zoomOutDomain</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>zoomOutRange</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Increases the length of the domain axis, centered about the given
     * coordinate on the screen.  The length of the domain axis is increased
     * by the value of {@link #getZoomOutFactor()}.
     *
     * @param x  the x coordinate (in screen coordinates).
     * @param y  the y-coordinate (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomOutDomain</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>z</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomOutFactor</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(<argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Increases the length the range axis, centered about the given
     * coordinate on the screen.  The length of the range axis is increased
     * by the value of {@link #getZoomOutFactor()}.
     *
     * @param x  the x coordinate (in screen coordinates).
     * @param y  the y-coordinate (in screen coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomOutRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>z</name>.<name>zoomRangeAxes</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomOutFactor</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(<argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>this</name>.<name>zoomAroundAnchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on a selected region.
     *
     * @param selection  the selected region.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>selection</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// get the origin of the zoom selection in the Java2D space used for</comment>
        <comment type="line">// drawing the chart (that is, before any scaling to fit the panel)</comment>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>selectOrigin</name> =<init> <expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(
                <argument><expr>(<name>int</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>selection</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>(<name>int</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>selection</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>plotInfo</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>scaledDataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>(
                <argument><expr>(<name>int</name>) <call><name><name>selection</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>selection</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<call><name><name>selection</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &gt; 0) &amp;&amp; (<call><name><name>selection</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &gt; 0)</expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>double</name></type> <name>hLower</name> =<init> <expr>(<call><name><name>selection</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> - <call><name><name>scaledDataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call>) 
                / <call><name><name>scaledDataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>hUpper</name> =<init> <expr>(<call><name><name>selection</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <call><name><name>scaledDataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call>) 
                / <call><name><name>scaledDataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vLower</name> =<init> <expr>(<call><name><name>scaledDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name><name>selection</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call>) 
                / <call><name><name>scaledDataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vUpper</name> =<init> <expr>(<call><name><name>scaledDataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name><name>selection</name>.<name>getMinY</name></name><argument_list>()</argument_list></call>) 
                / <call><name><name>scaledDataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>z</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>z</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>vLower</name></expr></argument>, <argument><expr><name>vUpper</name></expr></argument>, <argument><expr><name>plotInfo</name></expr></argument>, <argument><expr><name>selectOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>z</name>.<name>zoomRangeAxes</name></name><argument_list>(<argument><expr><name>hLower</name></expr></argument>, <argument><expr><name>hUpper</name></expr></argument>, <argument><expr><name>plotInfo</name></expr></argument>, <argument><expr><name>selectOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>z</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>hLower</name></expr></argument>, <argument><expr><name>hUpper</name></expr></argument>, <argument><expr><name>plotInfo</name></expr></argument>, <argument><expr><name>selectOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>z</name>.<name>zoomRangeAxes</name></name><argument_list>(<argument><expr><name>vLower</name></expr></argument>, <argument><expr><name>vUpper</name></expr></argument>, <argument><expr><name>plotInfo</name></expr></argument>, <argument><expr><name>selectOrigin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Restores the auto-range calculation on both axes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>restoreAutoBounds</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>restoreAutoDomainBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>restoreAutoRangeBounds</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Restores the auto-range calculation on the domain axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>restoreAutoDomainBounds</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// we need to guard against this.zoomPoint being null</comment>
            <decl_stmt><decl><type><name>Point</name></type> <name>zp</name> =<init> <expr>(<name><name>this</name>.<name>zoomPoint</name></name> != <name>null</name> ? <name><name>this</name>.<name>zoomPoint</name></name> : new <call><name>Point</name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>z</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>zp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Restores the auto-range calculation on the range axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>restoreAutoRangeBounds</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// we need to guard against this.zoomPoint being null</comment>
            <decl_stmt><decl><type><name>Point</name></type> <name>zp</name> =<init> <expr>(<name><name>this</name>.<name>zoomPoint</name></name> != <name>null</name> ? <name><name>this</name>.<name>zoomPoint</name></name> : new <call><name>Point</name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>z</name>.<name>zoomRangeAxes</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>zp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data area for the chart (the area inside the axes) with the
     * current scaling applied (that is, the area as it appears on screen).
     *
     * @return The scaled data area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getScreenDataArea</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call>.<call><name>getDataArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Insets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleX</name></name> + <name><name>insets</name>.<name>left</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleY</name></name> + <name><name>insets</name>.<name>top</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleX</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>scaleY</name></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the data area (the area inside the axes) for the plot or subplot,
     * with the current scaling applied.
     *
     * @param x  the x-coordinate (for subplot selection).
     * @param y  the y-coordinate (for subplot selection).
     * 
     * @return The scaled data area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getScreenDataArea</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>plotInfo</name> =<init> <expr><call><name><name>this</name>.<name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>result</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>plotInfo</name>.<name>getSubplotCount</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getScreenDataArea</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <comment type="line">// get the origin of the zoom selection in the Java2D space used for</comment>
            <comment type="line">// drawing the chart (that is, before any scaling to fit the panel)</comment>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>selectOrigin</name> =<init> <expr><call><name>translateScreenToJava2D</name><argument_list>(<argument><expr>new <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>subplotIndex</name> =<init> <expr><call><name><name>plotInfo</name>.<name>getSubplotIndex</name></name><argument_list>(<argument><expr><name>selectOrigin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>subplotIndex</name> == -1</expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>result</name> = <call><name>scale</name><argument_list>(<argument><expr><call><name><name>plotInfo</name>.<name>getSubplotInfo</name></name><argument_list>(<argument><expr><name>subplotIndex</name></expr></argument>)</argument_list></call>.<call><name>getDataArea</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the initial tooltip delay value used inside this chart panel.
     *
     * @return An integer representing the initial delay value, in milliseconds.
     * 
     * @see javax.swing.ToolTipManager#getInitialDelay()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getInitialDelay</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ownToolTipInitialDelay</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the reshow tooltip delay value used inside this chart panel.
     *
     * @return An integer representing the reshow  delay value, in milliseconds.
     * 
     * @see javax.swing.ToolTipManager#getReshowDelay()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getReshowDelay</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ownToolTipReshowDelay</name></name></expr>;</return>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dismissal tooltip delay value used inside this chart panel.
     *
     * @return An integer representing the dismissal delay value, in 
     *         milliseconds.
     * 
     * @see javax.swing.ToolTipManager#getDismissDelay()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDismissDelay</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ownToolTipDismissDelay</name></name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Specifies the initial delay value for this chart panel.
     *
     * @param delay  the number of milliseconds to delay (after the cursor has 
     *               paused) before displaying. 
     * 
     * @see javax.swing.ToolTipManager#setInitialDelay(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInitialDelay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>delay</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipInitialDelay</name></name> = <name>delay</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Specifies the amount of time before the user has to wait initialDelay 
     * milliseconds before a tooltip will be shown.
     *
     * @param delay  time in milliseconds
     * 
     * @see javax.swing.ToolTipManager#setReshowDelay(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setReshowDelay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>delay</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipReshowDelay</name></name> = <name>delay</name></expr>;</expr_stmt>  
    }</block></function>

    <comment type="javadoc">/**
     * Specifies the dismissal delay value for this chart panel.
     *
     * @param delay the number of milliseconds to delay before taking away the 
     *              tooltip
     * 
     * @see javax.swing.ToolTipManager#setDismissDelay(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDismissDelay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>delay</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ownToolTipDismissDelay</name></name> = <name>delay</name></expr>;</expr_stmt> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the zoom in factor.
     * 
     * @return The zoom in factor.
     * 
     * @see #setZoomInFactor(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getZoomInFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>zoomInFactor</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the zoom in factor.
     * 
     * @param factor  the factor.
     * 
     * @see #getZoomInFactor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setZoomInFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>zoomInFactor</name></name> = <name>factor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the zoom out factor.
     * 
     * @return The zoom out factor.
     * 
     * @see #setZoomOutFactor(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getZoomOutFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>zoomOutFactor</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the zoom out factor.
     * 
     * @param factor  the factor.
     * 
     * @see #getZoomOutFactor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setZoomOutFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>zoomOutFactor</name></name> = <name>factor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws zoom rectangle (if present).
     * The drawing is performed in XOR mode, therefore
     * when this method is called twice in a row,
     * the second call will completely restore the state
     * of the canvas.
     * 
     * @param g2 the graphics device. 
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawZoomRectangle</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Set XOR mode to draw the zoom rectangle</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setXORMode</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>gray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>zoomRectangle</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>fillZoomRectangle</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomRectangle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomRectangle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <comment type="line">// Reset to the default 'overwrite' mode</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a vertical line used to trace the mouse position to the horizontal 
     * axis.
     *
     * @param g2 the graphics device.
     * @param x  the x-coordinate of the trace line.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawHorizontalAxisTrace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setXORMode</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>orange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>((<name>int</name>) <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> &lt; <name>x</name>) &amp;&amp; (<name>x</name> &lt; (<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{

            <if>if <condition>(<expr><name><name>this</name>.<name>verticalTraceLine</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>verticalTraceLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>verticalTraceLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, 
                        <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>this</name>.<name>verticalTraceLine</name></name> = new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, 
                        <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>verticalTraceLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Reset to the default 'overwrite' mode</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a horizontal line used to trace the mouse position to the vertical
     * axis.
     *
     * @param g2 the graphics device.
     * @param y  the y-coordinate of the trace line.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawVerticalAxisTrace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name>getScreenDataArea</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setXORMode</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>orange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>((<name>int</name>) <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> &lt; <name>y</name>) &amp;&amp; (<name>y</name> &lt; (<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{

            <if>if <condition>(<expr><name><name>this</name>.<name>horizontalTraceLine</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>horizontalTraceLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>horizontalTraceLine</name>.<name>setLine</name></name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                        <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>this</name>.<name>horizontalTraceLine</name></name> = new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>(
                        <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>horizontalTraceLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// Reset to the default 'overwrite' mode</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Displays a dialog that allows the user to edit the properties for the
     * current chart.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>doEditChartProperties</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>ChartEditor</name></type> <name>editor</name> =<init> <expr><call><name><name>ChartEditorManager</name>.<name>getChartEditor</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>chart</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>JOptionPane</name>.<name>showConfirmDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, 
                <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Chart_Properties"</expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>JOptionPane</name>.<name>OK_CANCEL_OPTION</name></name></expr></argument>, <argument><expr><name><name>JOptionPane</name>.<name>PLAIN_MESSAGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name><name>JOptionPane</name>.<name>OK_OPTION</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name>.<name>updateChart</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>chart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Opens a file chooser and gives the user an opportunity to save the chart
     * in PNG format.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>doSaveAs</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>JFileChooser</name></type> <name>fileChooser</name> =<init> <expr>new <call><name>JFileChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileChooser</name>.<name>setCurrentDirectory</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>defaultDirectoryForSaveAs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ExtensionFileFilter</name></type> <name>filter</name> =<init> <expr>new <call><name>ExtensionFileFilter</name><argument_list>(
                <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"PNG_Image_Files"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>".png"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileChooser</name>.<name>addChoosableFileFilter</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>option</name> =<init> <expr><call><name><name>fileChooser</name>.<name>showSaveDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>option</name> == <name><name>JFileChooser</name>.<name>APPROVE_OPTION</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>filename</name> =<init> <expr><call><name><name>fileChooser</name>.<name>getSelectedFile</name></name><argument_list>()</argument_list></call>.<call><name>getPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isEnforceFileExtensions</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>filename</name>.<name>endsWith</name></name><argument_list>(<argument><expr>".png"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>filename</name> = <name>filename</name> + ".png"</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>ChartUtilities</name>.<name>saveChartAsPNG</name></name><argument_list>(<argument><expr>new <call><name>File</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>chart</name></name></expr></argument>, 
                    <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Creates a print job for the chart.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>createChartPrintJob</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>PrinterJob</name></type> <name>job</name> =<init> <expr><call><name><name>PrinterJob</name>.<name>getPrinterJob</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PageFormat</name></type> <name>pf</name> =<init> <expr><call><name><name>job</name>.<name>defaultPage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PageFormat</name></type> <name>pf2</name> =<init> <expr><call><name><name>job</name>.<name>pageDialog</name></name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pf2</name> != <name>pf</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>job</name>.<name>setPrintable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>job</name>.<name>printDialog</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>job</name>.<name>print</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <catch>catch (<param><decl><type><name>PrinterException</name></type> <name>e</name></decl></param>) <block>{
                    <expr_stmt><expr><call><name><name>JOptionPane</name>.<name>showMessageDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Prints the chart on a single page.
     *
     * @param g  the graphics context.
     * @param pf  the page format to use.
     * @param pageIndex  the index of the page. If not &lt;code&gt;0&lt;/code&gt;, nothing 
     *                   gets print.
     *
     * @return The result of printing.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>print</name><parameter_list>(<param><decl><type><name>Graphics</name></type> <name>g</name></decl></param>, <param><decl><type><name>PageFormat</name></type> <name>pf</name></decl></param>, <param><decl><type><name>int</name></type> <name>pageIndex</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>pageIndex</name> != 0</expr>)</condition><then> <block>{
            <return>return <expr><name>NO_SUCH_PAGE</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <name>g</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>pf</name>.<name>getImageableX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>pf</name>.<name>getImageableY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>pf</name>.<name>getImageableWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>pf</name>.<name>getImageableHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>anchor</name></name></expr></argument>, 
                <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>PAGE_EXISTS</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Adds a listener to the list of objects listening for chart mouse events.
     *
     * @param listener  the listener (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addChartMouseListener</name><parameter_list>(<param><decl><type><name>ChartMouseListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listener</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'listener' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>chartMouseListeners</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>ChartMouseListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a listener from the list of objects listening for chart mouse 
     * events.
     *
     * @param listener  the listener.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeChartMouseListener</name><parameter_list>(<param><decl><type><name>ChartMouseListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chartMouseListeners</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>ChartMouseListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an array of the listeners of the given type registered with the
     * panel.
     * 
     * @param listenerType  the listener type.
     * 
     * @return An array of listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>EventListener</name><index>[]</index></type> <name>getListeners</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>listenerType</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listenerType</name> == <name><name>ChartMouseListener</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
            <comment type="line">// fetch listeners from local storage</comment>
            <return>return <expr><call><name><name>this</name>.<name>chartMouseListeners</name>.<name>getListeners</name></name><argument_list>(<argument><expr><name>listenerType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>getListeners</name></name><argument_list>(<argument><expr><name>listenerType</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a popup menu for the panel.
     *
     * @param properties  include a menu item for the chart property editor.
     * @param save  include a menu item for saving the chart.
     * @param print  include a menu item for printing the chart.
     * @param zoom  include menu items for zooming.
     *
     * @return The popup menu.
     */</comment>
    <function><type><specifier>protected</specifier> <name>JPopupMenu</name></type> <name>createPopupMenu</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>properties</name></decl></param>, 
                                         <param><decl><type><name>boolean</name></type> <name>save</name></decl></param>, 
                                         <param><decl><type><name>boolean</name></type> <name>print</name></decl></param>,
                                         <param><decl><type><name>boolean</name></type> <name>zoom</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>JPopupMenu</name></type> <name>result</name> =<init> <expr>new <call><name>JPopupMenu</name><argument_list>(<argument><expr>"Chart:"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>separator</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>properties</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>JMenuItem</name></type> <name>propertiesItem</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Properties..."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>propertiesItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>PROPERTIES_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>propertiesItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>propertiesItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>separator</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>save</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>separator</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>separator</name> = false</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>JMenuItem</name></type> <name>saveItem</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Save_as..."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>saveItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>SAVE_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>saveItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>saveItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>separator</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>print</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>separator</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>separator</name> = false</expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>JMenuItem</name></type> <name>printItem</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Print..."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>printItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>PRINT_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>printItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>printItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>separator</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>zoom</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>separator</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>separator</name> = false</expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>JMenu</name></type> <name>zoomInMenu</name> =<init> <expr>new <call><name>JMenu</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Zoom_In"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomInBothMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"All_Axes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInBothMenuItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>ZOOM_IN_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInBothMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomInMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomInBothMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>zoomInMenu</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomInDomainMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Domain_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInDomainMenuItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>ZOOM_IN_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInDomainMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomInMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomInDomainMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomInRangeMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Range_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInRangeMenuItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>ZOOM_IN_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomInRangeMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomInMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomInRangeMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>zoomInMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>JMenu</name></type> <name>zoomOutMenu</name> =<init> <expr>new <call><name>JMenu</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Zoom_Out"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomOutBothMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"All_Axes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutBothMenuItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>ZOOM_OUT_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutBothMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomOutMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomOutBothMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>zoomOutMenu</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomOutDomainMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Domain_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutDomainMenuItem</name>.<name>setActionCommand</name></name><argument_list>(
                    <argument><expr><name>ZOOM_OUT_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutDomainMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomOutMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomOutDomainMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomOutRangeMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Range_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutRangeMenuItem</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>ZOOM_OUT_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutRangeMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>zoomOutMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomOutRangeMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>zoomOutMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>JMenu</name></type> <name>autoRangeMenu</name> =<init> <expr>new <call><name>JMenu</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Auto_Range"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomResetBothMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"All_Axes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetBothMenuItem</name>.<name>setActionCommand</name></name><argument_list>(
                    <argument><expr><name>ZOOM_RESET_BOTH_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetBothMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>autoRangeMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomResetBothMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>autoRangeMenu</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>zoomResetDomainMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Domain_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetDomainMenuItem</name>.<name>setActionCommand</name></name><argument_list>(
                    <argument><expr><name>ZOOM_RESET_DOMAIN_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetDomainMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>autoRangeMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomResetDomainMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name>.<name>zoomResetRangeMenuItem</name></name> = new <call><name>JMenuItem</name><argument_list>(
                    <argument><expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Range_Axis"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetRangeMenuItem</name>.<name>setActionCommand</name></name><argument_list>(
                    <argument><expr><name>ZOOM_RESET_RANGE_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetRangeMenuItem</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>autoRangeMenu</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>zoomResetRangeMenuItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>result</name>.<name>addSeparator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>autoRangeMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * The idea is to modify the zooming options depending on the type of chart 
     * being displayed by the panel.
     *
     * @param x  horizontal position of the popup.
     * @param y  vertical position of the popup.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>displayPopupMenu</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>popup</name></name> != <name>null</name></expr>)</condition><then> <block>{

            <comment type="line">// go through each zoom menu item and decide whether or not to </comment>
            <comment type="line">// enable it...</comment>
            <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>this</name>.<name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isDomainZoomable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>isRangeZoomable</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>Zoomable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Zoomable</name></type> <name>z</name> =<init> <expr>(<name>Zoomable</name>) <name>plot</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>isDomainZoomable</name> = <call><name><name>z</name>.<name>isDomainZoomable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isRangeZoomable</name> = <call><name><name>z</name>.<name>isRangeZoomable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomInDomainMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomInDomainMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomOutDomainMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutDomainMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if> 
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomResetDomainMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetDomainMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>this</name>.<name>zoomInRangeMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomInRangeMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomOutRangeMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutRangeMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>this</name>.<name>zoomResetRangeMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetRangeMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name><name>this</name>.<name>zoomInBothMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomInBothMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name> 
                        &amp;&amp; <name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomOutBothMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomOutBothMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name> 
                        &amp;&amp; <name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>zoomResetBothMenuItem</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>zoomResetBothMenuItem</name>.<name>setEnabled</name></name><argument_list>(<argument><expr><name>isDomainZoomable</name> 
                        &amp;&amp; <name>isRangeZoomable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>this</name>.<name>popup</name>.<name>show</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="block">/* (non-Javadoc)
     * @see javax.swing.JPanel#updateUI()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateUI</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// here we need to update the UI for the popup menu, if the panel</comment>
        <comment type="line">// has one...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>popup</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>SwingUtilities</name>.<name>updateComponentTreeUI</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>popup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>updateUI</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
