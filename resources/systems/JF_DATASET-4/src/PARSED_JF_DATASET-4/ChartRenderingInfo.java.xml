<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\ChartRenderingInfo.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * ChartRenderingInfo.java
 * -----------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 22-Jan-2002 : Version 1 (DG);
 * 05-Feb-2002 : Added a new constructor, completed Javadoc comments (DG);
 * 05-Mar-2002 : Added a clear() method (DG);
 * 23-May-2002 : Renamed DrawInfo --&gt; ChartRenderingInfo (DG);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 17-Sep-2003 : Added PlotRenderingInfo (DG);
 * 01-Nov-2005 : Updated equals() method (DG);
 * 30-Nov-2005 : Removed get/setPlotArea() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 01-Dec-2006 : Fixed equals() and clone() (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>StandardEntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A structure for storing rendering information from one call to the
 * JFreeChart.draw() method.
 * &lt;P&gt;
 * An instance of the {@link JFreeChart} class can draw itself within an 
 * arbitrary rectangle on any &lt;code&gt;Graphics2D&lt;/code&gt;.  It is assumed that 
 * client code will sometimes render the same chart in more than one view, so 
 * the {@link JFreeChart} instance does not retain any information about its 
 * rendered dimensions.  This information can be useful sometimes, so you have 
 * the option to collect the information at each call to 
 * &lt;code&gt;JFreeChart.draw()&lt;/code&gt;, by passing an instance of this
 * &lt;code&gt;ChartRenderingInfo&lt;/code&gt; class.
 */</comment>
<class><specifier>public</specifier> class <name>ChartRenderingInfo</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2751952018173406822L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The area in which the chart is drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>chartArea</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Rendering info for the chart's plot (and subplots, if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotRenderingInfo</name></type> <name>plotInfo</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Storage for the chart entities.  Since retaining entity information for 
     * charts with a large number of data points consumes a lot of memory, it 
     * is intended that you can set this to &lt;code&gt;null&lt;/code&gt; to prevent the 
     * information being collected.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>EntityCollection</name></type> <name>entities</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new ChartRenderingInfo structure that can be used to 
     * collect information about the dimensions of a rendered chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartRenderingInfo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>StandardEntityCollection</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new instance. If an entity collection is supplied, it will 
     * be populated with information about the entities in a chart.  If it is 
     * &lt;code&gt;null&lt;/code&gt;, no entity information (including tool tips) will
     * be collected.
     *
     * @param entities  an entity collection (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>ChartRenderingInfo</name><parameter_list>(<param><decl><type><name>EntityCollection</name></type> <name>entities</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>chartArea</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>plotInfo</name></name> = new <call><name>PlotRenderingInfo</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>entities</name></name> = <name>entities</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the area in which the chart was drawn.
     *
     * @return The area in which the chart was drawn.
     * 
     * @see #setChartArea(Rectangle2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getChartArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>chartArea</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the area in which the chart was drawn.
     *
     * @param area  the chart area.
     * 
     * @see #getChartArea()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChartArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chartArea</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the collection of entities maintained by this instance.
     *
     * @return The entity collection (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setEntityCollection(EntityCollection)
     */</comment>
    <function><type><specifier>public</specifier> <name>EntityCollection</name></type> <name>getEntityCollection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>entities</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the entity collection.
     *
     * @param entities  the entity collection (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getEntityCollection()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEntityCollection</name><parameter_list>(<param><decl><type><name>EntityCollection</name></type> <name>entities</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>entities</name></name> = <name>entities</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the information recorded by this object.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chartArea</name>.<name>setRect</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>plotInfo</name></name> = new <call><name>PlotRenderingInfo</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>entities</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>entities</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
  
    <comment type="javadoc">/**
     * Returns the rendering info for the chart's plot.
     * 
     * @return The rendering info for the plot.
     */</comment>  
    <function><type><specifier>public</specifier> <name>PlotRenderingInfo</name></type> <name>getPlotInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotInfo</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ChartRenderingInfo</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ChartRenderingInfo</name></type> <name>that</name> =<init> <expr>(<name>ChartRenderingInfo</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>chartArea</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>chartArea</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>plotInfo</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>plotInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>entities</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>entities</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this object.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if the object cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ChartRenderingInfo</name></type> <name>clone</name> =<init> <expr>(<name>ChartRenderingInfo</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>chartArea</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>chartArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>this</name>.<name>chartArea</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>entities</name></name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PublicCloneable</name></type> <name>pc</name> =<init> <expr>(<name>PublicCloneable</name>) <name><name>this</name>.<name>entities</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>clone</name>.<name>entities</name></name> = (<name>EntityCollection</name>) <call><name><name>pc</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>chartArea</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>chartArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
        
}</block></class>
</unit>
