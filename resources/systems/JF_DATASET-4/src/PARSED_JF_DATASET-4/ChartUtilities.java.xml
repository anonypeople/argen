<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\ChartUtilities.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * ChartUtilities.java
 * -------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Wolfgang Irler;
 *                   Richard Atkinson;
 *                   Xavier Poinsard;
 *
 * Changes
 * -------
 * 11-Dec-2001 : Version 1.  The JPEG method comes from Wolfgang Irler's 
 *               JFreeChartServletDemo class (DG);
 * 23-Jan-2002 : Changed saveChartAsXXX() methods to pass IOExceptions back to 
 *               caller (DG);
 * 26-Jun-2002 : Added image map methods (DG);
 * 05-Aug-2002 : Added writeBufferedImage methods
 *               Modified writeImageMap method to support flexible image 
 *               maps (RA);
 * 26-Aug-2002 : Added saveChartAsJPEG and writeChartAsJPEG methods with info 
 *               objects (RA);
 * 05-Sep-2002 : Added writeImageMap() method to support OverLIB
 *               - http://www.bosrup.com/web/overlib (RA);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 17-Oct-2002 : Exposed JPEG quality setting and PNG compression level as 
 *               parameters (DG);
 * 25-Oct-2002 : Fixed writeChartAsJPEG() empty method bug (DG);
 * 13-Mar-2003 : Updated writeImageMap method as suggested by Xavier Poinsard 
 *               (see Feature Request 688079) (DG);
 * 12-Aug-2003 : Added support for custom image maps using 
 *               ToolTipTagFragmentGenerator and URLTagFragmentGenerator (RA);
 * 02-Sep-2003 : Separated PNG encoding from writing chart to an 
 *               OutputStream (RA);
 * 04-Dec-2003 : Chart draw() method modified to include anchor point (DG);
 * 20-Feb-2004 : Edited Javadocs and added argument checking (DG);
 * 05-Apr-2004 : Fixed problem with buffered image type (DG);
 * 01-Aug-2004 : Modified to use EncoderUtil for all image encoding (RA);
 * 02-Aug-2004 : Delegated image map related functionality to ImageMapUtil (RA);
 * 13-Jan-2005 : Renamed ImageMapUtil --&gt; ImageMapUtilities, removed method
 *               writeImageMap(PrintWriter, String, ChartRenderingInfo) which 
 *               exists in ImageMapUtilities (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Feb-2006 : API doc update (DG);
 * 19-Mar-2007 : Use try-finally to close output stream in saveChartAsXXX() 
 *               methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>File</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>PrintWriter</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>encoders</name>.<name>EncoderUtil</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>encoders</name>.<name>ImageFormat</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>ImageMapUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>OverLIBToolTipTagFragmentGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>StandardToolTipTagFragmentGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>StandardURLTagFragmentGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>ToolTipTagFragmentGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>imagemap</name>.<name>URLTagFragmentGenerator</name></name>;</import>

<comment type="javadoc">/**
 * A collection of utility methods for JFreeChart.  Includes methods for 
 * converting charts to image formats (PNG and JPEG) plus creating simple HTML 
 * image maps.
 * 
 * @see ImageMapUtilities
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>ChartUtilities</name> <block>{

    <comment type="javadoc">/**
     * Writes a chart to an output stream in PNG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>writeChartAsPNG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in PNG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param encodeAlpha  encode alpha?
     * @param compression  the compression level (0-9).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>encodeAlpha</name></decl></param>, <param><decl><type><name>int</name></type> <name>compression</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name><name>ChartUtilities</name>.<name>writeChartAsPNG</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                <argument><expr><name>encodeAlpha</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in PNG format.  This method allows 
     * you to pass in a {@link ChartRenderingInfo} object, to collect 
     * information about the chart dimensions/entities.  You will need this 
     * info if you want to create an HTML image map.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>,  <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>bufferedImage</name> 
                =<init> <expr><call><name><name>chart</name>.<name>createBufferedImage</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>bufferedImage</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>PNG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in PNG format.  This method allows 
     * you to pass in a {@link ChartRenderingInfo} object, to collect 
     * information about the chart dimensions/entities.  You will need this 
     * info if you want to create an HTML image map.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  carries back chart rendering info (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     * @param encodeAlpha  encode alpha?
     * @param compression  the PNG compression level (0-9).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>encodeAlpha</name></decl></param>, <param><decl><type><name>int</name></type> <name>compression</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>out</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'out' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>chartImage</name> =<init> <expr><call><name><name>chart</name>.<name>createBufferedImage</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, 
                <argument><expr><name><name>BufferedImage</name>.<name>TYPE_INT_ARGB</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ChartUtilities</name>.<name>writeBufferedImageAsPNG</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chartImage</name></expr></argument>, <argument><expr><name>encodeAlpha</name></expr></argument>, 
                <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a scaled version of a chart to an output stream in PNG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the unscaled chart width.
     * @param height  the unscaled chart height.
     * @param widthScaleFactor  the horizontal scale factor.
     * @param heightScaleFactor  the vertical scale factor.
     *
     * @throws IOException if there are any I/O problems.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeScaledChartAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>int</name></type> <name>widthScaleFactor</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>heightScaleFactor</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>out</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'out' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>desiredWidth</name> =<init> <expr><name>width</name> * <name>widthScaleFactor</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>desiredHeight</name> =<init> <expr><name>height</name> * <name>heightScaleFactor</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>defaultWidth</name> =<init> <expr><name>width</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>defaultHeight</name> =<init> <expr><name>height</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>scale</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="line">// get desired width and height from somewhere then...</comment>
        <if>if <condition>(<expr>(<name>widthScaleFactor</name> != 1) || (<name>heightScaleFactor</name> != 1)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>scale</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>scaleX</name> =<init> <expr><name>desiredWidth</name> / <name>defaultWidth</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>scaleY</name> =<init> <expr><name>desiredHeight</name> / <name>defaultHeight</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> =<init> <expr>new <call><name>BufferedImage</name><argument_list>(<argument><expr>(<name>int</name>) <name>desiredWidth</name></expr></argument>, 
                <argument><expr>(<name>int</name>) <name>desiredHeight</name></expr></argument>, <argument><expr><name><name>BufferedImage</name>.<name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr><call><name><name>image</name>.<name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>scale</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AffineTransform</name></type> <name>saved</name> =<init> <expr><call><name><name>g2</name>.<name>getTransform</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>transform</name></name><argument_list>(<argument><expr><call><name><name>AffineTransform</name>.<name>getScaleInstance</name></name><argument_list>(<argument><expr><name>scaleX</name></expr></argument>, <argument><expr><name>scaleY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>defaultWidth</name></expr></argument>, 
                    <argument><expr><name>defaultHeight</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setTransform</name></name><argument_list>(<argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>chart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>defaultWidth</name></expr></argument>, 
                    <argument><expr><name>defaultHeight</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><call><name>encodeAsPNG</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to the specified file in PNG format.
     *
     * @param file  the file name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsPNG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>saveChartAsPNG</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in PNG format.  This method allows you to pass 
     * in a {@link ChartRenderingInfo} object, to collect information about the 
     * chart dimensions/entities.  You will need this info if you want to 
     * create an HTML image map.
     *
     * @param file  the file (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsPNG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'file' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>ChartUtilities</name>.<name>writeChartAsPNG</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in PNG format.  This method allows you to pass 
     * in a {@link ChartRenderingInfo} object, to collect information about the 
     * chart dimensions/entities.  You will need this info if you want to 
     * create an HTML image map.
     *
     * @param file  the file (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param encodeAlpha  encode alpha?
     * @param compression  the PNG compression level (0-9).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsPNG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
           <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>encodeAlpha</name></decl></param>,
           <param><decl><type><name>int</name></type> <name>compression</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'file' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>writeChartAsPNG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>encodeAlpha</name></expr></argument>, 
                    <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in JPEG format.  Please note that
     * JPEG is a poor format for chart images, use PNG if possible.
     * 
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>writeChartAsJPEG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in JPEG format.  Please note that
     * JPEG is a poor format for chart images, use PNG if possible.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quality  the quality setting.
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>float</name></type> <name>quality</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name><name>ChartUtilities</name>.<name>writeChartAsJPEG</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, 
                <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in JPEG format. This method allows 
     * you to pass in a {@link ChartRenderingInfo} object, to collect 
     * information about the chart dimensions/entities.  You will need this 
     * info if you want to create an HTML image map.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> =<init> <expr><call><name><name>chart</name>.<name>createBufferedImage</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>JPEG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a chart to an output stream in JPEG format.  This method allows 
     * you to pass in a {@link ChartRenderingInfo} object, to collect 
     * information about the chart dimensions/entities.  You will need this 
     * info if you want to create an HTML image map.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quality  the output quality (0.0f to 1.0f).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeChartAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>float</name></type> <name>quality</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> =<init> <expr><call><name><name>chart</name>.<name>createBufferedImage</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>JPEG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in JPEG format.
     *
     * @param file  the file (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsJPEG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>saveChartAsJPEG</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in JPEG format.
     *
     * @param file  the file (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quality  the JPEG quality setting.
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsJPEG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>float</name></type> <name>quality</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>saveChartAsJPEG</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in JPEG format.  This method allows you to pass 
     * in a {@link ChartRenderingInfo} object, to collect information about the 
     * chart dimensions/entities.  You will need this info if you want to 
     * create an HTML image map.
     *
     * @param file  the file name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsJPEG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'file' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>writeChartAsJPEG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <comment type="javadoc">/**
     * Saves a chart to a file in JPEG format.  This method allows you to pass 
     * in a {@link ChartRenderingInfo} object, to collect information about the 
     * chart dimensions/entities.  You will need this info if you want to 
     * create an HTML image map.
     *
     * @param file  the file name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quality  the quality setting.
     * @param chart  the chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param width  the image width.
     * @param height  the image height.
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>saveChartAsJPEG</name><parameter_list>(<param><decl><type><name>File</name></type> <name>file</name></decl></param>, <param><decl><type><name>float</name></type> <name>quality</name></decl></param>,
            <param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>,
            <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <if>if <condition>(<expr><name>file</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'file' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>chart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'chart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>BufferedOutputStream</name><argument_list>(<argument><expr>new <call><name>FileOutputStream</name><argument_list>(
                <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name>writeChartAsJPEG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>chart</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a {@link BufferedImage} to an output stream in JPEG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeBufferedImageAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, 
            <param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>writeBufferedImageAsJPEG</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>0.75f</expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a {@link BufferedImage} to an output stream in JPEG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quality  the image quality (0.0f to 1.0f).
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeBufferedImageAsJPEG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><name>float</name></type> <name>quality</name></decl></param>,
            <param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>JPEG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a {@link BufferedImage} to an output stream in PNG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeBufferedImageAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>, 
            <param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>PNG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes a {@link BufferedImage} to an output stream in PNG format.
     *
     * @param out  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param encodeAlpha  encode alpha?
     * @param compression  the compression level (0-9).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeBufferedImageAsPNG</name><parameter_list>(<param><decl><type><name>OutputStream</name></type> <name>out</name></decl></param>,
            <param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>encodeAlpha</name></decl></param>, <param><decl><type><name>int</name></type> <name>compression</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>EncoderUtil</name>.<name>writeBufferedImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>PNG</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, 
                <argument><expr><name>compression</name></expr></argument>, <argument><expr><name>encodeAlpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a {@link BufferedImage} to PNG format.
     *
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A byte array in PNG format.
     * 
     * @throws IOException if there is an I/O problem.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>encodeAsPNG</name><parameter_list>(<param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>EncoderUtil</name>.<name>encode</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>PNG</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a {@link BufferedImage} to PNG format.
     *
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param encodeAlpha  encode alpha?
     * @param compression  the PNG compression level (0-9).
     *
     * @return The byte array in PNG format.
     * 
     * @throws IOException if there is an I/O problem.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>encodeAsPNG</name><parameter_list>(<param><decl><type><name>BufferedImage</name></type> <name>image</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>encodeAlpha</name></decl></param>, 
                                     <param><decl><type><name>int</name></type> <name>compression</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>EncoderUtil</name>.<name>encode</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name><name>ImageFormat</name>.<name>PNG</name></name></expr></argument>, <argument><expr><name>compression</name></expr></argument>, 
                <argument><expr><name>encodeAlpha</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Writes an image map to an output stream.
     *
     * @param writer  the writer (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param name  the map name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param useOverLibForToolTips  whether to use OverLIB for tooltips
     *                               (http://www.bosrup.com/web/overlib/).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeImageMap</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>writer</name></decl></param>,
                                     <param><decl><type><name>String</name></type> <name>name</name></decl></param>,
                                     <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>,
                                     <param><decl><type><name>boolean</name></type> <name>useOverLibForToolTips</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>ToolTipTagFragmentGenerator</name></type> <name>toolTipTagFragmentGenerator</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>useOverLibForToolTips</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toolTipTagFragmentGenerator</name> 
                    = new <call><name>OverLIBToolTipTagFragmentGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>toolTipTagFragmentGenerator</name> 
                    = new <call><name>StandardToolTipTagFragmentGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>ImageMapUtilities</name>.<name>writeImageMap</name></name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, 
                <argument><expr><name>toolTipTagFragmentGenerator</name></expr></argument>, 
                <argument><expr>new <call><name>StandardURLTagFragmentGenerator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Writes an image map to the specified writer.
     *
     * @param writer  the writer (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param name  the map name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment
     *     that will contain the tooltip text (&lt;code&gt;null&lt;/code&gt; not permitted 
     *     if &lt;code&gt;info&lt;/code&gt; contains tooltip information).
     * @param urlTagFragmentGenerator  a generator for the HTML fragment that
     *     will contain the URL reference (&lt;code&gt;null&lt;/code&gt; not permitted if 
     *     &lt;code&gt;info&lt;/code&gt; contains URLs).
     *
     * @throws IOException if there are any I/O errors.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>writeImageMap</name><parameter_list>(<param><decl><type><name>PrintWriter</name></type> <name>writer</name></decl></param>, <param><decl><type><name>String</name></type> <name>name</name></decl></param>, 
            <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>, 
            <param><decl><type><name>ToolTipTagFragmentGenerator</name></type> <name>toolTipTagFragmentGenerator</name></decl></param>,
            <param><decl><type><name>URLTagFragmentGenerator</name></type> <name>urlTagFragmentGenerator</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>writer</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>ImageMapUtilities</name>.<name>getImageMap</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, 
                <argument><expr><name>toolTipTagFragmentGenerator</name></expr></argument>, <argument><expr><name>urlTagFragmentGenerator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an HTML image map.  This method maps to 
     * {@link ImageMapUtilities#getImageMap(String, ChartRenderingInfo, 
     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}, using default 
     * generators.
     *
     * @param name  the map name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The map tag.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getImageMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ImageMapUtilities</name>.<name>getImageMap</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
                <argument><expr>new <call><name>StandardToolTipTagFragmentGenerator</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr>new <call><name>StandardURLTagFragmentGenerator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an HTML image map.  This method maps directly to
     * {@link ImageMapUtilities#getImageMap(String, ChartRenderingInfo, 
     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}.
     *
     * @param name  the map name (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment
     *     that will contain the tooltip text (&lt;code&gt;null&lt;/code&gt; not permitted 
     *     if &lt;code&gt;info&lt;/code&gt; contains tooltip information).
     * @param urlTagFragmentGenerator  a generator for the HTML fragment that
     *     will contain the URL reference (&lt;code&gt;null&lt;/code&gt; not permitted if 
     *     &lt;code&gt;info&lt;/code&gt; contains URLs).
     *
     * @return The map tag.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>getImageMap</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>,
            <param><decl><type><name>ToolTipTagFragmentGenerator</name></type> <name>toolTipTagFragmentGenerator</name></decl></param>,
            <param><decl><type><name>URLTagFragmentGenerator</name></type> <name>urlTagFragmentGenerator</name></decl></param>)</parameter_list> <block>{

        <return>return <expr><call><name><name>ImageMapUtilities</name>.<name>getImageMap</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, 
                <argument><expr><name>toolTipTagFragmentGenerator</name></expr></argument>, <argument><expr><name>urlTagFragmentGenerator</name></expr></argument>)</argument_list></call></expr>;</return>
        
    }</block></function>

}</block></class>
</unit>
