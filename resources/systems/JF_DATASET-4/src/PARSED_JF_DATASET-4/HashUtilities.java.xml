<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\HashUtilities.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * HashUtilities.java
 * ------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited;
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Oct-2006 : Version 1 (DG);
 * 06-Mar-2007 : Fix for hashCodeForDoubleArray() method (DG);
 * 13-Nov-2007 : Added new utility methods (DG);
 * 22-Nov-2007 : Added hashCode() method for 'int' (DG);
 * 05-Dec-2007 : Added special methods to handle BooleanList, PaintList,
 *               and StrokeList (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>StrokeList</name></name>;</import>

<comment type="javadoc">/**
 * Some utility methods for calculating hash codes.  
 * 
 * @since 1.0.3
 */</comment>
<class><specifier>public</specifier> class <name>HashUtilities</name> <block>{
    
    <comment type="javadoc">/**
     * Returns a hash code for a &lt;code&gt;Paint&lt;/code&gt; instance.  If 
     * &lt;code&gt;p&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this method returns zero.
     * 
     * @param p  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The hash code.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCodeForPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <comment type="line">// handle GradientPaint as a special case</comment>
        <if>if <condition>(<expr><name>p</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GradientPaint</name></type> <name>gp</name> =<init> <expr>(<name>GradientPaint</name>) <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = 193</expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>gp</name>.<name>getColor1</name></name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>gp</name>.<name>getPoint1</name></name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>gp</name>.<name>getColor2</name></name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>gp</name>.<name>getPoint2</name></name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// we assume that all other Paint instances implement equals() and</comment>
            <comment type="line">// hashCode()...of course that might not be true, but what can we</comment>
            <comment type="line">// do about it?</comment>
            <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for a &lt;code&gt;double[]&lt;/code&gt; instance.  If the array
     * is &lt;code&gt;null&lt;/code&gt;, this method returns zero.
     * 
     * @param a  the array (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The hash code.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCodeForDoubleArray</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>a</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>a</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>a</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> = 29 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and the value of a boolean
     * primitive.
     * 
     * @param pre  the seed value.
     * @param b  the boolean value.
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>37 * <name>pre</name> + (<name>b</name> ? 0 : 1)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and the value of an int
     * primitive.
     * 
     * @param pre  the seed value.
     * @param i  the int value.
     * 
     * @return A hash value.
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>37 * <name>pre</name> + <name>i</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and the value of a double
     * primitive.
     * 
     * @param pre  the seed value.
     * @param d  the double value.
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>l</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>37 * <name>pre</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>l</name> ^ (<name>l</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and a paint instance.
     * 
     * @param pre  the seed value.
     * @param p  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>37 * <name>pre</name> + <call><name>hashCodeForPaint</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and a stroke instance.
     * 
     * @param pre  the seed value.
     * @param s  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> =<init> <expr>(<name>s</name> != <name>null</name> ? <call><name><name>s</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr></init></decl>;</decl_stmt>
        <return>return <expr>37 * <name>pre</name> + <name>h</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and a string instance.
     * 
     * @param pre  the seed value.
     * @param s  the string (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> =<init> <expr>(<name>s</name> != <name>null</name> ? <call><name><name>s</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr></init></decl>;</decl_stmt>
        <return>return <expr>37 * <name>pre</name> + <name>h</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and a &lt;code&gt;Comparable&lt;/code&gt;
     * instance.
     * 
     * @param pre  the seed value.
     * @param c  the comparable (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A hash value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> =<init> <expr>(<name>c</name> != <name>null</name> ? <call><name><name>c</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr></init></decl>;</decl_stmt>
        <return>return <expr>37 * <name>pre</name> + <name>h</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash value based on a seed value and an &lt;code&gt;Object&lt;/code&gt;
     * instance.
     * 
     * @param pre  the seed value.
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A hash value.
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>h</name> =<init> <expr>(<name>obj</name> != <name>null</name> ? <call><name><name>obj</name>.<name>hashCode</name></name><argument_list>()</argument_list></call> : 0)</expr></init></decl>;</decl_stmt>
        <return>return <expr>37 * <name>pre</name> + <name>h</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Computes a hash code for a {@link BooleanList}.  In the latest version
     * of JCommon, the {@link BooleanList} class should implement the hashCode()
     * method correctly, but we compute it here anyway so that we can work with 
     * older versions of JCommon (back to 1.0.0).
     * 
     * @param pre  the seed value.
     * @param list  the list (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The hash code.
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>BooleanList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>pre</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// for efficiency, we just use the first, last and middle items to</comment>
        <comment type="line">// compute a hashCode...</comment>
        <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>list</name>.<name>getBoolean</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>size</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                        <argument><expr><call><name><name>list</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>size</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>size</name> &gt; 2</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                            <argument><expr><call><name><name>list</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>size</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>37 * <name>pre</name> + <name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Computes a hash code for a {@link PaintList}.  In the latest version
     * of JCommon, the {@link PaintList} class should implement the hashCode()
     * method correctly, but we compute it here anyway so that we can work with 
     * older versions of JCommon (back to 1.0.0).
     * 
     * @param pre  the seed value.
     * @param list  the list (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The hash code.
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>PaintList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>pre</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// for efficiency, we just use the first, last and middle items to</comment>
        <comment type="line">// compute a hashCode...</comment>
        <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>list</name>.<name>getPaint</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>size</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                        <argument><expr><call><name><name>list</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>size</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>size</name> &gt; 2</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                            <argument><expr><call><name><name>list</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>size</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>37 * <name>pre</name> + <name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Computes a hash code for a {@link StrokeList}.  In the latest version
     * of JCommon, the {@link StrokeList} class should implement the hashCode()
     * method correctly, but we compute it here anyway so that we can work with 
     * older versions of JCommon (back to 1.0.0).
     * 
     * @param pre  the seed value.
     * @param list  the list (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The hash code.
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pre</name></decl></param>, <param><decl><type><name>StrokeList</name></type> <name>list</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>list</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>pre</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>list</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// for efficiency, we just use the first, last and middle items to</comment>
        <comment type="line">// compute a hashCode...</comment>
        <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>list</name>.<name>getStroke</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>size</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                        <argument><expr><call><name><name>list</name>.<name>getStroke</name></name><argument_list>(<argument><expr><name>size</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>size</name> &gt; 2</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                            <argument><expr><call><name><name>list</name>.<name>getStroke</name></name><argument_list>(<argument><expr><name>size</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr>37 * <name>pre</name> + <name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
