<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\JFreeChart.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 * 
 * ---------------
 * JFreeChart.java
 * ---------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Andrzej Porebski;
 *                   David Li;
 *                   Wolfgang Irler;
 *                   Christian W. Zuckschwerdt;
 *                   Klaus Rheinwald;
 *                   Nicolas Brodu;
 *                   
 * NOTE: The above list of contributors lists only the people that have
 * contributed to this source file (JFreeChart.java) - for a list of ALL
 * contributors to the project, please see the README.txt file.
 *
 * Changes (from 20-Jun-2001)
 * --------------------------
 * 20-Jun-2001 : Modifications submitted by Andrzej Porebski for legend 
 *               placement;
 * 21-Jun-2001 : Removed JFreeChart parameter from Plot constructors (DG);
 * 22-Jun-2001 : Multiple titles added (original code by David Berry, with 
 *               reworkings by DG);
 * 18-Sep-2001 : Updated header (DG);
 * 15-Oct-2001 : Moved data source classes into new package 
 *               com.jrefinery.data.* (DG);
 * 18-Oct-2001 : New factory method for creating VerticalXYBarChart (DG);
 * 19-Oct-2001 : Moved series paint and stroke methods to the Plot class (DG);
 *               Moved static chart creation methods to new ChartFactory 
 *               class (DG);
 * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);
 *               Fixed bug where chart isn't registered with the dataset (DG);
 * 07-Nov-2001 : Fixed bug where null title in constructor causes 
 *               exception (DG);
 *               Tidied up event notification code (DG);
 * 17-Nov-2001 : Added getLegendItemCount() method (DG);
 * 21-Nov-2001 : Set clipping in draw method to ensure that nothing gets drawn 
 *               outside the chart area (DG);
 * 11-Dec-2001 : Added the createBufferedImage() method, taken from the 
 *               JFreeChartServletDemo class (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 16-Jan-2002 : Added handleClick() method (DG);
 * 22-Jan-2002 : Fixed bug correlating legend labels with pie data (DG);
 * 05-Feb-2002 : Removed redundant tooltips code (DG);
 * 19-Feb-2002 : Added accessor methods for the backgroundImage and 
 *               backgroundImageAlpha attributes (DG);
 * 21-Feb-2002 : Added static fields for INFO, COPYRIGHT, LICENCE, CONTRIBUTORS
 *               and LIBRARIES.  These can be used to display information about
 *               JFreeChart (DG);
 * 06-Mar-2002 : Moved constants to JFreeChartConstants interface (DG);
 * 18-Apr-2002 : PieDataset is no longer sorted (oldman);
 * 23-Apr-2002 : Moved dataset to the Plot class (DG);
 * 13-Jun-2002 : Added an extra draw() method (DG);
 * 25-Jun-2002 : Implemented the Drawable interface and removed redundant 
 *               imports (DG);
 * 26-Jun-2002 : Added another createBufferedImage() method (DG);
 * 18-Sep-2002 : Fixed issues reported by Checkstyle (DG);
 * 23-Sep-2002 : Added new contributor (DG);
 * 28-Oct-2002 : Created main title and subtitle list to replace existing title
 *               list (DG);
 * 08-Jan-2003 : Added contributor (DG);
 * 17-Jan-2003 : Added new constructor (DG);
 * 22-Jan-2003 : Added ChartColor class by Cameron Riley, and background image 
 *               alignment code by Christian W. Zuckschwerdt (DG);
 * 11-Feb-2003 : Added flag to allow suppression of chart change events, based 
 *               on a suggestion by Klaus Rheinwald (DG);
 * 04-Mar-2003 : Added small fix for suppressed chart change events (see bug id
 *               690865) (DG);
 * 10-Mar-2003 : Added Benoit Xhenseval to contributors (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 15-Jul-2003 : Added an optional border for the chart (DG);
 * 11-Sep-2003 : Took care of listeners while cloning (NB);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 22-Sep-2003 : Added nullpointer checks.
 * 25-Sep-2003 : Added nullpointer checks too (NB).
 * 03-Dec-2003 : Legends are now registered by this class instead of using the 
 *               old constructor way (TM);
 * 03-Dec-2003 : Added anchorPoint to draw() method (DG);
 * 08-Jan-2004 : Reworked title code, introducing line wrapping (DG);
 * 09-Feb-2004 : Created additional createBufferedImage() method (DG);
 * 05-Apr-2004 : Added new createBufferedImage() method (DG);
 * 27-May-2004 : Moved constants from JFreeChartConstants.java back to this 
 *               class (DG);
 * 25-Nov-2004 : Updates for changes to Title class (DG);
 * 06-Jan-2005 : Change lookup for default background color (DG);
 * 31-Jan-2005 : Added Don Elliott to contributors (DG);
 * 02-Feb-2005 : Added clearSubtitles() method (DG);
 * 03-Feb-2005 : Added Mofeed Shahin to contributors (DG);
 * 08-Feb-2005 : Updated for RectangleConstraint changes (DG);
 * 28-Mar-2005 : Renamed Legend --&gt; OldLegend (DG);
 * 12-Apr-2005 : Added methods to access legend(s) in subtitle list (DG);
 * 13-Apr-2005 : Added removeLegend() and removeSubtitle() methods (DG);
 * 20-Apr-2005 : Modified to collect chart entities from titles and 
 *               subtitles (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 06-Jun-2005 : Added addLegend() method and padding attribute, fixed equals() 
 *               method (DG);
 * 24-Nov-2005 : Removed OldLegend and related code - don't want to support
 *               this in 1.0.0 final (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 27-Jan-2006 : Updated version number (DG);
 * 07-Dec-2006 : Added some missing credits (DG);
 * 17-Jan-2007 : Added Darren Jung to contributor list (DG);
 * 05-Mar-2007 : Added Sergei Ivanov to the contributor list (DG);
 * 16-Mar-2007 : Modified initial legend border (DG);
 * 22-Mar-2007 : New methods for text anti-aliasing (DG);
 * 16-May-2007 : Fixed argument check in getSubtitle(), copy list in 
 *               get/setSubtitles(), and added new addSubtitle(int, Title) 
 *               method (DG);
 * 05-Jun-2007 : Add change listener to default legend (DG);
 * 04-Dec-2007 : In createBufferedImage() methods, make the default image type
 *               BufferedImage.TYPE_INT_ARGB (thanks to Klaus Rheinwald) (DG);
 * 05-Dec-2007 : Fixed bug 1749124 (not registering as listener with
 *               TextTitle) (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Image</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>RenderingHints</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>image</name>.<name>BufferedImage</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>net</name>.<name>URL</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>ImageIcon</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>UIManager</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>event</name>.<name>EventListenerList</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>JCommon</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name>.<name>BlockParams</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name>.<name>EntityBlockResult</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name>.<name>LengthConstraintType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name>.<name>LineBorder</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>block</name>.<name>RectangleConstraint</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartProgressEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartProgressListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>TitleChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>TitleChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>LegendTitle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>TextTitle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>Title</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Align</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Drawable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>HorizontalAlignment</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Size2D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>VerticalAlignment</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>about</name>.<name>Contributor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>about</name>.<name>Licences</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>about</name>.<name>ProjectInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A chart class implemented using the Java 2D APIs.  The current version
 * supports bar charts, line charts, pie charts and xy plots (including time
 * series data).
 * &lt;P&gt;
 * JFreeChart coordinates several objects to achieve its aim of being able to
 * draw a chart on a Java 2D graphics device: a list of {@link Title} objects
 * (which often includes the chart's legend), a {@link Plot} and a 
 * {@link org.jfree.data.general.Dataset} (the plot in turn manages a 
 * domain axis and a range axis).
 * &lt;P&gt;
 * You should use a {@link ChartPanel} to display a chart in a GUI.
 * &lt;P&gt;
 * The {@link ChartFactory} class contains static methods for creating 
 * 'ready-made' charts.
 *
 * @see ChartPanel
 * @see ChartFactory
 * @see Title
 * @see Plot
 */</comment>
<class><specifier>public</specifier> class <name>JFreeChart</name> <super><implements>implements <name>Drawable</name>,
                                   <name>TitleChangeListener</name>,
                                   <name>PlotChangeListener</name>,
                                   <name>Serializable</name>,
                                   <name>Cloneable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>    
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3470703747817429120L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Information about the project. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ProjectInfo</name></type> <name>INFO</name> =<init> <expr>new <call><name>JFreeChartInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default font for titles. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_TITLE_FONT</name> 
            =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>18</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default background color. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_BACKGROUND_PAINT</name> 
            =<init> <expr><call><name><name>UIManager</name>.<name>getColor</name></name><argument_list>(<argument><expr>"Panel.background"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default background image. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Image</name></type> <name>DEFAULT_BACKGROUND_IMAGE</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default background image alignment. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BACKGROUND_IMAGE_ALIGNMENT</name> =<init> <expr><name><name>Align</name>.<name>FIT</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default background image alpha. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_BACKGROUND_IMAGE_ALPHA</name> =<init> <expr>0.5f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Rendering hints that will be used for chart drawing.  This should never
     * be &lt;code&gt;null&lt;/code&gt;. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>RenderingHints</name></type> <name>renderingHints</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the chart border is drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>borderVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the chart border (if visible). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>borderStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the chart border (if visible). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>borderPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The padding between the chart border and the chart drawing area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>padding</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The chart title (optional). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextTitle</name></type> <name>title</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The chart subtitles (zero, one or many).  This field should never be
     * &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>subtitles</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Draws the visual representation of the data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Plot</name></type> <name>plot</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Paint used to draw the background of the chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>backgroundPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** An optional background image for the chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Image</name></type> <name>backgroundImage</name></decl>;</decl_stmt>  <comment type="line">// todo: not serialized yet</comment>

    <comment type="javadoc">/** The alignment for the background image. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>backgroundImageAlignment</name> =<init> <expr><name><name>Align</name>.<name>FIT</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The alpha transparency for the background image. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>backgroundImageAlpha</name> =<init> <expr>0.5f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for registered change listeners. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>EventListenerList</name></type> <name>changeListeners</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for registered progress listeners. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>EventListenerList</name></type> <name>progressListeners</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that can be used to enable/disable notification of chart change 
     * events. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>notify</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new chart based on the supplied plot.  The chart will have
     * a legend added automatically, but no title (although you can easily add
     * one later).  
     * &lt;br&gt;&lt;br&gt;
     * Note that the  {@link ChartFactory} class contains a range 
     * of static methods that will return ready-made charts, and often this
     * is a more convenient way to create charts than using this constructor.
     *
     * @param plot  the plot (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>JFreeChart</name><parameter_list>(<param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new chart with the given title and plot.  A default font 
     * (@link DEFAULT_TITLE_FONT) is used for the title, and the chart will 
     * have a legend added automatically.  
     * &lt;br&gt;&lt;br&gt;
     * Note that the  {@link ChartFactory} class contains a range 
     * of static methods that will return ready-made charts, and often this
     * is a more convenient way to create charts than using this constructor.
     *
     * @param title  the chart title (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param plot  the plot (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>JFreeChart</name><parameter_list>(<param><decl><type><name>String</name></type> <name>title</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name><name>JFreeChart</name>.<name>DEFAULT_TITLE_FONT</name></name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new chart with the given title and plot.  The 
     * &lt;code&gt;createLegend&lt;/code&gt; argument specifies whether or not a legend
     * should be added to the chart.  
     * &lt;br&gt;&lt;br&gt;
     * Note that the  {@link ChartFactory} class contains a range 
     * of static methods that will return ready-made charts, and often this
     * is a more convenient way to create charts than using this constructor.
     *
     * @param title  the chart title (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param titleFont  the font for displaying the chart title 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param plot  controller of the visual representation of the data 
     *              (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param createLegend  a flag indicating whether or not a legend should   
     *                      be created for the chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>JFreeChart</name><parameter_list>(<param><decl><type><name>String</name></type> <name>title</name></decl></param>, <param><decl><type><name>Font</name></type> <name>titleFont</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, 
                      <param><decl><type><name>boolean</name></type> <name>createLegend</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"Null 'plot' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// create storage for listeners...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>progressListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>changeListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>notify</name></name> = true</expr>;</expr_stmt>  <comment type="line">// default is to notify listeners when the </comment>
                             <comment type="line">// chart changes</comment>

        <expr_stmt><expr><name><name>this</name>.<name>renderingHints</name></name> = new <call><name>RenderingHints</name><argument_list>(
                <argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, 
                <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>borderVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>borderStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>borderPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name><name>RectangleInsets</name>.<name>ZERO_INSETS</name></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>plot</name></name> = <name>plot</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>plot</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>subtitles</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create a legend, if requested...</comment>
        <if>if <condition>(<expr><name>createLegend</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>LegendTitle</name></type> <name>legend</name> =<init> <expr>new <call><name>LegendTitle</name><argument_list>(<argument><expr><name><name>this</name>.<name>plot</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>legend</name>.<name>setMargin</name></name><argument_list>(<argument><expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>1.0</expr></argument>, <argument><expr>1.0</expr></argument>, <argument><expr>1.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>legend</name>.<name>setFrame</name></name><argument_list>(<argument><expr>new <call><name>LineBorder</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>legend</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>legend</name>.<name>setPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>subtitles</name>.<name>add</name></name><argument_list>(<argument><expr><name>legend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>legend</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// add the chart title, if one has been specified...</comment>
        <if>if <condition>(<expr><name>title</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>titleFont</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>titleFont</name> = <name>DEFAULT_TITLE_FONT</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>this</name>.<name>title</name></name> = new <call><name>TextTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>titleFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>title</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <name>DEFAULT_BACKGROUND_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>backgroundImage</name></name> = <name>DEFAULT_BACKGROUND_IMAGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundImageAlignment</name></name> = <name>DEFAULT_BACKGROUND_IMAGE_ALIGNMENT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundImageAlpha</name></name> = <name>DEFAULT_BACKGROUND_IMAGE_ALPHA</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the collection of rendering hints for the chart.
     *
     * @return The rendering hints for the chart (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRenderingHints(RenderingHints)
     */</comment>
    <function><type><specifier>public</specifier> <name>RenderingHints</name></type> <name>getRenderingHints</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderingHints</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the rendering hints for the chart.  These will be added (using the 
     * Graphics2D.addRenderingHints() method) near the start of the 
     * JFreeChart.draw() method.
     *
     * @param renderingHints  the rendering hints (&lt;code&gt;null&lt;/code&gt; not 
     *                        permitted).
     *                        
     * @see #getRenderingHints()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderingHints</name><parameter_list>(<param><decl><type><name>RenderingHints</name></type> <name>renderingHints</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>renderingHints</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"RenderingHints given are null"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>renderingHints</name></name> = <name>renderingHints</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not a border is drawn around the
     * outside of the chart.
     *
     * @return A boolean.
     * 
     * @see #setBorderVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isBorderVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>borderVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not a border is drawn around the 
     * outside of the chart.
     *
     * @param visible  the flag.
     * 
     * @see #isBorderVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBorderVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>borderVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw the chart border (if visible).
     *
     * @return The border stroke.
     * 
     * @see #setBorderStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getBorderStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>borderStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw the chart border (if visible).
     *
     * @param stroke  the stroke.
     * 
     * @see #getBorderStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBorderStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>borderStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the chart border (if visible).
     *
     * @return The border paint.
     * 
     * @see #setBorderPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBorderPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>borderPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the chart border (if visible).
     *
     * @param paint  the paint.
     * 
     * @see #getBorderPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBorderPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>borderPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the padding between the chart border and the chart drawing area.
     * 
     * @return The padding (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPadding(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>padding</name></name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Sets the padding between the chart border and the chart drawing area,
     * and sends a {@link ChartChangeEvent} to all registered listeners.
     * 
     * @param padding  the padding (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPadding()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPadding</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>padding</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>padding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'padding' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name>padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>ChartChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the main chart title.  Very often a chart will have just one
     * title, so we make this case simple by providing accessor methods for
     * the main title.  However, multiple titles are supported - see the
     * {@link #addSubtitle(Title)} method.
     *
     * @return The chart title (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTitle(TextTitle)
     */</comment>
    <function><type><specifier>public</specifier> <name>TextTitle</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>title</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the main title for the chart and sends a {@link ChartChangeEvent} 
     * to all registered listeners.  If you do not want a title for the 
     * chart, set it to &lt;code&gt;null&lt;/code&gt;.  If you want more than one title on
     * a chart, use the {@link #addSubtitle(Title)} method.
     *
     * @param title  the title (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getTitle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<param><decl><type><name>TextTitle</name></type> <name>title</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>title</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>title</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>title</name></name> = <name>title</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>title</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>title</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the chart title and sends a {@link ChartChangeEvent} to all 
     * registered listeners.  This is a convenience method that ends up calling 
     * the {@link #setTitle(TextTitle)} method.  If there is an existing title,
     * its text is updated, otherwise a new title using the default font is 
     * added to the chart.  If &lt;code&gt;text&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; the chart
     * title is set to &lt;code&gt;null&lt;/code&gt;.
     *
     * @param text  the title text (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getTitle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>title</name></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr>new <call><name>TextTitle</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>JFreeChart</name>.<name>DEFAULT_TITLE_FONT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>title</name>.<name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr>(<name>TextTitle</name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a legend to the plot and sends a {@link ChartChangeEvent} to all
     * registered listeners.
     * 
     * @param legend  the legend (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeLegend()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addLegend</name><parameter_list>(<param><decl><type><name>LegendTitle</name></type> <name>legend</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addSubtitle</name><argument_list>(<argument><expr><name>legend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the legend for the chart, if there is one.  Note that a chart
     * can have more than one legend - this method returns the first.
     * 
     * @return The legend (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getLegend(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendTitle</name></type> <name>getLegend</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getLegend</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the nth legend for a chart, or &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param index  the legend index (zero-based).
     * 
     * @return The legend (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #addLegend(LegendTitle)
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendTitle</name></type> <name>getLegend</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>seen</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subtitles</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Title</name></type> <name>subtitle</name> =<init> <expr>(<name>Title</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>subtitle</name> <name>instanceof</name> <name>LegendTitle</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>seen</name> == <name>index</name></expr>)</condition><then> <block>{
                    <return>return <expr>(<name>LegendTitle</name>) <name>subtitle</name></expr>;</return>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>seen</name>++</expr>;</expr_stmt>   
                }</block></else></if>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>null</name></expr>;</return>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes the first legend in the chart and sends a 
     * {@link ChartChangeEvent} to all registered listeners.
     * 
     * @see #getLegend()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeLegend</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>removeSubtitle</name><argument_list>(<argument><expr><call><name>getLegend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the list of subtitles for the chart.
     *
     * @return The subtitle list (possibly empty, but never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSubtitles(List)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getSubtitles</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><name><name>this</name>.<name>subtitles</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the title list for the chart (completely replaces any existing 
     * titles) and sends a {@link ChartChangeEvent} to all registered 
     * listeners.
     *
     * @param subtitles  the new list of subtitles (&lt;code&gt;null&lt;/code&gt; not 
     *                   permitted).
     *                   
     * @see #getSubtitles()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubtitles</name><parameter_list>(<param><decl><type><name>List</name></type> <name>subtitles</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>subtitles</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"Null 'subtitles' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name>setNotify</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearSubtitles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>subtitles</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Title</name></type> <name>t</name> =<init> <expr>(<name>Title</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addSubtitle</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>setNotify</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// this fires a ChartChangeEvent</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of titles for the chart.
     *
     * @return The number of titles for the chart.
     * 
     * @see #getSubtitles()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSubtitleCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>subtitles</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a chart subtitle.
     *
     * @param index  the index of the chart subtitle (zero based).
     *
     * @return A chart subtitle.
     * 
     * @see #addSubtitle(Title)
     */</comment>
    <function><type><specifier>public</specifier> <name>Title</name></type> <name>getSubtitle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>index</name> &lt; 0) || (<name>index</name> &gt;= <call><name>getSubtitleCount</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index out of range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr>(<name>Title</name>) <call><name><name>this</name>.<name>subtitles</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a chart subtitle, and notifies registered listeners that the chart 
     * has been modified.
     *
     * @param subtitle  the subtitle (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSubtitle(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtitle</name><parameter_list>(<param><decl><type><name>Title</name></type> <name>subtitle</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>subtitle</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'subtitle' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>subtitles</name>.<name>add</name></name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subtitle</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a subtitle at a particular position in the subtitle list, and sends
     * a {@link ChartChangeEvent} to all registered listeners.
     * 
     * @param index  the index (in the range 0 to {@link #getSubtitleCount()}).
     * @param subtitle  the subtitle to add (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtitle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Title</name></type> <name>subtitle</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt; <call><name>getSubtitleCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'index' argument is out of range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>subtitle</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'subtitle' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>subtitles</name>.<name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subtitle</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all subtitles from the chart and sends a {@link ChartChangeEvent}
     * to all registered listeners.
     * 
     * @see #addSubtitle(Title)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearSubtitles</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subtitles</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Title</name></type> <name>t</name> =<init> <expr>(<name>Title</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>t</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>this</name>.<name>subtitles</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes the specified subtitle and sends a {@link ChartChangeEvent} to
     * all registered listeners.
     * 
     * @param title  the title.
     * 
     * @see #addSubtitle(Title)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeSubtitle</name><parameter_list>(<param><decl><type><name>Title</name></type> <name>title</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>subtitles</name>.<name>remove</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the plot for the chart.  The plot is a class responsible for
     * coordinating the visual representation of the data, including the axes
     * (if any).
     *
     * @return The plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>Plot</name></type> <name>getPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the plot cast as a {@link CategoryPlot}.
     * &lt;p&gt;
     * NOTE: if the plot is not an instance of {@link CategoryPlot}, then a
     * &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
     *
     * @return The plot.
     * 
     * @see #getPlot()
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryPlot</name></type> <name>getCategoryPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>CategoryPlot</name>) <name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the plot cast as an {@link XYPlot}.
     * &lt;p&gt;
     * NOTE: if the plot is not an instance of {@link XYPlot}, then a
     * &lt;code&gt;ClassCastException&lt;/code&gt; is thrown.
     *
     * @return The plot.
     * 
     * @see #getPlot()
     */</comment>
    <function><type><specifier>public</specifier> <name>XYPlot</name></type> <name>getXYPlot</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>XYPlot</name>) <name><name>this</name>.<name>plot</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that indicates whether or not anti-aliasing is used when
     * the chart is drawn.
     *
     * @return The flag.
     * 
     * @see #setAntiAlias(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAntiAlias</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>val</name> =<init> <expr><call><name><name>this</name>.<name>renderingHints</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name>.<name>equals</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that indicates whether or not anti-aliasing is used when the
     * chart is drawn.
     * &lt;P&gt;
     * Anti-aliasing usually improves the appearance of charts, but is slower.
     *
     * @param flag  the new value of the flag.
     * 
     * @see #getAntiAlias()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAntiAlias</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Object</name></type> <name>val</name> =<init> <expr><call><name><name>this</name>.<name>renderingHints</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>val</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>val</name> = <name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_DEFAULT</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>flag</name> &amp;&amp; <call><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_OFF</name>.<name>equals</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> 
            || <name>flag</name> &amp;&amp; <call><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name>.<name>equals</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// no change, do nothing</comment>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderingHints</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, 
                                    <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderingHints</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, 
                                    <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the current value stored in the rendering hints table for
     * {@link RenderingHints#KEY_TEXT_ANTIALIASING}.
     * 
     * @return The hint value (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.5
     * 
     * @see #setTextAntiAlias(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>getTextAntiAlias</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>renderingHints</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_TEXT_ANTIALIASING</name></name></expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the value in the rendering hints table for 
     * {@link RenderingHints#KEY_TEXT_ANTIALIASING} to either
     * {@link RenderingHints#VALUE_TEXT_ANTIALIAS_ON} or
     * {@link RenderingHints#VALUE_TEXT_ANTIALIAS_OFF}, then sends a 
     * {@link ChartChangeEvent} to all registered listeners.
     * 
     * @param flag  the new value of the flag.
     * 
     * @since 1.0.5
     * 
     * @see #getTextAntiAlias()
     * @see #setTextAntiAlias(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextAntiAlias</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setTextAntiAlias</name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>VALUE_TEXT_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>setTextAntiAlias</name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>VALUE_TEXT_ANTIALIAS_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value in the rendering hints table for 
     * {@link RenderingHints#KEY_TEXT_ANTIALIASING} and sends a 
     * {@link ChartChangeEvent} to all registered listeners.
     * 
     * @param val  the new value (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @since 1.0.5
     * 
     * @see #getTextAntiAlias()
     * @see #setTextAntiAlias(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTextAntiAlias</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>renderingHints</name>.<name>put</name></name><argument_list>(<argument><expr><name><name>RenderingHints</name>.<name>KEY_TEXT_ANTIALIASING</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>ChartChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used for the chart background.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBackgroundPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBackgroundPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>backgroundPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill the chart background and sends a 
     * {@link ChartChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getBackgroundPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>backgroundPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the background image for the chart, or &lt;code&gt;null&lt;/code&gt; if 
     * there is no image.
     *
     * @return The image (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBackgroundImage(Image)
     */</comment>
    <function><type><specifier>public</specifier> <name>Image</name></type> <name>getBackgroundImage</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>backgroundImage</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the background image for the chart and sends a 
     * {@link ChartChangeEvent} to all registered listeners.
     *
     * @param image  the image (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getBackgroundImage()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundImage</name><parameter_list>(<param><decl><type><name>Image</name></type> <name>image</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImage</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>backgroundImage</name>.<name>equals</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>backgroundImage</name></name> = <name>image</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name>image</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>backgroundImage</name></name> = <name>image</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the background image alignment. Alignment constants are defined 
     * in the &lt;code&gt;org.jfree.ui.Align&lt;/code&gt; class in the JCommon class 
     * library.
     *
     * @return The alignment.
     * 
     * @see #setBackgroundImageAlignment(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBackgroundImageAlignment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>backgroundImageAlignment</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the background alignment.  Alignment options are defined by the 
     * {@link org.jfree.ui.Align} class.
     *
     * @param alignment  the alignment.
     * 
     * @see #getBackgroundImageAlignment()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundImageAlignment</name><parameter_list>(<param><decl><type><name>int</name></type> <name>alignment</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImageAlignment</name></name> != <name>alignment</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>backgroundImageAlignment</name></name> = <name>alignment</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the alpha-transparency for the chart's background image.
     *
     * @return The alpha-transparency.
     * 
     * @see #setBackgroundImageAlpha(float)
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getBackgroundImageAlpha</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>backgroundImageAlpha</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the alpha-transparency for the chart's background image.
     * Registered listeners are notified that the chart has been changed.
     *
     * @param alpha  the alpha value.
     * 
     * @see #getBackgroundImageAlpha()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackgroundImageAlpha</name><parameter_list>(<param><decl><type><name>float</name></type> <name>alpha</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImageAlpha</name></name> != <name>alpha</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>backgroundImageAlpha</name></name> = <name>alpha</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChartChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not change events are sent to 
     * registered listeners.
     *
     * @return A boolean.
     * 
     * @see #setNotify(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isNotify</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>notify</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not listeners receive 
     * {@link ChartChangeEvent} notifications.
     *
     * @param notify  a boolean.
     * 
     * @see #isNotify()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNotify</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>notify</name></name> = <name>notify</name></expr>;</expr_stmt>
        <comment type="line">// if the flag is being set to true, there may be queued up changes...</comment>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>ChartChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the chart on a Java 2D graphics device (such as the screen or a
     * printer).
     * &lt;P&gt;
     * This method is the focus of the entire JFreeChart library.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the chart should be drawn.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the chart on a Java 2D graphics device (such as the screen or a
     * printer).  This method is the focus of the entire JFreeChart library.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the chart should be drawn.
     * @param info  records info about the drawing (null means collect no info).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the chart on a Java 2D graphics device (such as the screen or a
     * printer).
     * &lt;P&gt;
     * This method is the focus of the entire JFreeChart library.
     *
     * @param g2  the graphics device.
     * @param chartArea  the area within which the chart should be drawn.
     * @param anchor  the anchor point (in Java2D space) for the chart 
     *                (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param info  records info about the drawing (null means collect no info).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                     <param><decl><type><name>Rectangle2D</name></type> <name>chartArea</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>, 
                     <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>ChartProgressEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                <argument><expr><name><name>ChartProgressEvent</name>.<name>DRAWING_STARTED</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// record the chart area, if info is requested...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>info</name>.<name>setChartArea</name></name><argument_list>(<argument><expr><name>chartArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// ensure no drawing occurs outside chart area...</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>chartArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>addRenderingHints</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderingHints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the chart background...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>chartArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImage</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>backgroundImageAlpha</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dest</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>backgroundImage</name>.<name>getWidth</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>backgroundImage</name>.<name>getHeight</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Align</name>.<name>align</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>chartArea</name></expr></argument>, <argument><expr><name><name>this</name>.<name>backgroundImageAlignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawImage</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundImage</name></name></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>dest</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>int</name>) <call><name><name>dest</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>dest</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>int</name>) <call><name><name>dest</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>isBorderVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getBorderPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getBorderStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>paint</name> != <name>null</name> &amp;&amp; <name>stroke</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>borderArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                        <argument><expr><call><name><name>chartArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chartArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>chartArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - 1.0</expr></argument>, <argument><expr><call><name><name>chartArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> 
                        - 1.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>borderArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// draw the title and subtitles...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>nonTitleArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>nonTitleArea</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>chartArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>padding</name>.<name>trim</name></name><argument_list>(<argument><expr><name>nonTitleArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>title</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>e</name> =<init> <expr><call><name>drawTitle</name><argument_list>(<argument><expr><name><name>this</name>.<name>title</name></name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>nonTitleArea</name></expr></argument>, 
                    <argument><expr>(<name>entities</name> != <name>null</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>e</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>entities</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subtitles</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Title</name></type> <name>currentTitle</name> =<init> <expr>(<name>Title</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>e</name> =<init> <expr><call><name>drawTitle</name><argument_list>(<argument><expr><name>currentTitle</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>nonTitleArea</name></expr></argument>, 
                    <argument><expr>(<name>entities</name> != <name>null</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>e</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>entities</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></while>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>plotArea</name> =<init> <expr><name>nonTitleArea</name></expr></init></decl>;</decl_stmt>
 
        <comment type="line">// draw the plot (axes and data visualisation)</comment>
        <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>plotInfo</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>plotInfo</name> = <call><name><name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>plotInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>ChartProgressEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                <argument><expr><name><name>ChartProgressEvent</name>.<name>DRAWING_FINISHED</name></name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a rectangle that is aligned to the frame.
     * 
     * @param dimensions  the dimensions for the rectangle.
     * @param frame  the frame to align to.
     * @param hAlign  the horizontal alignment.
     * @param vAlign  the vertical alignment.
     * 
     * @return A rectangle.
     */</comment>
    <function><type><specifier>private</specifier> <name>Rectangle2D</name></type> <name>createAlignedRectangle2D</name><parameter_list>(<param><decl><type><name>Size2D</name></type> <name>dimensions</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>frame</name></decl></param>, <param><decl><type><name>HorizontalAlignment</name></type> <name>hAlign</name></decl></param>, 
            <param><decl><type><name>VerticalAlignment</name></type> <name>vAlign</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hAlign</name> == <name><name>HorizontalAlignment</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>x</name> = <call><name><name>frame</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>hAlign</name> == <name><name>HorizontalAlignment</name>.<name>CENTER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>x</name> = <call><name><name>frame</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call> - (<name><name>dimensions</name>.<name>width</name></name> / 2.0)</expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>hAlign</name> == <name><name>HorizontalAlignment</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>x</name> = <call><name><name>frame</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name><name>dimensions</name>.<name>width</name></name></expr>;</expr_stmt>   
        }</block></then></if></else></if></else></if>
        <if>if <condition>(<expr><name>vAlign</name> == <name><name>VerticalAlignment</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y</name> = <call><name><name>frame</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>vAlign</name> == <name><name>VerticalAlignment</name>.<name>CENTER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y</name> = <call><name><name>frame</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call> - (<name><name>dimensions</name>.<name>height</name></name> / 2.0)</expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>vAlign</name> == <name><name>VerticalAlignment</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y</name> = <call><name><name>frame</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name><name>dimensions</name>.<name>height</name></name></expr>;</expr_stmt>   
        }</block></then></if></else></if></else></if>
        
        <return>return <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>dimensions</name>.<name>width</name></name></expr></argument>, 
                <argument><expr><name><name>dimensions</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a title.  The title should be drawn at the top, bottom, left or 
     * right of the specified area, and the area should be updated to reflect 
     * the amount of space used by the title.
     *
     * @param t  the title (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param area  the chart area, excluding any existing titles 
     *              (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param entities  a flag that controls whether or not an entity 
     *                  collection is returned for the title.
     * 
     * @return An entity collection for the title (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>EntityCollection</name></type> <name>drawTitle</name><parameter_list>(<param><decl><type><name>Title</name></type> <name>t</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                         <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>entities</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>t</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 't' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>area</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'area' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>titleArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>position</name> =<init> <expr><call><name><name>t</name>.<name>getPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ww</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ww</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>hh</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hh</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>RectangleConstraint</name></type> <name>constraint</name> =<init> <expr>new <call><name>RectangleConstraint</name><argument_list>(<argument><expr><name>ww</name></expr></argument>, 
                <argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr><name>hh</name></expr></argument>, 
                <argument><expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>hh</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>LengthConstraintType</name>.<name>RANGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>retValue</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BlockParams</name></type> <name>p</name> =<init> <expr>new <call><name>BlockParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>setGenerateEntities</name></name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>position</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>t</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>titleArea</name> = <call><name>createAlignedRectangle2D</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                    <argument><expr><call><name><name>t</name>.<name>getHorizontalAlignment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>VerticalAlignment</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retValue</name> = <call><name><name>t</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>titleArea</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>area</name>.<name>setRect</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name><name>size</name>.<name>height</name></name></expr></argument>, 
                    <argument><expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call>
                    - <name><name>size</name>.<name>height</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>position</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>t</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>titleArea</name> = <call><name>createAlignedRectangle2D</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                    <argument><expr><call><name><name>t</name>.<name>getHorizontalAlignment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>VerticalAlignment</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retValue</name> = <call><name><name>t</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>titleArea</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>area</name>.<name>setRect</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>size</name>.<name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>position</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>t</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>titleArea</name> = <call><name>createAlignedRectangle2D</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                    <argument><expr><name><name>HorizontalAlignment</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><call><name><name>t</name>.<name>getVerticalAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retValue</name> = <call><name><name>t</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>titleArea</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>area</name>.<name>setRect</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                    - <name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>

        <else>else <if>if <condition>(<expr><name>position</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Size2D</name></type> <name>size</name> =<init> <expr><call><name><name>t</name>.<name>arrange</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>titleArea</name> = <call><name>createAlignedRectangle2D</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                    <argument><expr><name><name>HorizontalAlignment</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><call><name><name>t</name>.<name>getVerticalAlignment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>retValue</name> = <call><name><name>t</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>titleArea</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>area</name>.<name>setRect</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                    - <name><name>size</name>.<name>width</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Unrecognised title position."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if></else></if>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>retValue</name> <name>instanceof</name> <name>EntityBlockResult</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityBlockResult</name></type> <name>ebr</name> =<init> <expr>(<name>EntityBlockResult</name>) <name>retValue</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name><name>ebr</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Creates and returns a buffered image into which the chart has been drawn.
     *
     * @param width  the width.
     * @param height  the height.
     *
     * @return A buffered image.
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createBufferedImage</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>createBufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates and returns a buffered image into which the chart has been drawn.
     *
     * @param width  the width.
     * @param height  the height.
     * @param info  carries back chart state information (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     *
     * @return A buffered image.
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createBufferedImage</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, 
                                             <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>createBufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>BufferedImage</name>.<name>TYPE_INT_ARGB</name></name></expr></argument>,
                <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates and returns a buffered image into which the chart has been drawn.
     *
     * @param width  the width.
     * @param height  the height.
     * @param imageType  the image type.
     * @param info  carries back chart state information (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     *
     * @return A buffered image.
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createBufferedImage</name><parameter_list>(<param><decl><type><name>int</name></type> <name>width</name></decl></param>, <param><decl><type><name>int</name></type> <name>height</name></decl></param>, 
                                             <param><decl><type><name>int</name></type> <name>imageType</name></decl></param>, 
                                             <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> =<init> <expr>new <call><name>BufferedImage</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>imageType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr><call><name><name>image</name>.<name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>image</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates and returns a buffered image into which the chart has been drawn.
     *
     * @param imageWidth  the image width.
     * @param imageHeight  the image height.
     * @param drawWidth  the width for drawing the chart (will be scaled to 
     *                   fit image).
     * @param drawHeight  the height for drawing the chart (will be scaled to 
     *                    fit image).
     * @param info  optional object for collection chart dimension and entity 
     *              information.
     *
     * @return A buffered image.
     */</comment>
    <function><type><specifier>public</specifier> <name>BufferedImage</name></type> <name>createBufferedImage</name><parameter_list>(<param><decl><type><name>int</name></type> <name>imageWidth</name></decl></param>, 
                                             <param><decl><type><name>int</name></type> <name>imageHeight</name></decl></param>,
                                             <param><decl><type><name>double</name></type> <name>drawWidth</name></decl></param>, 
                                             <param><decl><type><name>double</name></type> <name>drawHeight</name></decl></param>, 
                                             <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>BufferedImage</name></type> <name>image</name> =<init> <expr>new <call><name>BufferedImage</name><argument_list>(<argument><expr><name>imageWidth</name></expr></argument>, <argument><expr><name>imageHeight</name></expr></argument>, 
                <argument><expr><name><name>BufferedImage</name>.<name>TYPE_INT_ARGB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr><call><name><name>image</name>.<name>createGraphics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>scaleX</name> =<init> <expr><name>imageWidth</name> / <name>drawWidth</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>scaleY</name> =<init> <expr><name>imageHeight</name> / <name>drawHeight</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AffineTransform</name></type> <name>st</name> =<init> <expr><call><name><name>AffineTransform</name>.<name>getScaleInstance</name></name><argument_list>(<argument><expr><name>scaleX</name></expr></argument>, <argument><expr><name>scaleY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>transform</name></name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>drawWidth</name></expr></argument>, <argument><expr><name>drawHeight</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>image</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'click' on the chart.
     * &lt;P&gt;
     * JFreeChart is not a UI component, so some other object (e.g. ChartPanel)
     * needs to capture the click event and pass it onto the JFreeChart object.
     * If you are not using JFreeChart in a client application, then this
     * method is not required (and hopefully it doesn't get in the way).
     *
     * @param x  x-coordinate of the click (in Java2D space).
     * @param y  y-coordinate of the click (in Java2D space).
     * @param info  contains chart dimension and entity information.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleClick</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>ChartRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// pass the click on to the plot...</comment>
        <comment type="line">// rely on the plot to post a plot change event and redraw the chart...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>handleClick</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call><name><name>info</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Registers an object for notification of changes to the chart.
     *
     * @param listener  the listener (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeChangeListener(ChartChangeListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addChangeListener</name><parameter_list>(<param><decl><type><name>ChartChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listener</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'listener' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>changeListeners</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>ChartChangeListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deregisters an object for notification of changes to the chart.
     *
     * @param listener  the listener (&lt;code&gt;null&lt;/code&gt; not permitted)
     * 
     * @see #addChangeListener(ChartChangeListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeChangeListener</name><parameter_list>(<param><decl><type><name>ChartChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>listener</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'listener' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>changeListeners</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>ChartChangeListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sends a default {@link ChartChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * This method is for convenience only.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>fireChartChanged</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ChartChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>ChartChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sends a {@link ChartChangeEvent} to all registered listeners.
     *
     * @param event  information about the event that triggered the 
     *               notification.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>notifyListeners</name><parameter_list>(<param><decl><type><name>ChartChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>notify</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>listeners</name> =<init> <expr><call><name><name>this</name>.<name>changeListeners</name>.<name>getListenerList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>listeners</name>.<name>length</name></name> - 2</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name> -= 2</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>ChartChangeListener</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                    <expr_stmt><expr>((<name>ChartChangeListener</name>) <name><name>listeners</name><index>[<expr><name>i</name> + 1</expr>]</index></name>).<call><name>chartChanged</name><argument_list>(
                            <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Registers an object for notification of progress events relating to the 
     * chart.
     *
     * @param listener  the object being registered.
     * 
     * @see #removeProgressListener(ChartProgressListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addProgressListener</name><parameter_list>(<param><decl><type><name>ChartProgressListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>progressListeners</name>.<name>add</name></name><argument_list>(<argument><expr><name><name>ChartProgressListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Deregisters an object for notification of changes to the chart.
     *
     * @param listener  the object being deregistered.
     * 
     * @see #addProgressListener(ChartProgressListener)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeProgressListener</name><parameter_list>(<param><decl><type><name>ChartProgressListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>progressListeners</name>.<name>remove</name></name><argument_list>(<argument><expr><name><name>ChartProgressListener</name>.<name><name/></name></name>class</expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sends a {@link ChartProgressEvent} to all registered listeners.
     *
     * @param event  information about the event that triggered the 
     *               notification.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>notifyListeners</name><parameter_list>(<param><decl><type><name>ChartProgressEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>listeners</name> =<init> <expr><call><name><name>this</name>.<name>progressListeners</name>.<name>getListenerList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>listeners</name>.<name>length</name></name> - 2</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name> -= 2</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>listeners</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>ChartProgressListener</name>.<name><name/></name></name>class</expr>)</condition><then> <block>{
                <expr_stmt><expr>((<name>ChartProgressListener</name>) <name><name>listeners</name><index>[<expr><name>i</name> + 1</expr>]</index></name>).<call><name>chartProgress</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification that a chart title has changed, and passes this
     * on to registered listeners.
     *
     * @param event  information about the chart title change.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>titleChanged</name><parameter_list>(<param><decl><type><name>TitleChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>event</name>.<name>setChart</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Receives notification that the plot has changed, and passes this on to
     * registered listeners.
     *
     * @param event  information about the plot change.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>plotChanged</name><parameter_list>(<param><decl><type><name>PlotChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>event</name>.<name>setChart</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this chart for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>JFreeChart</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>that</name> =<init> <expr>(<name>JFreeChart</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>renderingHints</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>renderingHints</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>borderVisible</name></name> != <name><name>that</name>.<name>borderVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>borderStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>borderStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>borderPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>borderPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>padding</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>padding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>title</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>title</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subtitles</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>subtitles</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>plot</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>plot</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>backgroundPaint</name></name></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundImage</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundImage</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImageAlignment</name></name> != <name><name>that</name>.<name>backgroundImageAlignment</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundImageAlpha</name></name> != <name><name>that</name>.<name>backgroundImageAlpha</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>notify</name></name> != <name><name>that</name>.<name>notify</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>borderStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>borderPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>borderStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>borderPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>progressListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>changeListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderingHints</name></name> = new <call><name>RenderingHints</name><argument_list>(
                <argument><expr><name><name>RenderingHints</name>.<name>KEY_ANTIALIASING</name></name></expr></argument>, 
                <argument><expr><name><name>RenderingHints</name>.<name>VALUE_ANTIALIAS_ON</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// register as a listener with sub-components...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>title</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>title</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>getSubtitleCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>getSubtitle</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>addChangeListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Prints information about JFreeChart to standard output.
     *
     * @param args  no arguments are honored.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<param><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>JFreeChart</name>.<name>INFO</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clones the object, and takes care of listeners.
     * Note: caller shall register its own listeners on cloned graph.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if the chart is not cloneable.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>JFreeChart</name></type> <name>chart</name> =<init> <expr>(<name>JFreeChart</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>chart</name>.<name>renderingHints</name></name> = (<name>RenderingHints</name>) <call><name><name>this</name>.<name>renderingHints</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// private boolean borderVisible;</comment>
        <comment type="line">// private transient Stroke borderStroke;</comment>
        <comment type="line">// private transient Paint borderPaint;</comment>

        <if>if <condition>(<expr><name><name>this</name>.<name>title</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>chart</name>.<name>title</name></name> = (<name>TextTitle</name>) <call><name><name>this</name>.<name>title</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>chart</name>.<name>title</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>chart</name>.<name>subtitles</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>getSubtitleCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Title</name></type> <name>subtitle</name> =<init> <expr>(<name>Title</name>) <call><name>getSubtitle</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>clone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>chart</name>.<name>subtitles</name>.<name>add</name></name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subtitle</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>chart</name>.<name>plot</name></name> = (<name>Plot</name>) <call><name><name>this</name>.<name>plot</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>chart</name>.<name>plot</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>chart</name>.<name>progressListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>chart</name>.<name>changeListeners</name></name> = new <call><name>EventListenerList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>chart</name></expr>;</return>
    }</block></function>

}</block></class>

<comment type="javadoc">/**
 * Information about the JFreeChart project.  One instance of this class is 
 * assigned to &lt;code&gt;JFreeChart.INFO&lt;code&gt;.
 */</comment>
<class>class <name>JFreeChartInfo</name> <super><extends>extends <name>ProjectInfo</name></extends></super> <block>{

    <comment type="javadoc">/** 
     * Default constructor. 
     */</comment>
    <constructor><specifier>public</specifier> <name>JFreeChartInfo</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// get a locale-specific resource bundle...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>baseResourceClass</name> 
                =<init> <expr>"org.jfree.chart.resources.JFreeChartResources"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResourceBundle</name></type> <name>resources</name> =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr><name>baseResourceClass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setName</name><argument_list>(<argument><expr><call><name><name>resources</name>.<name>getString</name></name><argument_list>(<argument><expr>"project.name"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setVersion</name><argument_list>(<argument><expr><call><name><name>resources</name>.<name>getString</name></name><argument_list>(<argument><expr>"project.version"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setInfo</name><argument_list>(<argument><expr><call><name><name>resources</name>.<name>getString</name></name><argument_list>(<argument><expr>"project.info"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCopyright</name><argument_list>(<argument><expr><call><name><name>resources</name>.<name>getString</name></name><argument_list>(<argument><expr>"project.copyright"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLogo</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// load only when required</comment>
        <expr_stmt><expr><call><name>setLicenceName</name><argument_list>(<argument><expr>"LGPL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLicenceText</name><argument_list>(<argument><expr><call><name><name>Licences</name>.<name>getInstance</name></name><argument_list>()</argument_list></call>.<call><name>getLGPL</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContributors</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(
            <argument><expr>new <name><name>Contributor</name><index>[]</index></name><block>{
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Eric Alexander"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Richard Atkinson"</expr></argument>, 
                        <argument><expr>"richard_c_atkinson@ntlworld.com"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Basten"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Berry"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Chris Boek"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Zoheb Borbora"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Anthony Boulestreau"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jeremy Bowman"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Nicolas Brodu"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jody Brownell"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Browning"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Soren Caspersen"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Chuanhao Chiu"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Brian Cole"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Pascal Collet"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Martin Cordova"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Paolo Cova"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Mike Duffy"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Don Elliott"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Forslund"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jonathan Gabbai"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Gilbert"</expr></argument>, 
                        <argument><expr>"david.gilbert@object-refinery.com"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Serge V. Grachov"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Daniel Gredler"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Hans-Jurgen Greiner"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Joao Guilherme Del Valle"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Aiman Han"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Cameron Hayne"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jon Iles"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Wolfgang Irler"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Sergei Ivanov"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Adriaan Joubert"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Darren Jung"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Xun Kang"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Bill Kelemen"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Norbert Kiesel"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Gideon Krause"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Pierre-Marie Le Biot"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Arnaud Lelievre"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Wolfgang Lenhard"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David Li"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Yan Liu"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Tin Luu"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Craig MacFarlane"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Achilleus Mantzios"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Thomas Meier"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jim Moore"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jonathan Nash"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Barak Naveh"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"David M. O'Donnell"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Krzysztof Paz"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Tomer Peretz"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Xavier Poinsard"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Andrzej Porebski"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Viktor Rajewski"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Eduardo Ramalho"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Michael Rauch"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Cameron Riley"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Klaus Rheinwald"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Dan Rivett"</expr></argument>, <argument><expr>"d.rivett@ukonline.co.uk"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Scott Sams"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Michel Santos"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Thierry Saura"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Andreas Schneider"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jean-Luc SCHWAB"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Bryan Scott"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Tobias Selb"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Mofeed Shahin"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Pady Srinivasan"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Greg Steckman"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Roger Studner"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Irv Thomae"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Eric Thomas"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Rich Unger"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Daniel van Enckevort"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Laurence Vanhelsuwe"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Sylvain Vieujot"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Jelai Wang"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Mark Watson"</expr></argument>, <argument><expr>"www.markwatson.com"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Alex Weber"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Matthew Wright"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Benoit Xhenseval"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Christian W. Zuckschwerdt"</expr></argument>, 
                        <argument><expr>"Christian.Zuckschwerdt@Informatik.Uni-Oldenburg.de"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Hari"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
                <expr>new <call><name>Contributor</name><argument_list>(<argument><expr>"Sam (oldman)"</expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>,
            }</block></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addLibrary</name><argument_list>(<argument><expr><name><name>JCommon</name>.<name>INFO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the JFreeChart logo (a picture of a gorilla).
     *
     * @return The JFreeChart logo.
     */</comment>
    <function><type><specifier>public</specifier> <name>Image</name></type> <name>getLogo</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Image</name></type> <name>logo</name> =<init> <expr><call><name><name>super</name>.<name>getLogo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>logo</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>URL</name></type> <name>imageURL</name> =<init> <expr><call><name><name>this</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResource</name><argument_list>(
                    <argument><expr>"org/jfree/chart/gorilla.jpg"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>imageURL</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ImageIcon</name></type> <name>temp</name> =<init> <expr>new <call><name>ImageIcon</name><argument_list>(<argument><expr><name>imageURL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
                    <comment type="line">// use ImageIcon because it waits for the image to load...</comment>
                <expr_stmt><expr><name>logo</name> = <call><name><name>temp</name>.<name>getImage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setLogo</name><argument_list>(<argument><expr><name>logo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>logo</name></expr>;</return>

    }</block></function>

}</block></class>
</unit>
