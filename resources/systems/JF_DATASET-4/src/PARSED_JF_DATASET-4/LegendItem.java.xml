<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\LegendItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * LegendItem.java
 * ---------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Andrzej Porebski;
 *                   David Li;
 *                   Wolfgang Irler;
 *                   Luke Quinane;
 *
 * Changes (from 2-Oct-2002)
 * -------------------------
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 17-Jan-2003 : Dropped outlineStroke attribute (DG);
 * 08-Oct-2003 : Applied patch for displaying series line style, contributed by
 *               Luke Quinane (DG);
 * 21-Jan-2004 : Added the shapeFilled flag (DG);
 * 04-Jun-2004 : Added equals() method, implemented Serializable (DG);
 * 25-Nov-2004 : Changes required by new LegendTitle implementation (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 * 20-Apr-2005 : Added tooltip and URL text (DG);
 * 28-Nov-2005 : Separated constructors for AttributedString labels (DG);
 * 10-Dec-2005 : Fixed serialization bug (1377239) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Jul-2006 : Added dataset and series index fields (DG);
 * 13-Dec-2006 : Added fillPaintTransformer attribute (DG);
 * 18-May-2007 : Added dataset and seriesKey fields (DG);
 * 03-Aug-2007 : Fixed null pointer exception (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>AttributedString</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>CharacterIterator</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Dataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>StandardGradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>AttributedStringUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A temporary storage object for recording the properties of a legend item, 
 * without any consideration for layout issues. 
 */</comment>
<class><specifier>public</specifier> class <name>LegendItem</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-797214582948827144L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The dataset.
     * 
     * @since 1.0.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Dataset</name></type> <name>dataset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The series key.
     * 
     * @since 1.0.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>seriesKey</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The dataset index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>datasetIndex</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The series index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>series</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>label</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The attributed label (if null, fall back to the regular label). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>AttributedString</name></type> <name>attributedLabel</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The description (not currently used - could be displayed as a tool tip). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>description</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The tool tip text. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>toolTipText</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The url text. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>urlText</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the shape is visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapeVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>shape</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not the shape is filled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapeFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>fillPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A gradient paint transformer. 
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GradientPaintTransformer</name></type> <name>fillPaintTransformer</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not the shape outline is visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapeOutlineVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The outline paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>outlinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The outline stroke. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>outlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the line is visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lineVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>line</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The stroke. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>lineStroke</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The line paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>linePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The shape must be non-null for a LegendItem - if no shape is required,
     * use this.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Shape</name></type> <name>UNUSED_SHAPE</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The stroke must be non-null for a LegendItem - if no stroke is required,
     * use this.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>UNUSED_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a legend item with a filled shape.  The shape is not outlined,
     * and no line is visible.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param fillPaint  the paint used to fill the shape (&lt;code&gt;null&lt;/code&gt;
     *                   not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>, 
                <comment type="block">/* shape visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>, 
                <comment type="block">/* shape filled = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>fillPaint</name></expr></argument>, 
                <comment type="block">/* shape outlined */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <comment type="block">/* line visible */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a legend item with a filled and outlined shape.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param fillPaint  the paint used to fill the shape (&lt;code&gt;null&lt;/code&gt;
     *                   not permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; not 
     *                      permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>, 
                      <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>,
                <comment type="block">/* shape visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>, 
                <comment type="block">/* shape filled = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>fillPaint</name></expr></argument>, 
                <comment type="block">/* shape outlined = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>,
                <comment type="block">/* line visible */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a legend item using a line.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param lineStroke  the line stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param linePaint  the line paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>line</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>lineStroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>linePaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>,
                <comment type="block">/* shape visible = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>,
                <comment type="block">/* shape filled = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>,
                <comment type="block">/* shape outlined = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <comment type="block">/* line visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>lineStroke</name></expr></argument>, <argument><expr><name>linePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new legend item.
     *
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (not currently used, 
     *        &lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shapeVisible  a flag that controls whether or not the shape is 
     *                      displayed.
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shapeFilled  a flag that controls whether or not the shape is 
     *                     filled.
     * @param fillPaint  the fill paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param shapeOutlineVisible  a flag that controls whether or not the 
     *                             shape is outlined.
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param lineVisible  a flag that controls whether or not the line is 
     *                     visible.
     * @param line  the line.
     * @param lineStroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param linePaint  the line paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>,
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>shapeVisible</name></decl></param>, <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>shapeFilled</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>, 
                      <param><decl><type><name>boolean</name></type> <name>shapeOutlineVisible</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>,
                      <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>lineVisible</name></decl></param>, <param><decl><type><name>Shape</name></type> <name>line</name></decl></param>,
                      <param><decl><type><name>Stroke</name></type> <name>lineStroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>linePaint</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>label</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'label' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>fillPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'fillPaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>lineStroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'lineStroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>outlinePaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'outlinePaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>outlineStroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'outlineStroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>attributedLabel</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeVisible</name></name> = <name>shapeVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shape</name></name> = <name>shape</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeFilled</name></name> = <name>shapeFilled</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaint</name></name> = <name>fillPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintTransformer</name></name> = new <call><name>StandardGradientPaintTransformer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeOutlineVisible</name></name> = <name>shapeOutlineVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaint</name></name> = <name>outlinePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStroke</name></name> = <name>outlineStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lineVisible</name></name> = <name>lineVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = <name>line</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lineStroke</name></name> = <name>lineStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>linePaint</name></name> = <name>linePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>toolTipText</name></name> = <name>toolTipText</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>urlText</name></name> = <name>urlText</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a legend item with a filled shape.  The shape is not outlined,
     * and no line is visible.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param fillPaint  the paint used to fill the shape (&lt;code&gt;null&lt;/code&gt;
     *                   not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>AttributedString</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>, 
                <comment type="block">/* shape visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>,
                <comment type="block">/* shape filled = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>fillPaint</name></expr></argument>,
                <comment type="block">/* shape outlined = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <comment type="block">/* line visible = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a legend item with a filled and outlined shape.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param fillPaint  the paint used to fill the shape (&lt;code&gt;null&lt;/code&gt;
     *                   not permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; not 
     *                      permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>AttributedString</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>, 
                      <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>,
                <comment type="block">/* shape visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>,
                <comment type="block">/* shape filled = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>fillPaint</name></expr></argument>,
                <comment type="block">/* shape outlined = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>,
                <comment type="block">/* line visible = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a legend item using a line.
     * 
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param lineStroke  the line stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param linePaint  the line paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>AttributedString</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>, 
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>, 
                      <param><decl><type><name>Shape</name></type> <name>line</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>lineStroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>linePaint</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>,
                <comment type="block">/* shape visible = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name>UNUSED_SHAPE</name></expr></argument>,
                <comment type="block">/* shape filled = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>,
                <comment type="block">/* shape outlined = */</comment> <argument><expr>false</expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>, <argument><expr><name>UNUSED_STROKE</name></expr></argument>,
                <comment type="block">/* line visible = */</comment> <argument><expr>true</expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>lineStroke</name></expr></argument>, <argument><expr><name>linePaint</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new legend item.
     *
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param description  the description (not currently used, 
     *        &lt;code&gt;null&lt;/code&gt; permitted).
     * @param toolTipText  the tool tip text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlText  the URL text (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shapeVisible  a flag that controls whether or not the shape is 
     *                      displayed.
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param shapeFilled  a flag that controls whether or not the shape is 
     *                     filled.
     * @param fillPaint  the fill paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param shapeOutlineVisible  a flag that controls whether or not the 
     *                             shape is outlined.
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param lineVisible  a flag that controls whether or not the line is 
     *                     visible.
     * @param line  the line.
     * @param lineStroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param linePaint  the line paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>LegendItem</name><parameter_list>(<param><decl><type><name>AttributedString</name></type> <name>label</name></decl></param>, <param><decl><type><name>String</name></type> <name>description</name></decl></param>,
                      <param><decl><type><name>String</name></type> <name>toolTipText</name></decl></param>, <param><decl><type><name>String</name></type> <name>urlText</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>shapeVisible</name></decl></param>, <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>shapeFilled</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>fillPaint</name></decl></param>, 
                      <param><decl><type><name>boolean</name></type> <name>shapeOutlineVisible</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>,
                      <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>,
                      <param><decl><type><name>boolean</name></type> <name>lineVisible</name></decl></param>, <param><decl><type><name>Shape</name></type> <name>line</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>lineStroke</name></decl></param>,
                      <param><decl><type><name>Paint</name></type> <name>linePaint</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>label</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'label' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>fillPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'fillPaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>lineStroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'lineStroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>outlinePaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'outlinePaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>outlineStroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"Null 'outlineStroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <call><name>characterIteratorToString</name><argument_list>(<argument><expr><call><name><name>label</name>.<name>getIterator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>attributedLabel</name></name> = <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>description</name></name> = <name>description</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeVisible</name></name> = <name>shapeVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shape</name></name> = <name>shape</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeFilled</name></name> = <name>shapeFilled</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaint</name></name> = <name>fillPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintTransformer</name></name> = new <call><name>StandardGradientPaintTransformer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeOutlineVisible</name></name> = <name>shapeOutlineVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaint</name></name> = <name>outlinePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStroke</name></name> = <name>outlineStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lineVisible</name></name> = <name>lineVisible</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = <name>line</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lineStroke</name></name> = <name>lineStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>linePaint</name></name> = <name>linePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>toolTipText</name></name> = <name>toolTipText</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>urlText</name></name> = <name>urlText</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a string containing the characters from the given iterator.
     * 
     * @param iterator  the iterator (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>characterIteratorToString</name><parameter_list>(<param><decl><type><name>CharacterIterator</name></type> <name>iterator</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>endIndex</name> =<init> <expr><call><name><name>iterator</name>.<name>getEndIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>beginIndex</name> =<init> <expr><call><name><name>iterator</name>.<name>getBeginIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><name>endIndex</name> - <name>beginIndex</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> &lt;= 0</expr>)</condition><then> <block>{
            <return>return <expr>""</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>chars</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> =<init> <expr><call><name><name>iterator</name>.<name>first</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>c</name> != <name><name>CharacterIterator</name>.<name>DONE</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name> = <name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> = <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the dataset.
     * 
     * @return The dataset.
     * 
     * @since 1.0.6
     * 
     * @see #setDatasetIndex(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>Dataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset.
     * 
     * @param dataset  the dataset.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>Dataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the dataset index for this legend item.
     * 
     * @return The dataset index.
     * 
     * @since 1.0.2
     * 
     * @see #setDatasetIndex(int)
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDatasetIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>datasetIndex</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset index for this legend item.
     * 
     * @param index  the index.
     * 
     * @since 1.0.2
     * 
     * @see #getDatasetIndex()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatasetIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>datasetIndex</name></name> = <name>index</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the series key.
     * 
     * @return The series key.
     * 
     * @since 1.0.6
     * 
     * @see #setSeriesKey(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesKey</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the series key.
     * 
     * @param key  the series key.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesKey</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesKey</name></name> = <name>key</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the series index for this legend item.
     * 
     * @return The series index.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>series</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the series index for this legend item.
     * 
     * @param index  the index.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>series</name></name> = <name>index</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label.
     *
     * @return The label (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>label</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the attributed label.
     *
     * @return The attributed label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AttributedString</name></type> <name>getAttributedLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>attributedLabel</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the description for the legend item.
     * 
     * @return The description.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>description</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tool tip text.
     * 
     * @return The tool tip text (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToolTipText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>toolTipText</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the URL text.
     * 
     * @return The URL text (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getURLText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>urlText</name></name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that indicates whether or not the shape is visible.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShapeVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapeVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the shape used to label the series represented by this legend 
     * item.
     *
     * @return The shape (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getShape</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shape</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the shape is filled.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShapeFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapeFilled</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fill paint.
     *
     * @return The fill paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getFillPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the shape outline
     * is visible.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShapeOutlineVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapeOutlineVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the line stroke for the series.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getLineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used for lines.
     * 
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>linePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline paint.
     *
     * @return The outline paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>outlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the outline stroke.
     *
     * @return The outline stroke (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>outlineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that indicates whether or not the line is visible.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLineVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lineVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the line.
     * 
     * @return The line.
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>line</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the transformer used when the fill paint is an instance of 
     * &lt;code&gt;GradientPaint&lt;/code&gt;.
     * 
     * @return The transformer (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.4
     * 
     * @see #setFillPaintTransformer(GradientPaintTransformer)
     */</comment>
    <function><type><specifier>public</specifier> <name>GradientPaintTransformer</name></type> <name>getFillPaintTransformer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillPaintTransformer</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the transformer used when the fill paint is an instance of 
     * &lt;code&gt;GradientPaint&lt;/code&gt;.
     * 
     * @param transformer  the transformer (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.4
     * 
     * @see #getFillPaintTransformer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFillPaintTransformer</name><parameter_list>(<param><decl><type><name>GradientPaintTransformer</name></type> <name>transformer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>transformer</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'transformer' attribute."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintTransformer</name></name> = <name>transformer</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this item for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>LegendItem</name>)</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>that</name> =<init> <expr>(<name>LegendItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>datasetIndex</name></name> != <name><name>that</name>.<name>datasetIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>series</name></name> != <name><name>that</name>.<name>series</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>label</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>AttributedStringUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>attributedLabel</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>attributedLabel</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>description</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>description</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapeVisible</name></name> != <name><name>that</name>.<name>shapeVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shape</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shape</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapeFilled</name></name> != <name><name>that</name>.<name>shapeFilled</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>fillPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>fillPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaintTransformer</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>fillPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapeOutlineVisible</name></name> != <name><name>that</name>.<name>shapeOutlineVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>outlineStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>outlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>outlinePaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>outlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<name><name>this</name>.<name>lineVisible</name></name> == <name><name>that</name>.<name>lineVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>line</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>lineStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>lineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>linePaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>linePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeAttributedString</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>attributedLabel</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shape</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fillPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>line</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>linePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>attributedLabel</name></name> = <call><name><name>SerialUtilities</name>.<name>readAttributedString</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shape</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>linePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
