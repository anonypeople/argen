<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_DATASET-4\src\PolarChartPanel.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * PolarChartPanel.java
 * --------------------
 * (C) Copyright 2004, 2007, by Solution Engineering, Inc. and Contributors.
 *
 * Original Author:  Daniel Bridenbecker, Solution Engineering, Inc.;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 19-Jan-2004 : Version 1, contributed by DB with minor changes by DG (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Component</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>event</name>.<name>ActionEvent</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>JMenuItem</name></name>;</import>
<import>import <name><name>javax</name>.<name>swing</name>.<name>JPopupMenu</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PolarPlot</name></name>;</import>

<comment type="javadoc">/**
 * &lt;code&gt;PolarChartPanel&lt;/code&gt; is the top level object for using the 
 * {@link PolarPlot}. Since this class has a &lt;code&gt;JPanel&lt;/code&gt; in the 
 * inheritance hierarchy, one uses this class to integrate the Polar plot into 
 * their application.
 * &lt;p&gt;
 * The main modification to &lt;code&gt;ChartPanel&lt;/code&gt; is the popup menu.  It 
 * removes &lt;code&gt;ChartPanel&lt;/code&gt;'s versions of:
 * &lt;ul&gt;
 *    &lt;li&gt;&lt;code&gt;Zoom In&lt;/code&gt;&lt;/li&gt;
 *    &lt;li&gt;&lt;code&gt;Zoom Out&lt;/code&gt;&lt;/li&gt;
 *    &lt;li&gt;&lt;code&gt;Auto Range&lt;/code&gt;&lt;/li&gt;
 * &lt;/ul&gt;
 * and replaces them with versions more appropriate for {@link PolarPlot}.
 */</comment>
<class><specifier>public</specifier> class <name>PolarChartPanel</name> <super><extends>extends <name>ChartPanel</name></extends></super> <block>{

    <comment type="line">// -----------------</comment>
    <comment type="line">// --- Constants ---</comment>
    <comment type="line">// -----------------   </comment>
    
    <comment type="javadoc">/** Zoom in command string. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLAR_ZOOM_IN_ACTION_COMMAND</name> =<init> <expr>"Polar Zoom In"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Zoom out command string. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLAR_ZOOM_OUT_ACTION_COMMAND</name> 
        =<init> <expr>"Polar Zoom Out"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Auto range command string. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>POLAR_AUTO_RANGE_ACTION_COMMAND</name> 
        =<init> <expr>"Polar Auto Range"</expr></init></decl>;</decl_stmt>
   
    <comment type="line">// ------------------------</comment>
    <comment type="line">// --- Member Variables ---</comment>
    <comment type="line">// ------------------------</comment>
   
    <comment type="line">// --------------------</comment>
    <comment type="line">// --- Constructors ---</comment>
    <comment type="line">// --------------------</comment>
    <comment type="javadoc">/**
     * Constructs a JFreeChart panel.
     *
     * @param chart  the chart.
     */</comment>
    <constructor><specifier>public</specifier> <name>PolarChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new panel.
     * 
     * @param chart  the chart.
     * @param useBuffer  buffered?
     */</comment>
    <constructor><specifier>public</specifier> <name>PolarChartPanel</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useBuffer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>chart</name></expr></argument>, <argument><expr><name>useBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkChart</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMinimumDrawWidth</name><argument_list>(<argument><expr>200</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMinimumDrawHeight</name><argument_list>(<argument><expr>200</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMaximumDrawWidth</name><argument_list>(<argument><expr>2000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMaximumDrawHeight</name><argument_list>(<argument><expr>2000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
   
    <comment type="line">// --------------------------</comment>
    <comment type="line">// --- ChartPanel Methods ---</comment>
    <comment type="line">// --------------------------</comment>
    <comment type="javadoc">/**
     * Sets the chart that is displayed in the panel.
     *
     * @param chart  The chart.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setChart</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkChart</name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setChart</name></name><argument_list>(<argument><expr><name>chart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Creates a popup menu for the panel.
     *
     * @param properties  include a menu item for the chart property editor.
     * @param save  include a menu item for saving the chart.
     * @param print  include a menu item for printing the chart.
     * @param zoom  include menu items for zooming.
     *
     * @return The popup menu.
     */</comment>
    <function><type><specifier>protected</specifier> <name>JPopupMenu</name></type> <name>createPopupMenu</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>properties</name></decl></param>,
                                         <param><decl><type><name>boolean</name></type> <name>save</name></decl></param>, 
                                         <param><decl><type><name>boolean</name></type> <name>print</name></decl></param>, 
                                         <param><decl><type><name>boolean</name></type> <name>zoom</name></decl></param>)</parameter_list> <block>{
        
       <decl_stmt><decl><type><name>JPopupMenu</name></type> <name>result</name> =<init> <expr><call><name><name>super</name>.<name>createPopupMenu</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>save</name></expr></argument>, <argument><expr><name>print</name></expr></argument>, <argument><expr><name>zoom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>zoomInIndex</name>  =<init> <expr><call><name>getPopupMenuItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"Zoom In"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>zoomOutIndex</name> =<init> <expr><call><name>getPopupMenuItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"Zoom Out"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>autoIndex</name>     =<init> <expr><call><name>getPopupMenuItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"Auto Range"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       <if>if <condition>(<expr><name>zoom</name></expr>)</condition><then> <block>{
           <decl_stmt><decl><type><name>JMenuItem</name></type> <name>zoomIn</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(<argument><expr>"Zoom In"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>zoomIn</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>POLAR_ZOOM_IN_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>zoomIn</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
           <decl_stmt><decl><type><name>JMenuItem</name></type> <name>zoomOut</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(<argument><expr>"Zoom Out"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>zoomOut</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>POLAR_ZOOM_OUT_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>zoomOut</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
           <decl_stmt><decl><type><name>JMenuItem</name></type> <name>auto</name> =<init> <expr>new <call><name>JMenuItem</name><argument_list>(<argument><expr>"Auto Range"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>auto</name>.<name>setActionCommand</name></name><argument_list>(<argument><expr><name>POLAR_AUTO_RANGE_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>auto</name>.<name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
           <if>if <condition>(<expr><name>zoomInIndex</name> != -1</expr>)</condition><then> <block>{
               <expr_stmt><expr><call><name><name>result</name>.<name>remove</name></name><argument_list>(<argument><expr><name>zoomInIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></then>
           <else>else <block>{
               <expr_stmt><expr><name>zoomInIndex</name> = <call><name><name>result</name>.<name>getComponentCount</name></name><argument_list>()</argument_list></call> - 1</expr>;</expr_stmt>
           }</block></else></if>
           <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>zoomIn</name></expr></argument>, <argument><expr><name>zoomInIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if>if <condition>(<expr><name>zoomOutIndex</name> != -1</expr>)</condition><then> <block>{
               <expr_stmt><expr><call><name><name>result</name>.<name>remove</name></name><argument_list>(<argument><expr><name>zoomOutIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></then>
           <else>else <block>{
               <expr_stmt><expr><name>zoomOutIndex</name> = <name>zoomInIndex</name> + 1</expr>;</expr_stmt>
           }</block></else></if>
           <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>zoomOut</name></expr></argument>, <argument><expr><name>zoomOutIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <if>if <condition>(<expr><name>autoIndex</name> != -1</expr>)</condition><then> <block>{
               <expr_stmt><expr><call><name><name>result</name>.<name>remove</name></name><argument_list>(<argument><expr><name>autoIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></then>
           <else>else <block>{
               <expr_stmt><expr><name>autoIndex</name> = <name>zoomOutIndex</name> + 1</expr>;</expr_stmt>
           }</block></else></if>
           <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>auto</name></expr></argument>, <argument><expr><name>autoIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>
       <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Handles action events generated by the popup menu.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>actionPerformed</name><parameter_list>(<param><decl><type><name>ActionEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
       <decl_stmt><decl><type><name>String</name></type> <name>command</name> =<init> <expr><call><name><name>event</name>.<name>getActionCommand</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       
       <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>POLAR_ZOOM_IN_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
           <decl_stmt><decl><type><name>PolarPlot</name></type> <name>plot</name> =<init> <expr>(<name>PolarPlot</name>) <call><name>getChart</name><argument_list>()</argument_list></call>.<call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>plot</name>.<name>zoom</name></name><argument_list>(<argument><expr>0.5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then>
       <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>POLAR_ZOOM_OUT_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
           <decl_stmt><decl><type><name>PolarPlot</name></type> <name>plot</name> =<init> <expr>(<name>PolarPlot</name>) <call><name>getChart</name><argument_list>()</argument_list></call>.<call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>plot</name>.<name>zoom</name></name><argument_list>(<argument><expr>2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then>
       <else>else <if>if <condition>(<expr><call><name><name>command</name>.<name>equals</name></name><argument_list>(<argument><expr><name>POLAR_AUTO_RANGE_ACTION_COMMAND</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
           <decl_stmt><decl><type><name>PolarPlot</name></type> <name>plot</name> =<init> <expr>(<name>PolarPlot</name>) <call><name>getChart</name><argument_list>()</argument_list></call>.<call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <expr_stmt><expr><call><name><name>plot</name>.<name>getAxis</name></name><argument_list>()</argument_list></call>.<call><name>setAutoRange</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then>
       <else>else <block>{
           <expr_stmt><expr><call><name><name>super</name>.<name>actionPerformed</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="line">// ----------------------</comment>
    <comment type="line">// --- Public Methods ---</comment>
    <comment type="line">// ----------------------</comment>

    <comment type="line">// -----------------------</comment>
    <comment type="line">// --- Private Methods ---</comment>
    <comment type="line">// -----------------------</comment>
   
    <comment type="javadoc">/**
     * Test that the chart is using an xy plot with time as the domain axis.
     * 
     * @param chart  the chart.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkChart</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>chart</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name><name>chart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!(<name>plot</name> <name>instanceof</name> <name>PolarPlot</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"plot is not a PolarPlot"</expr></argument>)</argument_list></call></expr>;</throw>
       }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the index of an item in a popup menu.
     * 
     * @param menu  the menu.
     * @param text  the label.
     * 
     * @return The item index.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getPopupMenuItem</name><parameter_list>(<param><decl><type><name>JPopupMenu</name></type> <name>menu</name></decl></param>, <param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr>(<name>index</name> == -1) &amp;&amp; (<name>i</name> &lt; <call><name><name>menu</name>.<name>getComponentCount</name></name><argument_list>()</argument_list></call>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Component</name></type> <name>comp</name> =<init> <expr><call><name><name>menu</name>.<name>getComponent</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>comp</name> <name>instanceof</name> <name>JMenuItem</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>JMenuItem</name></type> <name>item</name> =<init> <expr>(<name>JMenuItem</name>) <name>comp</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>text</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>item</name>.<name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> = <name>i</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
       }</block></for>
       <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
