<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\AreaRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * AreaRenderer.java
 * -----------------
 * (C) Copyright 2002-2007, by Jon Iles and Contributors.
 *
 * Original Author:  Jon Iles;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Christian W. Zuckschwerdt;
 *
 * Changes:
 * --------
 * 21-May-2002 : Version 1, contributed by John Iles (DG);
 * 29-May-2002 : Now extends AbstractCategoryItemRenderer (DG);
 * 11-Jun-2002 : Updated Javadoc comments (DG);
 * 25-Jun-2002 : Removed unnecessary imports (DG);
 * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 10-Oct-2002 : Added constructors and basic entity support (DG);
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG);
 * 06-Nov-2002 : Renamed drawCategoryItem() --&gt; drawItem() and now using axis 
 *               for category spacing.  Renamed AreaCategoryItemRenderer 
 *               --&gt; AreaRenderer (DG);
 * 17-Jan-2003 : Moved plot classes into a separate package (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in 
 *               drawItem() method (DG);
 * 12-May-2003 : Modified to take into account the plot orientation (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Apply tooltips and URLs to legend items (DG);
 * 09-Jun-2005 : Use addItemEntity() method from superclass (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 11-Oct-2006 : Fixed bug in equals() method (DG);
 * 30-Nov-2006 : Added checks for series visibility (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>AreaRendererEndType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A category item renderer that draws area charts.  You can use this renderer 
 * with the {@link org.jfree.chart.plot.CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>AreaRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends> 
                          <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4231878281385812757L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls how the ends of the areas are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AreaRendererEndType</name></type> <name>endType</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>AreaRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endType</name></name> = <name><name>AreaRendererEndType</name>.<name>TAPER</name></name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a token that controls how the renderer draws the end points.
     * The default value is {@link AreaRendererEndType#TAPER}.
     * 
     * @return The end type (never &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setEndType
     */</comment>
    <function><type><specifier>public</specifier> <name>AreaRendererEndType</name></type> <name>getEndType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>endType</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a token that controls how the renderer draws the end points, and 
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param type  the end type (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getEndType()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndType</name><parameter_list>(<param><decl><type><name>AreaRendererEndType</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>type</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'type' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>endType</name></name> = <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if there is no plot, there is no dataset to access...</comment>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>cp</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cp</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// check that a legend item needs to be displayed...</comment>
        <if>if <condition>(<expr>!<call><name>isSeriesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> || !<call><name>isSeriesVisibleInLegend</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>cp</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                    <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4.0</expr></argument>, <argument><expr>-4.0</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>8.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// do nothing if item is not visible</comment>
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>

        <comment type="line">// plot non-null values only...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>axisEdge</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>x0</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>axisEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>x1</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>axisEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>x2</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>getCategoryEnd</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>axisEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>x0</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x2</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>endType</name></name> == <name><name>AreaRendererEndType</name>.<name>TRUNCATE</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>x0</name> = <name>x1</name></expr>;</expr_stmt>   
                }</block></then>
                <else>else <if>if <condition>(<expr><name>column</name> == <call><name>getColumnCount</name><argument_list>()</argument_list></call> - 1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>x2</name> = <name>x1</name></expr>;</expr_stmt>   
                }</block></then></if></else></if>
            }</block></then></if>
            
            <decl_stmt><decl><type><name>double</name></type> <name>yy1</name> =<init> <expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>yy0</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>column</name> &gt; 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n0</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>n0</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>yy0</name> = (<call><name><name>n0</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> + <name>yy1</name>) / 2.0</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>double</name></type> <name>yy2</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>column</name> &lt; <call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Number</name></type> <name>n2</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>n2</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>yy2</name> = (<call><name><name>n2</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> + <name>yy1</name>) / 2.0</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>y0</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>y1</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>y2</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yy2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>yz</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>area</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>yz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>yz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>yz</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>yz</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><call><name><name>area</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw the item labels if there are any...</comment>
            <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, 
                        <argument><expr>(<call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// add an item entity, if this information is being collected</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     *
     * @param obj  the object to test (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{    
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>AreaRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>AreaRenderer</name></type> <name>that</name> =<init> <expr>(<name>AreaRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>endType</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>endType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an independent copy of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  should not happen.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
