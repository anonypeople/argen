<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\BarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * BarRenderer.java
 * ----------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Christian W. Zuckschwerdt;
 *
 * Changes
 * -------
 * 14-Mar-2002 : Version 1 (DG);
 * 23-May-2002 : Added tooltip generator to renderer (DG);
 * 29-May-2002 : Moved tooltip generator to abstract super-class (DG);
 * 25-Jun-2002 : Changed constructor to protected and removed redundant 
 *               code (DG);
 * 26-Jun-2002 : Added axis to initialise method, and record upper and lower 
 *               clip values (DG);
 * 24-Sep-2002 : Added getLegendItem() method (DG);
 * 09-Oct-2002 : Modified constructor to include URL generator (DG);
 * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG);
 * 10-Jan-2003 : Moved get/setItemMargin() method up from subclasses (DG);
 * 17-Jan-2003 : Moved plot classes into a separate package (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified clipping to allow for dual axes and datasets (DG);
 * 12-May-2003 : Merged horizontal and vertical bar renderers (DG);
 * 12-Jun-2003 : Updates for item labels (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 02-Sep-2003 : Changed initialise method to fix bug 790407 (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 27-Oct-2003 : Merged drawHorizontalItem() and drawVerticalItem() 
 *               methods (DG);
 * 28-Oct-2003 : Added support for gradient paint on bars (DG);
 * 14-Nov-2003 : Added 'maxBarWidth' attribute (DG);
 * 10-Feb-2004 : Small changes inside drawItem() method to ease cut-and-paste 
 *               overriding (DG);
 * 19-Mar-2004 : Fixed bug introduced with separation of tool tip and item 
 *               label generators.  Fixed equals() method (DG);
 * 11-May-2004 : Fix for null pointer exception (bug id 951127) (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 26-Jan-2005 : Provided override for getLegendItem() method (DG);
 * 20-Apr-2005 : Generate legend labels, tooltips and URLs (DG);
 * 18-May-2005 : Added configurable base value (DG);
 * 09-Jun-2005 : Use addItemEntity() method from superclass (DG);
 * 01-Dec-2005 : Update legend item to use/not use outline (DG);
 * ------------: JFreeChart 1.0.x ---------------------------------------------
 * 06-Dec-2005 : Fixed bug 1374222 (JDK 1.4 specific code) (DG);
 * 11-Jan-2006 : Fixed bug 1401856 (bad rendering for non-zero base) (DG);
 * 04-Aug-2006 : Fixed bug 1467706 (missing item labels for zero value 
 *               bars) (DG);
 * 04-Dec-2006 : Fixed bug in rendering to non-primary axis (DG);
 * 13-Dec-2006 : Add support for GradientPaint display in legend items (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 11-May-2007 : Check for visibility in getLegendItem() (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>StandardGradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A {@link CategoryItemRenderer} that draws individual data items as bars.
 */</comment>
<class><specifier>public</specifier> class <name>BarRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends> 
                         <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>6000649414965887481L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default item margin percentage. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ITEM_MARGIN</name> =<init> <expr>0.20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Constant that controls the minimum width before a bar has an outline 
     * drawn. 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>BAR_OUTLINE_WIDTH_THRESHOLD</name> =<init> <expr>3.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The margin between items (bars) within a category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>itemMargin</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not bar outlines are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawBarOutline</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum bar width as a percentage of the available space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maximumBarWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minimum bar length (in Java2D units). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minimumBarLength</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * An optional class used to transform gradient paint objects to fit each 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GradientPaintTransformer</name></type> <name>gradientPaintTransformer</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The fallback position if a positive item label doesn't fit inside the 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ItemLabelPosition</name></type> <name>positiveItemLabelPositionFallback</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The fallback position if a negative item label doesn't fit inside the 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ItemLabelPosition</name></type> <name>negativeItemLabelPositionFallback</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The upper clip (axis) value for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperClip</name></decl>;</decl_stmt>  
    <comment type="line">// TODO:  this needs to move into the renderer state</comment>

    <comment type="javadoc">/** The lower clip (axis) value for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerClip</name></decl>;</decl_stmt>  
    <comment type="line">// TODO:  this needs to move into the renderer state</comment>

    <comment type="javadoc">/** The base value for the bars (defaults to 0.0). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>base</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the base value is included in the range
     * returned by the findRangeBounds() method.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>includeBaseInRange</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new bar renderer with default settings.
     */</comment>
    <constructor><specifier>public</specifier> <name>BarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>base</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>includeBaseInRange</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = <name>DEFAULT_ITEM_MARGIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawBarOutline</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maximumBarWidth</name></name> = 1.0</expr>;</expr_stmt>  
            <comment type="line">// 100 percent, so it will not apply unless changed</comment>
        <expr_stmt><expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = new <call><name>StandardGradientPaintTransformer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumBarLength</name></name> = 0.0</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the base value for the bars.  The default value is 
     * &lt;code&gt;0.0&lt;/code&gt;.
     * 
     * @return The base value for the bars.
     * 
     * @see #setBase(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>base</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base value for the bars and sends a {@link RendererChangeEvent}
     * to all registered listeners.
     * 
     * @param base  the new base value.
     * 
     * @see #getBase()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBase</name><parameter_list>(<param><decl><type><name>double</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>base</name></name> = <name>base</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the item margin as a percentage of the available space for all 
     * bars.
     *
     * @return The margin percentage (where 0.10 is ten percent).
     * 
     * @see #setItemMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getItemMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>itemMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the item margin and sends a {@link RendererChangeEvent} to all 
     * registered listeners.  The value is expressed as a percentage of the 
     * available width for plotting all the bars, with the resulting amount to 
     * be distributed between all the bars evenly.
     *
     * @param percent  the margin (where 0.10 is ten percent).
     * 
     * @see #getItemMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItemMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not bar outlines are drawn.
     * 
     * @return A boolean.
     * 
     * @see #setDrawBarOutline(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDrawBarOutline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawBarOutline</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not bar outlines are drawn and 
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param draw  the flag.
     * 
     * @see #isDrawBarOutline()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawBarOutline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawBarOutline</name></name> = <name>draw</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum bar width, as a percentage of the available drawing 
     * space.
     * 
     * @return The maximum bar width.
     * 
     * @see #setMaximumBarWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaximumBarWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumBarWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum bar width, which is specified as a percentage of the 
     * available space for all bars, and sends a {@link RendererChangeEvent} to
     * all registered listeners.
     * 
     * @param percent  the percent (where 0.05 is five percent).
     * 
     * @see #getMaximumBarWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumBarWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumBarWidth</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum bar length (in Java2D units).
     * 
     * @return The minimum bar length.
     * 
     * @see #setMinimumBarLength(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMinimumBarLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minimumBarLength</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the minimum bar length and sends a {@link RendererChangeEvent} to 
     * all registered listeners.  The minimum bar length is specified in Java2D
     * units, and can be used to prevent bars that represent very small data 
     * values from disappearing when drawn on the screen.
     * 
     * @param min  the minimum bar length (in Java2D units).
     * 
     * @see #getMinimumBarLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumBarLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>min</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minimumBarLength</name></name> = <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the gradient paint transformer (an object used to transform 
     * gradient paint objects to fit each bar).
     * 
     * @return A transformer (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setGradientPaintTransformer(GradientPaintTransformer)
     */</comment>    
    <function><type><specifier>public</specifier> <name>GradientPaintTransformer</name></type> <name>getGradientPaintTransformer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the gradient paint transformer and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param transformer  the transformer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getGradientPaintTransformer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGradientPaintTransformer</name><parameter_list>(
            <param><decl><type><name>GradientPaintTransformer</name></type> <name>transformer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = <name>transformer</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fallback position for positive item labels that don't fit 
     * within a bar.
     * 
     * @return The fallback position (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)
     */</comment>
    <function><type><specifier>public</specifier> <name>ItemLabelPosition</name></type> <name>getPositiveItemLabelPositionFallback</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the fallback position for positive item labels that don't fit 
     * within a bar, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getPositiveItemLabelPositionFallback()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPositiveItemLabelPositionFallback</name><parameter_list>(
            <param><decl><type><name>ItemLabelPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fallback position for negative item labels that don't fit 
     * within a bar.
     * 
     * @return The fallback position (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)
     */</comment>
    <function><type><specifier>public</specifier> <name>ItemLabelPosition</name></type> <name>getNegativeItemLabelPositionFallback</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the fallback position for negative item labels that don't fit 
     * within a bar, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getNegativeItemLabelPositionFallback()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNegativeItemLabelPositionFallback</name><parameter_list>(
            <param><decl><type><name>ItemLabelPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the base value for the 
     * bars is included in the range calculated by 
     * {@link #findRangeBounds(CategoryDataset)}.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if the base is included in the range, and
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @since 1.0.1
     * 
     * @see #setIncludeBaseInRange(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIncludeBaseInRange</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>includeBaseInRange</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the base value for the bars 
     * is included in the range calculated by 
     * {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed,
     * a {@link RendererChangeEvent} is sent to all registered listeners.
     * 
     * @param include  the new value for the flag.
     * 
     * @since 1.0.1
     * 
     * @see #getIncludeBaseInRange()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncludeBaseInRange</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>include</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>includeBaseInRange</name></name> != <name>include</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>includeBaseInRange</name></name> = <name>include</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the lower clip value.  This value is recalculated in the 
     * initialise() method.
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerClip</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// TODO:  this attribute should be transferred to the renderer state.</comment>
        <return>return <expr><name><name>this</name>.<name>lowerClip</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper clip value.  This value is recalculated in the 
     * initialise() method.
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperClip</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// TODO:  this attribute should be transferred to the renderer state.</comment>
        <return>return <expr><name><name>this</name>.<name>upperClip</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that will be passed 
     * to subsequent calls to the drawItem method.  This method gets called 
     * once at the start of the process of drawing a chart.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data is to be plotted.
     * @param plot  the plot.
     * @param rendererIndex  the renderer index.
     * @param info  collects chart rendering information for return to caller.
     * 
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                                <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                                <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                                <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// get the clipping values...</comment>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lowerClip</name></name> = <call><name><name>rangeAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperClip</name></name> = <call><name><name>rangeAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// calculate the bar width</comment>
        <expr_stmt><expr><call><name>calculateBarWidth</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the bar width and stores it in the renderer state.
     * 
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param rendererIndex  the renderer index.
     * @param state  the renderer state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>calculateBarWidth</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                     <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                     <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                     <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
                                         
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rows</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr><name>space</name> * <call><name>getMaximumBarWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>categoryMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>currentItemMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryMargin</name> = <call><name><name>domainAxis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>rows</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentItemMargin</name> = <call><name>getItemMargin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr><name>space</name> * (1 - <call><name><name>domainAxis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                                     - <call><name><name>domainAxis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call>
                                     - <name>categoryMargin</name> - <name>currentItemMargin</name>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>rows</name> * <name>columns</name>) &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name> / (<name>rows</name> * <name>columns</name>)</expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the coordinate of the first "side" of a bar.  This will be 
     * the minimum x-coordinate for a vertical bar, and the minimum 
     * y-coordinate for a horizontal bar.
     *
     * @param plot  the plot.
     * @param orientation  the plot orientation.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param state  the renderer state (has the bar width precalculated).
     * @param row  the row index.
     * @param column  the column index.
     * 
     * @return The coordinate.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateBarW0</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                    <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, 
                                    <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                    <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// calculate bar width...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>barW0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><name>space</name> * <call><name>getItemMargin</name><argument_list>()</argument_list></call> 
                               / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>seriesW</name> =<init> <expr><call><name>calculateSeriesWidth</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>seriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>barW0</name> = <name>barW0</name> + <name>row</name> * (<name>seriesW</name> + <name>seriesGap</name>) 
                          + (<name>seriesW</name> / 2.0) - (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0)</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>barW0</name> = <call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> 
                    / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>barW0</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the coordinates for the length of a single bar.
     * 
     * @param value  the value represented by the bar.
     * 
     * @return The coordinates for each end of the bar (or &lt;code&gt;null&lt;/code&gt; if 
     *         the bar is not visible for the current axis range).
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name><index>[]</index></type> <name>calculateBarL0L1</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>lclip</name> =<init> <expr><call><name>getLowerClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uclip</name> =<init> <expr><call><name>getUpperClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barLow</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barHigh</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>barHigh</name> &lt; <name>lclip</name></expr>)</condition><then> <block>{  <comment type="line">// bar is not visible</comment>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>barLow</name> &gt; <name>uclip</name></expr>)</condition><then> <block>{   <comment type="line">// bar is not visible</comment>
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>barLow</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>barLow</name></expr></argument>, <argument><expr><name>lclip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>barHigh</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>barHigh</name></expr></argument>, <argument><expr><name>uclip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>new <name><name>double</name><index>[]</index></name> <block>{<expr><name>barLow</name></expr>, <expr><name>barHigh</name></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.  This takes into account the range
     * of values in the dataset, plus the flag that determines whether or not
     * the base value for the bars should be included in the range.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (or &lt;code&gt;null&lt;/code&gt; if the dataset is 
     *         &lt;code&gt;null&lt;/code&gt; or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>includeBaseInRange</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>expandToInclude</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>cp</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cp</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// check that a legend item needs to be displayed...</comment>
        <if>if <condition>(<expr>!<call><name>isSeriesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> || !<call><name>isSeriesVisibleInLegend</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>cp</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                    <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4.0</expr></argument>, <argument><expr>-4.0</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>8.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                <argument><expr><name>urlText</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>setFillPaintTransformer</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// nothing is drawn for null values...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataValue</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barW0</name> =<init> <expr><call><name>calculateBarW0</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                <argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>barL0L1</name> =<init> <expr><call><name>calculateBarL0L1</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>barL0L1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// the bar is not visible</comment>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transL0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>barL0L1</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transL1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>barL0L1</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barL0</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>transL0</name></expr></argument>, <argument><expr><name>transL1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barLength</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>transL1</name> - <name>transL0</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name>getMinimumBarLength</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the bar...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barL0</name></expr></argument>, <argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barLength</name></expr></argument>, 
                    <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barL0</name></expr></argument>, <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>barLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GradientPaintTransformer</name></type> <name>t</name> =<init> <expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name> != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>itemPaint</name> = <call><name><name>t</name>.<name>transform</name></name><argument_list>(<argument><expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
            =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>(<name>value</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// add an item entity, if this information is being collected</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the available space for each series.
     * 
     * @param space  the space along the entire axis (in Java2D units).
     * @param axis  the category axis.
     * @param categories  the number of categories.
     * @param series  the number of series.
     * 
     * @return The width of one series.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateSeriesWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>, 
                                          <param><decl><type><name>int</name></type> <name>categories</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>factor</name> =<init> <expr>1.0 - <call><name>getItemMargin</name><argument_list>()</argument_list></call> - <call><name><name>axis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                            - <call><name><name>axis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>categories</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = <name>factor</name> - <call><name><name>axis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>(<name>space</name> * <name>factor</name>) / (<name>categories</name> * <name>series</name>)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws an item label.  This method is overridden so that the bar can be 
     * used to calculate the label anchor point.
     * 
     * @param g2  the graphics device.
     * @param data  the dataset.
     * @param row  the row.
     * @param column  the column.
     * @param plot  the plot.
     * @param generator  the label generator.
     * @param bar  the bar.
     * @param negative  a flag indicating a negative value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItemLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                 <param><decl><type><name>CategoryDataset</name></type> <name>data</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                                 <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                 <param><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>bar</name></decl></param>,
                                 <param><decl><type><name>boolean</name></type> <name>negative</name></decl></param>)</parameter_list> <block>{
                                     
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>generator</name>.<name>generateLabel</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>label</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// nothing to do   </comment>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>Font</name></type> <name>labelFont</name> =<init> <expr><call><name>getItemLabelFont</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>labelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemLabelPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// find out where to place the label...</comment>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>position</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>negative</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>position</name> = <call><name>getPositiveItemLabelPosition</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>position</name> = <call><name>getNegativeItemLabelPosition</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// work out the label anchor point...</comment>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>anchorPoint</name> =<init> <expr><call><name>calculateLabelAnchorPoint</name><argument_list>(
                <argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><call><name>isInternalAnchor</name><argument_list>(<argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Shape</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>calculateRotatedStringBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                    <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><name>bounds</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>bar</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>bounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<name>negative</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>position</name> = <call><name>getPositiveItemLabelPositionFallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>position</name> = <call><name>getNegativeItemLabelPositionFallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>position</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchorPoint</name> = <call><name>calculateLabelAnchorPoint</name><argument_list>(
                                <argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                                <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        
        }</block></then></if>
        
        <if>if <condition>(<expr><name>position</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>position</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the item label anchor point.
     *
     * @param anchor  the anchor.
     * @param bar  the bar.
     * @param orientation  the plot orientation.
     *
     * @return The anchor point.
     */</comment>
    <function><type><specifier>private</specifier> <name>Point2D</name></type> <name>calculateLabelAnchorPoint</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>anchor</name></decl></param>,
                                              <param><decl><type><name>Rectangle2D</name></type> <name>bar</name></decl></param>, 
                                              <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Point2D</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><call><name>getItemLabelAnchorOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x3</name> =<init> <expr><call><name><name>bar</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x4</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x5</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x6</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y3</name> =<init> <expr><call><name><name>bar</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y4</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y5</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y6</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>CENTER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE1</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE2</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE3</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE4</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE5</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE6</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE7</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE8</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE9</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE10</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE11</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE12</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified anchor point is inside a bar.
     * 
     * @param anchor  the anchor point.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isInternalAnchor</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>CENTER</name></name> 
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr>;</return>  
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BarRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>BarRenderer</name></type> <name>that</name> =<init> <expr>(<name>BarRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>base</name></name> != <name><name>that</name>.<name>base</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>itemMargin</name></name> != <name><name>that</name>.<name>itemMargin</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>              
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBarOutline</name></name> != <name><name>that</name>.<name>drawBarOutline</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>maximumBarWidth</name></name> != <name><name>that</name>.<name>maximumBarWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minimumBarLength</name></name> != <name><name>that</name>.<name>minimumBarLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>gradientPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name></expr></argument>, 
            <argument><expr><name><name>that</name>.<name>positiveItemLabelPositionFallback</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name></expr></argument>, 
            <argument><expr><name><name>that</name>.<name>negativeItemLabelPositionFallback</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
        
    }</block></function>

}</block></class>
</unit>
