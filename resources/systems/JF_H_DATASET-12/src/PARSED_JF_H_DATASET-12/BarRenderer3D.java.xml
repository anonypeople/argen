<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\BarRenderer3D.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * BarRenderer3D.java
 * ------------------
 * (C) Copyright 2001-2007, by Serge V. Grachov and Contributors.
 *
 * Original Author:  Serge V. Grachov;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Tin Luu;
 *                   Milo Simpson;
 *                   Richard Atkinson;
 *                   Rich Unger;
 *                   Christian W. Zuckschwerdt;
 *
 * Changes
 * -------
 * 31-Oct-2001 : First version, contributed by Serge V. Grachov (DG);
 * 15-Nov-2001 : Modified to allow for null data values (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 16-Jan-2002 : Added fix for single category or single series datasets, 
 *               pointed out by Taoufik Romdhane (DG);
 * 24-May-2002 : Incorporated tooltips into chart entities (DG);
 * 11-Jun-2002 : Added check for (permitted) null info object, bug and fix 
 *               reported by David Basten.  Also updated Javadocs. (DG);
 * 19-Jun-2002 : Added code to draw labels on bars (TL);
 * 26-Jun-2002 : Added bar clipping to avoid PRExceptions (DG);
 * 05-Aug-2002 : Small modification to drawCategoryItem method to support URLs 
 *               for HTML image maps (RA);
 * 06-Aug-2002 : Value labels now use number formatter, thanks to Milo 
 *               Simpson (DG);
 * 08-Aug-2002 : Applied fixed in bug id 592218 (DG);
 * 20-Sep-2002 : Added fix for categoryPaint by Rich Unger, and fixed errors 
 *               reported by Checkstyle (DG);
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG);
 * 06-Nov-2002 : Moved to the com.jrefinery.chart.renderer package (DG);
 * 28-Jan-2003 : Added an attribute to control the shading of the left and 
 *               bottom walls in the plot background (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 10-Apr-2003 : Removed category paint usage (DG);
 * 13-May-2003 : Renamed VerticalBarRenderer3D --&gt; BarRenderer3D and merged with
 *               HorizontalBarRenderer3D (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 19-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 08-Oct-2003 : Removed clipping (replaced with flag in CategoryPlot to 
 *               control order in which the data items are processed) (DG);
 * 20-Oct-2003 : Fixed bug (outline stroke not being used for bar 
 *               outlines) (DG);
 * 21-Oct-2003 : Bar width moved into CategoryItemRendererState (DG);
 * 24-Nov-2003 : Fixed bug 846324 (item labels not showing) (DG);
 * 27-Nov-2003 : Added code to respect maxBarWidth setting (DG);
 * 02-Feb-2004 : Fixed bug where 'drawBarOutline' flag is not respected (DG);
 * 10-Feb-2004 : Small change to drawItem() method to make cut-and-paste 
 *               overriding easier (DG);
 * 04-Oct-2004 : Fixed bug with item label positioning when plot alignment is 
 *               horizontal (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 25-Apr-2005 : Override initialise() method to fix bug 1189642 (DG);
 * 09-Jun-2005 : Use addEntityItem from super class (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 07-Dec-2006 : Implemented equals() override (DG);
 * 17-Jan-2007 : Fixed bug in drawDomainGridline() method (DG);
 * 03-Apr-2007 : Fixed bugs in drawBackground() method (DG);
 * 16-Oct-2007 : Fixed bug in range marker drawing (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Image</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>Effect3D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Marker</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueMarker</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>LengthAdjustmentType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer for bars with a 3D effect, for use with the 
 * {@link org.jfree.chart.plot.CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>BarRenderer3D</name> <super><extends>extends <name>BarRenderer</name></extends> 
                           <implements>implements <name>Effect3D</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                      <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7686976503536003636L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default x-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_X_OFFSET</name> =<init> <expr>12.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default y-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_Y_OFFSET</name> =<init> <expr>8.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default wall paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_WALL_PAINT</name> =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>0xDD</expr></argument>, <argument><expr>0xDD</expr></argument>, <argument><expr>0xDD</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The size of x-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>xOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The size of y-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>yOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to shade the left and lower 3D wall. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>wallPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor, creates a renderer with a default '3D effect'.
     */</comment>
    <constructor><specifier>public</specifier> <name>BarRenderer3D</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_X_OFFSET</name></expr></argument>, <argument><expr><name>DEFAULT_Y_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer with the specified '3D effect'.
     *
     * @param xOffset  the x-offset for the 3D effect.
     * @param yOffset  the y-offset for the 3D effect.
     */</comment>
    <constructor><specifier>public</specifier> <name>BarRenderer3D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>xOffset</name></decl></param>, <param><decl><type><name>double</name></type> <name>yOffset</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = <name>xOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = <name>yOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <name>DEFAULT_WALL_PAINT</name></expr>;</expr_stmt>
        <comment type="line">// set the default item label positions</comment>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>p1</name> =<init> <expr>new <call><name>ItemLabelPosition</name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBasePositiveItemLabelPosition</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>p2</name> =<init> <expr>new <call><name>ItemLabelPosition</name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBaseNegativeItemLabelPosition</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the x-offset for the 3D effect.
     *
     * @return The 3D effect.
     * 
     * @see #getYOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getXOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>xOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-offset for the 3D effect.
     *
     * @return The 3D effect.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getYOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>yOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to highlight the left and bottom wall in the plot
     * background.
     *
     * @return The paint.
     * 
     * @see #setWallPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getWallPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>wallPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to hightlight the left and bottom walls in the plot
     * background, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getWallPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWallPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that will be passed 
     * to subsequent calls to the drawItem method.  This method gets called 
     * once at the start of the process of drawing a chart.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data is to be plotted.
     * @param plot  the plot.
     * @param rendererIndex  the renderer index.
     * @param info  collects chart rendering information for return to caller.
     * 
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                                <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                                <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                                <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the background for the plot.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the area inside the axes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawBackground</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                               <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>float</name></type> <name>x0</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x1</name> =<init> <expr><name>x0</name> + (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x3</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x2</name> =<init> <expr><name>x3</name> - (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>y0</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y1</name> =<init> <expr><name>y0</name> - (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y3</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y2</name> =<init> <expr><name>y3</name> + (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>clip</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>,
                <argument><expr><call><name><name>plot</name>.<name>getBackgroundAlpha</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// fill background...</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>backgroundPaint</name> =<init> <expr><call><name><name>plot</name>.<name>getBackgroundPaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>backgroundPaint</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>backgroundPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>leftWall</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>leftWall</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>leftWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>leftWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>leftWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>leftWall</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getWallPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>leftWall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>bottomWall</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bottomWall</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottomWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottomWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottomWall</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottomWall</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getWallPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bottomWall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// highlight the background corners...</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>lightGray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>corner</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>corner</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>corner</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>corner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
        <comment type="line">// draw background image, if there is one...</comment>
        <decl_stmt><decl><type><name>Image</name></type> <name>backgroundImage</name> =<init> <expr><call><name><name>plot</name>.<name>getBackgroundImage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>backgroundImage</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                    + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>plot</name>.<name>drawBackgroundImage</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the outline for the plot.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the area inside the axes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawOutline</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>float</name></type> <name>x0</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x1</name> =<init> <expr><name>x0</name> + (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x3</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>x2</name> =<init> <expr><name>x3</name> - (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>y0</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y1</name> =<init> <expr><name>y0</name> - (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y3</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y2</name> =<init> <expr><name>y3</name> + (<name>float</name>) <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>clip</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clip</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// put an outline around the data area...</comment>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name><name>plot</name>.<name>getOutlineStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name><name>plot</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name>outlineStroke</name> != <name>null</name>) &amp;&amp; (<name>outlinePaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>outlineStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a grid line against the domain axis.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the area for plotting data (not yet adjusted for any 
     *                  3D effect).
     * @param value  the Java2D value at which the grid line should be drawn.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawDomainGridline</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                   <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                   <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Line2D</name></type> <name>line1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><name>value</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><name>value</name> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><name>x0</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><name>value</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><name>value</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><name>y0</name> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainGridlinePaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainGridlineStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name> != <name>null</name> ? <name>paint</name> : <name><name>Plot</name>.<name>DEFAULT_OUTLINE_PAINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name> != <name>null</name> ? <name>stroke</name> : <name><name>Plot</name>.<name>DEFAULT_OUTLINE_STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a grid line against the range axis.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param axis  the value axis.
     * @param dataArea  the area for plotting data (not yet adjusted for any 
     *                  3D effect).
     * @param value  the value at which the grid line should be drawn.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawRangeGridline</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                  <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                  <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>,
                                  <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                  <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Line2D</name></type> <name>line1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><name>x0</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><name>y0</name> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><name>y0</name> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><name>x0</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>line2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeGridlinePaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeGridlineStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name> != <name>null</name> ? <name>paint</name> : <name><name>Plot</name>.<name>DEFAULT_OUTLINE_PAINT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name> != <name>null</name> ? <name>stroke</name> : <name><name>Plot</name>.<name>DEFAULT_OUTLINE_STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a range marker.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param axis  the value axis.
     * @param marker  the marker.
     * @param dataArea  the area for plotting data (not including 3D effect).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawRangeMarker</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>,
                                <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>,
                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{


        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>marker</name> <name>instanceof</name> <name>ValueMarker</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueMarker</name></type> <name>vm</name> =<init> <expr>(<name>ValueMarker</name>) <name>marker</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>vm</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>path</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr>(<name>float</name>) <call><name><name>adjusted</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>path</name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><name>x</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name>y</name> - (<name>float</name>) <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><name>x</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>adjusted</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>adjusted</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr>(<name>float</name>) <call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>path</name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x</name> + (<name>float</name>) <name><name>this</name>.<name>xOffset</name></name></expr></argument>, <argument><expr><name>y</name> - (<name>float</name>) <name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>adjusted</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name>y</name> - (<name>float</name>) <name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>lineTo</name></name><argument_list>(<argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>adjusted</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>marker</name>.<name>getPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>marker</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
            <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>marker</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleAnchor</name></type> <name>anchor</name> =<init> <expr><call><name><name>marker</name>.<name>getLabelAnchor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Font</name></type> <name>labelFont</name> =<init> <expr><call><name><name>marker</name>.<name>getLabelFont</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>labelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>marker</name>.<name>getLabelPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Point2D</name></type> <name>coordinates</name> =<init> <expr><call><name>calculateRangeMarkerTextAnchorPoint</name><argument_list>(
                        <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>path</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>marker</name>.<name>getLabelOffset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LengthAdjustmentType</name>.<name>EXPAND</name></name></expr></argument>, 
                        <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr>(<name>float</name>) <call><name><name>coordinates</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>coordinates</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>marker</name>.<name>getLabelTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>drawRangeMarker</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO: draw the interval marker with a 3D effect</comment>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a 3D bar to represent one data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area for plotting the data.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
    
        <comment type="line">// check the value we are plotting...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataValue</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>barW0</name> =<init> <expr><call><name>calculateBarW0</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                <argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>barL0L1</name> =<init> <expr><call><name>calculateBarL0L1</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>barL0L1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// the bar is not visible</comment>
        }</block></then></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transL0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>barL0L1</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transL1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>barL0L1</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barL0</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>transL0</name></expr></argument>, <argument><expr><name>transL1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barLength</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>transL1</name> - <name>transL0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// draw the bar...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barL0</name></expr></argument>, <argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barLength</name></expr></argument>, 
                    <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barL0</name></expr></argument>, <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>barLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>bar</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><name>x0</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x3</name> =<init> <expr><name>x2</name> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y3</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>bar3dRight</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>bar3dTop</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>barLength</name> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar3dRight</name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bar3dRight</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bar3dRight</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bar3dRight</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x3</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bar3dRight</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x3</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bar3dRight</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>itemPaint</name> <name>instanceof</name> <name>Color</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr>((<name>Color</name>) <name>itemPaint</name>).<call><name>darker</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar3dRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>bar3dTop</name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar3dTop</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x0</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar3dTop</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x1</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar3dTop</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x3</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar3dTop</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bar3dTop</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar3dTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>bar3dRight</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar3dRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>bar3dTop</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar3dTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
            =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>(<name>value</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// add an item entity, if this information is being collected</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>barOutline</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x0</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x0</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x1</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x3</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x3</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>x2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>barOutline</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>barOutline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BarRenderer3D</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>BarRenderer3D</name></type> <name>that</name> =<init> <expr>(<name>BarRenderer3D</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>xOffset</name></name> != <name><name>that</name>.<name>xOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>yOffset</name></name> != <name><name>that</name>.<name>yOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>wallPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>wallPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>wallPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
