<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\BoxAndWhiskerRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------
 * BoxAndWhiskerRenderer.java
 * --------------------------
 * (C) Copyright 2003-2008, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for the Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Tim Bardzil;
 *
 * Changes
 * -------
 * 21-Aug-2003 : Version 1, contributed by David Browning (for the Australian 
 *               Institute of Marine Science);
 * 01-Sep-2003 : Incorporated outlier and farout symbols for low values 
 *               also (DG);
 * 08-Sep-2003 : Changed ValueAxis API (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 12-Nov-2003 : Fixed casting bug reported by Tim Bardzil (DG);
 * 13-Nov-2003 : Added drawHorizontalItem() method contributed by Tim 
 *               Bardzil (DG);
 * 25-Apr-2004 : Added fillBox attribute, equals() method and added 
 *               serialization code (DG);
 * 29-Apr-2004 : Changed drawing of upper and lower shadows - see bug report 
 *               944011 (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 09-Mar-2005 : Override getLegendItem() method so that legend item shapes
 *               are shown as blocks (DG);
 * 20-Apr-2005 : Generate legend labels, tooltips and URLs (DG);
 * 09-Jun-2005 : Updated equals() to handle GradientPaint (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 12-Oct-2006 : Source reformatting and API doc updates (DG);
 * 12-Oct-2006 : Fixed bug 1572478, potential NullPointerException (DG);
 * 05-Feb-2006 : Added event notifications to a couple of methods (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 11-May-2007 : Added check for visibility in getLegendItem() (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 03-Jan-2008 : Check visibility of average marker before drawing it (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>Outlier</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>OutlierList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>OutlierListCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name>.<name>BoxAndWhiskerCategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A box-and-whisker renderer.  This renderer requires a 
 * {@link BoxAndWhiskerCategoryDataset} and is for use with the 
 * {@link CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>BoxAndWhiskerRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends> 
                                   <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                              <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>632027470694481177L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The color used to paint the median line and average marker. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>artifactPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the box is filled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fillBox</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The margin between items (boxes) within a category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>itemMargin</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>BoxAndWhiskerRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>artifactPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillBox</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = 0.20</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the paint used to color the median and average markers.
     * 
     * @return The paint used to draw the median and average markers (never
     *     &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setArtifactPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getArtifactPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>artifactPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to color the median and average markers and sends
     * a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getArtifactPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArtifactPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>artifactPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the box is filled.
     * 
     * @return A boolean.
     *
     * @see #setFillBox(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFillBox</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillBox</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the box is filled and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param flag  the flag.
     *
     * @see #getFillBox()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFillBox</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fillBox</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the item margin.  This is a percentage of the available space 
     * that is allocated to the space between items in the chart.
     * 
     * @return The margin.
     *
     * @see #setItemMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getItemMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>itemMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the item margin and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     * 
     * @param margin  the margin (a percentage).
     *
     * @see #getItemMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItemMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>cp</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cp</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// check that a legend item needs to be displayed...</comment>
        <if>if <condition>(<expr>!<call><name>isSeriesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> || !<call><name>isSeriesVisibleInLegend</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>cp</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                    <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4.0</expr></argument>, <argument><expr>-4.0</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>8.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer.  This method gets called once at the start of 
     * the process of drawing a chart.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data is to be plotted.
     * @param plot  the plot.
     * @param rendererIndex  the renderer index.
     * @param info  collects chart rendering information for return to caller.
     *
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                                <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                                <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                                <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>,
                <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// calculate the box width</comment>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rows</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>categoryMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>currentItemMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryMargin</name> = <call><name><name>domainAxis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>rows</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentItemMargin</name> = <call><name>getItemMargin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr><name>space</name> * (1 - <call><name><name>domainAxis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                                     - <call><name><name>domainAxis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call>
                                     - <name>categoryMargin</name> - <name>currentItemMargin</name>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>rows</name> * <name>columns</name>) &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><name>used</name> / (<call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call> 
                        * <call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area in which the data is drawn.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
                             
        <if>if <condition>(<expr>!(<name>dataset</name> <name>instanceof</name> <name>BoxAndWhiskerCategoryDataset</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"BoxAndWhiskerRenderer.drawItem() : the data should be " 
                    + "of type BoxAndWhiskerCategoryDataset only."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawHorizontalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawVerticalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item when the plot has 
     * a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawHorizontalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                   <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                   <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                   <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                   <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                   <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>BoxAndWhiskerCategoryDataset</name></type> <name>bawDataset</name> 
                =<init> <expr>(<name>BoxAndWhiskerCategoryDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>categoryEnd</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryEnd</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>categoryStart</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>categoryWidth</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>categoryEnd</name> - <name>categoryStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><name>categoryStart</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call>
                               / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>usedWidth</name> =<init> <expr>(<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> * <name>seriesCount</name>) 
                               + (<name>seriesGap</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <comment type="line">// offset the start of the boxes if the total width used is smaller</comment>
            <comment type="line">// than the category width</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr>(<name>categoryWidth</name> - <name>usedWidth</name>) / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>yy</name> = <name>yy</name> + <name>offset</name> + (<name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>))</expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <comment type="line">// offset the start of the box if the box width is smaller than </comment>
            <comment type="line">// the category width</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr>(<name>categoryWidth</name> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call>) / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>yy</name> = <name>yy</name> + <name>offset</name></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>s</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>location</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>xQ1</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getQ1Value</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>xQ3</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getQ3Value</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>xMax</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>xMin</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Shape</name></type> <name>box</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xQ1</name> != <name>null</name> &amp;&amp; <name>xQ3</name> != <name>null</name> &amp;&amp; <name>xMax</name> != <name>null</name> &amp;&amp; <name>xMin</name> != <name>null</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>double</name></type> <name>xxQ1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xQ1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xxQ3</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xQ3</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xxMax</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xMax</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xxMin</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xMin</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yymid</name> =<init> <expr><name>yy</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            
            <comment type="line">// draw the upper shadow...</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMax</name></expr></argument>, <argument><expr><name>yymid</name></expr></argument>, <argument><expr><name>xxQ3</name></expr></argument>, <argument><expr><name>yymid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMax</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xxMax</name></expr></argument>, 
                    <argument><expr><name>yy</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw the lower shadow...</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMin</name></expr></argument>, <argument><expr><name>yymid</name></expr></argument>, <argument><expr><name>xxQ1</name></expr></argument>, <argument><expr><name>yymid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMin</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xxMin</name></expr></argument>,
                    <argument><expr><name>yy</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw the box...</comment>
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxQ1</name></expr></argument>, <argument><expr><name>xxQ3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xxQ1</name> - <name>xxQ3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>fillBox</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if> 
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>aRadius</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>                 <comment type="line">// average radius</comment>

        <comment type="line">// draw mean - SPECIAL AIMS REQUIREMENT...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>xMean</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMeanValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xMean</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xxMean</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xMean</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>aRadius</name> = <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 4</expr>;</expr_stmt>
            <comment type="line">// here we check that the average marker will in fact be visible</comment>
            <comment type="line">// before drawing it...</comment>
            <if>if <condition>(<expr>(<name>xxMean</name> &gt; (<call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> - <name>aRadius</name>)) 
                    &amp;&amp; (<name>xxMean</name> &lt; (<call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name>aRadius</name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>avgEllipse</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMean</name> 
                        - <name>aRadius</name></expr></argument>, <argument><expr><name>yy</name> + <name>aRadius</name></expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// draw median...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>xMedian</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMedianValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xMedian</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xxMedian</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>xMedian</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxMedian</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xxMedian</name></expr></argument>, 
                    <argument><expr><name>yy</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <name>box</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> 
                        =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function> 
        
    <comment type="javadoc">/**
     * Draws the visual representation of a single data item when the plot has 
     * a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawVerticalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                 <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                 <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                 <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>, 
                                 <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                 <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, 
                                 <param><decl><type><name>int</name></type> <name>row</name></decl></param>, 
                                 <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>BoxAndWhiskerCategoryDataset</name></type> <name>bawDataset</name> 
                =<init> <expr>(<name>BoxAndWhiskerCategoryDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>categoryEnd</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryEnd</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>categoryStart</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>categoryWidth</name> =<init> <expr><name>categoryEnd</name> - <name>categoryStart</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><name>categoryStart</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call> 
                               / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>usedWidth</name> =<init> <expr>(<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> * <name>seriesCount</name>) 
                               + (<name>seriesGap</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <comment type="line">// offset the start of the boxes if the total width used is smaller</comment>
            <comment type="line">// than the category width</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr>(<name>categoryWidth</name> - <name>usedWidth</name>) / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>xx</name> = <name>xx</name> + <name>offset</name> + (<name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>))</expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <comment type="line">// offset the start of the box if the box width is smaller than the </comment>
            <comment type="line">// category width</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr>(<name>categoryWidth</name> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call>) / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>xx</name> = <name>xx</name> + <name>offset</name></expr>;</expr_stmt>
        }</block></else></if> 
        
        <decl_stmt><decl><type><name>double</name></type> <name>yyAverage</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyOutlier</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>s</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>aRadius</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>                 <comment type="line">// average radius</comment>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>location</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>yQ1</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getQ1Value</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yQ3</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getQ3Value</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMax</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMin</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>box</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yQ1</name> != <name>null</name> &amp;&amp; <name>yQ3</name> != <name>null</name> &amp;&amp; <name>yMax</name> != <name>null</name> &amp;&amp; <name>yMin</name> != <name>null</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>double</name></type> <name>yyQ1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yyQ3</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ3</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yyMax</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMax</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yyMin</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMin</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>xxmid</name> =<init> <expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            
            <comment type="line">// draw the upper shadow...</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxmid</name></expr></argument>, <argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xxmid</name></expr></argument>, <argument><expr><name>yyQ3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>yyMax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw the lower shadow...</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xxmid</name></expr></argument>, <argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xxmid</name></expr></argument>, <argument><expr><name>yyQ1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>yyMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw the body...</comment>
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yyQ1</name></expr></argument>, <argument><expr><name>yyQ3</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yyQ1</name> - <name>yyQ3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>fillBox</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
        }</block></then></if>
        
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw mean - SPECIAL AIMS REQUIREMENT...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMean</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMeanValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yMean</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yyAverage</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMean</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>aRadius</name> = <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 4</expr>;</expr_stmt>
            <comment type="line">// here we check that the average marker will in fact be visible</comment>
            <comment type="line">// before drawing it...</comment>
            <if>if <condition>(<expr>(<name>yyAverage</name> &gt; (<call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <name>aRadius</name>)) 
                    &amp;&amp; (<name>yyAverage</name> &lt; (<call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> + <name>aRadius</name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>avgEllipse</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>aRadius</name></expr></argument>, 
                        <argument><expr><name>yyAverage</name> - <name>aRadius</name></expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// draw median...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMedian</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMedianValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yMedian</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>yyMedian</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMedian</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMedian</name></expr></argument>, <argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>yyMedian</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// draw yOutliers...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>maxAxisValue</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><call><name><name>rangeAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call> + <name>aRadius</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>minAxisValue</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><call><name><name>rangeAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call> - <name>aRadius</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw outliers</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>oRadius</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 3</expr></init></decl>;</decl_stmt>    <comment type="line">// outlier radius</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>outliers</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutlierListCollection</name></type> <name>outlierListCollection</name> 
                =<init> <expr>new <call><name>OutlierListCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// From outlier array sort out which are outliers and put these into a </comment>
        <comment type="line">// list If there are any farouts, set the flag on the </comment>
        <comment type="line">// OutlierListCollection</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>yOutliers</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getOutliers</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yOutliers</name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>yOutliers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>outlier</name> =<init> <expr>((<name>Number</name>) <call><name><name>yOutliers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Number</name></type> <name>minOutlier</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMinOutlier</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Number</name></type> <name>maxOutlier</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMaxOutlier</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Number</name></type> <name>minRegular</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Number</name></type> <name>maxRegular</name> =<init> <expr><call><name><name>bawDataset</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>outlier</name> &gt; <call><name><name>maxOutlier</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>setHighFarOut</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <if>if <condition>(<expr><name>outlier</name> &lt; <call><name><name>minOutlier</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>setLowFarOut</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>outlier</name> &gt; <call><name><name>maxRegular</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>yyOutlier</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>outliers</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Outlier</name><argument_list>(<argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>, 
                            <argument><expr><name>yyOutlier</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>outlier</name> &lt; <call><name><name>minRegular</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>yyOutlier</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>outliers</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Outlier</name><argument_list>(<argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>, 
                            <argument><expr><name>yyOutlier</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>
                <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>outliers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// Process outliers. Each outlier is either added to the </comment>
            <comment type="line">// appropriate outlier list or a new outlier list is made</comment>
            <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>outliers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>Outlier</name></type> <name>outlier</name> =<init> <expr>(<name>Outlier</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>outlierListCollection</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
                     <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>OutlierList</name></type> <name>list</name> =<init> <expr>(<name>OutlierList</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Outlier</name></type> <name>outlier</name> =<init> <expr><call><name><name>list</name>.<name>getAveragedOutlier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Point2D</name></type> <name>point</name> =<init> <expr><call><name><name>outlier</name>.<name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>list</name>.<name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>drawMultipleEllipse</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, 
                            <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <expr_stmt><expr><call><name>drawEllipse</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>

            <comment type="line">// draw farout indicators</comment>
            <if>if <condition>(<expr><call><name><name>outlierListCollection</name>.<name>isHighFarOut</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawHighFarOut</name><argument_list>(<argument><expr><name>aRadius</name> / 2.0</expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>, <argument><expr><name>maxAxisValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        
            <if>if <condition>(<expr><call><name><name>outlierListCollection</name>.<name>isLowFarOut</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawLowFarOut</name><argument_list>(<argument><expr><name>aRadius</name> / 2.0</expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr><name>xx</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>, <argument><expr><name>minAxisValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name> &amp;&amp; <name>box</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> 
                        =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>,
                            <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a dot to represent an outlier. 
     * 
     * @param point  the location.
     * @param oRadius  the radius.
     * @param g2  the graphics device.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawEllipse</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>point</name></decl></param>, <param><decl><type><name>double</name></type> <name>oRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>dot</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>oRadius</name> / 2</expr></argument>, 
                <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws two dots to represent the average value of more than one outlier.
     * 
     * @param point  the location
     * @param boxWidth  the box width.
     * @param oRadius  the radius.
     * @param g2  the graphics device.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawMultipleEllipse</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>point</name></decl></param>, <param><decl><type><name>double</name></type> <name>boxWidth</name></decl></param>, 
                                     <param><decl><type><name>double</name></type> <name>oRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list>  <block>{
                                         
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>dot1</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> - (<name>boxWidth</name> / 2) 
                + <name>oRadius</name></expr></argument>, <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>dot2</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> + (<name>boxWidth</name> / 2)</expr></argument>, 
                <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a triangle to indicate the presence of far-out values.
     * 
     * @param aRadius  the radius.
     * @param g2  the graphics device.
     * @param xx  the x coordinate.
     * @param m  the y coordinate.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawHighFarOut</name><parameter_list>(<param><decl><type><name>double</name></type> <name>aRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>xx</name></decl></param>, 
                                <param><decl><type><name>double</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>side</name> =<init> <expr><name>aRadius</name> * 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a triangle to indicate the presence of far-out values.
     * 
     * @param aRadius  the radius.
     * @param g2  the graphics device.
     * @param xx  the x coordinate.
     * @param m  the y coordinate.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawLowFarOut</name><parameter_list>(<param><decl><type><name>double</name></type> <name>aRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>xx</name></decl></param>, 
                               <param><decl><type><name>double</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>side</name> =<init> <expr><name>aRadius</name> * 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>BoxAndWhiskerRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>BoxAndWhiskerRenderer</name></type> <name>that</name> =<init> <expr>(<name>BoxAndWhiskerRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>artifactPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>fillBox</name></name> == <name><name>that</name>.<name>fillBox</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>itemMargin</name></name> == <name><name>that</name>.<name>itemMargin</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>artifactPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
}</block></class>
</unit>
