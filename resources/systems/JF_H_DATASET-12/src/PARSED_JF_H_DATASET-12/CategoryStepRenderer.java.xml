<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\CategoryStepRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * CategoryStepRenderer.java
 * -------------------------
 *
 * (C) Copyright 2004-2007, by Brian Cole and Contributors.
 *
 * Original Author:  Brian Cole;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 21-Apr-2004 : Version 1, contributed by Brian Cole (DG);
 * 22-Apr-2004 : Fixed Checkstyle complaints (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 08-Mar-2005 : Added equals() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 30-Nov-2006 : Added checks for series visibility (DG);
 * 22-Feb-2007 : Use new state object for reusable line, enable chart entities 
 *               (for tooltips, URLs), added new getLegendItem() override (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>XYStepRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A "step" renderer similar to {@link XYStepRenderer} but
 * that can be used with the {@link CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryStepRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends>
                                  <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                             <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * State information for the renderer.
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>State</name> <super><extends>extends <name>CategoryItemRendererState</name></extends></super> <block>{

        <comment type="javadoc">/** 
         * A working line for re-use to avoid creating large numbers of
         * objects.
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state instance.
         * 
         * @param info  collects plot rendering information (&lt;code&gt;null&lt;/code&gt; 
         *              permitted).
         */</comment>
        <constructor><specifier>public</specifier> <name>State</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
    }</block></class>
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5121079703118261470L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The stagger width. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STAGGER_WIDTH</name> =<init> <expr>5</expr></init></decl>;</decl_stmt> <comment type="line">// could make this configurable</comment>
  
    <comment type="javadoc">/** 
     * A flag that controls whether or not the steps for multiple series are 
     * staggered. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>stagger</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Creates a new renderer (stagger defaults to &lt;code&gt;false&lt;/code&gt;).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryStepRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     *  
     * @param stagger  should the horizontal part of the step be staggered by 
     *                 series? 
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryStepRenderer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>stagger</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>stagger</name></name> = <name>stagger</name></expr>;</expr_stmt>
    }</block></constructor>
  
    <comment type="javadoc">/**
     * Returns the flag that controls whether the series steps are staggered.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getStagger</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>stagger</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the series steps are 
     * staggered and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param shouldStagger  a boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStagger</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>shouldStagger</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>stagger</name></name> = <name>shouldStagger</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>p</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// check that a legend item needs to be displayed...</comment>
        <if>if <condition>(<expr>!<call><name>isSeriesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> || !<call><name>isSeriesVisibleInLegend</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>p</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                    <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4.0</expr></argument>, <argument><expr>-3.0</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>6.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>item</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>item</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates a new state instance.  This method is called from 
     * {@link #initialise(Graphics2D, Rectangle2D, CategoryPlot, int, 
     * PlotRenderingInfo)}, and we override it to ensure that the state
     * contains a working Line2D instance.
     * 
     * @param info  the plot rendering info (&lt;code&gt;null&lt;/code&gt; is permitted).
     * 
     * @return A new state instance.
     */</comment>
    <function><type><specifier>protected</specifier> <name>CategoryItemRendererState</name></type> <name>createState</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>State</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a line taking into account the specified orientation.
     * &lt;p&gt;
     * In version 1.0.5, the signature of this method was changed by the 
     * addition of the 'state' parameter.  This is an incompatible change, but
     * is considered a low risk because it is unlikely that anyone has 
     * subclassed this renderer.  If this *does* cause trouble for you, please
     * report it as a bug.
     * 
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param orientation  the plot orientation.
     * @param x0  the x-coordinate for the start of the line.
     * @param y0  the y-coordinate for the start of the line.
     * @param x1  the x-coordinate for the end of the line.
     * @param y1  the y-coordinate for the end of the line.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLine</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>State</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, <param><decl><type><name>double</name></type> <name>x0</name></decl></param>, <param><decl><type><name>double</name></type> <name>y0</name></decl></param>, <param><decl><type><name>double</name></type> <name>x1</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>y1</name></decl></param>)</parameter_list> <block>{
     
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// switch x and y</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area in which the data is drawn.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// do nothing if item is not visible</comment>
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>
        
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// current data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1s</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1e</name> =<init> <expr>2 * <name>x1</name> - <name>x1s</name></expr></init></decl>;</decl_stmt> <comment type="line">// or: x1s + 2*(x1-x1s)</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>column</name> != 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>previousValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>previousValue</name> != <name>null</name></expr>)</condition><then> <block>{
                <comment type="line">// previous data point...</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>previous</name> =<init> <expr><call><name><name>previousValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x0s</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name> - 1</expr></argument>, 
                        <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name> - 1</expr></argument>, 
                        <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x0e</name> =<init> <expr>2 * <name>x0</name> - <name>x0s</name></expr></init></decl>;</decl_stmt> <comment type="line">// or: x0s + 2*(x0-x0s)</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getStagger</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>xStagger</name> =<init> <expr><name>row</name> * <name>STAGGER_WIDTH</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>xStagger</name> &gt; (<name>x1s</name> - <name>x0e</name>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>xStagger</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><name>x1s</name> - <name>x0e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>x1s</name> = <name>x0e</name> + <name>xStagger</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>drawLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>State</name>) <name>state</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>x0e</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1s</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <comment type="line">// extend x0's flat bar</comment>

                <expr_stmt><expr><call><name>drawLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>State</name>) <name>state</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>x1s</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1s</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <comment type="line">// upright bar</comment>
           }</block></then></if>
       }</block></then></if>
       <expr_stmt><expr><call><name>drawLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>State</name>) <name>state</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>x1s</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1e</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
       <comment type="line">// x1's flat bar</comment>

       <comment type="line">// draw the item labels if there are any...</comment>
       <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, 
                    <argument><expr>(<call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>

       <comment type="line">// add an item entity, if this information is being collected</comment>
       <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
           <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>hotspot</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
           <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
               <expr_stmt><expr><call><name><name>hotspot</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>x1s</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1e</name> - <name>x1s</name></expr></argument>, <argument><expr>4.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></then>
           <else>else <block>{
               <expr_stmt><expr><call><name><name>hotspot</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>y1</name> - 2.0</expr></argument>, <argument><expr><name>x1s</name></expr></argument>, <argument><expr>4.0</expr></argument>, <argument><expr><name>x1e</name> - <name>x1s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           }</block></else></if>
           <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>hotspot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryStepRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>CategoryStepRenderer</name></type> <name>that</name> =<init> <expr>(<name>CategoryStepRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>stagger</name></name> != <name><name>that</name>.<name>stagger</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
