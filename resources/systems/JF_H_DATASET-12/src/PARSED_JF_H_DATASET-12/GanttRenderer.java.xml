<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\GanttRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * GanttRenderer.java
 * ------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 16-Sep-2003 : Version 1 (DG);
 * 23-Sep-2003 : Fixed Checkstyle issues (DG);
 * 21-Oct-2003 : Bar width moved into CategoryItemRendererState (DG);
 * 03-Feb-2004 : Added get/set methods for attributes (DG);
 * 12-Aug-2004 : Fixed rendering problem with maxBarWidth attribute (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 01-Dec-2005 : Fix for bug 1369954, drawBarOutline flag ignored (DG);
 * ------------- JFREECHART 1.0.x --------------------------------------------
 * 17-Jan-2006 : Set includeBaseInRange flag to false (DG);
 * 20-Mar-2007 : Implemented equals() and fixed serialization (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>gantt</name>.<name>GanttCategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A renderer for simple Gantt charts.
 */</comment>
<class><specifier>public</specifier> class <name>GanttRenderer</name> <super><extends>extends <name>IntervalBarRenderer</name></extends>
                           <implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4010349116350119512L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint for displaying the percentage complete. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>completePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint for displaying the incomplete part of a task. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>incompletePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Controls the starting edge of the progress indicator (expressed as a 
     * percentage of the overall bar width).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startPercent</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Controls the ending edge of the progress indicator (expressed as a 
     * percentage of the overall bar width). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>endPercent</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>GanttRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setIncludeBaseInRange</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>completePaint</name></name> = <name><name>Color</name>.<name>green</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>incompletePaint</name></name> = <name><name>Color</name>.<name>red</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startPercent</name></name> = 0.35</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endPercent</name></name> = 0.65</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the paint used to show the percentage complete.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;.
     * 
     * @see #setCompletePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getCompletePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>completePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to show the percentage complete and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getCompletePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCompletePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>completePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to show the percentage incomplete.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setCompletePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getIncompletePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>incompletePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to show the percentage incomplete and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getIncompletePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIncompletePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>incompletePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the position of the start of the progress indicator, as a 
     * percentage of the bar width.
     * 
     * @return The start percent.
     * 
     * @see #setStartPercent(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartPercent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startPercent</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the position of the start of the progress indicator, as a 
     * percentage of the bar width, and sends a {@link RendererChangeEvent} to
     * all registered listeners.
     * 
     * @param percent  the percent.
     * 
     * @see #getStartPercent()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartPercent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startPercent</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the position of the end of the progress indicator, as a 
     * percentage of the bar width.
     * 
     * @return The end percent.
     * 
     * @see #setEndPercent(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEndPercent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>endPercent</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the position of the end of the progress indicator, as a percentage 
     * of the bar width, and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * 
     * @param percent  the percent.
     * 
     * @see #getEndPercent()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndPercent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>endPercent</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

         <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>GanttCategoryDataset</name></expr>)</condition><then> <block>{
             <decl_stmt><decl><type><name>GanttCategoryDataset</name></type> <name>gcd</name> =<init> <expr>(<name>GanttCategoryDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name>drawTasks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>gcd</name></expr></argument>, 
                     <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <else>else <block>{  <comment type="line">// let the superclass handle it...</comment>
             <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                     <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if>
 
     }</block></function>
                          
    <comment type="javadoc">/**
     * Draws the tasks/subtasks for one item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTasks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                             <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                             <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                             <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                             <param><decl><type><name>GanttCategoryDataset</name></type> <name>dataset</name></decl></param>,
                             <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                             <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>dataset</name>.<name>getSubIntervalCount</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawTask</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>subinterval</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>subinterval</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>subinterval</name>++</expr></incr>) <block>{
            
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// value 0</comment>
            <decl_stmt><decl><type><name>Number</name></type> <name>value0</name> =<init> <expr><call><name><name>dataset</name>.<name>getStartValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>subinterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value0</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>translatedValue0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><call><name><name>value0</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <comment type="line">// value 1</comment>
            <decl_stmt><decl><type><name>Number</name></type> <name>value1</name> =<init> <expr><call><name><name>dataset</name>.<name>getEndValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>subinterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>value1</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>translatedValue1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><call><name><name>value1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <if>if <condition>(<expr><name>translatedValue1</name> &lt; <name>translatedValue0</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>translatedValue1</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>translatedValue1</name> = <name>translatedValue0</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>translatedValue0</name> = <name>temp</name></expr>;</expr_stmt>
            }</block></then></if>
    
            <decl_stmt><decl><type><name>double</name></type> <name>rectStart</name> =<init> <expr><call><name>calculateBarW0</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rectLength</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedValue1</name> - <name>translatedValue0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rectBreadth</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
            <comment type="line">// DRAW THE BARS...</comment>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>translatedValue0</name></expr></argument>, <argument><expr><name>rectStart</name></expr></argument>, 
                        <argument><expr><name>rectLength</name></expr></argument>, <argument><expr><name>rectBreadth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name></expr></argument>, <argument><expr><name>translatedValue0</name></expr></argument>, 
                        <argument><expr><name>rectBreadth</name></expr></argument>, <argument><expr><name>rectLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
    
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>completeBar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>incompleteBar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>percent</name> =<init> <expr><call><name><name>dataset</name>.<name>getPercentComplete</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, 
                    <argument><expr><name>subinterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name>getStartPercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name>getEndPercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>percent</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>p</name> =<init> <expr><call><name><name>percent</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>completeBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>translatedValue0</name></expr></argument>, 
                            <argument><expr><name>rectStart</name> + <name>start</name> * <name>rectBreadth</name></expr></argument>, <argument><expr><name>rectLength</name> * <name>p</name></expr></argument>, 
                            <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>incompleteBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>translatedValue0</name> 
                            + <name>rectLength</name> * <name>p</name></expr></argument>, <argument><expr><name>rectStart</name> + <name>start</name> * <name>rectBreadth</name></expr></argument>, 
                            <argument><expr><name>rectLength</name> * (1 - <name>p</name>)</expr></argument>, <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>completeBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name> + <name>start</name> 
                            * <name>rectBreadth</name></expr></argument>, <argument><expr><name>translatedValue0</name> + <name>rectLength</name> 
                            * (1 - <name>p</name>)</expr></argument>, <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>, 
                            <argument><expr><name>rectLength</name> * <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>incompleteBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name> + <name>start</name> 
                            * <name>rectBreadth</name></expr></argument>, <argument><expr><name>translatedValue0</name></expr></argument>, <argument><expr><name>rectBreadth</name> 
                            * (<name>end</name> - <name>start</name>)</expr></argument>, <argument><expr><name>rectLength</name> * (1 - <name>p</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                
            }</block></then></if>

            <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>completeBar</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getCompletePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>completeBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>incompleteBar</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getIncompletePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>incompleteBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                    &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
    
            <comment type="line">// collect entity and tool tip information...</comment>
            <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>tip</name> = <call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateToolTip</name><argument_list>(
                                <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(
                                <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(
                            <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a single task.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTask</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                            <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                            <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                            <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                            <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                            <param><decl><type><name>GanttCategoryDataset</name></type> <name>dataset</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// Y0</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value0</name> =<init> <expr><call><name><name>dataset</name>.<name>getEndValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value0</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>java2dValue0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>value0</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Y1</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value1</name> =<init> <expr><call><name><name>dataset</name>.<name>getStartValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>java2dValue1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>value1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>java2dValue1</name> &lt; <name>java2dValue0</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>java2dValue1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>java2dValue1</name> = <name>java2dValue0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>java2dValue0</name> = <name>temp</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>tempNum</name> =<init> <expr><name>value1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>value1</name> = <name>value0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>value0</name> = <name>tempNum</name></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>rectStart</name> =<init> <expr><call><name>calculateBarW0</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectBreadth</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectLength</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>java2dValue1</name> - <name>java2dValue0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>java2dValue0</name></expr></argument>, <argument><expr><name>rectStart</name></expr></argument>, <argument><expr><name>rectLength</name></expr></argument>, 
                    <argument><expr><name>rectBreadth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name></expr></argument>, <argument><expr><name>java2dValue1</name></expr></argument>, <argument><expr><name>rectBreadth</name></expr></argument>, 
                    <argument><expr><name>rectLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>completeBar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>incompleteBar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>percent</name> =<init> <expr><call><name><name>dataset</name>.<name>getPercentComplete</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init> <expr><call><name>getStartPercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name>getEndPercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>percent</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>p</name> =<init> <expr><call><name><name>percent</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>completeBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>java2dValue0</name></expr></argument>, 
                        <argument><expr><name>rectStart</name> + <name>start</name> * <name>rectBreadth</name></expr></argument>, <argument><expr><name>rectLength</name> * <name>p</name></expr></argument>, 
                        <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>incompleteBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>java2dValue0</name> 
                        + <name>rectLength</name> * <name>p</name></expr></argument>, <argument><expr><name>rectStart</name> + <name>start</name> * <name>rectBreadth</name></expr></argument>, 
                        <argument><expr><name>rectLength</name> * (1 - <name>p</name>)</expr></argument>, <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>completeBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name> + <name>start</name> 
                        * <name>rectBreadth</name></expr></argument>, <argument><expr><name>java2dValue1</name> + <name>rectLength</name> * (1 - <name>p</name>)</expr></argument>, 
                        <argument><expr><name>rectBreadth</name> * (<name>end</name> - <name>start</name>)</expr></argument>, <argument><expr><name>rectLength</name> * <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>incompleteBar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectStart</name> + <name>start</name> 
                        * <name>rectBreadth</name></expr></argument>, <argument><expr><name>java2dValue1</name></expr></argument>, <argument><expr><name>rectBreadth</name> * (<name>end</name> 
                        - <name>start</name>)</expr></argument>, <argument><expr><name>rectLength</name> * (1 - <name>p</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
                
        }</block></then></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>completeBar</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getCompletePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>completeBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>incompleteBar</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getIncompletePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>incompleteBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                        <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>GanttRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>GanttRenderer</name></type> <name>that</name> =<init> <expr>(<name>GanttRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>completePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>completePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>incompletePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>incompletePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>startPercent</name></name> != <name><name>that</name>.<name>startPercent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>endPercent</name></name> != <name><name>that</name>.<name>endPercent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>completePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>incompletePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>completePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>incompletePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
