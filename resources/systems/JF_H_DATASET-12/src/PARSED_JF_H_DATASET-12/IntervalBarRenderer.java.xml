<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\IntervalBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * IntervalBarRenderer.java
 * ------------------------
 * (C) Copyright 2002-2007, by Jeremy Bowman.
 *
 * Original Author:  Jeremy Bowman;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Christian W. Zuckschwerdt;
 *
 * Changes
 * -------
 * 29-Apr-2002 : Version 1, contributed by Jeremy Bowman (DG);
 * 11-May-2002 : Use CategoryPlot.getLabelsVisible() (JB);
 * 29-May-2002 : Added constructors (DG);
 * 26-Jun-2002 : Added axis to initialise method (DG);
 * 20-Sep-2002 : Added basic support for chart entities (DG);
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 19-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 08-Sep-2003 : Added checks for null values (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 21-Oct-2003 : Bar width moved into renderer state (DG);
 * 23-Dec-2003 : Removed the deprecated MultiIntervalCategoryDataset 
 *               interface (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>IntervalCategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that handles the drawing of bars for a bar plot where
 * each bar has a high and low value.
 * &lt;p&gt;
 * For use with the {@link CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>IntervalBarRenderer</name> <super><extends>extends <name>BarRenderer</name></extends>
                                 <implements>implements <name>CategoryItemRenderer</name>, 
                                            <name>Cloneable</name>, 
                                            <name>PublicCloneable</name>, 
                                            <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5068857361615528725L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

         <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>IntervalCategoryDataset</name></expr>)</condition><then> <block>{
             <decl_stmt><decl><type><name>IntervalCategoryDataset</name></type> <name>d</name> =<init> <expr>(<name>IntervalCategoryDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><call><name>drawInterval</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                     <argument><expr><name>d</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then>
         <else>else <block>{
             <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                     <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></else></if> 
         
     }</block></function>
                          
     <comment type="javadoc">/**
      * Draws a single interval.
      *
      * @param g2  the graphics device.
      * @param state  the renderer state.
      * @param dataArea  the data plot area.
      * @param plot  the plot.
      * @param domainAxis  the domain axis.
      * @param rangeAxis  the range axis.
      * @param dataset  the data.
      * @param row  the row index (zero-based).
      * @param column  the column index (zero-based).
      */</comment>
     <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawInterval</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                 <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                 <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                 <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                 <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                 <param><decl><type><name>IntervalCategoryDataset</name></type> <name>dataset</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>rectX</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectY</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// Y0</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value0</name> =<init> <expr><call><name><name>dataset</name>.<name>getEndValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value0</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>java2dValue0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
            <argument><expr><call><name><name>value0</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Y1</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value1</name> =<init> <expr><call><name><name>dataset</name>.<name>getStartValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>java2dValue1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><call><name><name>value1</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>java2dValue1</name> &lt; <name>java2dValue0</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>java2dValue1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>java2dValue1</name> = <name>java2dValue0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>java2dValue0</name> = <name>temp</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>tempNum</name> =<init> <expr><name>value1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>value1</name> = <name>value0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>value0</name> = <name>tempNum</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// BAR WIDTH</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectWidth</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// BAR HEIGHT</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectHeight</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>java2dValue1</name> - <name>java2dValue0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// BAR Y</comment>
            <expr_stmt><expr><name>rectY</name> = <call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(
                <argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxisLocation</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call>
                                   / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>rectY</name> = <name>rectY</name> + <name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rectY</name> = <name>rectY</name> + <name>row</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <expr_stmt><expr><name>rectX</name> = <name>java2dValue0</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>rectHeight</name> = <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rectWidth</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>java2dValue1</name> - <name>java2dValue0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// BAR X</comment>
            <expr_stmt><expr><name>rectX</name> = <call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call>
                                   / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>rectX</name> = <name>rectX</name> + <name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rectX</name> = <name>rectX</name> + <name>row</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>rectY</name> = <name>java2dValue0</name></expr>;</expr_stmt>

        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectX</name></expr></argument>, <argument><expr><name>rectY</name></expr></argument>, <argument><expr><name>rectWidth</name></expr></argument>, 
                <argument><expr><name>rectHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>,
                <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> 
                        =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

}</block></class>
</unit>
