<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\LayeredBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * LayeredBarRenderer.java
 * -----------------------
 * (C) Copyright 2003-2007, by Arnaud Lelievre and Contributors.
 *
 * Original Author:  Arnaud Lelievre (for Garden);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Zoheb Borbora;
 *
 * Changes
 * -------
 * 28-Aug-2003 : Version 1 (AL);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 21-Oct-2003 : Bar width moved to renderer state (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 17-Nov-2005 : Added support for gradient paint (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 18-Aug-2006 : Fixed the bar width calculation to respect the maximum bar 
 *               width setting (thanks to Zoheb Borbora) (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectList</name></name>;</import>

<comment type="javadoc">/**
 * A {@link CategoryItemRenderer} that represents data using bars which are 
 * superimposed.
 */</comment>
<class><specifier>public</specifier> class <name>LayeredBarRenderer</name> <super><extends>extends <name>BarRenderer</name></extends> 
                                <implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8716572894780469487L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A list of the width of each series bar. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>ObjectList</name></type> <name>seriesBarWidthList</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>LayeredBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesBarWidthList</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the bar width for a series, or &lt;code&gt;Double.NaN&lt;/code&gt; if no
     * width has been set.
     *
     * @param series  the series index (zero based).
     *
     * @return The width for the series (1.0=100%, it is the maximum).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getSeriesBarWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr>(<name>Number</name>) <call><name><name>this</name>.<name>seriesBarWidthList</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the width of the bars of a series.
     *
     * @param series  the series index (zero based).
     * @param width  the width of the series bar in percentage (1.0=100%, it is 
     *               the maximum).
     */</comment> 
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesBarWidth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesBarWidthList</name>.<name>set</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the bar width and stores it in the renderer state.
     * 
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param rendererIndex  the renderer index.
     * @param state  the renderer state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>calculateBarWidth</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                     <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                     <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                     <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// calculate the bar width - this calculation differs from the</comment>
        <comment type="line">// BarRenderer calculation because the bars are layered on top of one</comment>
        <comment type="line">// another, so there is effectively only one bar per category for</comment>
        <comment type="line">// the purpose of the bar width calculation</comment>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rows</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr><name>space</name> * <call><name>getMaximumBarWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>categoryMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryMargin</name> = <call><name><name>domainAxis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr><name>space</name> * (1 - <call><name><name>domainAxis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                - <call><name><name>domainAxis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call> - <name>categoryMargin</name>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>rows</name> * <name>columns</name>) &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name> / (<call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call>)</expr></argument>, 
                        <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the bar for one item in the dataset.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain (category) axis.
     * @param rangeAxis  the range (value) axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>data</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawHorizontalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawVerticalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                    <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawHorizontalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                      <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                      <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                      <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                      <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                      <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                      <param><decl><type><name>CategoryDataset</name></type> <name>data</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// nothing is drawn for null values...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name><name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataValue</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// X</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>base</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lclip</name> =<init> <expr><call><name>getLowerClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uclip</name> =<init> <expr><call><name>getUpperClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>uclip</name> &lt;= 0.0</expr>)</condition><then> <block>{  <comment type="line">// cases 1, 2, 3 and 4</comment>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
                <return>return;</return> <comment type="line">// bar is not visible</comment>
            }</block></then></if>
            <expr_stmt><expr><name>base</name> = <name>uclip</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <name>lclip</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>lclip</name> &lt;= 0.0</expr>)</condition><then> <block>{ <comment type="line">// cases 5, 6, 7 and 8</comment>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <name>uclip</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>value</name> = <name>lclip</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then>
        <else>else <block>{ <comment type="line">// cases 9, 10, 11 and 12</comment>
            <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                <return>return;</return> <comment type="line">// bar is not visible</comment>
            }</block></then></if>
            <expr_stmt><expr><name>base</name> = <name>lclip</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <name>uclip</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if></else></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectX</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transX2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectWidth</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>transX2</name> - <name>transX1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Y</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectY</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the bar...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>shift</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectHeight</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>widthFactor</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>seriesBarWidth</name> =<init> <expr><call><name>getSeriesBarWidth</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>seriesBarWidth</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>widthFactor</name> = <name>seriesBarWidth</name></expr>;</expr_stmt>
        }</block></then></if> 
        <expr_stmt><expr><name>rectHeight</name> = <name>widthFactor</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rectY</name> = <name>rectY</name> + (1 - <name>widthFactor</name>) * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>shift</name> = <name>rectHeight</name> * 0.20 / (<name>seriesCount</name> - 1)</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectX</name></expr></argument>, 
                <argument><expr>(<name>rectY</name> + ((<name>seriesCount</name> - 1 - <name>row</name>) * <name>shift</name>))</expr></argument>, <argument><expr><name>rectWidth</name></expr></argument>, 
                <argument><expr>(<name>rectHeight</name> - (<name>seriesCount</name> - 1 - <name>row</name>) * <name>shift</name> * 2)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GradientPaintTransformer</name></type> <name>t</name> =<init> <expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name> != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>itemPaint</name> = <call><name><name>t</name>.<name>transform</name></name><argument_list>(<argument><expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
            =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>(<name>transX1</name> &gt; <name>transX2</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> 
                    =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>data</name></expr></argument>, 
                            <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>data</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>data</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawVerticalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                    <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                    <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                    <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                    <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                    <param><decl><type><name>CategoryDataset</name></type> <name>data</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// nothing is drawn for null values...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name><name>data</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataValue</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// BAR X</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// BAR Y</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>base</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lclip</name> =<init> <expr><call><name>getLowerClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uclip</name> =<init> <expr><call><name>getUpperClip</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>uclip</name> &lt;= 0.0</expr>)</condition><then> <block>{  <comment type="line">// cases 1, 2, 3 and 4</comment>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
                <return>return;</return> <comment type="line">// bar is not visible</comment>
            }</block></then></if>
            <expr_stmt><expr><name>base</name> = <name>uclip</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <name>lclip</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>lclip</name> &lt;= 0.0</expr>)</condition><then> <block>{ <comment type="line">// cases 5, 6, 7 and 8</comment>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = <name>uclip</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>value</name> = <name>lclip</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then>
        <else>else <block>{ <comment type="line">// cases 9, 10, 11 and 12</comment>
            <if>if <condition>(<expr><name>value</name> &lt;= <name>lclip</name></expr>)</condition><then> <block>{
                <return>return;</return> <comment type="line">// bar is not visible</comment>
            }</block></then></if>
            <expr_stmt><expr><name>base</name> = <call><name>getLowerClip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>value</name> &gt;= <name>uclip</name></expr>)</condition><then> <block>{
               <expr_stmt><expr><name>value</name> = <name>uclip</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if></else></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectY</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>transY2</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>rectWidth</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectHeight</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>transY2</name> - <name>transY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the bar...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>shift</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rectWidth</name> = 0.0</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>widthFactor</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>seriesBarWidth</name> =<init> <expr><call><name>getSeriesBarWidth</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>seriesBarWidth</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>widthFactor</name> = <name>seriesBarWidth</name></expr>;</expr_stmt>
        }</block></then></if> 
        <expr_stmt><expr><name>rectWidth</name> = <name>widthFactor</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rectX</name> = <name>rectX</name> + (1 - <name>widthFactor</name>) * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <comment type="line">// needs to be improved !!!</comment>
            <expr_stmt><expr><name>shift</name> = <name>rectWidth</name> * 0.20 / (<name>seriesCount</name> - 1)</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
            <argument><expr>(<name>rectX</name> + ((<name>seriesCount</name> - 1 - <name>row</name>) * <name>shift</name>))</expr></argument>, <argument><expr><name>rectY</name></expr></argument>,
            <argument><expr>(<name>rectWidth</name> - (<name>seriesCount</name> - 1 - <name>row</name>) * <name>shift</name> * 2)</expr></argument>, <argument><expr><name>rectHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GradientPaintTransformer</name></type> <name>t</name> =<init> <expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>t</name> != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>itemPaint</name> = <call><name><name>t</name>.<name>transform</name></name><argument_list>(<argument><expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// draw the item labels if there are any...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
            =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>(<name>transX1</name> &gt; <name>transX2</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> 
                    =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(
                        <argument><expr><name>data</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(<argument><expr><name>bar</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                        <argument><expr><name>url</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name><name>data</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>data</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

}</block></class>
</unit>
