<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\LevelRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * LevelRenderer.java
 * ------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 09-Jan-2004 : Version 1 (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 23-Jan-2006 : Renamed getMaxItemWidth() --&gt; getMaximumItemWidth() (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A {@link CategoryItemRenderer} that draws individual data items as 
 * horizontal lines, spaced in the same way as bars in a bar chart.
 */</comment>
<class><specifier>public</specifier> class <name>LevelRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends> 
                           <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8204856624355025117L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default item margin percentage. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_ITEM_MARGIN</name> =<init> <expr>0.20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The margin between items within a category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>itemMargin</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum item width as a percentage of the available space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maxItemWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer with default settings.
     */</comment>
    <constructor><specifier>public</specifier> <name>LevelRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = <name>DEFAULT_ITEM_MARGIN</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxItemWidth</name></name> = 1.0</expr>;</expr_stmt>  <comment type="line">// 100 percent, so it will not apply unless </comment>
                                  <comment type="line">// changed</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the item margin.
     *
     * @return The margin.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getItemMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>itemMargin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the item margin and sends a {@link RendererChangeEvent} to all
     * registered listeners.  The value is expressed as a percentage of the 
     * available width for plotting all the bars, with the resulting amount to 
     * be distributed between all the bars evenly.
     *
     * @param percent  the new margin.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setItemMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>itemMargin</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum width, as a percentage of the available drawing 
     * space.
     * 
     * @return The maximum width.
     * 
     * @deprecated Use {@link #getMaximumItemWidth()} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaxItemWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxItemWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum item width, which is specified as a percentage of the 
     * available space for all items, and sends a {@link RendererChangeEvent} 
     * to all registered listeners.
     * 
     * @param percent  the percent.
     * 
     * @deprecated Use {@link #setMaximumItemWidth(double)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxItemWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxItemWidth</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum width, as a percentage of the available drawing 
     * space.
     * 
     * @return The maximum width.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaximumItemWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getMaxItemWidth</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum item width, which is specified as a percentage of the 
     * available space for all items, and sends a {@link RendererChangeEvent} 
     * to all registered listeners.
     * 
     * @param percent  the percent.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumItemWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setMaxItemWidth</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that will be passed 
     * to subsequent calls to the drawItem method.
     * &lt;p&gt;
     * This method gets called once at the start of the process of drawing a 
     * chart.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data is to be plotted.
     * @param plot  the plot.
     * @param rendererIndex  the renderer index.
     * @param info  collects chart rendering information for return to caller.
     * 
     * @return The renderer state.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                                <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                                                <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                                <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>calculateItemWidth</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the bar width and stores it in the renderer state.
     * 
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param rendererIndex  the renderer index.
     * @param state  the renderer state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>calculateItemWidth</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                      <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                      <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                      <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
                                         
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rows</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr><name>space</name> * <call><name>getMaxItemWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>categoryMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>currentItemMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryMargin</name> = <call><name><name>domainAxis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>rows</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentItemMargin</name> = <call><name>getItemMargin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr><name>space</name> * (1 - <call><name><name>domainAxis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                                     - <call><name><name>domainAxis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call>
                                     - <name>categoryMargin</name> - <name>currentItemMargin</name>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>rows</name> * <name>columns</name>) &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name> / (<name>rows</name> * <name>columns</name>)</expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the coordinate of the first "side" of a bar.  This will be 
     * the minimum x-coordinate for a vertical bar, and the minimum 
     * y-coordinate for a horizontal bar.
     * 
     * @param plot  the plot.
     * @param orientation  the plot orientation.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param state  the renderer state (has the bar width precalculated).
     * @param row  the row index.
     * @param column  the column index.
     * 
     * @return The coordinate.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateBarW0</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                    <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, 
                                    <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                                    <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// calculate bar width...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>barW0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><name>space</name> * <call><name>getItemMargin</name><argument_list>()</argument_list></call> 
                    / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>seriesW</name> =<init> <expr><call><name>calculateSeriesWidth</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>seriesCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>barW0</name> = <name>barW0</name> + <name>row</name> * (<name>seriesW</name> + <name>seriesGap</name>) 
                          + (<name>seriesW</name> / 2.0) - (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0)</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>barW0</name> = <call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> 
                    / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>barW0</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
            <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// nothing is drawn for null values...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataValue</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barW0</name> =<init> <expr><call><name>calculateBarW0</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                <argument><expr><name>state</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barL</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the bar...</comment>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>x</name> = <name>barL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> = <name>barW0</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barL</name></expr></argument>, <argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barL</name></expr></argument>, 
                    <argument><expr><name>barW0</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>x</name> = <name>barW0</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> = <name>barL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>barW0</name></expr></argument>, <argument><expr><name>barL</name></expr></argument>, <argument><expr><name>barW0</name> + <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>barL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>itemStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>itemStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                    <argument><expr>(<name>value</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
                
        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CategoryToolTipGenerator</name></type> <name>tipster</name> =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, 
                        <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tipster</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>tipster</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getItemURLGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>,
                            <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(
                        <argument><expr><call><name><name>line</name>.<name>getBounds</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, 
                        <argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the available space for each series.
     * 
     * @param space  the space along the entire axis (in Java2D units).
     * @param axis  the category axis.
     * @param categories  the number of categories.
     * @param series  the number of series.
     * 
     * @return The width of one series.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateSeriesWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>, 
                                          <param><decl><type><name>int</name></type> <name>categories</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>factor</name> =<init> <expr>1.0 - <call><name>getItemMargin</name><argument_list>()</argument_list></call> - <call><name><name>axis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                        - <call><name><name>axis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>categories</name> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>factor</name> = <name>factor</name> - <call><name><name>axis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr>(<name>space</name> * <name>factor</name>) / (<name>categories</name> * <name>series</name>)</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests an object for equality with this instance.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>LevelRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LevelRenderer</name></type> <name>that</name> =<init> <expr>(<name>LevelRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>itemMargin</name></name> != <name><name>that</name>.<name>itemMargin</name></name></expr>)</condition><then> <block>{              
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>maxItemWidth</name></name> != <name><name>that</name>.<name>maxItemWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
