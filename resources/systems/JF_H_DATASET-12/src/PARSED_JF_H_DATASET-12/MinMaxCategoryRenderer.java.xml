<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\MinMaxCategoryRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * MinMaxCategoryRenderer.java
 * ---------------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  Tomer Peretz;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Christian W. Zuckschwerdt;
 *                   Nicolas Brodu (for Astrium and EADS Corporate Research 
 *                   Center);
 *
 * Changes:
 * --------
 * 29-May-2002 : Version 1 (TP);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG);
 * 17-Jan-2003 : Moved plot classes to a separate package (DG);
 * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in drawItem() 
 *               method (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 08-Sep-2003 : Implemented Serializable (NB);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 17-Nov-2005 : Added change events and argument checks (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 09-Mar-2007 : Fixed problem with horizontal rendering (DG);
 * 28-Sep-2007 : Added equals() method override (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Component</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>AffineTransform</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>Icon</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Renderer for drawing min max plot. This renderer draws all the series under 
 * the same category in the same x position using &lt;code&gt;objectIcon&lt;/code&gt; and 
 * a line from the maximum value to the minimum value.
 * &lt;p&gt;
 * For use with the {@link org.jfree.chart.plot.CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>MinMaxCategoryRenderer</name> <super><extends>extends <name>AbstractCategoryItemRenderer</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2935615937671064911L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag indicating whether or not lines are drawn between XY points. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotLines</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint of the line between the minimum value and the maximum value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>groupPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The stroke of the line between the minimum value and the maximum value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>groupStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The icon used to indicate the minimum value.*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Icon</name></type> <name>minIcon</name> =<init> <expr><call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>-4</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>,
            <argument><expr>360</expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The icon used to indicate the maximum value.*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Icon</name></type> <name>maxIcon</name> =<init> <expr><call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>-4</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>,
            <argument><expr>360</expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The icon used to indicate the values.*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Icon</name></type> <name>objectIcon</name> =<init> <expr><call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The last category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>lastCategory</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>min</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>max</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>MinMaxCategoryRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Gets whether or not lines are drawn between category points.
     *
     * @return boolean true if line will be drawn between sequenced categories,
     *         otherwise false.
     *         
     * @see #setDrawLines(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDrawLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotLines</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not lines are drawn to connect
     * the items within a series and sends a {@link RendererChangeEvent} to 
     * all registered listeners.
     *
     * @param draw  the new value of the flag.
     * 
     * @see #isDrawLines()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawLines</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name> != <name>draw</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotLines</name></name> = <name>draw</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the line between the minimum and maximum
     * value items in each category.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setGroupPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getGroupPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>groupPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the line between the minimum and maximum
     * value items in each category and sends a {@link RendererChangeEvent} to
     * all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getGroupPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGroupPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>groupPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw the line between the minimum and maximum
     * value items in each category.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setGroupStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getGroupStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>groupStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke of the line between the minimum value and the maximum 
     * value and sends a {@link RendererChangeEvent} to all registered 
     * listeners.
     *
     * @param stroke the new stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGroupStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>groupStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the icon drawn for each data item.
     *
     * @return The icon (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setObjectIcon(Icon)
     */</comment>
    <function><type><specifier>public</specifier> <name>Icon</name></type> <name>getObjectIcon</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>objectIcon</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the icon drawn for each data item and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param icon  the icon.
     * 
     * @see #getObjectIcon()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setObjectIcon</name><parameter_list>(<param><decl><type><name>Icon</name></type> <name>icon</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>icon</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'icon' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>objectIcon</name></name> = <name>icon</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the icon displayed for the maximum value data item within each
     * category.
     *
     * @return The icon (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMaxIcon(Icon)
     */</comment>
    <function><type><specifier>public</specifier> <name>Icon</name></type> <name>getMaxIcon</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxIcon</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the icon displayed for the maximum value data item within each
     * category and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param icon  the icon (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMaxIcon()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxIcon</name><parameter_list>(<param><decl><type><name>Icon</name></type> <name>icon</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>icon</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'icon' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>maxIcon</name></name> = <name>icon</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the icon displayed for the minimum value data item within each
     * category.
     *
     * @return The icon (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMinIcon(Icon)
     */</comment>
    <function><type><specifier>public</specifier> <name>Icon</name></type> <name>getMinIcon</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minIcon</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the icon displayed for the minimum value data item within each
     * category and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param icon  the icon (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMinIcon()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinIcon</name><parameter_list>(<param><decl><type><name>Icon</name></type> <name>icon</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>icon</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'icon' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minIcon</name></name> = <name>icon</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area in which the data is drawn.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
            <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// first check the number we are plotting...</comment>
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// current data point...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>shape</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name> - 4</expr></argument>, <argument><expr><name>y1</name> - 4</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>8.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orient</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>objectIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>objectIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <if>if <condition>(<expr><name><name>this</name>.<name>lastCategory</name></name> == <name>column</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>min</name></name> &gt; <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>min</name></name> = <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>this</name>.<name>max</name></name> &lt; <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>max</name></name> = <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <comment type="line">// last series, so we are ready to draw the min and max</comment>
                <if>if <condition>(<expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call> - 1 == <name>row</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groupPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groupStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>minY</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>min</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>maxY</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>max</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    
                    <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>minY</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>maxY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>minIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>minY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>maxIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>maxY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>minY</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>maxY</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>minIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>minY</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>maxIcon</name>.<name>paintIcon</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>maxY</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then>
            <else>else <block>{  <comment type="line">// reset the min and max</comment>
                <expr_stmt><expr><name><name>this</name>.<name>lastCategory</name></name> = <name>column</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>min</name></name> = <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>max</name></name> = <call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <comment type="line">// connect to the previous point</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>column</name> != 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Number</name></type> <name>previousValue</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>previousValue</name> != <name>null</name></expr>)</condition><then> <block>{
                        <comment type="line">// previous data point...</comment>
                        <decl_stmt><decl><type><name>double</name></type> <name>previous</name> =<init> <expr><call><name><name>previousValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name> - 1</expr></argument>, 
                                <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// add an item entity, if this information is being collected</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <name>shape</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.  The icon 
     * fields are NOT included in the test, so this implementation is a little 
     * weak.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MinMaxCategoryRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MinMaxCategoryRenderer</name></type> <name>that</name> =<init> <expr>(<name>MinMaxCategoryRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name> != <name><name>that</name>.<name>plotLines</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groupPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>groupPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>groupStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>groupStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an icon.
     *
     * @param shape  the shape.
     * @param fillPaint  the fill paint.
     * @param outlinePaint  the outline paint.
     *
     * @return The icon.
     */</comment>
    <function><type><specifier>private</specifier> <name>Icon</name></type> <name>getIcon</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Paint</name></type> <name>fillPaint</name></decl></param>, 
                        <param><decl><type><specifier>final</specifier> <name>Paint</name></type> <name>outlinePaint</name></decl></param>)</parameter_list> <block>{

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> =<init> <expr><call><name><name>shape</name>.<name>getBounds</name></name><argument_list>()</argument_list></call>.<name>width</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> =<init> <expr><call><name><name>shape</name>.<name>getBounds</name></name><argument_list>()</argument_list></call>.<name>height</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>GeneralPath</name></type> <name>path</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr>new <class><super><name>Icon</name></super><argument_list>()</argument_list> <block>{
          <function><type><specifier>public</specifier> <name>void</name></type> <name>paintIcon</name><parameter_list>(<param><decl><type><name>Component</name></type> <name>c</name></decl></param>, <param><decl><type><name>Graphics</name></type> <name>g</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
              <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <name>g</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>path</name>.<name>transform</name></name><argument_list>(<argument><expr><call><name><name>AffineTransform</name>.<name>getTranslateInstance</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>fillPaint</name> != <name>null</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>fillPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <if>if <condition>(<expr><name>outlinePaint</name> != <name>null</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><call><name><name>path</name>.<name>transform</name></name><argument_list>(<argument><expr><call><name><name>AffineTransform</name>.<name>getTranslateInstance</name></name><argument_list>(<argument><expr>-<name>x</name></expr></argument>, <argument><expr>-<name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getIconWidth</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>width</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>getIconHeight</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>height</name></expr>;</return>
        }</block></function>

      }</block></class></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an icon from a shape.
     *
     * @param shape  the shape.
     * @param fill  the fill flag.
     * @param outline  the outline flag.
     *
     * @return The icon.
     */</comment>
    <function><type><specifier>private</specifier> <name>Icon</name></type> <name>getIcon</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>fill</name></decl></param>, 
            <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>outline</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> =<init> <expr><call><name><name>shape</name>.<name>getBounds</name></name><argument_list>()</argument_list></call>.<name>width</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> =<init> <expr><call><name><name>shape</name>.<name>getBounds</name></name><argument_list>()</argument_list></call>.<name>height</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>GeneralPath</name></type> <name>path</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <class><super><name>Icon</name></super><argument_list>()</argument_list> <block>{
            <function><type><specifier>public</specifier> <name>void</name></type> <name>paintIcon</name><parameter_list>(<param><decl><type><name>Component</name></type> <name>c</name></decl></param>, <param><decl><type><name>Graphics</name></type> <name>g</name></decl></param>, <param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>Graphics2D</name></type> <name>g2</name> =<init> <expr>(<name>Graphics2D</name>) <name>g</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>path</name>.<name>transform</name></name><argument_list>(<argument><expr><call><name><name>AffineTransform</name>.<name>getTranslateInstance</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>fill</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>outline</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>path</name>.<name>transform</name></name><argument_list>(<argument><expr><call><name><name>AffineTransform</name>.<name>getTranslateInstance</name></name><argument_list>(<argument><expr>-<name>x</name></expr></argument>, <argument><expr>-<name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>getIconWidth</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>width</name></expr>;</return>
            }</block></function>

            <function><type><specifier>public</specifier> <name>int</name></type> <name>getIconHeight</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name>height</name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groupStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>groupPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>groupStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>groupPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
        <expr_stmt><expr><name><name>this</name>.<name>minIcon</name></name> = <call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>-4</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>360</expr></argument>, 
                <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxIcon</name></name> = <call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>-4</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>360</expr></argument>, 
                <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>objectIcon</name></name> = <call><name>getIcon</name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
