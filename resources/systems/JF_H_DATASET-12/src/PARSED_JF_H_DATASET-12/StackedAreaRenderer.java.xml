<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\StackedAreaRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * StackedAreaRenderer.java
 * ------------------------
 * (C) Copyright 2002-2007, by Dan Rivett (d.rivett@ukonline.co.uk) and 
 *                          Contributors.
 *
 * Original Author:  Dan Rivett (adapted from AreaCategoryItemRenderer);
 * Contributor(s):   Jon Iles;
 *                   David Gilbert (for Object Refinery Limited);
 *                   Christian W. Zuckschwerdt;
 *
 * Changes:
 * --------
 * 20-Sep-2002 : Version 1, contributed by Dan Rivett;
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 01-Nov-2002 : Added tooltips (DG);
 * 06-Nov-2002 : Renamed drawCategoryItem() --&gt; drawItem() and now using axis 
 *               for category spacing. Renamed StackedAreaCategoryItemRenderer 
 *               --&gt; StackedAreaRenderer (DG);
 * 26-Nov-2002 : Switched CategoryDataset --&gt; TableDataset (DG);
 * 26-Nov-2002 : Replaced isStacked() method with getRangeType() method (DG);
 * 17-Jan-2003 : Moved plot classes to a separate package (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 13-May-2003 : Modified to take into account the plot orientation (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 07-Oct-2003 : Added renderer state (DG);
 * 29-Apr-2004 : Added getRangeExtent() override (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 07-Jan-2005 : Renamed getRangeExtent() --&gt; findRangeBounds() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 11-Oct-2006 : Added support for rendering data values as percentages,
 *               and added a second pass for drawing item labels (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DataUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that draws stacked area charts for a 
 * {@link org.jfree.chart.plot.CategoryPlot}.
 */</comment>
<class><specifier>public</specifier> class <name>StackedAreaRenderer</name> <super><extends>extends <name>AreaRenderer</name></extends> 
                                 <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                            <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3595635038460823663L</expr></init></decl>;</decl_stmt>
     
    <comment type="javadoc">/** A flag that controls whether the areas display values or percentages. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>renderAsPercentages</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedAreaRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param renderAsPercentages  a flag that controls whether the data values
     *                             are rendered as percentages.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedAreaRenderer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>renderAsPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>renderAsPercentages</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer displays each item value as
     * a percentage (so that the stacked areas add to 100%), and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     *
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRenderAsPercentages</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the renderer displays each item
     * value as a percentage (so that the stacked areas add to 100%), and sends
     * a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param asPercentages  the flag.
     *
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderAsPercentages</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>asPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>asPercentages</name></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of passes (&lt;code&gt;2&lt;/code&gt;) required by this renderer. 
     * The first pass is used to draw the bars, the second pass is used to
     * draw the item labels (if visible).
     * 
     * @return The number of passes required by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The range (or &lt;code&gt;null&lt;/code&gt; if the dataset is empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findStackedRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y1</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack1</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <comment type="line">// leave the y values (y1, y0) untranslated as it is going to be be </comment>
        <comment type="line">// stacked up later by previous series values, after this it will be </comment>
        <comment type="line">// translated.</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        
        <comment type="line">// get the previous point and the next point so we can calculate a </comment>
        <comment type="line">// "hot spot" for the area (used by the chart entity)...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>n</name> = <call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>column</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y0</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack0</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>column</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// FIXME: calculate xx0</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>n</name> = <call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>column</name> + 1</expr></argument>, <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y2</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack2</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>column</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xx2</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryEnd</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// FIXME: calculate xxLeft and xxRight</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>xxLeft</name> =<init> <expr><name>xx0</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xxRight</name> =<init> <expr><name>xx2</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stackLeft</name> =<init> <expr><call><name>averageStackValues</name><argument_list>(<argument><expr><name>stack0</name></expr></argument>, <argument><expr><name>stack1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stackRight</name> =<init> <expr><call><name>averageStackValues</name><argument_list>(<argument><expr><name>stack1</name></expr></argument>, <argument><expr><name>stack2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>adjStackLeft</name> =<init> <expr><call><name>adjustedStackValues</name><argument_list>(<argument><expr><name>stack0</name></expr></argument>, <argument><expr><name>stack1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>adjStackRight</name> =<init> <expr><call><name>adjustedStackValues</name><argument_list>(<argument><expr><name>stack1</name></expr></argument>, <argument><expr><name>stack2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>transY1</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge1</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>left</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>right</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>y1</name> &gt;= 0.0</expr>)</condition><then> <block>{  <comment type="line">// handle positive value</comment>
            <expr_stmt><expr><name>transY1</name> = (<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name> + <name><name>stack1</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStack1</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>stack1</name><index>[<expr>1</expr>]</index></name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackLeft</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// LEFT POLYGON</comment>
            <if>if <condition>(<expr><name>y0</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yleft</name> =<init> <expr>(<name>y0</name> + <name>y1</name>) / 2.0 + <name><name>stackLeft</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYLeft</name> 
                    =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yleft</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transYLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>float</name></type> <name>transStackRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackRight</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// RIGHT POLYGON</comment>
            <if>if <condition>(<expr><name>y2</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yright</name> =<init> <expr>(<name>y1</name> + <name>y2</name>) / 2.0 + <name><name>stackRight</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYRight</name> 
                    =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yright</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transYRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{  <comment type="line">// handle negative value </comment>
            <expr_stmt><expr><name>transY1</name> = (<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name> + <name><name>stack1</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStack1</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>stack1</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackLeft</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// LEFT POLYGON</comment>
            <if>if <condition>(<expr><name>y0</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yleft</name> =<init> <expr>(<name>y0</name> + <name>y1</name>) / 2.0 + <name><name>stackLeft</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yleft</name></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxLeft</name></expr></argument>, <argument><expr><name>transYLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackRight</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// RIGHT POLYGON</comment>
            <if>if <condition>(<expr><name>y2</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yright</name> =<init> <expr>(<name>y1</name> + <name>y2</name>) / 2.0 + <name><name>stackRight</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yright</name></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transYRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xxRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//  Get series Paint and Stroke</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> 
        
        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>gp</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gp</name>.<name>append</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>entityArea</name> = <name>gp</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>entityArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the stacked value of the all series up to, but not including 
     * &lt;code&gt;series&lt;/code&gt; for the specified category, &lt;code&gt;category&lt;/code&gt;.  
     * It returns 0.0 if &lt;code&gt;series&lt;/code&gt; is the first series, i.e. 0.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series.
     * @param category  the category.
     *
     * @return double returns a cumulative value for all series' values up to 
     *         but excluding &lt;code&gt;series&lt;/code&gt; for Object 
     *         &lt;code&gt;category&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>getPreviousHeight</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, 
                                       <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>category</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>total</name> = <call><name><name>DataUtilities</name>.<name>calculateColumnTotal</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>series</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>n</name> = <call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>v</name> = <name>v</name> / <name>total</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>result</name> += <name>v</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the stacked values (one positive and one negative) of all 
     * series up to, but not including, &lt;code&gt;series&lt;/code&gt; for the specified 
     * item. It returns [0.0, 0.0] if &lt;code&gt;series&lt;/code&gt; is the first series.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index.
     * @param index  the item index.
     *
     * @return An array containing the cumulative negative and positive values
     *     for all series values up to but excluding &lt;code&gt;series&lt;/code&gt; 
     *     for &lt;code&gt;index&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name><index>[]</index></type> <name>getStackValues</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>series</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>isSeriesVisible</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>v</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>v</name> &gt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> += <name>v</name></expr>;</expr_stmt>   
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> += <name>v</name></expr>;</expr_stmt>   
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a pair of "stack" values calculated as the mean of the two 
     * specified stack value pairs.
     * 
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     * 
     * @return A pair of average stack values.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>averageStackValues</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>0</expr>]</index></name> + <name><name>stack2</name><index>[<expr>0</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>1</expr>]</index></name> + <name><name>stack2</name><index>[<expr>1</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates adjusted stack values from the supplied values.  The value is
     * the mean of the supplied values, unless either of the supplied values
     * is zero, in which case the adjusted value is zero also.
     * 
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     * 
     * @return A pair of average stack values.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>adjustedStackValues</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>stack1</name><index>[<expr>0</expr>]</index></name> == 0.0 || <name><name>stack2</name><index>[<expr>0</expr>]</index></name> == 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = 0.0</expr>;</expr_stmt>   
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>0</expr>]</index></name> + <name><name>stack2</name><index>[<expr>0</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name><name>stack1</name><index>[<expr>1</expr>]</index></name> == 0.0 || <name><name>stack2</name><index>[<expr>1</expr>]</index></name> == 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = 0.0</expr>;</expr_stmt>   
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>1</expr>]</index></name> + <name><name>stack2</name><index>[<expr>1</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks this instance for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StackedAreaRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StackedAreaRenderer</name></type> <name>that</name> =<init> <expr>(<name>StackedAreaRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name> != <name><name>that</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
