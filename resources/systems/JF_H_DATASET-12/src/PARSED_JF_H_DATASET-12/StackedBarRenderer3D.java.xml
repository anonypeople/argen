<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\StackedBarRenderer3D.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * StackedBarRenderer3D.java
 * -------------------------
 * (C) Copyright 2000-2007, by Serge V. Grachov and Contributors.
 *
 * Original Author:  Serge V. Grachov;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Richard Atkinson;
 *                   Christian W. Zuckschwerdt;
 *                   Max Herfort (patch 1459313);
 *
 * Changes
 * -------
 * 31-Oct-2001 : Version 1, contributed by Serge V. Grachov (DG);
 * 15-Nov-2001 : Modified to allow for null data values (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 15-Feb-2002 : Added isStacked() method (DG);
 * 24-May-2002 : Incorporated tooltips into chart entities (DG);
 * 19-Jun-2002 : Added check for null info in drawCategoryItem method (DG);
 * 25-Jun-2002 : Removed redundant imports (DG);
 * 26-Jun-2002 : Small change to entity (DG);
 * 05-Aug-2002 : Small modification to drawCategoryItem method to support URLs 
 *               for HTML image maps (RA);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 24-Oct-2002 : Amendments for changes in CategoryDataset interface and 
 *               CategoryToolTipGenerator interface (DG);
 * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG);
 * 26-Nov-2002 : Replaced isStacked() method with getRangeType() method (DG);
 * 17-Jan-2003 : Moved plot classes to a separate package (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Added default constructor (bug 726235) and fixed bug 
 *               726260) (DG);
 * 13-May-2003 : Renamed StackedVerticalBarRenderer3D 
 *               --&gt; StackedBarRenderer3D (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 07-Oct-2003 : Added renderer state (DG);
 * 21-Nov-2003 : Added a new constructor (DG);
 * 27-Nov-2003 : Modified code to respect maxBarWidth setting (DG);
 * 11-Aug-2004 : Fixed bug where isDrawBarOutline() was ignored (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 07-Jan-2005 : Renamed getRangeExtent() --&gt; findRangeBounds (DG);
 * 18-Mar-2005 : Override for getPassCount() method (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 09-Jun-2005 : Use addItemEntity() method from superclass (DG);
 * 22-Sep-2005 : Renamed getMaxBarWidth() --&gt; getMaximumBarWidth() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 31-Mar-2006 : Added renderAsPercentages option - see patch 1459313 submitted
 *               by Max Herfort (DG);
 * 16-Jan-2007 : Replaced rendering code to draw whole stack at once (DG);
 * 18-Jan-2007 : Fixed bug handling null values in createStackedValueList() 
 *               method (DG);
 * 18-Jan-2007 : Updated block drawing code to take account of inverted axes,
 *               see bug report 1599652 (DG);
 * 08-May-2007 : Fixed bugs 1713401 (drawBarOutlines flag) and  1713474 
 *               (shading) (DG);
 *               
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DataUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * Renders stacked bars with 3D-effect, for use with the 
 * {@link org.jfree.chart.plot.CategoryPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>StackedBarRenderer3D</name> <super><extends>extends <name>BarRenderer3D</name></extends> 
                                  <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                             <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5832945916493247123L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether the bars display values or percentages. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>renderAsPercentages</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer with no tool tip generator and no URL generator.
     * &lt;P&gt;
     * The defaults (no tool tip or URL generators) have been chosen to 
     * minimise the processing required to generate a default chart.  If you 
     * require tool tips or URLs, then you can easily add the required 
     * generators.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedBarRenderer3D</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer with the specified '3D effect'.
     *
     * @param xOffset  the x-offset for the 3D effect.
     * @param yOffset  the y-offset for the 3D effect.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedBarRenderer3D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>xOffset</name></decl></param>, <param><decl><type><name>double</name></type> <name>yOffset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>xOffset</name></expr></argument>, <argument><expr><name>yOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param renderAsPercentages  a flag that controls whether the data values
     *                             are rendered as percentages.
     * 
     * @since 1.0.2
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedBarRenderer3D</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>renderAsPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>renderAsPercentages</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Constructs a new renderer with the specified '3D effect'.
     *
     * @param xOffset  the x-offset for the 3D effect.
     * @param yOffset  the y-offset for the 3D effect.
     * @param renderAsPercentages  a flag that controls whether the data values
     *                             are rendered as percentages.
     * 
     * @since 1.0.2
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedBarRenderer3D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>xOffset</name></decl></param>, <param><decl><type><name>double</name></type> <name>yOffset</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>renderAsPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>xOffset</name></expr></argument>, <argument><expr><name>yOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>renderAsPercentages</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer displays each item value as
     * a percentage (so that the stacked bars add to 100%), and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     *
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRenderAsPercentages</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the renderer displays each item
     * value as a percentage (so that the stacked bars add to 100%), and sends
     * a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param asPercentages  the flag.
     *
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderAsPercentages</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>asPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>asPercentages</name></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The range (or &lt;code&gt;null&lt;/code&gt; if the dataset is empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findStackedRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the bar width and stores it in the renderer state.
     * 
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param rendererIndex  the renderer index.
     * @param state  the renderer state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>calculateBarWidth</name><parameter_list>(<param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
                                     <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                     <param><decl><type><name>int</name></type> <name>rendererIndex</name></decl></param>,
                                     <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// calculate the bar width</comment>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>data</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>rendererIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>maxWidth</name> =<init> <expr><name>space</name> * <call><name>getMaximumBarWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columns</name> =<init> <expr><call><name><name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>categoryMargin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>categoryMargin</name> = <call><name><name>domainAxis</name>.<name>getCategoryMargin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr><name>space</name> * (1 - <call><name><name>domainAxis</name>.<name>getLowerMargin</name></name><argument_list>()</argument_list></call> 
                                     - <call><name><name>domainAxis</name>.<name>getUpperMargin</name></name><argument_list>()</argument_list></call>
                                     - <name>categoryMargin</name>)</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>columns</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name> / <name>columns</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>state</name>.<name>setBarWidth</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a list containing the stacked values for the specified series
     * in the given dataset, plus the supplied base value.
     *  
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param category  the category key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param base  the base value.
     * @param asPercentages  a flag that controls whether the values in the
     *     list are converted to percentages of the total.
     *     
     * @return The value list.
     *
     * @since 1.0.4
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>List</name></type> <name>createStackedValueList</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, 
            <param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, <param><decl><type><name>double</name></type> <name>base</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>asPercentages</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>posBase</name> =<init> <expr><name>base</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>negBase</name> =<init> <expr><name>base</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>asPercentages</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>total</name> = <call><name><name>DataUtilities</name>.<name>calculateColumnTotal</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                    <argument><expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>baseIndex</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>s</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>s</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>s</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>asPercentages</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>v</name> = <name>v</name> / <name>total</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>v</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>baseIndex</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>baseIndex</name> = 0</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>posBase</name> = <name>posBase</name> + <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>, <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>posBase</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>v</name> &lt; 0.0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>baseIndex</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>baseIndex</name> = 0</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>negBase</name> = <name>negBase</name> + <name>v</name></expr>;</expr_stmt> <comment type="line">// '+' because v is negative</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr>new <call><name>Integer</name><argument_list>(<argument><expr>-<name>s</name></expr></argument>)</argument_list></call></expr>, 
                        <expr>new <call><name>Double</name><argument_list>(<argument><expr><name>negBase</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>baseIndex</name>++</expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the visual representation of one data item from the chart (in 
     * fact, this method does nothing until it reaches the last item for each
     * category, at which point it draws all the items for that category).
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain (category) axis.
     * @param rangeAxis  the range (value) axis.
     * @param dataset  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// wait till we are at the last item for the row then draw the</comment>
        <comment type="line">// whole stack at once</comment>
        <if>if <condition>(<expr><name>row</name> &lt; <call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Comparable</name></type> <name>category</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>List</name></type> <name>values</name> =<init> <expr><call><name>createStackedValueList</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                <argument><expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getBase</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjusted</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// handle rendering separately for the two plot orientations...</comment>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawStackHorizontal</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                    <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawStackVertical</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>adjusted</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                    <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a stack of bars for one category, with a horizontal orientation.
     * 
     * @param values  the value list.
     * @param category  the category.
     * @param g2  the graphics device.
     * @param state  the state.
     * @param dataArea  the data area (adjusted for the 3D effect).
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     *
     * @since 1.0.4
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawStackHorizontal</name><parameter_list>(<param><decl><type><name>List</name></type> <name>values</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, 
            <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
            <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
            <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>int</name></type> <name>column</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> 
                - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barW</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// a list to store the series index and bar region, so we can draw</comment>
        <comment type="line">// all the labels at the end...</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>itemLabelList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// draw the blocks</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inverted</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>isInverted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockCount</name> =<init> <expr><call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>k</name> &lt; <name>blockCount</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>(<name>inverted</name> ? <name>blockCount</name> - <name>k</name> - 1 : <name>k</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>prev</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>curr</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>curr</name><index>[<expr>0</expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>series</name> = -((<name>Integer</name>) <name><name>prev</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>series</name> = ((<name>Integer</name>) <name><name>curr</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>series</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>series</name> = -((<name>Integer</name>) <name><name>prev</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>v0</name> =<init> <expr>((<name>Double</name>) <name><name>prev</name><index>[<expr>1</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vv0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>v1</name> =<init> <expr>((<name>Double</name>) <name><name>curr</name><index>[<expr>1</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vv1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Shape</name><index>[]</index></type> <name>faces</name> =<init> <expr><call><name>createHorizontalBlock</name><argument_list>(<argument><expr><name>barX0</name></expr></argument>, <argument><expr><name>barW</name></expr></argument>, <argument><expr><name>vv0</name></expr></argument>, <argument><expr><name>vv1</name></expr></argument>, 
                    <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>fillPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>fillPaintDark</name> =<init> <expr><name>fillPaint</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fillPaintDark</name> <name>instanceof</name> <name>Color</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fillPaintDark</name> = ((<name>Color</name>) <name>fillPaint</name>).<call><name>darker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>boolean</name></type> <name>drawOutlines</name> =<init> <expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><name>fillPaint</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>drawOutlines</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outlinePaint</name> = <call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <for>for (<init><decl><type><name>int</name></type> <name>f</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>f</name> &lt; 6</expr>;</condition> <incr><expr><name>f</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name>f</name> == 5</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>fillPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>fillPaintDark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>faces</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>drawOutlines</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>faces</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
                        
            <expr_stmt><expr><call><name><name>itemLabelList</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>, 
                    <expr><name><name>faces</name><index>[<expr>5</expr>]</index></name>.<call><name>getBounds2D</name><argument_list>()</argument_list></call></expr>, 
                    <expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>v0</name> &lt; <call><name>getBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// add an item entity, if this information is being collected</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>faces</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></for>        

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>itemLabelList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>record</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>itemLabelList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>series</name> =<init> <expr>((<name>Integer</name>) <name><name>record</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>(<name>Rectangle2D</name>) <name><name>record</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>neg</name> =<init> <expr>((<name>Boolean</name>) <name><name>record</name><index>[<expr>2</expr>]</index></name>).<call><name>booleanValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
                    =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, 
                        <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates an array of shapes representing the six sides of a block in a
     * horizontal stack.
     * 
     * @param x0  left edge of bar (in Java2D space).
     * @param width  the width of the bar (in Java2D units).
     * @param y0  the base of the block (in Java2D space).
     * @param y1  the top of the block (in Java2D space).
     * @param inverted  a flag indicating whether or not the block is inverted
     *     (this changes the order of the faces of the block).
     * 
     * @return The sides of the block.
     */</comment>
    <function><type><specifier>private</specifier> <name>Shape</name><index>[]</index></type> <name>createHorizontalBlock</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x0</name></decl></param>, <param><decl><type><name>double</name></type> <name>width</name></decl></param>, <param><decl><type><name>double</name></type> <name>y0</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>inverted</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Shape</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Shape</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p00</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p01</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name> + <name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p02</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p03</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Point2D</name></type> <name>p0</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p1</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x0</name> + <name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p2</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p3</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>bottom</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>top</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>back</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>front</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>left</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>right</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <name>bottom</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <name>back</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>inverted</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <name>right</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <name>left</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <name>left</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <name>right</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = <name>top</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>5</expr>]</index></name> = <name>front</name></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a stack of bars for one category, with a vertical orientation.
     * 
     * @param values  the value list.
     * @param category  the category.
     * @param g2  the graphics device.
     * @param state  the state.
     * @param dataArea  the data area (adjusted for the 3D effect).
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     *
     * @since 1.0.4
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawStackVertical</name><parameter_list>(<param><decl><type><name>List</name></type> <name>values</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>, 
            <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, 
            <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
            <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>int</name></type> <name>column</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>getCategoryMiddle</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, 
                <argument><expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> 
                - <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>barW</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// a list to store the series index and bar region, so we can draw</comment>
        <comment type="line">// all the labels at the end...</comment>
        <decl_stmt><decl><type><name>List</name></type> <name>itemLabelList</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// draw the blocks</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>inverted</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>isInverted</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>blockCount</name> =<init> <expr><call><name><name>values</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>k</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>k</name> &lt; <name>blockCount</name></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr>(<name>inverted</name> ? <name>blockCount</name> - <name>k</name> - 1 : <name>k</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>prev</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>curr</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>values</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>curr</name><index>[<expr>0</expr>]</index></name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>series</name> = -((<name>Integer</name>) <name><name>prev</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>series</name> = ((<name>Integer</name>) <name><name>curr</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>series</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>series</name> = -((<name>Integer</name>) <name><name>prev</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>v0</name> =<init> <expr>((<name>Double</name>) <name><name>prev</name><index>[<expr>1</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vv0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>v1</name> =<init> <expr>((<name>Double</name>) <name><name>curr</name><index>[<expr>1</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vv1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>Shape</name><index>[]</index></type> <name>faces</name> =<init> <expr><call><name>createVerticalBlock</name><argument_list>(<argument><expr><name>barX0</name></expr></argument>, <argument><expr><name>barW</name></expr></argument>, <argument><expr><name>vv0</name></expr></argument>, <argument><expr><name>vv1</name></expr></argument>, 
                    <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>fillPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>fillPaintDark</name> =<init> <expr><name>fillPaint</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fillPaintDark</name> <name>instanceof</name> <name>Color</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fillPaintDark</name> = ((<name>Color</name>) <name>fillPaint</name>).<call><name>darker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>boolean</name></type> <name>drawOutlines</name> =<init> <expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><name>fillPaint</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>drawOutlines</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outlinePaint</name> = <call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <for>for (<init><decl><type><name>int</name></type> <name>f</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>f</name> &lt; 6</expr>;</condition> <incr><expr><name>f</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name>f</name> == 5</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>fillPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>fillPaintDark</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>faces</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>drawOutlines</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>faces</name><index>[<expr><name>f</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><call><name><name>itemLabelList</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>, 
                    <expr><name><name>faces</name><index>[<expr>5</expr>]</index></name>.<call><name>getBounds2D</name><argument_list>()</argument_list></call></expr>, 
                    <expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>v0</name> &lt; <call><name>getBase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line">// add an item entity, if this information is being collected</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name><name>faces</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></for>
        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>itemLabelList</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>record</name> =<init> <expr>(<name><name>Object</name><index>[]</index></name>) <call><name><name>itemLabelList</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>series</name> =<init> <expr>((<name>Integer</name>) <name><name>record</name><index>[<expr>0</expr>]</index></name>).<call><name>intValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>(<name>Rectangle2D</name>) <name><name>record</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>neg</name> =<init> <expr>((<name>Boolean</name>) <name><name>record</name><index>[<expr>2</expr>]</index></name>).<call><name>booleanValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
                    =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, 
                        <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates an array of shapes representing the six sides of a block in a
     * vertical stack.
     * 
     * @param x0  left edge of bar (in Java2D space).
     * @param width  the width of the bar (in Java2D units).
     * @param y0  the base of the block (in Java2D space).
     * @param y1  the top of the block (in Java2D space).
     * @param inverted  a flag indicating whether or not the block is inverted
     *     (this changes the order of the faces of the block).
     * 
     * @return The sides of the block.
     */</comment>
    <function><type><specifier>private</specifier> <name>Shape</name><index>[]</index></type> <name>createVerticalBlock</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x0</name></decl></param>, <param><decl><type><name>double</name></type> <name>width</name></decl></param>, <param><decl><type><name>double</name></type> <name>y0</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>y1</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>inverted</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Shape</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Shape</name><index>[<expr>6</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p00</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p01</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name> + <name>width</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p02</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p03</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>Point2D</name></type> <name>p0</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p1</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name> + <name>width</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p2</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>p3</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>right</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>left</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>back</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>back</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>front</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>front</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>top</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p0</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p1</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p3</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>top</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>bottom</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p00</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p01</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p02</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>p03</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <name>bottom</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <name>back</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <name>right</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = <name>top</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>5</expr>]</index></name> = <name>front</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>inverted</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <name>top</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = <name>bottom</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StackedBarRenderer3D</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>StackedBarRenderer3D</name></type> <name>that</name> =<init> <expr>(<name>StackedBarRenderer3D</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name> != <call><name><name>that</name>.<name>getRenderAsPercentages</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
