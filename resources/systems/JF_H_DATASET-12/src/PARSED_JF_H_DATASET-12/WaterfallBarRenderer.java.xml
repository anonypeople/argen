<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-12\src\WaterfallBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * WaterfallBarRenderer.java
 * -------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  Darshan Shah;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 20-Oct-2003 : Version 1, contributed by Darshan Shah (DG);
 * 06-Nov-2003 : Changed order of parameters in constructor, and added support 
 *               for GradientPaint (DG);
 * 10-Feb-2004 : Updated drawItem() method to make cut-and-paste overriding 
 *               easier.  Also fixed a bug that meant the minimum bar length 
 *               was being ignored (DG);
 * 04-Oct-2004 : Reworked equals() method and renamed PaintUtils 
 *               --&gt; PaintUtilities (DG);
 * 05-Nov-2004 : Modified drawItem() signature (DG);
 * 07-Jan-2005 : Renamed getRangeExtent() --&gt; findRangeBounds (DG);
 * 23-Feb-2005 : Added argument checking (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 09-Jun-2005 : Use addItemEntity() from superclass (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>AbstractRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>StandardGradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that handles the drawing of waterfall bar charts, for use with 
 * the {@link CategoryPlot} class.  Note that the bar colors are defined 
 * using special methods in this class - the inherited methods (for example,
 * {@link AbstractRenderer#setSeriesPaint(int, Paint)}) are ignored.
 */</comment>
<class><specifier>public</specifier> class <name>WaterfallBarRenderer</name> <super><extends>extends <name>BarRenderer</name></extends> 
                                  <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                             <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2482910643727230911L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to draw the first bar. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>firstBarPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the last bar. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>lastBarPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw bars having positive values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>positiveBarPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw bars having negative values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>negativeBarPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new renderer with default values for the bar colors.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaterfallBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>GradientPaint</name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0x22</expr></argument>, <argument><expr>0x22</expr></argument>, <argument><expr>0xFF</expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0x66</expr></argument>, <argument><expr>0x66</expr></argument>, <argument><expr>0xFF</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>GradientPaint</name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0x22</expr></argument>, <argument><expr>0xFF</expr></argument>, <argument><expr>0x22</expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0x66</expr></argument>, <argument><expr>0xFF</expr></argument>, <argument><expr>0x66</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>GradientPaint</name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0xFF</expr></argument>, <argument><expr>0x22</expr></argument>, <argument><expr>0x22</expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0xFF</expr></argument>, <argument><expr>0x66</expr></argument>, <argument><expr>0x66</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr>new <call><name>GradientPaint</name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0xFF</expr></argument>, <argument><expr>0xFF</expr></argument>, <argument><expr>0x22</expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>0.0f</expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0xFF</expr></argument>, <argument><expr>0xFF</expr></argument>, <argument><expr>0x66</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new waterfall renderer.
     *
     * @param firstBarPaint  the color of the first bar (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param positiveBarPaint  the color for bars with positive values 
     *                          (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param negativeBarPaint  the color for bars with negative values 
     *                          (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param lastBarPaint  the color of the last bar (&lt;code&gt;null&lt;/code&gt; not 
     *                      permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>WaterfallBarRenderer</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>firstBarPaint</name></decl></param>, 
                                <param><decl><type><name>Paint</name></type> <name>positiveBarPaint</name></decl></param>, 
                                <param><decl><type><name>Paint</name></type> <name>negativeBarPaint</name></decl></param>,
                                <param><decl><type><name>Paint</name></type> <name>lastBarPaint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>firstBarPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'firstBarPaint' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>positiveBarPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'positiveBarPaint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>negativeBarPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'negativeBarPaint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>lastBarPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'lastBarPaint' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>firstBarPaint</name></name> = <name>firstBarPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lastBarPaint</name></name> = <name>lastBarPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positiveBarPaint</name></name> = <name>positiveBarPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>negativeBarPaint</name></name> = <name>negativeBarPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setGradientPaintTransformer</name><argument_list>(<argument><expr>new <call><name>StandardGradientPaintTransformer</name><argument_list>(
                <argument><expr><name><name>GradientPaintTransformType</name>.<name>CENTER_VERTICAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setMinimumBarLength</name><argument_list>(<argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The range (or &lt;code&gt;null&lt;/code&gt; if the dataset is empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findCumulativeRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the first bar.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getFirstBarPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstBarPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint that will be used to draw the first bar and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFirstBarPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>firstBarPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the last bar.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLastBarPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lastBarPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint that will be used to draw the last bar and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastBarPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>lastBarPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw bars with positive values.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPositiveBarPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>positiveBarPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint that will be used to draw bars having positive values.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPositiveBarPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>positiveBarPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw bars with negative values.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNegativeBarPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>negativeBarPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint that will be used to draw bars having negative values,
     * and sends a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNegativeBarPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument"</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>negativeBarPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the bar for a single (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>CategoryItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>row</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>column</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>previous</name> =<init> <expr><call><name><name>state</name>.<name>getSeriesRunningTotal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>column</name> == <call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>previous</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>current</name> = <name>previous</name> + <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>setSeriesRunningTotal</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name>getRowCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>categoryCount</name> =<init> <expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>rectX</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rectY</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// Y0</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>j2dy0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Y1</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>j2dy1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>valDiff</name> =<init> <expr><name>current</name> - <name>previous</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>j2dy1</name> &lt; <name>j2dy0</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>j2dy1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>j2dy1</name> = <name>j2dy0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>j2dy0</name> = <name>temp</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// BAR WIDTH</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectWidth</name> =<init> <expr><call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// BAR HEIGHT</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>rectHeight</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name>getMinimumBarLength</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>j2dy1</name> - <name>j2dy0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// BAR Y</comment>
            <expr_stmt><expr><name>rectY</name> = <call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call>
                                   / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>rectY</name> = <name>rectY</name> + <name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rectY</name> = <name>rectY</name> + <name>row</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
             
            <expr_stmt><expr><name>rectX</name> = <name>j2dy0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rectHeight</name> = <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rectWidth</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name>getMinimumBarLength</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>j2dy1</name> - <name>j2dy0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// BAR X</comment>
            <expr_stmt><expr><name>rectX</name> = <call><name><name>domainAxis</name>.<name>getCategoryStart</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>seriesCount</name> &gt; 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>seriesGap</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getItemMargin</name><argument_list>()</argument_list></call>
                                   / (<name>categoryCount</name> * (<name>seriesCount</name> - 1))</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>rectX</name> = <name>rectX</name> + <name>row</name> * (<call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> + <name>seriesGap</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rectX</name> = <name>rectX</name> + <name>row</name> * <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>rectY</name> = <name>j2dy0</name></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rectX</name></expr></argument>, <argument><expr><name>rectY</name></expr></argument>, <argument><expr><name>rectWidth</name></expr></argument>, 
                <argument><expr><name>rectHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getFirstBarPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>column</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>seriesPaint</name> = <call><name>getFirstBarPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>column</name> == <name>categoryCount</name> - 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>seriesPaint</name> = <call><name>getLastBarPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
        }</block></then> 
        <else>else <block>{
            <if>if <condition>(<expr><name>valDiff</name> &lt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>seriesPaint</name> = <call><name>getNegativeBarPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>valDiff</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>seriesPaint</name> = <call><name>getPositiveBarPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><name>seriesPaint</name> = <call><name>getLastBarPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></else></if></else></if>
        <if>if <condition>(<expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call> != <name>null</name> 
                &amp;&amp; <name>seriesPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GradientPaint</name></type> <name>gp</name> =<init> <expr>(<name>GradientPaint</name>) <name>seriesPaint</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>seriesPaint</name> = <call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call>.<call><name>transform</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// draw the outline...</comment>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>state</name>.<name>getBarWidth</name></name><argument_list>()</argument_list></call> &gt; <name>BAR_OUTLINE_WIDTH_THRESHOLD</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name> 
            =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>generator</name> != <name>null</name> &amp;&amp; <call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr>(<name>valDiff</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        

        <comment type="line">// add an item entity, if this information is being collected</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addItemEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests an object for equality with this instance.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>WaterfallBarRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>WaterfallBarRenderer</name></type> <name>that</name> =<init> <expr>(<name>WaterfallBarRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>firstBarPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>firstBarPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lastBarPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>lastBarPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>             
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positiveBarPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>positiveBarPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>             
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativeBarPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>negativeBarPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>             
        <return>return <expr>true</expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>firstBarPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lastBarPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positiveBarPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativeBarPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>firstBarPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lastBarPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positiveBarPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>negativeBarPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
