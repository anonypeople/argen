<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\CandlestickRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * CandlestickRenderer.java
 * ------------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Authors:  David Gilbert (for Object Refinery Limited);
 *                    Sylvain Vieujot;
 * Contributor(s):    Richard Atkinson;
 *                    Christian W. Zuckschwerdt;
 *                    Jerome Fisher;
 *
 * Changes
 * -------
 * 13-Dec-2001 : Version 1.  Based on code in the (now redundant) 
 *               CandlestickPlot class, written by Sylvain Vieujot (DG);
 * 23-Jan-2002 : Added DrawInfo parameter to drawItem() method (DG);
 * 28-Mar-2002 : Added a property change listener mechanism so that renderers 
 *               no longer need to be immutable.  Added properties for up and 
 *               down colors (DG);
 * 04-Apr-2002 : Updated with new automatic width calculation and optional 
 *               volume display, contributed by Sylvain Vieujot (DG);
 * 09-Apr-2002 : Removed translatedRangeZero from the drawItem() method, and 
 *               changed the return type of the drawItem method to void, 
 *               reflecting a change in the XYItemRenderer interface.  Added 
 *               tooltip code to drawItem() method (DG);
 * 25-Jun-2002 : Removed redundant code (DG);
 * 05-Aug-2002 : Small modification to drawItem method to support URLs for HTML 
 *               image maps (RA);
 * 19-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 30-Jun-2003 : Added support for PlotOrientation (for completeness, this 
 *               renderer is unlikely to be used with a HORIZONTAL 
 *               orientation) (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 29-Aug-2003 : Moved maxVolume calculation to initialise method (see bug 
 *               report 796619) (DG);
 * 02-Sep-2003 : Added maxCandleWidthInMilliseconds as workaround for bug 
 *               796621 (DG);
 * 08-Sep-2003 : Changed ValueAxis API (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 13-Oct-2003 : Applied patch from Jerome Fisher to improve auto width 
 *               calculations (DG);
 * 23-Dec-2003 : Fixed bug where up and down paint are used incorrectly (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Jul-2006 : Swapped calls to getX() --&gt; getXValue(), and the same for the
 *               other data values (DG);
 * 17-Aug-2006 : Corrections to the equals() method (DG);
 * 05-Mar-2007 : Added flag to allow optional use of outline paint (DG);
 * 08-Oct-2007 : Added new volumePaint field (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>XYItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>HighLowItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>OHLCDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that draws candlesticks on an {@link XYPlot} (requires a 
 * {@link OHLCDataset}).
 * &lt;P&gt;
 * This renderer does not include code to calculate the crosshair point for the 
 * plot.
 */</comment>
<class><specifier>public</specifier> class <name>CandlestickRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                                 <implements>implements <name>XYItemRenderer</name>, 
                                            <name>Cloneable</name>,
                                            <name>PublicCloneable</name>,
                                            <name>Serializable</name></implements></super> <block>{
            
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>50390395841817121L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The average width method. */</comment>                                          
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WIDTHMETHOD_AVERAGE</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The smallest width method. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WIDTHMETHOD_SMALLEST</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The interval data method. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WIDTHMETHOD_INTERVALDATA</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The method of automatically calculating the candle width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>autoWidthMethod</name> =<init> <expr><name>WIDTHMETHOD_AVERAGE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The number (generally between 0.0 and 1.0) by which the available space 
     * automatically calculated for the candles will be multiplied to determine
     * the actual width to use. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>autoWidthFactor</name> =<init> <expr>4.5 / 7</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The minimum gap between one candle and the next */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>autoWidthGap</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The candle width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>candleWidth</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum candlewidth in milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maxCandleWidthInMilliseconds</name> =<init> <expr>1000.0 * 60.0 * 60.0 * 20.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Temporary storage for the maximum candle width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maxCandleWidth</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint used to fill the candle when the price moved up from open to 
     * close. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>upPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint used to fill the candle when the price moved down from open 
     * to close. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>downPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag controlling whether or not volume bars are drawn on the chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawVolume</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint used to fill the volume bars (if they are visible).  Once 
     * initialised, this field should never be set to &lt;code&gt;null&lt;/code&gt;.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>volumePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Temporary storage for the maximum volume. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>double</name></type> <name>maxVolume</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not the renderer's outline paint is
     * used to draw the outline of the candlestick.  The default value is
     * &lt;code&gt;false&lt;/code&gt; to avoid a change of behaviour for existing code.
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer for candlestick charts.
     */</comment>
    <constructor><specifier>public</specifier> <name>CandlestickRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>-1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer for candlestick charts.
     * &lt;P&gt;
     * Use -1 for the candle width if you prefer the width to be calculated 
     * automatically.
     *
     * @param candleWidth  The candle width.
     */</comment>
    <constructor><specifier>public</specifier> <name>CandlestickRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candleWidth</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>candleWidth</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>new <call><name>HighLowItemLabelGenerator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer for candlestick charts.
     * &lt;P&gt;
     * Use -1 for the candle width if you prefer the width to be calculated 
     * automatically.
     *
     * @param candleWidth  the candle width.
     * @param drawVolume  a flag indicating whether or not volume bars should 
     *                    be drawn.
     * @param toolTipGenerator  the tool tip generator. &lt;code&gt;null&lt;/code&gt; is 
     *                          none.
     */</comment>
    <constructor><specifier>public</specifier> <name>CandlestickRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candleWidth</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>drawVolume</name></decl></param>,
                               <param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr><name>toolTipGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>candleWidth</name></name> = <name>candleWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawVolume</name></name> = <name>drawVolume</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>volumePaint</name></name> = <name><name>Color</name>.<name>gray</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upPaint</name></name> = <name><name>Color</name>.<name>green</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>downPaint</name></name> = <name><name>Color</name>.<name>red</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>useOutlinePaint</name></name> = false</expr>;</expr_stmt>  <comment type="line">// false preserves the old behaviour</comment>
                                       <comment type="line">// prior to introducing this flag</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the width of each candle.
     *
     * @return The candle width.
     * 
     * @see #setCandleWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCandleWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>candleWidth</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the candle width and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     * &lt;P&gt;
     * If you set the width to a negative value, the renderer will calculate
     * the candle width automatically based on the space available on the chart.
     *
     * @param width  The width.
     * @see #setAutoWidthMethod(int)
     * @see #setAutoWidthGap(double)
     * @see #setAutoWidthFactor(double)
     * @see #setMaxCandleWidthInMilliseconds(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCandleWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>width</name> != <name><name>this</name>.<name>candleWidth</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>candleWidth</name></name> = <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum width (in milliseconds) of each candle.
     *
     * @return The maximum candle width in milliseconds.
     * 
     * @see #setMaxCandleWidthInMilliseconds(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaxCandleWidthInMilliseconds</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxCandleWidthInMilliseconds</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum candle width (in milliseconds) and sends a 
     * {@link RendererChangeEvent} to all registered listeners.  
     *
     * @param millis  The maximum width.
     * 
     * @see #getMaxCandleWidthInMilliseconds()
     * @see #setCandleWidth(double)
     * @see #setAutoWidthMethod(int)
     * @see #setAutoWidthGap(double)
     * @see #setAutoWidthFactor(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxCandleWidthInMilliseconds</name><parameter_list>(<param><decl><type><name>double</name></type> <name>millis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxCandleWidthInMilliseconds</name></name> = <name>millis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the method of automatically calculating the candle width.
     *
     * @return The method of automatically calculating the candle width.
     * 
     * @see #setAutoWidthMethod(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getAutoWidthMethod</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoWidthMethod</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the method of automatically calculating the candle width and 
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * &lt;p&gt;
     * &lt;code&gt;WIDTHMETHOD_AVERAGE&lt;/code&gt;: Divides the entire display (ignoring 
     * scale factor) by the number of items, and uses this as the available 
     * width.&lt;br&gt;
     * &lt;code&gt;WIDTHMETHOD_SMALLEST&lt;/code&gt;: Checks the interval between each 
     * item, and uses the smallest as the available width.&lt;br&gt;
     * &lt;code&gt;WIDTHMETHOD_INTERVALDATA&lt;/code&gt;: Assumes that the dataset supports
     * the IntervalXYDataset interface, and uses the startXValue - endXValue as 
     * the available width.
     * &lt;br&gt;
     *
     * @param autoWidthMethod  The method of automatically calculating the 
     * candle width.
     *
     * @see #WIDTHMETHOD_AVERAGE
     * @see #WIDTHMETHOD_SMALLEST
     * @see #WIDTHMETHOD_INTERVALDATA
     * @see #getAutoWidthMethod()
     * @see #setCandleWidth(double)
     * @see #setAutoWidthGap(double)
     * @see #setAutoWidthFactor(double)
     * @see #setMaxCandleWidthInMilliseconds(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidthMethod</name><parameter_list>(<param><decl><type><name>int</name></type> <name>autoWidthMethod</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthMethod</name></name> != <name>autoWidthMethod</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoWidthMethod</name></name> = <name>autoWidthMethod</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the factor by which the available space automatically 
     * calculated for the candles will be multiplied to determine the actual 
     * width to use.
     *
     * @return The width factor (generally between 0.0 and 1.0).
     * 
     * @see #setAutoWidthFactor(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAutoWidthFactor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoWidthFactor</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the factor by which the available space automatically calculated 
     * for the candles will be multiplied to determine the actual width to use.
     *
     * @param autoWidthFactor The width factor (generally between 0.0 and 1.0).
     * 
     * @see #getAutoWidthFactor()
     * @see #setCandleWidth(double)
     * @see #setAutoWidthMethod(int)
     * @see #setAutoWidthGap(double)
     * @see #setMaxCandleWidthInMilliseconds(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidthFactor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>autoWidthFactor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthFactor</name></name> != <name>autoWidthFactor</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoWidthFactor</name></name> = <name>autoWidthFactor</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the amount of space to leave on the left and right of each 
     * candle when automatically calculating widths.
     *
     * @return The gap.
     * 
     * @see #setAutoWidthGap(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAutoWidthGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoWidthGap</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the amount of space to leave on the left and right of each candle 
     * when automatically calculating widths and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param autoWidthGap The gap.
     * 
     * @see #getAutoWidthGap()
     * @see #setCandleWidth(double)
     * @see #setAutoWidthMethod(int)
     * @see #setAutoWidthFactor(double)
     * @see #setMaxCandleWidthInMilliseconds(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoWidthGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>autoWidthGap</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthGap</name></name> != <name>autoWidthGap</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoWidthGap</name></name> = <name>autoWidthGap</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to fill candles when the price moves up from open
     * to close.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setUpPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getUpPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill candles when the price moves up from open
     * to close and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getUpPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>upPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to fill candles when the price moves down from
     * open to close.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDownPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDownPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>downPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill candles when the price moves down from open
     * to close and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param paint  The paint (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDownPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>downPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not volume bars are drawn on the
     * chart.
     * 
     * @return A boolean.
     * 
     * @since 1.0.5
     * 
     * @see #setDrawVolume(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawVolume</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawVolume</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not volume bars are drawn in the
     * background and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getDrawVolume()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawVolume</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>drawVolume</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>drawVolume</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint that is used to fill the volume bars if they are
     * visible.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setVolumePaint(Paint)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getVolumePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>volumePaint</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to fill the volume bars, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getVolumePaint()
     * @see #getDrawVolume()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setVolumePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>volumePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the renderer's outline
     * paint is used to draw the candlestick outline.  The default value is
     * &lt;code&gt;false&lt;/code&gt;.
     * 
     * @return A boolean.
     * 
     * @since 1.0.5
     * 
     * @see #setUseOutlinePaint(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>useOutlinePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the renderer's outline
     * paint is used to draw the candlestick outline, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param use  the new flag value.
     * 
     * @since 1.0.5
     * 
     * @see #getUseOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseOutlinePaint</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>use</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name> != <name>use</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>useOutlinePaint</name></name> = <name>use</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Initialises the renderer then returns the number of 'passes' through the
     * data that the renderer will require (usually just one).  This method 
     * will be called before the first item is rendered, giving the renderer 
     * an opportunity to initialise any state information it wants to maintain.
     * The renderer can do nothing if it chooses.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param dataset  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return The number of passes the renderer requires.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
          
        <comment type="line">// calculate the maximum allowed candle width from the axis...</comment>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>axis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><name>x1</name> + <name><name>this</name>.<name>maxCandleWidthInMilliseconds</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx2</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxCandleWidth</name></name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx2</name> - <name>xx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <comment type="line">// Absolute value, since the relative x </comment>
            <comment type="line">// positions are reversed for horizontal orientation</comment>
        
        <comment type="line">// calculate the highest volume in the dataset... </comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawVolume</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>OHLCDataset</name></type> <name>highLowDataset</name> =<init> <expr>(<name>OHLCDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>maxVolume</name></name> = 0.0</expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <call><name><name>highLowDataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</condition> 
                 <incr><expr><name>series</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <call><name><name>highLowDataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</condition> 
                     <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>volume</name> =<init> <expr><call><name><name>highLowDataset</name>.<name>getVolumeValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>volume</name> &gt; <name><name>this</name>.<name>maxVolume</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>this</name>.<name>maxVolume</name></name> = <name>volume</name></expr>;</expr_stmt>
                    }</block></then></if>
                    
                }</block></for>    
            }</block></for>
        }</block></then></if>
        
        <return>return <expr>new <call><name>XYItemRendererState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects info about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>horiz</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>horiz</name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>horiz</name> = false</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return;</return>
        }</block></else></if></else></if>
        
        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>OHLCDataset</name></type> <name>highLowData</name> =<init> <expr>(<name>OHLCDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>highLowData</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yHigh</name> =<init> <expr><call><name><name>highLowData</name>.<name>getHighValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yLow</name> =<init> <expr><call><name><name>highLowData</name>.<name>getLowValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yOpen</name> =<init> <expr><call><name><name>highLowData</name>.<name>getOpenValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yClose</name> =<init> <expr><call><name><name>highLowData</name>.<name>getCloseValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyHigh</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yHigh</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyLow</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yLow</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyOpen</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yOpen</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyClose</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yClose</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>volumeWidth</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>stickWidth</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>candleWidth</name></name> &gt; 0</expr>)</condition><then> <block>{
            <comment type="line">// These are deliberately not bounded to minimums/maxCandleWidth to</comment>
            <comment type="line">//  retain old behaviour.</comment>
            <expr_stmt><expr><name>volumeWidth</name> = <name><name>this</name>.<name>candleWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>stickWidth</name> = <name><name>this</name>.<name>candleWidth</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xxWidth</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name><name>this</name>.<name>autoWidthMethod</name></name></expr>)</condition> <block>{
            
                <case>case <expr><name>WIDTHMETHOD_AVERAGE</name></expr>:
                    <expr_stmt><expr><name>itemCount</name> = <call><name><name>highLowData</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>xxWidth</name> = <call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / <name>itemCount</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>xxWidth</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / <name>itemCount</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
            
                </case><case>case <expr><name>WIDTHMETHOD_SMALLEST</name></expr>:
                    <comment type="line">// Note: It would be nice to pre-calculate this per series</comment>
                    <expr_stmt><expr><name>itemCount</name> = <call><name><name>highLowData</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>lastPos</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>xxWidth</name> = <call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>double</name></type> <name>pos</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                                <argument><expr><call><name><name>highLowData</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>lastPos</name> != -1</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>xxWidth</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxWidth</name></expr></argument>, 
                                    <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>pos</name> - <name>lastPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>lastPos</name> = <name>pos</name></expr>;</expr_stmt>
                    }</block></for>
                    <break>break;</break>
            
                </case><case>case <expr><name>WIDTHMETHOD_INTERVALDATA</name></expr>:
                    <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>intervalXYData</name> 
                            =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>startPos</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                            <argument><expr><call><name><name>intervalXYData</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>endPos</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                            <argument><expr><call><name><name>intervalXYData</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>xxWidth</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>endPos</name> - <name>startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                
            </case>}</block></switch>
            <expr_stmt><expr><name>xxWidth</name> -= 2 * <name><name>this</name>.<name>autoWidthGap</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xxWidth</name> *= <name><name>this</name>.<name>autoWidthFactor</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xxWidth</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxWidth</name></expr></argument>, <argument><expr><name><name>this</name>.<name>maxCandleWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>volumeWidth</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>this</name>.<name>maxCandleWidth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xxWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>stickWidth</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name><name>this</name>.<name>maxCandleWidth</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xxWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outlinePaint</name> = <call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>s</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>drawVolume</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>volume</name> =<init> <expr>(<name>int</name>) <call><name><name>highLowData</name>.<name>getVolumeValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>volumeHeight</name> =<init> <expr><name>volume</name> / <name><name>this</name>.<name>maxVolume</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>min</name>, <name>max</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>min</name> = <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>max</name> = <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>min</name> = <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>max</name> = <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>double</name></type> <name>zzVolume</name> =<init> <expr><name>volumeHeight</name> * (<name>max</name> - <name>min</name>)</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getVolumePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(
                <argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr>0.3f</expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>xx</name> - <name>volumeWidth</name> / 2</expr></argument>,
                        <argument><expr><name>zzVolume</name></expr></argument>, <argument><expr><name>volumeWidth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>volumeWidth</name> / 2</expr></argument>,
                        <argument><expr><name>max</name> - <name>zzVolume</name></expr></argument>, <argument><expr><name>volumeWidth</name></expr></argument>, <argument><expr><name>zzVolume</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>double</name></type> <name>yyMaxOpenClose</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>yyOpen</name></expr></argument>, <argument><expr><name>yyClose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMinOpenClose</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yyOpen</name></expr></argument>, <argument><expr><name>yyClose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxOpenClose</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>yOpen</name></expr></argument>, <argument><expr><name>yClose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>minOpenClose</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yOpen</name></expr></argument>, <argument><expr><name>yClose</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the upper shadow</comment>
        <if>if <condition>(<expr><name>yHigh</name> &gt; <name>maxOpenClose</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyHigh</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMaxOpenClose</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyHigh</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMaxOpenClose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// draw the lower shadow</comment>
        <if>if <condition>(<expr><name>yLow</name> &lt; <name>minOpenClose</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyLow</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMinOpenClose</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyLow</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMinOpenClose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// draw the body</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>body</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>horiz</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>body</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMinOpenClose</name></expr></argument>, <argument><expr><name>xx</name> - <name>stickWidth</name> / 2</expr></argument>, 
                    <argument><expr><name>yyMaxOpenClose</name> - <name>yyMinOpenClose</name></expr></argument>, <argument><expr><name>stickWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <expr_stmt><expr><name>body</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>stickWidth</name> / 2</expr></argument>, <argument><expr><name>yyMinOpenClose</name></expr></argument>,
                    <argument><expr><name>stickWidth</name></expr></argument>, <argument><expr><name>yyMaxOpenClose</name> - <name>yyMinOpenClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>yClose</name> &gt; <name>yOpen</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>upPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>downPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>downPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>XYToolTipGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>generator</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>tip</name> = <call><name><name>generator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>url</name> = <call><name>getURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>XYItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>XYItemEntity</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                    <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CandlestickRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CandlestickRenderer</name></type> <name>that</name> =<init> <expr>(<name>CandlestickRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>candleWidth</name></name> != <name><name>that</name>.<name>candleWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>upPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>downPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>downPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawVolume</name></name> != <name><name>that</name>.<name>drawVolume</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>maxCandleWidthInMilliseconds</name></name> 
                != <name><name>that</name>.<name>maxCandleWidthInMilliseconds</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthMethod</name></name> != <name><name>that</name>.<name>autoWidthMethod</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthFactor</name></name> != <name><name>that</name>.<name>autoWidthFactor</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoWidthGap</name></name> != <name><name>that</name>.<name>autoWidthGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name> != <name><name>that</name>.<name>useOutlinePaint</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>volumePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>volumePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>downPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>volumePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>downPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>volumePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// --- DEPRECATED CODE ----------------------------------------------------</comment>
    
    <comment type="javadoc">/**
     * Returns a flag indicating whether or not volume bars are drawn on the
     * chart.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if volume bars are drawn on the chart.
     * 
     * @deprecated As of 1.0.5, you should use the {@link #getDrawVolume()} 
     *         method.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>drawVolume</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawVolume</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
