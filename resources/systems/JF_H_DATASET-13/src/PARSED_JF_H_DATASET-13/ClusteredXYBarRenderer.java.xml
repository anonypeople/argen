<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\ClusteredXYBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * ClusteredXYBarRenderer.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Paolo Cova and Contributors.
 *
 * Original Author:  Paolo Cova;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Christian W. Zuckschwerdt;
 *                   Matthias Rose;
 *
 * Changes
 * -------
 * 24-Jan-2003 : Version 1, contributed by Paolo Cova (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 03-Nov-2003 : In draw method added state parameter and y==null value 
 *               handling (MR);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 01-Oct-2004 : Fixed bug where 'drawBarOutline' flag is ignored (DG);
 * 16-May-2005 : Fixed to used outline stroke for bar outlines.  Removed some 
 *               redundant code with the result that the renderer now respects 
 *               the 'base' setting from the super-class. Added an equals() 
 *               method (DG);
 * 19-May-2005 : Added minimal item label implementation - needs improving (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 11-Dec-2006 : Added support for GradientPaint (DG);
 * 12-Jun-2007 : Added override to findDomainBounds() to handle cluster offset,
 *               fixed rendering to handle inverted axes, and simplified 
 *               entity generation code (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * An extension of {@link XYBarRenderer} that displays bars for different
 * series values at the same x next to each other. The assumption here is
 * that for each x (time or else) there is a y value for each series. If
 * this is not the case, there will be spaces between bars for a given x.
 * &lt;P&gt;
 * This renderer does not include code to calculate the crosshair point for the
 * plot.
 */</comment>
<class><specifier>public</specifier> class <name>ClusteredXYBarRenderer</name> <super><extends>extends <name>XYBarRenderer</name></extends> 
        <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5864462149177133147L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Determines whether bar center should be interval start. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>centerBarAtStartValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor. Bar margin is set to 0.0.
     */</comment>
    <constructor><specifier>public</specifier> <name>ClusteredXYBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new XY clustered bar renderer.
     *
     * @param margin  the percentage amount to trim from the width of each bar.
     * @param centerBarAtStartValue  if true, bars will be centered on the 
     *         start of the time period.
     */</comment>
    <constructor><specifier>public</specifier> <name>ClusteredXYBarRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>, 
                                  <param><decl><type><name>boolean</name></type> <name>centerBarAtStartValue</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>centerBarAtStartValue</name></name> = <name>centerBarAtStartValue</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the x-value bounds for the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The bounds (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findDomainBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// need to handle cluster centering as a special case</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBarAtStartValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>findDomainBoundsWithOffset</name><argument_list>(<argument><expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name><name>super</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Iterates over the items in an {@link IntervalXYDataset} to find
     * the range of x-values including the interval OFFSET so that it centers
     * the interval around the start value. 
     *  
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     *   
     * @return The range (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Range</name></type> <name>findDomainBoundsWithOffset</name><parameter_list>(<param><decl><type><name>IntervalXYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dataset' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>minimum</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maximum</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lvalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uvalue</name></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>lvalue</name> = <call><name><name>dataset</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>uvalue</name> = <call><name><name>dataset</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr>(<name>uvalue</name> - <name>lvalue</name>) / 2.0</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>lvalue</name> = <name>lvalue</name> - <name>offset</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>uvalue</name> = <name>uvalue</name> - <name>offset</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>minimum</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>maximum</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>

        <if>if <condition>(<expr><name>minimum</name> &gt; <name>maximum</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item. This method
     * is mostly copied from the superclass, the change is that in the
     * calculated space for a singe bar we draw bars for each series next to
     * each other. The width of each bar is the available width divided by
     * the number of series. Bars for each series are drawn in order left to
     * right.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>intervalDataset</name> =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>y0</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getUseYInterval</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y0</name> = <call><name><name>intervalDataset</name>.<name>getStartYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> = <call><name><name>intervalDataset</name>.<name>getEndYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>y0</name> = <call><name>getBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> = <call><name><name>intervalDataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>yy0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>intervalW</name> =<init> <expr><name>xx1</name> - <name>xx0</name></expr></init></decl>;</decl_stmt>  <comment type="line">// this may be negative</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>baseX</name> =<init> <expr><name>xx0</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBarAtStartValue</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>baseX</name> = <name>baseX</name> - <name>intervalW</name> / 2.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>m</name> =<init> <expr><call><name>getMargin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>m</name> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>cut</name> =<init> <expr><name>intervalW</name> * <call><name>getMargin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>intervalW</name> = <name>intervalW</name> - <name>cut</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>baseX</name> = <name>baseX</name> + (<name>cut</name> / 2)</expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>intervalH</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy0</name> - <name>yy1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// we don't need the sign</comment>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>        

        <decl_stmt><decl><type><name>int</name></type> <name>numSeries</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>seriesBarWidth</name> =<init> <expr><name>intervalW</name> / <name>numSeries</name></expr></init></decl>;</decl_stmt>  <comment type="line">// may be negative</comment>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>barY0</name> =<init> <expr><name>baseX</name> + (<name>seriesBarWidth</name> * <name>series</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>barY1</name> =<init> <expr><name>barY0</name> + <name>seriesBarWidth</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rx</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rw</name> =<init> <expr><name>intervalH</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ry</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>barY0</name></expr></argument>, <argument><expr><name>barY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rh</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>barY1</name> - <name>barY0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>barX0</name> =<init> <expr><name>baseX</name> + (<name>seriesBarWidth</name> * <name>series</name>)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>barX1</name> =<init> <expr><name>barX0</name> + <name>seriesBarWidth</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rx</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>barX0</name></expr></argument>, <argument><expr><name>barX1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rw</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>barX1</name> - <name>barX0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ry</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>rh</name> =<init> <expr><name>intervalH</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>rh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call> 
                != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GradientPaint</name></type> <name>gp</name> =<init> <expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>itemPaint</name> = <call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call>.<call><name>transform</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>seriesBarWidth</name></expr></argument>)</argument_list></call> &gt; 3</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr><name>y1</name> &lt; 0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                        <argument><expr><call><name><name>bar</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bar</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object, returning
     * &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; is a 
     * &lt;code&gt;ClusteredXYBarRenderer&lt;/code&gt; with the same settings as this
     * renderer, and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ClusteredXYBarRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ClusteredXYBarRenderer</name></type> <name>that</name> =<init> <expr>(<name>ClusteredXYBarRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>centerBarAtStartValue</name></name> != <name><name>that</name>.<name>centerBarAtStartValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
