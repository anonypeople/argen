<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\CyclicXYItemRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * CyclicXYItemRenderer.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Nicolas Brodu and Contributors.
 *
 * Original Author:  Nicolas Brodu;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 19-Nov-2003 : Initial import to JFreeChart from the JSynoptic project (NB);
 * 23-Dec-2003 : Added missing Javadocs (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * ------------- JFREECHART 1.0.0 ---------------------------------------------
 * 06-Jul-2006 : Modified to call only dataset methods that return double
 *               primitives (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CyclicNumberAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DomainOrder</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetGroup</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>

<comment type="javadoc">/**
 * The Cyclic XY item renderer is specially designed to handle cyclic axis. 
 * While the standard renderer would draw a line across the plot when a cycling 
 * occurs, the cyclic renderer splits the line at each cycle end instead. This 
 * is done by interpolating new points at cycle boundary. Thus, correct 
 * appearance is restored. 
 * 
 * The Cyclic XY item renderer works exactly like a standard XY item renderer 
 * with non-cyclic axis. 
 */</comment>
<class><specifier>public</specifier> class <name>CyclicXYItemRenderer</name> <super><extends>extends <name>StandardXYItemRenderer</name></extends> 
                                  <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4035912243303764892L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CyclicXYItemRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param type  the renderer type.
     */</comment>
    <constructor><specifier>public</specifier> <name>CyclicXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param type  the renderer type.
     * @param labelGenerator  the tooltip generator.
     */</comment>
    <constructor><specifier>public</specifier> <name>CyclicXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>XYToolTipGenerator</name></type> <name>labelGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>labelGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param type  the renderer type.
     * @param labelGenerator  the tooltip generator.
     * @param urlGenerator  the url generator.
     */</comment>
    <constructor><specifier>public</specifier> <name>CyclicXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, 
                                <param><decl><type><name>XYToolTipGenerator</name></type> <name>labelGenerator</name></decl></param>,
                                <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>labelGenerator</name></expr></argument>, <argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    
    <comment type="javadoc">/** 
     * Draws the visual representation of a single data item.
     * When using cyclic axis, do not draw a line from right to left when 
     * cycling as would a standard XY item renderer, but instead draw a line 
     * from the previous point to the cycle bound in the last cycle, and a line
     * from the cycle bound to current point in the current cycle.  
     * 
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param info  the plot rendering info.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the current pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, 
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>, 
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(!<call><name>getPlotLines</name><argument_list>()</argument_list></call>) || ((!(<name>domainAxis</name> <name>instanceof</name> <name>CyclicNumberAxis</name>)) 
                &amp;&amp; (!(<name>rangeAxis</name> <name>instanceof</name> <name>CyclicNumberAxis</name>))) || (<name>item</name> &lt;= 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// get the previous data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>xn</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yn</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// If null, don't draw line =&gt; then delegate to parent</comment>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>yn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>y</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr>0</expr>]</index></name> = <name>xn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><index>[<expr>0</expr>]</index></name> = <name>yn</name></expr>;</expr_stmt>
        
        <comment type="line">// get the data point...</comment>
        <expr_stmt><expr><name>xn</name> = <call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>yn</name> = <call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// If null, don't draw line at all</comment>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>yn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> = <name>xn</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><index>[<expr>1</expr>]</index></name> = <name>yn</name></expr>;</expr_stmt>

        <comment type="line">// Now split the segment as needed</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>xcycleBound</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ycycleBound</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>xBoundMapping</name> =<init> <expr>false</expr></init>, <name>yBoundMapping</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CyclicNumberAxis</name></type> <name>cnax</name> =<init> <expr><name>null</name></expr></init>, <name>cnay</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>domainAxis</name> <name>instanceof</name> <name>CyclicNumberAxis</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cnax</name> = (<name>CyclicNumberAxis</name>) <name>domainAxis</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xcycleBound</name> = <call><name><name>cnax</name>.<name>getCycleBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xBoundMapping</name> = <call><name><name>cnax</name>.<name>isBoundMappedToLastCycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// If the segment must be splitted, insert a new point</comment>
            <comment type="line">// Strict test forces to have real segments (not 2 equal points) </comment>
            <comment type="line">// and avoids division by 0 </comment>
            <if>if <condition>(<expr>(<name><name>x</name><index>[<expr>0</expr>]</index></name> != <name><name>x</name><index>[<expr>1</expr>]</index></name>) 
                    &amp;&amp; ((<name>xcycleBound</name> &gt;= <name><name>x</name><index>[<expr>0</expr>]</index></name>) 
                    &amp;&amp; (<name>xcycleBound</name> &lt;= <name><name>x</name><index>[<expr>1</expr>]</index></name>) 
                    || (<name>xcycleBound</name> &gt;= <name><name>x</name><index>[<expr>1</expr>]</index></name>) 
                    &amp;&amp; (<name>xcycleBound</name> &lt;= <name><name>x</name><index>[<expr>0</expr>]</index></name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>nx</name> =<init> <expr>new <name><name>double</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>ny</name> =<init> <expr>new <name><name>double</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>0</expr>]</index></name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nx</name><index>[<expr>2</expr>]</index></name> = <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>0</expr>]</index></name> = <name><name>y</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>2</expr>]</index></name> = <name><name>y</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>1</expr>]</index></name> = <name>xcycleBound</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ny</name><index>[<expr>1</expr>]</index></name> = (<name><name>y</name><index>[<expr>1</expr>]</index></name> - <name><name>y</name><index>[<expr>0</expr>]</index></name>) * (<name>xcycleBound</name> - <name><name>x</name><index>[<expr>0</expr>]</index></name>) 
                        / (<name><name>x</name><index>[<expr>1</expr>]</index></name> - <name><name>x</name><index>[<expr>0</expr>]</index></name>) + <name><name>y</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = <name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> = <name>ny</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><name>rangeAxis</name> <name>instanceof</name> <name>CyclicNumberAxis</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cnay</name> = (<name>CyclicNumberAxis</name>) <name>rangeAxis</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ycycleBound</name> = <call><name><name>cnay</name>.<name>getCycleBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>yBoundMapping</name> = <call><name><name>cnay</name>.<name>isBoundMappedToLastCycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// The split may occur in either x splitted segments, if any, but </comment>
            <comment type="line">// not in both</comment>
            <if>if <condition>(<expr>(<name><name>y</name><index>[<expr>0</expr>]</index></name> != <name><name>y</name><index>[<expr>1</expr>]</index></name>) &amp;&amp; ((<name>ycycleBound</name> &gt;= <name><name>y</name><index>[<expr>0</expr>]</index></name>) 
                    &amp;&amp; (<name>ycycleBound</name> &lt;= <name><name>y</name><index>[<expr>1</expr>]</index></name>) 
                    || (<name>ycycleBound</name> &gt;= <name><name>y</name><index>[<expr>1</expr>]</index></name>) &amp;&amp; (<name>ycycleBound</name> &lt;= <name><name>y</name><index>[<expr>0</expr>]</index></name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>nx</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>x</name>.<name>length</name></name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>ny</name> =<init> <expr>new <name><name>double</name><index>[<expr><name><name>y</name>.<name>length</name></name> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>0</expr>]</index></name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nx</name><index>[<expr>2</expr>]</index></name> = <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>0</expr>]</index></name> = <name><name>y</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>2</expr>]</index></name> = <name><name>y</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ny</name><index>[<expr>1</expr>]</index></name> = <name>ycycleBound</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>1</expr>]</index></name> = (<name><name>x</name><index>[<expr>1</expr>]</index></name> - <name><name>x</name><index>[<expr>0</expr>]</index></name>) * (<name>ycycleBound</name> - <name><name>y</name><index>[<expr>0</expr>]</index></name>) 
                        / (<name><name>y</name><index>[<expr>1</expr>]</index></name> - <name><name>y</name><index>[<expr>0</expr>]</index></name>) + <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>x</name>.<name>length</name></name> == 3</expr>)</condition><then> <block>{ 
                    <expr_stmt><expr><name><name>nx</name><index>[<expr>3</expr>]</index></name> = <name><name>x</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>3</expr>]</index></name> = <name><name>y</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt> 
                }</block></then></if>
                <expr_stmt><expr><name>x</name> = <name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> = <name>ny</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr>(<name><name>x</name>.<name>length</name></name> == 3) &amp;&amp; (<name><name>y</name><index>[<expr>1</expr>]</index></name> != <name><name>y</name><index>[<expr>2</expr>]</index></name>) &amp;&amp; ((<name>ycycleBound</name> &gt;= <name><name>y</name><index>[<expr>1</expr>]</index></name>)
                    &amp;&amp; (<name>ycycleBound</name> &lt;= <name><name>y</name><index>[<expr>2</expr>]</index></name>) 
                    || (<name>ycycleBound</name> &gt;= <name><name>y</name><index>[<expr>2</expr>]</index></name>) &amp;&amp; (<name>ycycleBound</name> &lt;= <name><name>y</name><index>[<expr>1</expr>]</index></name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>nx</name> =<init> <expr>new <name><name>double</name><index>[<expr>4</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>ny</name> =<init> <expr>new <name><name>double</name><index>[<expr>4</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>0</expr>]</index></name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nx</name><index>[<expr>1</expr>]</index></name> = <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nx</name><index>[<expr>3</expr>]</index></name> = <name><name>x</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt> 
                <expr_stmt><expr><name><name>ny</name><index>[<expr>0</expr>]</index></name> = <name><name>y</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>1</expr>]</index></name> = <name><name>y</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>ny</name><index>[<expr>3</expr>]</index></name> = <name><name>y</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ny</name><index>[<expr>2</expr>]</index></name> = <name>ycycleBound</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nx</name><index>[<expr>2</expr>]</index></name> = (<name><name>x</name><index>[<expr>2</expr>]</index></name> - <name><name>x</name><index>[<expr>1</expr>]</index></name>) * (<name>ycycleBound</name> - <name><name>y</name><index>[<expr>1</expr>]</index></name>) 
                        / (<name><name>y</name><index>[<expr>2</expr>]</index></name> - <name><name>y</name><index>[<expr>1</expr>]</index></name>) + <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = <name>nx</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> = <name>ny</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>
        
        <comment type="line">// If the line is not wrapping, then parent is OK</comment>
        <if>if <condition>(<expr><name><name>x</name>.<name>length</name></name> == 2</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>OverwriteDataSet</name></type> <name>newset</name> =<init> <expr>new <call><name>OverwriteDataSet</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cnax</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>0</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>cnay</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>1</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>0</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(
            <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
            <argument><expr><name>newset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>cnax</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>2</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>1</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>cnay</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>2</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>1</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                <argument><expr><name>newset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>x</name>.<name>length</name></name> == 4</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>cnax</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>3</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>xcycleBound</name> == <name><name>x</name><index>[<expr>3</expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr>2</expr>]</index></name> &lt;= <name>xcycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>cnay</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>3</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>ycycleBound</name> == <name><name>y</name><index>[<expr>3</expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name><name>y</name><index>[<expr>2</expr>]</index></name> &lt;= <name>ycycleBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, 
                    <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>newset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name>cnax</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cnax</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name>xBoundMapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>cnay</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cnay</name>.<name>setBoundMappedToLastCycle</name></name><argument_list>(<argument><expr><name>yBoundMapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** 
     * A dataset to hold the interpolated points when drawing new lines. 
     */</comment>
    <class><specifier>protected</specifier> <specifier>static</specifier> class <name>OverwriteDataSet</name> <super><implements>implements <name>XYDataset</name></implements></super> <block>{
        
        <comment type="javadoc">/** The delegate dataset. */</comment>
        <decl_stmt><decl><type><specifier>protected</specifier> <name>XYDataset</name></type> <name>delegateSet</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** Storage for the x and y values. */</comment>
        <decl_stmt><decl><type><name>Double</name><index>[]</index></type> <name>x</name>, <name>y</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new dataset.
         * 
         * @param x  the x values.
         * @param y  the y values.
         * @param delegateSet  the dataset.
         */</comment>
        <constructor><specifier>public</specifier> <name>OverwriteDataSet</name><parameter_list>(<param><decl><type><name><name>double</name> <index>[]</index></name></type> <name>x</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>y</name></decl></param>, 
                                <param><decl><type><name>XYDataset</name></type> <name>delegateSet</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>delegateSet</name></name> = <name>delegateSet</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = new <name><name>Double</name><index>[<expr><name><name>x</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = new <name><name>Double</name><index>[<expr><name><name>y</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>x</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{ 
                <expr_stmt><expr><name><name>this</name>.<name>x</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Double</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>y</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name>Double</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></constructor>

        <comment type="javadoc">/**
         * Returns the order of the domain (X) values.
         * 
         * @return The domain order.
         */</comment>
        <function><type><specifier>public</specifier> <name>DomainOrder</name></type> <name>getDomainOrder</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>DomainOrder</name>.<name>NONE</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Returns the number of items for the given series.
         * 
         * @param series  the series index (zero-based).
         * 
         * @return The item count.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getItemCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>x</name>.<name>length</name></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the x-value.
         * 
         * @param series  the series index (zero-based).
         * @param item  the item index (zero-based).
         * 
         * @return The x-value.
         */</comment>
        <function><type><specifier>public</specifier> <name>Number</name></type> <name>getX</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>x</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the x-value (as a double primitive) for an item within a 
         * series.
         * 
         * @param series  the series (zero-based index).
         * @param item  the item (zero-based index).
         * 
         * @return The x-value.
         */</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>getXValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name>getX</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>   
        }</block></function>

        <comment type="javadoc">/**
         * Returns the y-value.
         * 
         * @param series  the series index (zero-based).
         * @param item  the item index (zero-based).
         * 
         * @return The y-value.
         */</comment>
        <function><type><specifier>public</specifier> <name>Number</name></type> <name>getY</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>y</name><index>[<expr><name>item</name></expr>]</index></name></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the y-value (as a double primitive) for an item within a 
         * series.
         * 
         * @param series  the series (zero-based index).
         * @param item  the item (zero-based index).
         * 
         * @return The y-value.
         */</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>getYValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>y</name> =<init> <expr><call><name>getY</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>y</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>y</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>   
        }</block></function>

        <comment type="javadoc">/**
         * Returns the number of series in the dataset.
         * 
         * @return The series count.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>delegateSet</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the name of the given series.
         * 
         * @param series  the series index (zero-based).
         * 
         * @return The series name.
         */</comment>
        <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getSeriesKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>delegateSet</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the index of the named series, or -1.
         * 
         * @param seriesName  the series name.
         * 
         * @return The index.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>seriesName</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>delegateSet</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>seriesName</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Does nothing.
         * 
         * @param listener  ignored.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>addChangeListener</name><parameter_list>(<param><decl><type><name>DatasetChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// unused in parent</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Does nothing.
         * 
         * @param listener  ignored.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>removeChangeListener</name><parameter_list>(<param><decl><type><name>DatasetChangeListener</name></type> <name>listener</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// unused in parent</comment>
        }</block></function>

        <comment type="javadoc">/**
         * Returns the dataset group.
         * 
         * @return The dataset group.
         */</comment>
        <function><type><specifier>public</specifier> <name>DatasetGroup</name></type> <name>getGroup</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">// unused but must return something, so while we are at it...</comment>
            <return>return <expr><call><name><name>this</name>.<name>delegateSet</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="javadoc">/**
         * Does nothing.
         * 
         * @param group  ignored.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setGroup</name><parameter_list>(<param><decl><type><name>DatasetGroup</name></type> <name>group</name></decl></param>)</parameter_list> <block>{
            <comment type="line">// unused in parent</comment>
        }</block></function>
        
    }</block></class>
    
}</block></class>


</unit>
