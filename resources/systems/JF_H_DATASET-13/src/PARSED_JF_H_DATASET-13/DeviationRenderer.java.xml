<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\DeviationRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * DeviationRenderer.java
 * ----------------------
 * (C) Copyright 2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 21-Feb-2007 : Version 1 (DG);
 * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>

<comment type="javadoc">/**
 * A specialised subclass of the {@link XYLineAndShapeRenderer} that requires
 * an {@link IntervalXYDataset} and represents the y-interval by shading an 
 * area behind the y-values on the chart.
 * 
 * @since 1.0.5
 */</comment>
<class><specifier>public</specifier> class <name>DeviationRenderer</name> <super><extends>extends <name>XYLineAndShapeRenderer</name></extends></super> <block>{

    <comment type="javadoc">/**
     * A state object that is passed to each call to &lt;code&gt;drawItem&lt;/code&gt;.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>State</name> <super><extends>extends <name>XYLineAndShapeRenderer</name>.<name>State</name></extends></super> <block>{
        
        <comment type="javadoc">/** 
         * A list of coordinates for the upper y-values in the current series 
         * (after translation into Java2D space).
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>List</name></type> <name>upperCoordinates</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** 
         * A list of coordinates for the lower y-values in the current series 
         * (after translation into Java2D space).
         */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>List</name></type> <name>lowerCoordinates</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state instance.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>State</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>lowerCoordinates</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>upperCoordinates</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
    }</block></class>
    
    <comment type="javadoc">/** The alpha transparency for the interval shading. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>alpha</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer that displays lines and shapes for the data 
     * items, as well as the shaded area for the y-interval.
     */</comment>
    <constructor><specifier>public</specifier> <name>DeviationRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param lines  show lines between data items?
     * @param shapes  show a shape for each data item?
     */</comment>
    <constructor><specifier>public</specifier> <name>DeviationRenderer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>lines</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>shapes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>shapes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name>.<name>setDrawSeriesLineAsPath</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>alpha</name></name> = 0.5f</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the alpha transparency for the background shading.
     * 
     * @return The alpha transparency.
     * 
     * @see #setAlpha(float)
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getAlpha</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>alpha</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the alpha transparency for the background shading, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param alpha   the alpha (in the range 0.0f to 1.0f).
     * 
     * @see #getAlpha()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAlpha</name><parameter_list>(<param><decl><type><name>float</name></type> <name>alpha</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>alpha</name> &lt; 0.0f || <name>alpha</name> &gt; 1.0f</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Requires 'alpha' in the range 0.0 to 1.0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>alpha</name></name> = <name>alpha</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * This method is overridden so that this flag cannot be changed---it is
     * set to &lt;code&gt;true&lt;/code&gt; for this renderer.
     * 
     * @param flag  ignored.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawSeriesLineAsPath</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// ignore</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises and returns a state object that can be passed to each
     * invocation of the {@link #drawItem} method.
     * 
     * @param g2  the graphics target.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param dataset  the dataset.
     * @param info  the plot rendering info.
     * 
     * @return A newly initialised state object.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>State</name></type> <name>state</name> =<init> <expr>new <call><name>State</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>state</name>.<name>seriesPath</name></name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of passes (through the dataset) used by this 
     * renderer.
     * 
     * @return &lt;code&gt;3&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>3</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this is the pass where the shapes are
     * drawn.
     * 
     * @param pass  the pass index.
     * 
     * @return A boolean.
     * 
     * @see #isLinePass(int)
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isItemPass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>pass</name> == 2)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this is the pass where the lines are
     * drawn.
     * 
     * @param pass  the pass index.
     * 
     * @return A boolean.
     * 
     * @see #isItemPass(int)
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isLinePass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>pass</name> == 1)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// do nothing if item is not visible</comment>
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>

        <comment type="line">// first pass draws the shading</comment>
        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>intervalDataset</name> =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>State</name></type> <name>drState</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yLow</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getStartYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yHigh</name>  =<init> <expr><call><name><name>intervalDataset</name>.<name>getEndYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yyLow</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yLow</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yyHigh</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yHigh</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>double</name><index>[]</index></name> <block>{<expr><name>yyLow</name></expr>, <expr><name>xx</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>drState</name>.<name>upperCoordinates</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>double</name><index>[]</index></name> <block>{<expr><name>yyHigh</name></expr>, <expr><name>xx</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>double</name><index>[]</index></name> <block>{<expr><name>xx</name></expr>, <expr><name>yyLow</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>drState</name>.<name>upperCoordinates</name>.<name>add</name></name><argument_list>(<argument><expr>new <name><name>double</name><index>[]</index></name> <block>{<expr><name>xx</name></expr>, <expr><name>yyHigh</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if>if <condition>(<expr><name>item</name> == (<call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1)</expr>)</condition><then> <block>{
                <comment type="line">// last item in series, draw the lot...</comment>
                <comment type="line">// set up the alpha-transparency...</comment>
                <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(
                        <argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>alpha</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemFillPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>GeneralPath</name></type> <name>area</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>coords</name> =<init> <expr>(<name><name>double</name><index>[]</index></name>) <call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>coords</name> = (<name><name>double</name><index>[]</index></name>) <call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>drState</name>.<name>upperCoordinates</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>coords</name> = (<name><name>double</name><index>[]</index></name>) <call><name><name>drState</name>.<name>upperCoordinates</name>.<name>get</name></name><argument_list>(<argument><expr><name>count</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>count</name> - 2</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                    <expr_stmt><expr><name>coords</name> = (<name><name>double</name><index>[]</index></name>) <call><name><name>drState</name>.<name>upperCoordinates</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name>float</name>) <name><name>coords</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>area</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <expr_stmt><expr><call><name><name>drState</name>.<name>lowerCoordinates</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>drState</name>.<name>upperCoordinates</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>            
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isLinePass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            
            <comment type="line">// the following code handles the line for the y-values...it's</comment>
            <comment type="line">// all done by code in the super class</comment>
            <if>if <condition>(<expr><name>item</name> == 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>State</name></type> <name>s</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>setLastPointGood</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>     
            }</block></then></if>

            <if>if <condition>(<expr><call><name>getItemLineVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawPrimaryLineAsPath</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, 
                        <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        
        <comment type="line">// second pass adds shapes where the items are ..</comment>
        <else>else <if>if <condition>(<expr><call><name>isItemPass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// setup for collecting optional entity info...</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>drawSecondaryPass</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                    <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DeviationRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DeviationRenderer</name></type> <name>that</name> =<init> <expr>(<name>DeviationRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>alpha</name></name> != <name><name>that</name>.<name>alpha</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
