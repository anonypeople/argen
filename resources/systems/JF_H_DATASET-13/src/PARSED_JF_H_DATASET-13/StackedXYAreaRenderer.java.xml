<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\StackedXYAreaRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------------
 * StackedXYAreaRenderer.java
 * --------------------------
 * (C) Copyright 2003-2007, by Richard Atkinson and Contributors.
 *
 * Original Author:  Richard Atkinson;
 * Contributor(s):   Christian W. Zuckschwerdt;
 *                   David Gilbert (for Object Refinery Limited);
 *
 * Changes:
 * --------
 * 27-Jul-2003 : Initial version (RA);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 18-Aug-2003 : Now handles null values (RA);
 * 20-Aug-2003 : Implemented Cloneable, PublicCloneable and Serializable (DG);
 * 22-Sep-2003 : Changed to be a two pass renderer with optional shape Paint 
 *               and Stroke (RA);
 * 07-Oct-2003 : Added renderer state (DG);
 * 10-Feb-2004 : Updated state object and changed drawItem() method to make 
 *               overriding easier (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed 
 *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 10-Sep-2004 : Removed getRangeType() method (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 06-Jan-2005 : Override equals() (DG);
 * 07-Jan-2005 : Update for method name changes in DatasetUtilities (DG);
 * 28-Mar-2005 : Use getXValue() and getYValue() from dataset (DG);
 * 06-Jun-2005 : Fixed null pointer exception, plus problems with equals() and
 *               serialization (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 10-Nov-2006 : Fixed bug 1593156, NullPointerException with line 
 *               plotting (DG);
 * 02-Feb-2007 : Fixed bug 1649686, crosshairs don't stack y-values (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 22-Mar-2007 : Fire change events in setShapePaint() and setShapeStroke() 
 *               methods (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Point</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Stack</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>XYItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>TableXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A stacked area renderer for the {@link XYPlot} class.
 * &lt;br&gt;&lt;br&gt;
 * SPECIAL NOTE:  This renderer does not currently handle negative data values
 * correctly.  This should get fixed at some point, but the current workaround
 * is to use the {@link StackedXYAreaRenderer2} class instead.
 */</comment>
<class><specifier>public</specifier> class <name>StackedXYAreaRenderer</name> <super><extends>extends <name>XYAreaRenderer</name></extends> 
                                   <implements>implements <name>Cloneable</name>, 
                                              <name>PublicCloneable</name>,
                                              <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5217394318178570889L</expr></init></decl>;</decl_stmt>
     
     <comment type="javadoc">/**
     * A state object for use by this renderer.
     */</comment>
    <class><specifier>static</specifier> class <name>StackedXYAreaRendererState</name> <super><extends>extends <name>XYItemRendererState</name></extends></super> <block>{
        
        <comment type="javadoc">/** The area for the current series. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Polygon</name></type> <name>seriesArea</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The line. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The points from the last series. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Stack</name></type> <name>lastSeriesPoints</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The points for the current series. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>Stack</name></type> <name>currentSeriesPoints</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state for the renderer.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>StackedXYAreaRendererState</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>seriesArea</name></name> = <name>null</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>lastSeriesPoints</name></name> = new <call><name>Stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>currentSeriesPoints</name></name> = new <call><name>Stack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="javadoc">/**
         * Returns the series area.
         * 
         * @return The series area.
         */</comment>
        <function><type><specifier>public</specifier> <name>Polygon</name></type> <name>getSeriesArea</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>seriesArea</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets the series area.
         * 
         * @param area  the area.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesArea</name><parameter_list>(<param><decl><type><name>Polygon</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesArea</name></name> = <name>area</name></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="javadoc">/**
         * Returns the working line.
         * 
         * @return The working line.
         */</comment>
        <function><type><specifier>public</specifier> <name>Line2D</name></type> <name>getLine</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>line</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Returns the current series points.
         * 
         * @return The current series points.
         */</comment>
        <function><type><specifier>public</specifier> <name>Stack</name></type> <name>getCurrentSeriesPoints</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>currentSeriesPoints</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets the current series points.
         * 
         * @param points  the points.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setCurrentSeriesPoints</name><parameter_list>(<param><decl><type><name>Stack</name></type> <name>points</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>currentSeriesPoints</name></name> = <name>points</name></expr>;</expr_stmt>
        }</block></function>
    
        <comment type="javadoc">/**
         * Returns the last series points.
         * 
         * @return The last series points.
         */</comment>
        <function><type><specifier>public</specifier> <name>Stack</name></type> <name>getLastSeriesPoints</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>lastSeriesPoints</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets the last series points.
         * 
         * @param points  the points.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastSeriesPoints</name><parameter_list>(<param><decl><type><name>Stack</name></type> <name>points</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>lastSeriesPoints</name></name> = <name>points</name></expr>;</expr_stmt>
        }</block></function>
    
    }</block></class>

    <comment type="javadoc">/** 
     * Custom Paint for drawing all shapes, if null defaults to series shapes 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>shapePaint</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Custom Stroke for drawing all shapes, if null defaults to series 
     * strokes.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>shapeStroke</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYAreaRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>AREA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     *
     * @param type  the type of the renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.  To specify the type of renderer, use one of 
     * the constants: &lt;code&gt;SHAPES&lt;/code&gt;, &lt;code&gt;LINES&lt;/code&gt;, 
     * &lt;code&gt;SHAPES_AND_LINES&lt;/code&gt;, &lt;code&gt;AREA&lt;/code&gt; or 
     * &lt;code&gt;AREA_AND_SHAPES&lt;/code&gt;.
     *
     * @param type  the type of renderer.
     * @param labelGenerator  the tool tip generator to use (&lt;code&gt;null&lt;/code&gt; 
     *                        is none).
     * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>,
                                 <param><decl><type><name>XYToolTipGenerator</name></type> <name>labelGenerator</name></decl></param>, 
                                 <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>labelGenerator</name></expr></argument>, <argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the paint used for rendering shapes, or &lt;code&gt;null&lt;/code&gt; if 
     * using series paints.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setShapePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getShapePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for rendering shapes and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param shapePaint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getShapePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>shapePaint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapePaint</name></name> = <name>shapePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used for rendering shapes, or &lt;code&gt;null&lt;/code&gt; if 
     * using series strokes.
     *
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setShapeStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getShapeStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapeStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for rendering shapes and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param shapeStroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getShapeStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapeStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>shapeStroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapeStroke</name></name> = <name>shapeStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer. This method will be called before the first
     * item is rendered, giving the renderer an opportunity to initialise any 
     * state information it wants to maintain.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return A state object that should be passed to subsequent calls to the 
     *         drawItem() method.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYItemRendererState</name></type> <name>state</name> =<init> <expr>new <call><name>StackedXYAreaRendererState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// in the rendering process, there is special handling for item </comment>
        <comment type="line">// zero, so we can't support processing of visible data items only</comment>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of passes required by the renderer.
     * 
     * @return 2.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range ([0.0, 0.0] if the dataset contains no values, and 
     *         &lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt;).
     *         
     * @throws ClassCastException if &lt;code&gt;dataset&lt;/code&gt; is not an instance
     *         of {@link TableXYDataset}.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findStackedRangeBounds</name></name><argument_list>(
                <argument><expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  information about crosshairs on a plot.
     * @param pass  the pass index.
     * 
     * @throws ClassCastException if &lt;code&gt;state&lt;/code&gt; is not an instance of
     *         &lt;code&gt;StackedXYAreaRendererState&lt;/code&gt; or &lt;code&gt;dataset&lt;/code&gt;
     *         is not an instance of {@link TableXYDataset}.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StackedXYAreaRendererState</name></type> <name>areaState</name> 
            =<init> <expr>(<name>StackedXYAreaRendererState</name>) <name>state</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Get the item count for the series, so that we can know which is the</comment>
        <comment type="line">// end of the series.</comment>
        <decl_stmt><decl><type><name>TableXYDataset</name></type> <name>tdataset</name> =<init> <expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>tdataset</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>nullPoint</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y1</name> = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>nullPoint</name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//  Get height adjustment based on stack and translate to Java2D values</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>ph1</name> =<init> <expr><call><name>getPreviousHeight</name><argument_list>(<argument><expr><name>tdataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name> + <name>ph1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//  Get series Paint and Stroke</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>seriesStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <comment type="line">//  On first pass render the areas, line and outlines</comment>

            <if>if <condition>(<expr><name>item</name> == 0</expr>)</condition><then> <block>{
                <comment type="line">// Create a new Area for the series</comment>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>setSeriesArea</name></name><argument_list>(<argument><expr>new <call><name>Polygon</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>setLastSeriesPoints</name></name><argument_list>(
                        <argument><expr><call><name><name>areaState</name>.<name>getCurrentSeriesPoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>setCurrentSeriesPoints</name></name><argument_list>(<argument><expr>new <call><name>Stack</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// start from previous height (ph1)</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>ph1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// The first point is (x, 0)</comment>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, 
                            <argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>, 
                            <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>

            <comment type="line">// Add each point to Area (x, y)</comment>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Point</name></type> <name>point</name> =<init> <expr>new <call><name>Point</name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>getCurrentSeriesPoints</name></name><argument_list>()</argument_list></call>.<call><name>push</name><argument_list>(<argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>, 
                        <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if>if <condition>(<expr><call><name>getPlotLines</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>item</name> &gt; 0</expr>)</condition><then> <block>{
                    <comment type="line">// get the previous data point...</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>ph0</name> =<init> <expr><call><name>getPreviousHeight</name><argument_list>(<argument><expr><name>tdataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name> + <name>ph0</name></expr></argument>, 
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>areaState</name>.<name>getLine</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, 
                                <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>areaState</name>.<name>getLine</name></name><argument_list>()</argument_list></call>.<call><name>setLine</name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, 
                                <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><call><name><name>areaState</name>.<name>getLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// Check if the item is the last item for the series and number of </comment>
            <comment type="line">// items &gt; 0.  We can't draw an area for a single point.</comment>
            <if>if <condition>(<expr><call><name>getPlotArea</name><argument_list>()</argument_list></call> &amp;&amp; <name>item</name> &gt; 0 &amp;&amp; <name>item</name> == (<name>itemCount</name> - 1)</expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>ph1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <comment type="line">// Add the last point (x,0)</comment>
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, 
                            <argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <comment type="line">// Add the last point (x,0)</comment>
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>, 
                            <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>

                <comment type="line">// Add points from last series to complete the base of the </comment>
                <comment type="line">// polygon</comment>
                <if>if <condition>(<expr><name>series</name> != 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Stack</name></type> <name>points</name> =<init> <expr><call><name><name>areaState</name>.<name>getLastSeriesPoints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>!<call><name><name>points</name>.<name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                        <decl_stmt><decl><type><name>Point</name></type> <name>point</name> =<init> <expr>(<name>Point</name>) <call><name><name>points</name>.<name>pop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call>.<call><name>addPoint</name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                                <argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>
                }</block></then></if>

                <comment type="line">//  Fill the polygon</comment>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//  Draw an outline around the Area.</comment>
                <if>if <condition>(<expr><call><name>isOutline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><call><name><name>areaState</name>.<name>getSeriesArea</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>ph1</name> + <name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>,
                    <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> 
        <else>else <if>if <condition>(<expr><name>pass</name> == 1</expr>)</condition><then> <block>{
            <comment type="line">// On second pass render shapes and collect entity and tooltip </comment>
            <comment type="line">// information</comment>

            <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getPlotShapes</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name>getItemShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, 
                            <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, 
                            <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <if>if <condition>(<expr>!<name>nullPoint</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>getShapePaint</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getShapePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> 
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><call><name>getShapeStroke</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getShapeStroke</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> 
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> 
            <else>else <block>{
                <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transX1</name> - 3</expr></argument>, <argument><expr><name>transY1</name> - 3</expr></argument>, 
                            <argument><expr>6.0</expr></argument>, <argument><expr>6.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transY1</name> - 3</expr></argument>, <argument><expr><name>transX1</name> - 3</expr></argument>, 
                            <argument><expr>6.0</expr></argument>, <argument><expr>6.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></else></if>

            <comment type="line">// collect entity and tool tip information...</comment>
            <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <name>shape</name> != <name>null</name> &amp;&amp; !<name>nullPoint</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>XYToolTipGenerator</name></type> <name>generator</name> 
                        =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>generator</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>tip</name> = <call><name><name>generator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>url</name> = <call><name>getURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, 
                                <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>XYItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>XYItemEntity</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, 
                            <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the stacked value of the all series up to, but not including 
     * &lt;code&gt;series&lt;/code&gt; for the specified item. It returns 0.0 if 
     * &lt;code&gt;series&lt;/code&gt; is the first series, i.e. 0.
     *
     * @param dataset  the dataset.
     * @param series  the series.
     * @param index  the index.
     *
     * @return The cumulative value for all series' values up to but excluding 
     *         &lt;code&gt;series&lt;/code&gt; for &lt;code&gt;index&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>getPreviousHeight</name><parameter_list>(<param><decl><type><name>TableXYDataset</name></type> <name>dataset</name></decl></param>, 
                                       <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>series</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> += <name>value</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StackedXYAreaRenderer</name>) || !<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StackedXYAreaRenderer</name></type> <name>that</name> =<init> <expr>(<name>StackedXYAreaRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapeStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapeStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapeStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
