<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\StackedXYAreaRenderer2.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * StackedXYAreaRenderer2.java
 * ---------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited), based on 
 *                   the StackedXYAreaRenderer class by Richard Atkinson;
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 30-Apr-2004 : Version 1 (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 10-Sep-2004 : Removed getRangeType() method (DG);
 * 06-Jan-2004 : Renamed getRangeExtent() --&gt; findRangeBounds (DG);
 * 28-Mar-2005 : Use getXValue() and getYValue() from dataset (DG);
 * 03-Oct-2005 : Add entity generation to drawItem() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 22-Aug-2006 : Handle null and empty datasets correctly in the 
 *               findRangeBounds() method (DG);
 * 22-Sep-2006 : Added a flag to allow rounding of x-coordinates (after 
 *               translation to Java2D space) in order to avoid the striping
 *               that can result from anti-aliasing (thanks to Doug 
 *               Clayton) (DG);
 * 30-Nov-2006 : Added accessor methods for the roundXCoordinates flag (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>TableXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A stacked area renderer for the {@link XYPlot} class.
 */</comment>
<class><specifier>public</specifier> class <name>StackedXYAreaRenderer2</name> <super><extends>extends <name>XYAreaRenderer2</name></extends> 
                                    <implements>implements <name>Cloneable</name>, 
                                               <name>PublicCloneable</name>,
                                               <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7752676509764539182L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * This flag controls whether or not the x-coordinates (in Java2D space) 
     * are rounded to integers.  When set to true, this can avoid the vertical
     * striping that anti-aliasing can generate.  However, the rounding may not
     * be appropriate for output in high resolution formats (for example, 
     * vector graphics formats such as SVG and PDF).
     * 
     * @since 1.0.3
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>roundXCoordinates</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYAreaRenderer2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     *
     * @param labelGenerator  the tool tip generator to use.  &lt;code&gt;null&lt;/code&gt;
     *                        is none.
     * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYAreaRenderer2</name><parameter_list>(<param><decl><type><name>XYToolTipGenerator</name></type> <name>labelGenerator</name></decl></param>, 
                                  <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>labelGenerator</name></expr></argument>, <argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>roundXCoordinates</name></name> = true</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the x-coordinates (in
     * Java2D space) are rounded to integer values.
     * 
     * @return The flag.
     * 
     * @since 1.0.4
     * 
     * @see #setRoundXCoordinates(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRoundXCoordinates</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the x-coordinates (in 
     * Java2D space) are rounded to integer values, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param round  the new flag value.
     * 
     * @since 1.0.4
     * 
     * @see #getRoundXCoordinates()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRoundXCoordinates</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>round</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>roundXCoordinates</name></name> = <name>round</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (or &lt;code&gt;null&lt;/code&gt; if the dataset is 
     *         &lt;code&gt;null&lt;/code&gt; or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TableXYDataset</name></type> <name>d</name> =<init> <expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>d</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stackValues</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></argument>, 
                    <argument><expr><call><name><name>d</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>min</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name><name>stackValues</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><name><name>stackValues</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>min</name> == <name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of passes required by the renderer.
     * 
     * @return 1.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  information about crosshairs on a plot.
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>TableXYDataset</name></type> <name>tdataset</name> =<init> <expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y1</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>        
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack1</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>tdataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// get the previous point and the next point so we can calculate a </comment>
        <comment type="line">// "hot spot" for the area (used by the chart entity)...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>item</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>item</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y0</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack0</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>tdataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>item</name> - 1</expr></argument>, 
                <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>item</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>item</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y2</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stack2</name> =<init> <expr><call><name>getStackValues</name><argument_list>(<argument><expr><name>tdataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>item</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xleft</name> =<init> <expr>(<name>x0</name> + <name>x1</name>) / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xright</name> =<init> <expr>(<name>x1</name> + <name>x2</name>) / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stackLeft</name> =<init> <expr><call><name>averageStackValues</name><argument_list>(<argument><expr><name>stack0</name></expr></argument>, <argument><expr><name>stack1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>stackRight</name> =<init> <expr><call><name>averageStackValues</name><argument_list>(<argument><expr><name>stack1</name></expr></argument>, <argument><expr><name>stack2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>adjStackLeft</name> =<init> <expr><call><name>adjustedStackValues</name><argument_list>(<argument><expr><name>stack0</name></expr></argument>, <argument><expr><name>stack1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>adjStackRight</name> =<init> <expr><call><name>adjustedStackValues</name><argument_list>(<argument><expr><name>stack1</name></expr></argument>, <argument><expr><name>stack2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge0</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>float</name></type> <name>transX1</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>transXLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>xleft</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>transXRight</name> =<init> <expr>(<name>float</name>) <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>xright</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edge0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>transX1</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transXLeft</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transXRight</name> = <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>float</name></type> <name>transY1</name></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge1</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>left</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>right</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>y1</name> &gt;= 0.0</expr>)</condition><then> <block>{  <comment type="line">// handle positive value</comment>
            <expr_stmt><expr><name>transY1</name> = (<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name> + <name><name>stack1</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStack1</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>stack1</name><index>[<expr>1</expr>]</index></name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackLeft</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// LEFT POLYGON</comment>
            <if>if <condition>(<expr><name>y0</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yleft</name> =<init> <expr>(<name>y0</name> + <name>y1</name>) / 2.0 + <name><name>stackLeft</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYLeft</name> 
                    =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yleft</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transYLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <decl_stmt><decl><type><name>float</name></type> <name>transStackRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackRight</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// RIGHT POLYGON</comment>
            <if>if <condition>(<expr><name>y2</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yright</name> =<init> <expr>(<name>y1</name> + <name>y2</name>) / 2.0 + <name><name>stackRight</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYRight</name> 
                    =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yright</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transYRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{  <comment type="line">// handle negative value </comment>
            <expr_stmt><expr><name>transY1</name> = (<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name> + <name><name>stack1</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStack1</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>stack1</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackLeft</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// LEFT POLYGON</comment>
            <if>if <condition>(<expr><name>y0</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yleft</name> =<init> <expr>(<name>y0</name> + <name>y1</name>) / 2.0 + <name><name>stackLeft</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYLeft</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yleft</name></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transStackLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXLeft</name></expr></argument>, <argument><expr><name>transYLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>left</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>float</name></type> <name>transStackRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(
                    <argument><expr><name><name>adjStackRight</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// RIGHT POLYGON</comment>
            <if>if <condition>(<expr><name>y2</name> &gt;= 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yright</name> =<init> <expr>(<name>y1</name> + <name>y2</name>) / 2.0 + <name><name>stackRight</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>transYRight</name> =<init> <expr>(<name>float</name>) <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>yright</name></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transStack1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transYRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>transXRight</name></expr></argument>, <argument><expr><name>transStackRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>right</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <comment type="line">//  Get series Paint and Stroke</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> 
        
        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>gp</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>gp</name>.<name>append</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>entityArea</name> = <name>gp</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>entityArea</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                    <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the stacked values (one positive and one negative) of all 
     * series up to, but not including, &lt;code&gt;series&lt;/code&gt; for the specified 
     * item. It returns [0.0, 0.0] if &lt;code&gt;series&lt;/code&gt; is the first series.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index.
     * @param index  the item index.
     *
     * @return An array containing the cumulative negative and positive values
     *     for all series values up to but excluding &lt;code&gt;series&lt;/code&gt; 
     *     for &lt;code&gt;index&lt;/code&gt;.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>getStackValues</name><parameter_list>(<param><decl><type><name>TableXYDataset</name></type> <name>dataset</name></decl></param>, 
                                    <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>series</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>v</name> &gt;= 0.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> += <name>v</name></expr>;</expr_stmt>   
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> += <name>v</name></expr>;</expr_stmt>   
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a pair of "stack" values calculated as the mean of the two 
     * specified stack value pairs.
     * 
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     * 
     * @return A pair of average stack values.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>averageStackValues</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>0</expr>]</index></name> + <name><name>stack2</name><index>[<expr>0</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>1</expr>]</index></name> + <name><name>stack2</name><index>[<expr>1</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates adjusted stack values from the supplied values.  The value is
     * the mean of the supplied values, unless either of the supplied values
     * is zero, in which case the adjusted value is zero also.
     * 
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     * 
     * @return A pair of average stack values.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name><index>[]</index></type> <name>adjustedStackValues</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index></name></type> <name>stack2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>double</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>stack1</name><index>[<expr>0</expr>]</index></name> == 0.0 || <name><name>stack2</name><index>[<expr>0</expr>]</index></name> == 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = 0.0</expr>;</expr_stmt>   
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>0</expr>]</index></name> + <name><name>stack2</name><index>[<expr>0</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name><name>stack1</name><index>[<expr>1</expr>]</index></name> == 0.0 || <name><name>stack2</name><index>[<expr>1</expr>]</index></name> == 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = 0.0</expr>;</expr_stmt>   
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = (<name><name>stack1</name><index>[<expr>1</expr>]</index></name> + <name><name>stack2</name><index>[<expr>1</expr>]</index></name>) / 2.0</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StackedXYAreaRenderer2</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StackedXYAreaRenderer2</name></type> <name>that</name> =<init> <expr>(<name>StackedXYAreaRenderer2</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name> != <name><name>that</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
