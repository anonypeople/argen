<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\StackedXYBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * StackedXYBarRenderer.java
 * -------------------------
 * (C) Copyright 2004-2007, by Andreas Schroeder and Contributors.
 *
 * Original Author:  Andreas Schroeder;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 01-Apr-2004 : Version 1 (AS);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 15-Aug-2004 : Added drawBarOutline to control draw/don't-draw bar 
 *               outlines (BN);
 * 10-Sep-2004 : drawBarOutline attribute is now inherited from XYBarRenderer 
 *               and double primitives are retrieved from the dataset rather 
 *               than Number objects (DG);
 * 07-Jan-2005 : Updated for method name change in DatasetUtilities (DG);
 * 25-Jan-2005 : Modified to handle negative values correctly (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Dec-2006 : Added support for GradientPaint (DG);
 * 15-Mar-2007 : Added renderAsPercentages option (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>TableXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>

<comment type="javadoc">/**
 * A bar renderer that displays the series items stacked.
 * The dataset used together with this renderer must be a
 * {@link org.jfree.data.xy.IntervalXYDataset} and a
 * {@link org.jfree.data.xy.TableXYDataset}. For example, the
 * dataset class {@link org.jfree.data.xy.CategoryTableXYDataset}
 * implements both interfaces.
 */</comment>
<class><specifier>public</specifier> class <name>StackedXYBarRenderer</name> <super><extends>extends <name>XYBarRenderer</name></extends></super> <block>{
  
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7049101055533436444L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether the bars display values or percentages. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>renderAsPercentages</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer.
     *
     * @param margin  the percentual amount of the bars that are cut away.
     */</comment>
    <constructor><specifier>public</specifier> <name>StackedXYBarRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>margin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = false</expr>;</expr_stmt>
        
        <comment type="line">// set the default item label positions, which will only be used if </comment>
        <comment type="line">// the user requests visible item labels...</comment>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>p</name> =<init> <expr>new <call><name>ItemLabelPosition</name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBasePositiveItemLabelPosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseNegativeItemLabelPosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setPositiveItemLabelPositionFallback</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNegativeItemLabelPositionFallback</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer displays each item value as
     * a percentage (so that the stacked bars add to 100%), and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     * 
     * @see #setRenderAsPercentages(boolean)
     * 
     * @since 1.0.5
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRenderAsPercentages</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the renderer displays each item
     * value as a percentage (so that the stacked bars add to 100%), and sends
     * a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param asPercentages  the flag.
     * 
     * @see #getRenderAsPercentages()
     * 
     * @since 1.0.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderAsPercentages</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>asPercentages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>renderAsPercentages</name></name> = <name>asPercentages</name></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;2&lt;/code&gt; to indicate that this renderer requires two 
     * passes for drawing (item labels are drawn in the second pass so that 
     * they always appear in front of all the bars).
     * 
     * @return &lt;code&gt;2&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that should be 
     * passed to all subsequent calls to the drawItem() method. Here there is 
     * nothing to do.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to
     *              the caller.
     *
     * @return A state object.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>XYBarRendererState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt;
     *         or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
                <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>1.0</expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else>else <block>{
                <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findStackedRangeBounds</name></name><argument_list>(
                        <argument><expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr>!(<name>dataset</name> <name>instanceof</name> <name>IntervalXYDataset</name> 
                &amp;&amp; <name>dataset</name> <name>instanceof</name> <name>TableXYDataset</name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>message</name> =<init> <expr>"dataset (type " + <call><name><name>dataset</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> 
                + ") has wrong type:"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>and</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name><name>IntervalXYDataset</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>message</name> += " it is no IntervalXYDataset"</expr>;</expr_stmt>
                <expr_stmt><expr><name>and</name> = true</expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr>!<name><name>TableXYDataset</name>.<name><name/></name></name>class.<call><name>isAssignableFrom</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>and</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>message</name> += " and"</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>message</name> += " it is no TableXYDataset"</expr>;</expr_stmt>
            }</block></then></if>

            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>intervalDataset</name> =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <comment type="line">// if we are rendering the values as percentages, we need to calculate</comment>
        <comment type="line">// the total for the current item.  Unfortunately here we end up </comment>
        <comment type="line">// repeating the calculation more times than is strictly necessary -</comment>
        <comment type="line">// hopefully I'll come back to this and find a way to add the </comment>
        <comment type="line">// total(s) to the renderer state.  The other problem is we implicitly</comment>
        <comment type="line">// assume the dataset has no negative values...perhaps that can be</comment>
        <comment type="line">// fixed too.</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>  
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>total</name> = <call><name><name>DatasetUtilities</name>.<name>calculateStackTotal</name></name><argument_list>(
                    <argument><expr>(<name>TableXYDataset</name>) <name>dataset</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> = <name>value</name> / <name>total</name></expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>positiveBase</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>negativeBase</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>series</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>v</name> = <name>v</name> / <name>total</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>v</name> &gt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>positiveBase</name> = <name>positiveBase</name> + <name>v</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>negativeBase</name> = <name>negativeBase</name> + <name>v</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>double</name></type> <name>translatedBase</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edgeR</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>translatedBase</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>positiveBase</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>edgeR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>translatedValue</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>positiveBase</name> + <name>value</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edgeR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>translatedBase</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>negativeBase</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name>edgeR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>translatedValue</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>negativeBase</name> + <name>value</name></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edgeR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edgeD</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>startX</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedStartX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>edgeD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>endX</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedEndX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edgeD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>translatedWidth</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedEndX</name> 
                - <name>translatedStartX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedHeight</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedValue</name> - <name>translatedBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getMargin</name><argument_list>()</argument_list></call> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>cut</name> =<init> <expr><name>translatedWidth</name> * <call><name>getMargin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>translatedWidth</name> = <name>translatedWidth</name> - <name>cut</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>translatedStartX</name> = <name>translatedStartX</name> + <name>cut</name> / 2</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>translatedBase</name></expr></argument>, 
                    <argument><expr><name>translatedValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>translatedEndX</name></expr></argument>, <argument><expr><name>translatedHeight</name></expr></argument>,
                    <argument><expr><name>translatedWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>translatedStartX</name></expr></argument>,
                    <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>translatedBase</name></expr></argument>, <argument><expr><name>translatedValue</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>translatedWidth</name></expr></argument>, <argument><expr><name>translatedHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call> 
                    != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>GradientPaint</name></type> <name>gp</name> =<init> <expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>itemPaint</name> = <call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call>.<call><name>transform</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                    &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedEndX</name> - <name>translatedStartX</name></expr></argument>)</argument_list></call> &gt; 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// add an entity for the item...</comment>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>
                        .<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                            <argument><expr><call><name><name>bar</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bar</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>pass</name> == 1</expr>)</condition><then> <block>{
            <comment type="line">// handle item label drawing, now that we know all the bars have</comment>
            <comment type="line">// been drawn...</comment>
            <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                        <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                        <argument><expr><name>value</name> &lt; 0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></else></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StackedXYBarRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>StackedXYBarRenderer</name></type> <name>that</name> =<init> <expr>(<name>StackedXYBarRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderAsPercentages</name></name> != <name><name>that</name>.<name>renderAsPercentages</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>super</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <name>result</name> * 37 + (<name><name>this</name>.<name>renderAsPercentages</name></name> ? 1 : 0)</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
