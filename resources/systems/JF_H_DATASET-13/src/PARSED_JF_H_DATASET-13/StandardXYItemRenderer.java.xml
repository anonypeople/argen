<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\StandardXYItemRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * StandardXYItemRenderer.java
 * ---------------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Mark Watson (www.markwatson.com);
 *                   Jonathan Nash;
 *                   Andreas Schneider;
 *                   Norbert Kiesel (for TBD Networks);
 *                   Christian W. Zuckschwerdt;
 *                   Bill Kelemen;
 *                   Nicolas Brodu (for Astrium and EADS Corporate Research 
 *                   Center);
 *
 * Changes:
 * --------
 * 19-Oct-2001 : Version 1, based on code by Mark Watson (DG);
 * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);
 * 21-Dec-2001 : Added working line instance to improve performance (DG);
 * 22-Jan-2002 : Added code to lock crosshairs to data points.  Based on code 
 *               by Jonathan Nash (DG);
 * 23-Jan-2002 : Added DrawInfo parameter to drawItem() method (DG);
 * 28-Mar-2002 : Added a property change listener mechanism so that the 
 *               renderer no longer needs to be immutable (DG);
 * 02-Apr-2002 : Modified to handle null values (DG);
 * 09-Apr-2002 : Modified draw method to return void.  Removed the translated 
 *               zero from the drawItem method.  Override the initialise() 
 *               method to calculate it (DG);
 * 13-May-2002 : Added code from Andreas Schneider to allow changing 
 *               shapes/colors per item (DG);
 * 24-May-2002 : Incorporated tooltips into chart entities (DG);
 * 25-Jun-2002 : Removed redundant code (DG);
 * 05-Aug-2002 : Incorporated URLs for HTML image maps into chart entities (RA);
 * 08-Aug-2002 : Added discontinuous lines option contributed by 
 *               Norbert Kiesel (DG);
 * 20-Aug-2002 : Added user definable default values to be returned by 
 *               protected methods unless overridden by a subclass (DG);
 * 23-Sep-2002 : Updated for changes in the XYItemRenderer interface (DG);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 15-May-2003 : Modified to take into account the plot orientation (DG);
 * 29-Jul-2003 : Amended code that doesn't compile with JDK 1.2.2 (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 24-Aug-2003 : Added null/NaN checks in drawItem (BK);
 * 08-Sep-2003 : Fixed serialization (NB);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 21-Jan-2004 : Override for getLegendItem() method (DG);
 * 27-Jan-2004 : Moved working line into state object (DG);
 * 10-Feb-2004 : Changed drawItem() method to make cut-and-paste overriding 
 *               easier (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed 
 *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 08-Jun-2004 : Modified to use getX() and getY() methods (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 25-Aug-2004 : Created addEntity() method in superclass (DG);
 * 08-Oct-2004 : Added 'gapThresholdType' as suggested by Mike Watts (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 23-Feb-2005 : Fixed getLegendItem() method to show lines.  Fixed bug
 *               1077108 (shape not visible for first item in series) (DG);
 * 10-Apr-2005 : Fixed item label positioning with horizontal orientation (DG);
 * 20-Apr-2005 : Use generators for legend tooltips and URLs (DG);
 * 27-Apr-2005 : Use generator for series label in legend (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 15-Jun-2006 : Fixed bug (1380480) for rendering series as path (DG); 
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 14-Mar-2007 : Fixed problems with the equals() and clone() methods (DG);
 * 23-Mar-2007 : Clean-up of shapesFilled attributes (DG);
 * 20-Apr-2007 : Updated getLegendItem() and drawItem() for renderer 
 *               change (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() 
 *               method (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 08-Jun-2007 : Fixed bug in entity creation (DG);
 * 21-Nov-2007 : Deprecated override flag methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Image</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Point</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>UnitType</name></name>;</import>

<comment type="javadoc">/**
 * Standard item renderer for an {@link XYPlot}.  This class can draw (a) 
 * shapes at each point, or (b) lines between points, or (c) both shapes and 
 * lines.
 * &lt;P&gt;
 * This renderer has been retained for historical reasons and, in general, you
 * should use the {@link XYLineAndShapeRenderer} class instead.
 */</comment>
<class><specifier>public</specifier> class <name>StandardXYItemRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
        <implements>implements <name>XYItemRenderer</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3271351259436865995L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Constant for the type of rendering (shapes only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHAPES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the type of rendering (lines only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LINES</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the type of rendering (shapes and lines). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHAPES_AND_LINES</name> =<init> <expr><name>SHAPES</name> | <name>LINES</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the type of rendering (images only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>IMAGES</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the type of rendering (discontinuous lines). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISCONTINUOUS</name> =<init> <expr>8</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Constant for the type of rendering (discontinuous lines). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISCONTINUOUS_LINES</name> =<init> <expr><name>LINES</name> | <name>DISCONTINUOUS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not shapes are drawn at each XY point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>baseShapesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not lines are drawn between XY points. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotLines</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not images are drawn between XY points. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotImages</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag controlling whether or not discontinuous lines are used. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotDiscontinuous</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Specifies how the gap threshold value is interpreted. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>UnitType</name></type> <name>gapThresholdType</name> =<init> <expr><name><name>UnitType</name>.<name>RELATIVE</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Threshold for deciding when to discontinue a line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>gapThreshold</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not shapes are filled for ALL series. 
     *
     * @deprecated As of 1.0.8, this override should not be used.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>shapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A table of flags that control (per series) whether or not shapes are 
     * filled. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BooleanList</name></type> <name>seriesShapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value returned by the getShapeFilled() method. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>baseShapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not each series is drawn as a single 
     * path. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawSeriesLineAsPath</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The shape that is used to represent a line in the legend. 
     * This should never be set to &lt;code&gt;null&lt;/code&gt;. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendLine</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardXYItemRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>LINES</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.  To specify the type of renderer, use one of 
     * the constants: {@link #SHAPES}, {@link #LINES} or 
     * {@link #SHAPES_AND_LINES}.
     *
     * @param type  the type.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.  To specify the type of renderer, use one of 
     * the constants: {@link #SHAPES}, {@link #LINES} or 
     * {@link #SHAPES_AND_LINES}.
     *
     * @param type  the type of renderer.
     * @param toolTipGenerator  the item label generator (&lt;code&gt;null&lt;/code&gt; 
     *                          permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, 
                                  <param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>toolTipGenerator</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.  To specify the type of renderer, use one of 
     * the constants: {@link #SHAPES}, {@link #LINES} or 
     * {@link #SHAPES_AND_LINES}.
     *
     * @param type  the type of renderer.
     * @param toolTipGenerator  the item label generator (&lt;code&gt;null&lt;/code&gt; 
     *                          permitted).
     * @param urlGenerator  the URL generator.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardXYItemRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>,
                                  <param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>,
                                  <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr><name>toolTipGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setURLGenerator</name><argument_list>(<argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>type</name> &amp; <name>SHAPES</name>) != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>baseShapesVisible</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>type</name> &amp; <name>LINES</name>) != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotLines</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>type</name> &amp; <name>IMAGES</name>) != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotImages</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>type</name> &amp; <name>DISCONTINUOUS</name>) != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotDiscontinuous</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>shapesFilled</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesShapesFilled</name></name> = new <call><name>BooleanList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesFilled</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-7.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>7.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns true if shapes are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if shapes are being plotted by the renderer.
     * 
     * @see #setBaseShapesVisible
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBaseShapesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseShapesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not a shape is plotted at each 
     * data point.
     *
     * @param flag  the flag.
     * 
     * @see #getBaseShapesVisible
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseShapesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>baseShapesVisible</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>baseShapesVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="line">// SHAPES FILLED</comment>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shape for an item is
     * filled.
     * &lt;p&gt;
     * The default implementation passes control to the 
     * &lt;code&gt;getSeriesShapesFilled&lt;/code&gt; method.  You can override this method 
     * if you require different behaviour.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     * 
     * @see #getSeriesShapesFilled(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getItemShapeFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// return the overall setting, if there is one...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapesFilled</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>shapesFilled</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// otherwise look up the paint table</comment>
        <decl_stmt><decl><type><name>Boolean</name></type> <name>flag</name> =<init> <expr><call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>flag</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>baseShapesFilled</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the override flag that controls whether or not shapes are filled
     * for ALL series.
     * 
     * @return The flag (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.5
     * 
     * @deprecated As of 1.0.8, you should avoid using this method and rely
     *             on just the per-series ({@link #getSeriesShapesFilled(int)}) 
     *             and base-level ({@link #getBaseShapesFilled()}) settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getShapesFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapesFilled</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the override flag that controls whether or not shapes are filled
     * for ALL series and sends a {@link RendererChangeEvent} to all registered
     * listeners. 
     *
     * @param filled  the flag.
     * 
     * @see #setShapesFilled(Boolean)
     * 
     * @deprecated As of 1.0.8, you should avoid using this method and rely
     *             on just the per-series ({@link #setSeriesShapesFilled(int, 
     *             Boolean)}) and base-level ({@link #setBaseShapesVisible(
     *             boolean)}) settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// here we use BooleanUtilities to remain compatible with JDKs &lt; 1.4 </comment>
        <expr_stmt><expr><call><name>setShapesFilled</name><argument_list>(<argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the override flag that controls whether or not shapes are filled
     * for ALL series and sends a {@link RendererChangeEvent} to all registered
     * listeners. 
     *
     * @param filled  the flag (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #setShapesFilled(boolean)
     * 
     * @deprecated As of 1.0.8, you should avoid using this method and rely
     *             on just the per-series ({@link #setSeriesShapesFilled(int, 
     *             Boolean)}) and base-level ({@link #setBaseShapesVisible(
     *             boolean)}) settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesFilled</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesFilled</name></name> = <name>filled</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shapes for a series
     * are filled.
     *
     * @param series  the series index (zero-based).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getSeriesShapesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes filled' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag.
     * 
     * @see #getSeriesShapesFilled(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesShapesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>setBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base 'shape filled' attribute.
     *
     * @return The base flag.
     * 
     * @see #setBaseShapesFilled(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBaseShapesFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseShapesFilled</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base 'shapes filled' flag and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getBaseShapesFilled()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseShapesFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesFilled</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if lines are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if lines are being plotted by the renderer.
     * 
     * @see #setPlotLines(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotLines</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not a line is plotted between 
     * each data point and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getPlotLines()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlotLines</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotLines</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the gap threshold type (relative or absolute).
     * 
     * @return The type.
     * 
     * @see #setGapThresholdType(UnitType)
     */</comment>
    <function><type><specifier>public</specifier> <name>UnitType</name></type> <name>getGapThresholdType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gapThresholdType</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the gap threshold type and sends a {@link RendererChangeEvent} to 
     * all registered listeners.
     * 
     * @param thresholdType  the type (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getGapThresholdType()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGapThresholdType</name><parameter_list>(<param><decl><type><name>UnitType</name></type> <name>thresholdType</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>thresholdType</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'thresholdType' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>gapThresholdType</name></name> = <name>thresholdType</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the gap threshold for discontinuous lines.
     *
     * @return The gap threshold.
     * 
     * @see #setGapThreshold(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getGapThreshold</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gapThreshold</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the gap threshold for discontinuous lines and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param t  the threshold.
     * 
     * @see #getGapThreshold()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGapThreshold</name><parameter_list>(<param><decl><type><name>double</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gapThreshold</name></name> = <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if images are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if images are being plotted by the renderer.
     * 
     * @see #setPlotImages(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotImages</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotImages</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not an image is drawn at each 
     * data point and sends a {@link RendererChangeEvent} to all registered 
     * listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getPlotImages()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlotImages</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plotImages</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotImages</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the renderer shows
     * discontinuous lines.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if lines should be discontinuous.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotDiscontinuous</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotDiscontinuous</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the renderer shows
     * discontinuous lines, and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     * 
     * @param flag  the new flag value.
     * 
     * @since 1.0.5
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlotDiscontinuous</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plotDiscontinuous</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotDiscontinuous</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not each series is drawn as a 
     * single path.
     * 
     * @return A boolean.
     * 
     * @see #setDrawSeriesLineAsPath(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawSeriesLineAsPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not each series is drawn as a 
     * single path.
     * 
     * @param flag  the flag.
     * 
     * @see #getDrawSeriesLineAsPath()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawSeriesLineAsPath</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the shape used to represent a line in the legend.
     * 
     * @return The legend line (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLine(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shape used as a line in each legend item and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendLine()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLine</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>line</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'line' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <name>line</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                        <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>lookupSeriesShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>shapeFilled</name> =<init> <expr><call><name>getItemShapeFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>linePaint</name> =<init> <expr><name>paint</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>lineStroke</name> =<init> <expr><call><name>lookupSeriesStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                        <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name><name>this</name>.<name>baseShapesVisible</name></name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>shapeFilled</name></expr></argument>,
                        <argument><expr><name>paint</name></expr></argument>, <argument><expr>!<name>shapeFilled</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>lineStroke</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>plotLines</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name>lineStroke</name></expr></argument>, <argument><expr><name>linePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Records the state for the renderer.  This is used to preserve state 
     * information between calls to the drawItem() method for a single chart 
     * drawing.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>State</name> <super><extends>extends <name>XYItemRendererState</name></extends></super> <block>{
        
        <comment type="javadoc">/** The path for the current series. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>GeneralPath</name></type> <name>seriesPath</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The series index. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>seriesIndex</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** 
         * A flag that indicates if the last (x, y) point was 'good' 
         * (non-null). 
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lastPointGood</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state instance.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>State</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="javadoc">/**
         * Returns a flag that indicates if the last point drawn (in the 
         * current series) was 'good' (non-null).
         * 
         * @return A boolean.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLastPointGood</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>lastPointGood</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets a flag that indicates if the last point drawn (in the current 
         * series) was 'good' (non-null).
         * 
         * @param good  the flag.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastPointGood</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>good</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>lastPointGood</name></name> = <name>good</name></expr>;</expr_stmt>
        }</block></function>
        
        <comment type="javadoc">/**
         * Returns the series index for the current path.
         * 
         * @return The series index for the current path.
         */</comment>
        <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesIndex</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>seriesIndex</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets the series index for the current path.
         * 
         * @param index  the index.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesIndex</name></name> = <name>index</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
    
    <comment type="javadoc">/**
     * Initialises the renderer.
     * &lt;P&gt;
     * This method will be called before the first item is rendered, giving the
     * renderer an opportunity to initialise any state information it wants to 
     * maintain. The renderer can do nothing if it chooses.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>State</name></type> <name>state</name> =<init> <expr>new <call><name>State</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>state</name>.<name>seriesPath</name></name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name>.<name>seriesIndex</name></name> = -1</expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, 
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>, 
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>itemVisible</name> =<init> <expr><call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>seriesStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>itemVisible</name> = false</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>getPlotLines</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>State</name></type> <name>s</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>s</name>.<name>getSeriesIndex</name></name><argument_list>()</argument_list></call> != <name>series</name></expr>)</condition><then> <block>{
                    <comment type="line">// we are starting a new series path</comment>
                    <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name>.<name>lastPointGood</name></name> = false</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>s</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <comment type="line">// update path to reflect latest point</comment>
                <if>if <condition>(<expr><name>itemVisible</name> &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call> 
                        &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <name>transX1</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr>(<name>float</name>) <name>transY1</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>x</name> = (<name>float</name>) <name>transY1</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>y</name> = (<name>float</name>) <name>transX1</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><call><name><name>s</name>.<name>isLastPointGood</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// TODO: check threshold</comment>
                        <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>s</name>.<name>setLastPointGood</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>s</name>.<name>setLastPointGood</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><name>item</name> == <call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>s</name>.<name>seriesIndex</name></name> == <name>series</name></expr>)</condition><then> <block>{
                        <comment type="line">// draw path</comment>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>lookupSeriesStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>s</name>.<name>seriesPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then>

            <else>else <if>if <condition>(<expr><name>item</name> != 0 &amp;&amp; <name>itemVisible</name></expr>)</condition><then> <block>{
                <comment type="line">// get the previous data point...</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>boolean</name></type> <name>drawLine</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getPlotDiscontinuous</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// only draw a line if the gap between the current and </comment>
                        <comment type="line">// previous data point is within the threshold</comment>
                        <decl_stmt><decl><type><name>int</name></type> <name>numX</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>minX</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>maxX</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>numX</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>this</name>.<name>gapThresholdType</name></name> == <name><name>UnitType</name>.<name>ABSOLUTE</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>drawLine</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>x1</name> - <name>x0</name></expr></argument>)</argument_list></call> &lt;= <name><name>this</name>.<name>gapThreshold</name></name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>drawLine</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>x1</name> - <name>x0</name></expr></argument>)</argument_list></call> &lt;= ((<name>maxX</name> - <name>minX</name>) 
                                / <name>numX</name> * <call><name>getGapThreshold</name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>drawLine</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                                <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                                <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// only draw if we have good values</comment>
                        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>)</argument_list></call> 
                            || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <return>return;</return>
                        }</block></then></if>

                        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>state</name>.<name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, 
                                    <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>state</name>.<name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, 
                                    <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></else></if>

                        <if>if <condition>(<expr><call><name><name>state</name>.<name>workingLine</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>state</name>.<name>workingLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></then></if>
        
        <comment type="line">// we needed to get this far even for invisible items, to ensure that</comment>
        <comment type="line">// seriesPath updates happened, but now there is nothing more we need</comment>
        <comment type="line">// to do for non-visible items...</comment>
        <if>if <condition>(<expr>!<name>itemVisible</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getBaseShapesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>getItemShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, 
                        <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, 
                        <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <if>if <condition>(<expr><call><name><name>shape</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getItemShapeFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name>entityArea</name> = <name>shape</name></expr>;</expr_stmt>

        }</block></then></if>

        <if>if <condition>(<expr><call><name>getPlotImages</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Image</name></type> <name>image</name> =<init> <expr><call><name>getImage</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>image</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Point</name></type> <name>hotspot</name> =<init> <expr><call><name>getImageHotspot</name><argument_list>(<argument><expr><name>plot</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, 
                        <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>image</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>drawImage</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>transX1</name> - <call><name><name>hotspot</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>transY1</name> - <call><name><name>hotspot</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>entityArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transX1</name> - <call><name><name>hotspot</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>transY1</name> - <call><name><name>hotspot</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>image</name>.<name>getWidth</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>image</name>.<name>getHeight</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><name>transX1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><name>transY1</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xx</name> = <name>transY1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>yy</name> = <name>transX1</name></expr>;</expr_stmt>
        }</block></then></if>          

        <comment type="line">// draw the item label if there is one...</comment>
        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr>(<name>y1</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>entityArea</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StandardXYItemRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StandardXYItemRenderer</name></type> <name>that</name> =<init> <expr>(<name>StandardXYItemRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseShapesVisible</name></name> != <name><name>that</name>.<name>baseShapesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name> != <name><name>that</name>.<name>plotLines</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotImages</name></name> != <name><name>that</name>.<name>plotImages</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotDiscontinuous</name></name> != <name><name>that</name>.<name>plotDiscontinuous</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gapThresholdType</name></name> != <name><name>that</name>.<name>gapThresholdType</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gapThreshold</name></name> != <name><name>that</name>.<name>gapThreshold</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapesFilled</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapesFilled</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesShapesFilled</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseShapesFilled</name></name> != <name><name>that</name>.<name>baseShapesFilled</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> != <name><name>that</name>.<name>drawSeriesLineAsPath</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>StandardXYItemRenderer</name></type> <name>clone</name> =<init> <expr>(<name>StandardXYItemRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesShapesFilled</name></name> 
                = (<name>BooleanList</name>) <call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>legendLine</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="line">////////////////////////////////////////////////////////////////////////////</comment>
    <comment type="line">// PROTECTED METHODS</comment>
    <comment type="line">// These provide the opportunity to subclass the standard renderer and </comment>
    <comment type="line">// create custom effects.</comment>
    <comment type="line">////////////////////////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the image used to draw a single data item.
     *
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param series  the series index.
     * @param item  the item index.
     * @param x  the x value of the item.
     * @param y  the y value of the item.
     *
     * @return The image.
     * 
     * @see #getPlotImages()
     */</comment>
    <function><type><specifier>protected</specifier> <name>Image</name></type> <name>getImage</name><parameter_list>(<param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, 
                             <param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// this method must be overridden if you want to display images</comment>
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the hotspot of the image used to draw a single data item.
     * The hotspot is the point relative to the top left of the image
     * that should indicate the data item. The default is the center of the
     * image.
     *
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param image  the image (can be used to get size information about the 
     *               image)
     * @param series  the series index
     * @param item  the item index
     * @param x  the x value of the item
     * @param y  the y value of the item
     *
     * @return The hotspot used to draw the data item.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Point</name></type> <name>getImageHotspot</name><parameter_list>(<param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                    <param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>Image</name></type> <name>image</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>height</name> =<init> <expr><call><name><name>image</name>.<name>getHeight</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name> =<init> <expr><call><name><name>image</name>.<name>getWidth</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>Point</name><argument_list>(<argument><expr><name>width</name> / 2</expr></argument>, <argument><expr><name>height</name> / 2</expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
