<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\VectorRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * VectorRenderer.java
 * -------------------
 * (C) Copyright 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 30-Jan-2007 : Version 1 (DG);
 * 24-May-2007 : Updated for method name changes (DG);
 * 25-May-2007 : Moved from experimental to the main source tree (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>VectorXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that represents data from an {@link VectorXYDataset} by drawing a
 * line with an arrow at each (x, y) point.
 * 
 * @since 1.0.6
 */</comment>
<class><specifier>public</specifier> class <name>VectorRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
        <implements>implements <name>XYItemRenderer</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** The length of the base. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>baseLength</name> =<init> <expr>0.10</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The length of the head. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>headLength</name> =<init> <expr>0.14</expr></init></decl>;</decl_stmt>
    
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;XYBlockRenderer&lt;/code&gt; instance with default 
     * attributes.
     */</comment>
    <constructor><specifier>public</specifier> <name>VectorRenderer</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the lower and upper bounds (range) of the x-values in the 
     * specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt;
     *         or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findDomainBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dataset' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>minimum</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maximum</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lvalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uvalue</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>VectorXYDataset</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>VectorXYDataset</name></type> <name>vdataset</name> =<init> <expr>(<name>VectorXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>delta</name> =<init> <expr><call><name><name>vdataset</name>.<name>getVectorXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>delta</name> &lt; 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>uvalue</name> = <call><name><name>vdataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>lvalue</name> = <name>uvalue</name> + <name>delta</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>lvalue</name> = <call><name><name>vdataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>uvalue</name> = <name>lvalue</name> + <name>delta</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>minimum</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maximum</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></then>
        <else>else <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>lvalue</name> = <call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uvalue</name> = <name>lvalue</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minimum</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maximum</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></else></if>
        <if>if <condition>(<expr><name>minimum</name> &gt; <name>maximum</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt; 
     *         or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dataset' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>minimum</name> =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maximum</name> =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lvalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>uvalue</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>VectorXYDataset</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>VectorXYDataset</name></type> <name>vdataset</name> =<init> <expr>(<name>VectorXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>delta</name> =<init> <expr><call><name><name>vdataset</name>.<name>getVectorYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>delta</name> &lt; 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>uvalue</name> = <call><name><name>vdataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>lvalue</name> = <name>uvalue</name> + <name>delta</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>lvalue</name> = <call><name><name>vdataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>uvalue</name> = <name>lvalue</name> + <name>delta</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>minimum</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maximum</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></then>
        <else>else <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <name>itemCount</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <expr_stmt><expr><name>lvalue</name> = <call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>uvalue</name> = <name>lvalue</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>minimum</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>lvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maximum</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>maximum</name></expr></argument>, <argument><expr><name>uvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></else></if>
        <if>if <condition>(<expr><name>minimum</name> &gt; <name>maximum</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name>minimum</name></expr></argument>, <argument><expr><name>maximum</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the block representing the specified item.
     * 
     * @param g2  the graphics device.
     * @param state  the state.
     * @param dataArea  the data area.
     * @param info  the plot rendering info.
     * @param plot  the plot.
     * @param domainAxis  the x-axis.
     * @param rangeAxis  the y-axis.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param crosshairState  the crosshair state.
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
            <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dx</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dy</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>VectorXYDataset</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dx</name> = ((<name>VectorXYDataset</name>) <name>dataset</name>).<call><name>getVectorXValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dy</name> = ((<name>VectorXYDataset</name>) <name>dataset</name>).<call><name>getVectorYValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name> + <name>dx</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name> + <name>dy</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>orientation</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// calculate the arrow head and draw it...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>dxx</name> =<init> <expr>(<name>xx1</name> - <name>xx0</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dyy</name> =<init> <expr>(<name>yy1</name> - <name>yy0</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>bx</name> =<init> <expr><name>xx0</name> + (1.0 - <name><name>this</name>.<name>baseLength</name></name>) * <name>dxx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>by</name> =<init> <expr><name>yy0</name> + (1.0 - <name><name>this</name>.<name>baseLength</name></name>) * <name>dyy</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>cx</name> =<init> <expr><name>xx0</name> + (1.0 - <name><name>this</name>.<name>headLength</name></name>) * <name>dxx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>cy</name> =<init> <expr><name>yy0</name> + (1.0 - <name><name>this</name>.<name>headLength</name></name>) * <name>dyy</name></expr></init></decl>;</decl_stmt>
 
        <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dxx</name> != 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0 - <call><name><name>Math</name>.<name>atan</name></name><argument_list>(<argument><expr><name>dyy</name> / <name>dxx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>deltaX</name> =<init> <expr>2.0 * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>deltaY</name> =<init> <expr>2.0 * <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>leftx</name> =<init> <expr><name>cx</name> + <name>deltaX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lefty</name> =<init> <expr><name>cy</name> - <name>deltaY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>rightx</name> =<init> <expr><name>cx</name> - <name>deltaX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>righty</name> =<init> <expr><name>cy</name> + <name>deltaY</name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>p</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>xx1</name></expr></argument>, <argument><expr>(<name>float</name>) <name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>rightx</name></expr></argument>, <argument><expr>(<name>float</name>) <name>righty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>bx</name></expr></argument>, <argument><expr>(<name>float</name>) <name>by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>leftx</name></expr></argument>, <argument><expr>(<name>float</name>) <name>lefty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;VectorRenderer&lt;/code&gt; for equality with an arbitrary
     * object.  This method returns &lt;code&gt;true&lt;/code&gt; if and only if:
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;VectorRenderer&lt;/code&gt; (not
     *     &lt;code&gt;null&lt;/code&gt;);&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; has the same field values as this 
     *     &lt;code&gt;VectorRenderer&lt;/code&gt;;&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>VectorRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>VectorRenderer</name></type> <name>that</name> =<init> <expr>(<name>VectorRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseLength</name></name> != <name><name>that</name>.<name>baseLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>headLength</name></name> != <name><name>that</name>.<name>headLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this renderer.
     * 
     * @return A clone of this renderer.
     * 
     * @throws CloneNotSupportedException if there is a problem creating the 
     *     clone.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
