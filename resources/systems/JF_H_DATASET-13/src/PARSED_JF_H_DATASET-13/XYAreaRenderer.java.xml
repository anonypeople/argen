<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYAreaRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * XYAreaRenderer.java
 * -------------------
 * (C) Copyright 2002-2007, by Hari and Contributors.
 *
 * Original Author:  Hari (ourhari@hotmail.com);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Richard Atkinson;
 *                   Christian W. Zuckschwerdt;
 *
 * Changes:
 * --------
 * 03-Apr-2002 : Version 1, contributed by Hari.  This class is based on the 
 *               StandardXYItemRenderer class (DG);
 * 09-Apr-2002 : Removed the translated zero from the drawItem method - 
 *               overridden the initialise() method to calculate it (DG);
 * 30-May-2002 : Added tool tip generator to constructor to match super 
 *               class (DG);
 * 25-Jun-2002 : Removed unnecessary local variable (DG);
 * 05-Aug-2002 : Small modification to drawItem method to support URLs for HTML
 *               image maps (RA);
 * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 07-Nov-2002 : Renamed AreaXYItemRenderer --&gt; XYAreaRenderer (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 27-Jul-2003 : Made line and polygon properties protected rather than 
 *               private (RA);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 08-Dec-2003 : Modified hotspot for chart entity (DG);
 * 10-Feb-2004 : Changed the drawItem() method to make cut-and-paste overriding
 *               easier.  Also moved state class into this class (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed 
 *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 19-Jan-2005 : Now accesses primitives only from dataset (DG);
 * 21-Mar-2005 : Override getLegendItem() and equals() methods (DG);
 * 20-Apr-2005 : Use generators for legend tooltips and URLs (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 14-Feb-2007 : Fixed bug in clone() (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYSeriesLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Area item renderer for an {@link XYPlot}.  This class can draw (a) shapes at
 * each point, or (b) lines between points, or (c) both shapes and lines, 
 * or (d) filled areas, or (e) filled areas and shapes.
 */</comment>
<class><specifier>public</specifier> class <name>XYAreaRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                            <implements>implements <name>XYItemRenderer</name>, 
                                       <name>Cloneable</name>,
                                       <name>PublicCloneable</name>,
                                       <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-4481971353973876747L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A state object used by this renderer.
     */</comment>
    <class><specifier>static</specifier> class <name>XYAreaRendererState</name> <super><extends>extends <name>XYItemRendererState</name></extends></super> <block>{
        
        <comment type="javadoc">/** Working storage for the area under one series. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Polygon</name></type> <name>area</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** Working line that can be recycled. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>XYAreaRendererState</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>area</name></name> = new <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>line</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
    }</block></class>
    
    <comment type="javadoc">/** Useful constant for specifying the type of rendering (shapes only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHAPES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Useful constant for specifying the type of rendering (lines only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LINES</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Useful constant for specifying the type of rendering (shapes and lines).
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHAPES_AND_LINES</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Useful constant for specifying the type of rendering (area only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AREA</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Useful constant for specifying the type of rendering (area and shapes). 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AREA_AND_SHAPES</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not shapes are drawn at each XY point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotShapes</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not lines are drawn between XY points. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotLines</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not Area are drawn at each XY point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotArea</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the outline is shown. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showOutline</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The shape used to represent an area in each legend item (this should 
     * never be &lt;code&gt;null&lt;/code&gt;). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendArea</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYAreaRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>AREA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     *
     * @param type  the type of the renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.  To specify the type of renderer, use one of 
     * the constants: &lt;code&gt;SHAPES&lt;/code&gt;, &lt;code&gt;LINES&lt;/code&gt;,
     * &lt;code&gt;SHAPES_AND_LINES&lt;/code&gt;, &lt;code&gt;AREA&lt;/code&gt; or 
     * &lt;code&gt;AREA_AND_SHAPES&lt;/code&gt;.
     *
     * @param type  the type of renderer.
     * @param toolTipGenerator  the tool tip generator to use 
     *                          (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>, 
                          <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr><name>toolTipGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setURLGenerator</name><argument_list>(<argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>type</name> == <name>SHAPES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotShapes</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>LINES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotLines</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>SHAPES_AND_LINES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotShapes</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>plotLines</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>AREA</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>type</name> == <name>AREA_AND_SHAPES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>plotShapes</name></name> = true</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>showOutline</name></name> = false</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>area</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>moveTo</name></name><argument_list>(<argument><expr>0.0f</expr></argument>, <argument><expr>-4.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>3.0f</expr></argument>, <argument><expr>-2.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>4.0f</expr></argument>, <argument><expr>4.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>-4.0f</expr></argument>, <argument><expr>4.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>lineTo</name></name><argument_list>(<argument><expr>-3.0f</expr></argument>, <argument><expr>-2.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>area</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendArea</name></name> = <name>area</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns true if shapes are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if shapes are being plotted by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotShapes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotShapes</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if lines are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if lines are being plotted by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotLines</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if Area is being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if Area is being plotted by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotArea</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not outlines of the areas are 
     * drawn.
     *
     * @return The flag.
     * 
     * @see #setOutline(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOutline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>showOutline</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not outlines of the areas are drawn
     * and sends a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param show  the flag.
     * 
     * @see #isOutline()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>show</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showOutline</name></name> = <name>show</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the shape used to represent an area in the legend.
     * 
     * @return The legend area (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendArea</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shape used as an area in each legend item and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param area  the area (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendArea</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>area</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'area' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendArea</name></name> = <name>area</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that should be 
     * passed to all subsequent calls to the drawItem() method.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return A state object for use by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
            <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYAreaRendererState</name></type> <name>state</name> =<init> <expr>new <call><name>XYAreaRendererState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// in the rendering process, there is special handling for item </comment>
        <comment type="line">// zero, so we can't support processing of visible data items only</comment>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a default legend item for the specified series.  Subclasses 
     * should override this method to generate customised items.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>xyplot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xyplot</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>xyplot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYSeriesLabelGenerator</name></type> <name>lg</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>lg</name>.<name>generateLabel</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                        <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name><name>this</name>.<name>legendArea</name></name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
            <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>XYAreaRendererState</name></type> <name>areaState</name> =<init> <expr>(<name>XYAreaRendererState</name>) <name>state</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y1</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// get the previous point and the next point so we can calculate a </comment>
        <comment type="line">// "hot spot" for the area (used by the chart entity)...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>item</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>item</name> - 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y0</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>item</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>item</name> + 1</expr></argument>, 
                <argument><expr><name>itemCount</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y2</name> = 0.0</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>transX2</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>transZero</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Polygon</name></type> <name>hotspot</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>hotspot</name> = new <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX0</name> + <name>transX1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transY0</name> + <name>transY1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX0</name> + <name>transX1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transY1</name> + <name>transY2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX1</name> + <name>transX2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX1</name> + <name>transX2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{  <comment type="line">// vertical orientation</comment>
            <expr_stmt><expr><name>hotspot</name> = new <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX0</name> + <name>transX1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX0</name> + <name>transX1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transY0</name> + <name>transY1</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX1</name> + <name>transX2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transY1</name> + <name>transY2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>hotspot</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr>(<name>transX1</name> + <name>transX2</name>) / 2.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <if>if <condition>(<expr><name>item</name> == 0</expr>)</condition><then> <block>{  <comment type="line">// create a new area polygon for the series</comment>
            <expr_stmt><expr><name><name>areaState</name>.<name>area</name></name> = new <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// the first point is (x, 0)</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>zero</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>zero</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>

        <comment type="line">// Add each point to Area (x, y)</comment>
        <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getPlotShapes</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>shape</name> = <call><name>getItemShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, 
                        <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, 
                        <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>getPlotLines</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>item</name> &gt; 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>areaState</name>.<name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>areaState</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <comment type="line">// Check if the item is the last item for the series.</comment>
        <comment type="line">// and number of items &gt; 0.  We can't draw an area for a single point.</comment>
        <if>if <condition>(<expr><call><name>getPlotArea</name><argument_list>()</argument_list></call> &amp;&amp; <name>item</name> &gt; 0 &amp;&amp; <name>item</name> == (<name>itemCount</name> - 1)</expr>)</condition><then> <block>{

            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <comment type="line">// Add the last point (x,0)</comment>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <comment type="line">// Add the last point (x,0)</comment>
                <expr_stmt><expr><call><name><name>areaState</name>.<name>area</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transZero</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>areaState</name>.<name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw an outline around the Area.</comment>
            <if>if <condition>(<expr><call><name>isOutline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>areaState</name>.<name>area</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// collect entity and tool tip information...</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <name>hotspot</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>hotspot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYAreaRenderer</name></type> <name>clone</name> =<init> <expr>(<name>XYAreaRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>legendArea</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendArea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYAreaRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>XYAreaRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYAreaRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotArea</name></name> != <name><name>that</name>.<name>plotArea</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotLines</name></name> != <name><name>that</name>.<name>plotLines</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotShapes</name></name> != <name><name>that</name>.<name>plotShapes</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>showOutline</name></name> != <name><name>that</name>.<name>showOutline</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendArea</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendArea</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendArea</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendArea</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
