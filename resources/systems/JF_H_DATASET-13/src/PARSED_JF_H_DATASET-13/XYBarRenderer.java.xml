<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYBarRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------
 * XYBarRenderer.java
 * ------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Richard Atkinson;
 *                   Christian W. Zuckschwerdt;
 *                   Bill Kelemen;
 *                   Marc van Glabbeek (bug 1775452);
 *                   Richard West, Advanced Micro Devices, Inc.;
 *
 * Changes
 * -------
 * 13-Dec-2001 : Version 1, makes VerticalXYBarPlot class redundant (DG);
 * 23-Jan-2002 : Added DrawInfo parameter to drawItem() method (DG);
 * 09-Apr-2002 : Removed the translated zero from the drawItem method. Override 
 *               the initialise() method to calculate it (DG);
 * 24-May-2002 : Incorporated tooltips into chart entities (DG);
 * 25-Jun-2002 : Removed redundant import (DG);
 * 05-Aug-2002 : Small modification to drawItem method to support URLs for HTML 
 *               image maps (RA);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 24-Aug-2003 : Added null checks in drawItem (BK);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 07-Oct-2003 : Added renderer state (DG);
 * 05-Dec-2003 : Changed call to obtain outline paint (DG);
 * 10-Feb-2004 : Added state class, updated drawItem() method to make 
 *               cut-and-paste overriding easier, and replaced property change 
 *               with RendererChangeEvent (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 26-Apr-2004 : Added gradient paint transformer (DG);
 * 19-May-2004 : Fixed bug (879709) with bar zero value for secondary axis (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 01-Sep-2004 : Added a flag to control whether or not the bar outlines are 
 *               drawn (DG);
 * 03-Sep-2004 : Added option to use y-interval from dataset to determine the 
 *               length of the bars (DG);
 * 08-Sep-2004 : Added equals() method and updated clone() method (DG);
 * 26-Jan-2005 : Added override for getLegendItem() method (DG);
 * 20-Apr-2005 : Use generators for label tooltips and URLs (DG);
 * 19-May-2005 : Added minimal item label implementation - needs improving (DG);
 * 14-Oct-2005 : Fixed rendering problem with inverted axes (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 21-Jun-2006 : Improved item label handling - see bug 1501768 (DG);
 * 24-Aug-2006 : Added crosshair support (DG);
 * 13-Dec-2006 : Updated getLegendItems() to return gradient paint 
 *               transformer (DG);
 * 02-Feb-2007 : Changed setUseYInterval() to only notify when the flag 
 *               changes (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 09-Feb-2007 : Updated getLegendItem() to observe drawBarOutline flag (DG);
 * 05-Mar-2007 : Applied patch 1671126 by Sergei Ivanov, to fix rendering with
 *               LogarithmicAxis (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 15-Jun-2007 : Changed default for drawBarOutline to false (DG);
 * 26-Sep-2007 : Fixed bug 1775452, problem with bar margins for inverted
 *               axes, thanks to Marc van Glabbeek (DG);
 * 12-Nov-2007 : Fixed NPE in drawItemLabel() method, thanks to Richard West
 *               (see patch 1827829) (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>GradientPaint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>ItemLabelPosition</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYSeriesLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>StandardGradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that draws bars on an {@link XYPlot} (requires an 
 * {@link IntervalXYDataset}).
 */</comment>
<class><specifier>public</specifier> class <name>XYBarRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
        <implements>implements <name>XYItemRenderer</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>770559577251370036L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The state class used by this renderer.
     */</comment>
    <class><specifier>protected</specifier> class <name>XYBarRendererState</name> <super><extends>extends <name>XYItemRendererState</name></extends></super> <block>{
        
        <comment type="javadoc">/** Base for bars against the range axis, in Java 2D space. */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>g2Base</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state object.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>XYBarRendererState</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="javadoc">/**
         * Returns the base (range) value in Java 2D space.
         * 
         * @return The base value.
         */</comment>
        <function><type><specifier>public</specifier> <name>double</name></type> <name>getG2Base</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>g2Base</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets the range axis base in Java2D space.
         * 
         * @param value  the value.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setG2Base</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>g2Base</name></name> = <name>value</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/** The default base value for the bars. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>base</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the bars use the y-interval supplied by the 
     * dataset. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useYInterval</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Percentage margin (to reduce the width of bars). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>margin</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not bar outlines are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawBarOutline</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * An optional class used to transform gradient paint objects to fit each 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GradientPaintTransformer</name></type> <name>gradientPaintTransformer</name></decl>;</decl_stmt> 
    
    <comment type="javadoc">/** 
     * The shape used to represent a bar in each legend item (this should never
     * be &lt;code&gt;null&lt;/code&gt;). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendBar</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The fallback position if a positive item label doesn't fit inside the 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ItemLabelPosition</name></type> <name>positiveItemLabelPositionFallback</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The fallback position if a negative item label doesn't fit inside the 
     * bar. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ItemLabelPosition</name></type> <name>negativeItemLabelPositionFallback</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYBarRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     *
     * @param margin  the percentage amount to trim from the width of each bar.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYBarRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>margin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>base</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>useYInterval</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = new <call><name>StandardGradientPaintTransformer</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>this</name>.<name>drawBarOutline</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendBar</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-3.0</expr></argument>, <argument><expr>-5.0</expr></argument>, <argument><expr>6.0</expr></argument>, <argument><expr>10.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the base value for the bars.
     * 
     * @return The base value for the bars.
     * 
     * @see #setBase(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>base</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base value for the bars and sends a {@link RendererChangeEvent}
     * to all registered listeners.  The base value is not used if the dataset's
     * y-interval is being used to determine the bar length.
     * 
     * @param base  the new base value.
     * 
     * @see #getBase()
     * @see #getUseYInterval()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBase</name><parameter_list>(<param><decl><type><name>double</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>base</name></name> = <name>base</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that determines whether the y-interval from the dataset is
     * used to calculate the length of each bar.
     * 
     * @return A boolean.
     * 
     * @see #setUseYInterval(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseYInterval</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>useYInterval</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that determines whether the y-interval from the dataset is
     * used to calculate the length of each bar, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param use  the flag.
     * 
     * @see #getUseYInterval()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseYInterval</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>use</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>useYInterval</name></name> != <name>use</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>useYInterval</name></name> = <name>use</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the margin which is a percentage amount by which the bars are 
     * trimmed.
     *
     * @return The margin.
     * 
     * @see #setMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>margin</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the percentage amount by which the bars are trimmed and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param margin  the new margin.
     * 
     * @see #getMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>margin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not bar outlines are drawn.
     * 
     * @return A boolean.
     * 
     * @see #setDrawBarOutline(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDrawBarOutline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawBarOutline</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not bar outlines are drawn and 
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param draw  the flag.
     * 
     * @see #isDrawBarOutline()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawBarOutline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawBarOutline</name></name> = <name>draw</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the gradient paint transformer (an object used to transform 
     * gradient paint objects to fit each bar).
     * 
     * @return A transformer (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setGradientPaintTransformer(GradientPaintTransformer)
     */</comment>    
    <function><type><specifier>public</specifier> <name>GradientPaintTransformer</name></type> <name>getGradientPaintTransformer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the gradient paint transformer and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param transformer  the transformer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getGradientPaintTransformer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGradientPaintTransformer</name><parameter_list>(
            <param><decl><type><name>GradientPaintTransformer</name></type> <name>transformer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = <name>transformer</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
     
    <comment type="javadoc">/**
     * Returns the shape used to represent bars in each legend item.
     * 
     * @return The shape used to represent bars in each legend item (never 
     *         &lt;code&gt;null&lt;/code&gt;).
     *         
     * @see #setLegendBar(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendBar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendBar</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shape used to represent bars in each legend item and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param bar  the bar shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendBar()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendBar</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>bar</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>bar</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'bar' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendBar</name></name> = <name>bar</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fallback position for positive item labels that don't fit 
     * within a bar.
     * 
     * @return The fallback position (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>ItemLabelPosition</name></type> <name>getPositiveItemLabelPositionFallback</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the fallback position for positive item labels that don't fit 
     * within a bar, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getPositiveItemLabelPositionFallback()
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPositiveItemLabelPositionFallback</name><parameter_list>(
            <param><decl><type><name>ItemLabelPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fallback position for negative item labels that don't fit 
     * within a bar.
     * 
     * @return The fallback position (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setNegativeItemLabelPositionFallback(ItemLabelPosition)
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>ItemLabelPosition</name></type> <name>getNegativeItemLabelPositionFallback</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the fallback position for negative item labels that don't fit 
     * within a bar, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getNegativeItemLabelPositionFallback()
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNegativeItemLabelPositionFallback</name><parameter_list>(
            <param><decl><type><name>ItemLabelPosition</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that should be 
     * passed to all subsequent calls to the drawItem() method.  Here we 
     * calculate the Java2D y-coordinate for zero, since all the bars have 
     * their bases fixed at zero.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param dataset  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return A state object.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
            <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYBarRendererState</name></type> <name>state</name> =<init> <expr>new <call><name>XYBarRendererState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisForDataset</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>indexOf</name></name><argument_list>(
                <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setG2Base</name></name><argument_list>(<argument><expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>base</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a default legend item for the specified series.  Subclasses 
     * should override this method to generate customised items.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>xyplot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xyplot</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>xyplot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYSeriesLabelGenerator</name></type> <name>lg</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>lg</name>.<name>generateLabel</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name><name>this</name>.<name>legendBar</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>drawBarOutline</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                            <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                            <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>setFillPaintTransformer</name></name><argument_list>(
                            <argument><expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>intervalDataset</name> =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>value0</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>value1</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>useYInterval</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value0</name> = <call><name><name>intervalDataset</name>.<name>getStartYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>value1</name> = <call><name><name>intervalDataset</name>.<name>getEndYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>value0</name> = <name><name>this</name>.<name>base</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>value1</name> = <call><name><name>intervalDataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>value0</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>value0</name> &lt;= <name>value1</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>rangeAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>intersects</name><argument_list>(<argument><expr><name>value0</name></expr></argument>, <argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>rangeAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>intersects</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
        }</block></else></if>

        <decl_stmt><decl><type><name>double</name></type> <name>translatedValue0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedValue1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>bottom</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>translatedValue0</name></expr></argument>, <argument><expr><name>translatedValue1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>top</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>translatedValue0</name></expr></argument>, <argument><expr><name>translatedValue1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>startX</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>endX</name> =<init> <expr><call><name><name>intervalDataset</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>startX</name> &lt;= <name>endX</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<call><name><name>domainAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>intersects</name><argument_list>(<argument><expr><name>startX</name></expr></argument>, <argument><expr><name>endX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr>!<call><name><name>domainAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>intersects</name><argument_list>(<argument><expr><name>endX</name></expr></argument>, <argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>
        }</block></else></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>location</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedStartX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>translatedEndX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>translatedWidth</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedEndX</name> 
                - <name>translatedStartX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>left</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>translatedStartX</name></expr></argument>, <argument><expr><name>translatedEndX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getMargin</name><argument_list>()</argument_list></call> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>cut</name> =<init> <expr><name>translatedWidth</name> * <call><name>getMargin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>translatedWidth</name> = <name>translatedWidth</name> - <name>cut</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> = <name>left</name> + <name>cut</name> / 2</expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bar</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// clip left and right bounds to data area</comment>
            <expr_stmt><expr><name>bottom</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>top</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name> - <name>bottom</name></expr></argument>, <argument><expr><name>translatedWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <comment type="line">// clip top and bottom bounds to data area</comment>
            <expr_stmt><expr><name>bottom</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>bottom</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>top</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bar</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>translatedWidth</name></expr></argument>, 
                    <argument><expr><name>top</name> - <name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>itemPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call> 
                != <name>null</name> &amp;&amp; <name>itemPaint</name> <name>instanceof</name> <name>GradientPaint</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>GradientPaint</name></type> <name>gp</name> =<init> <expr>(<name>GradientPaint</name>) <name>itemPaint</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>itemPaint</name> = <call><name>getGradientPaintTransformer</name><argument_list>()</argument_list></call>.<call><name>transform</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>itemPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isDrawBarOutline</name><argument_list>()</argument_list></call> 
                &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>translatedEndX</name> - <name>translatedStartX</name></expr></argument>)</argument_list></call> &gt; 3</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>stroke</name> != <name>null</name> &amp;&amp; <name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></then></if>
        }</block></then></if>
        
        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYItemLabelGenerator</name></type> <name>generator</name> =<init> <expr><call><name>getItemLabelGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>generator</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                    <argument><expr><name>value1</name> &lt; 0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// update the crosshair point</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr>(<name>startX</name> + <name>endX</name>) / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws an item label.  This method is provided as an alternative to
     * {@link #drawItemLabel(Graphics2D, PlotOrientation, XYDataset, int, int, 
     * double, double, boolean)} so that the bar can be used to calculate the 
     * label anchor point. 
     * 
     * @param g2  the graphics device.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param plot  the plot.
     * @param generator  the label generator (&lt;code&gt;null&lt;/code&gt; permitted, in 
     *         which case the method does nothing, just returns).
     * @param bar  the bar.
     * @param negative  a flag indicating a negative value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItemLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYItemLabelGenerator</name></type> <name>generator</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>bar</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>negative</name></decl></param>)</parameter_list> <block>{
                                     
        <if>if <condition>(<expr><name>generator</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// nothing to do</comment>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>generator</name>.<name>generateLabel</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>label</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// nothing to do   </comment>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>Font</name></type> <name>labelFont</name> =<init> <expr><call><name>getItemLabelFont</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>labelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemLabelPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// find out where to place the label...</comment>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>position</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name>negative</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>position</name> = <call><name>getPositiveItemLabelPosition</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>position</name> = <call><name>getNegativeItemLabelPosition</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// work out the label anchor point...</comment>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>anchorPoint</name> =<init> <expr><call><name>calculateLabelAnchorPoint</name><argument_list>(
                <argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bar</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><call><name>isInternalAnchor</name><argument_list>(<argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Shape</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>calculateRotatedStringBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                    <argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><name>bounds</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<call><name><name>bar</name>.<name>contains</name></name><argument_list>(<argument><expr><call><name><name>bounds</name>.<name>getBounds2D</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr>!<name>negative</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>position</name> = <call><name>getPositiveItemLabelPositionFallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>position</name> = <call><name>getNegativeItemLabelPositionFallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>position</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchorPoint</name> = <call><name>calculateLabelAnchorPoint</name><argument_list>(
                                <argument><expr><call><name><name>position</name>.<name>getItemLabelAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bar</name></expr></argument>, 
                                <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        
        }</block></then></if>
        
        <if>if <condition>(<expr><name>position</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawRotatedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                    <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>anchorPoint</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>position</name>.<name>getTextAnchor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>position</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>position</name>.<name>getRotationAnchor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the item label anchor point.
     *
     * @param anchor  the anchor.
     * @param bar  the bar.
     * @param orientation  the plot orientation.
     *
     * @return The anchor point.
     */</comment>
    <function><type><specifier>private</specifier> <name>Point2D</name></type> <name>calculateLabelAnchorPoint</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>anchor</name></decl></param>,
            <param><decl><type><name>Rectangle2D</name></type> <name>bar</name></decl></param>, <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Point2D</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>offset</name> =<init> <expr><call><name>getItemLabelAnchorOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>bar</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x3</name> =<init> <expr><call><name><name>bar</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x4</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x5</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x6</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>bar</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y3</name> =<init> <expr><call><name><name>bar</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y4</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y5</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y6</name> =<init> <expr><call><name><name>bar</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <name>offset</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>CENTER</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x4</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE1</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE2</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE3</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE4</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x6</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE5</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x5</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE6</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE7</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE8</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE9</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE10</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE11</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>OUTSIDE12</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x3</name></expr></argument>, <argument><expr><name>y6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified anchor point is inside a bar.
     * 
     * @param anchor  the anchor point.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isInternalAnchor</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>CENTER</name></name> 
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name>
               || <name>anchor</name> == <name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr>;</return>  
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the lower and upper bounds (range) of the x-values in the 
     * specified dataset.  Since this renderer uses the x-interval in the 
     * dataset, this is taken into account for the range.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is 
     *         &lt;code&gt;null&lt;/code&gt; or empty).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findDomainBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYBarRenderer</name></type> <name>result</name> =<init> <expr>(<name>XYBarRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name>.<name>gradientPaintTransformer</name></name> = (<name>GradientPaintTransformer</name>)
                <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name>.<name>legendBar</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendBar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYBarRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYBarRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYBarRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>base</name></name> != <name><name>that</name>.<name>base</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBarOutline</name></name> != <name><name>that</name>.<name>drawBarOutline</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>margin</name></name> != <name><name>that</name>.<name>margin</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useYInterval</name></name> != <name><name>that</name>.<name>useYInterval</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>gradientPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendBar</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendBar</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positiveItemLabelPositionFallback</name></name></expr></argument>,
                <argument><expr><name><name>that</name>.<name>positiveItemLabelPositionFallback</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativeItemLabelPositionFallback</name></name></expr></argument>,
                <argument><expr><name><name>that</name>.<name>negativeItemLabelPositionFallback</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>        
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendBar</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendBar</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
