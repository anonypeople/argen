<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYBlockRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * XYBlockRenderer.java
 * --------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 05-Jul-2006 : Version 1 (DG);
 * 02-Feb-2007 : Added getPaintScale() method (DG);
 * 09-Mar-2007 : Fixed cloning (DG);
 * 03-Aug-2007 : Fix for bug 1766646 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>LookupPaintScale</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>PaintScale</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYZDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that represents data from an {@link XYZDataset} by drawing a
 * color block at each (x, y) point, where the color is a function of the
 * z-value from the dataset.
 * 
 * @since 1.0.4
 */</comment>
<class><specifier>public</specifier> class <name>XYBlockRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
        <implements>implements <name>XYItemRenderer</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/**
     * The block width (defaults to 1.0).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>blockWidth</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The block height (defaults to 1.0).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>blockHeight</name> =<init> <expr>1.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The anchor point used to align each block to its (x, y) location.  The
     * default value is &lt;code&gt;RectangleAnchor.CENTER&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleAnchor</name></type> <name>blockAnchor</name> =<init> <expr><name><name>RectangleAnchor</name>.<name>CENTER</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Temporary storage for the x-offset used to align the block anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>xOffset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Temporary storage for the y-offset used to align the block anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>yOffset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint scale. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PaintScale</name></type> <name>paintScale</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;XYBlockRenderer&lt;/code&gt; instance with default 
     * attributes.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYBlockRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateOffsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paintScale</name></name> = new <call><name>LookupPaintScale</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the block width, in data/axis units.
     * 
     * @return The block width.
     * 
     * @see #setBlockWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBlockWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>blockWidth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the width of the blocks used to represent each data item and
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param width  the new width, in data/axis units (must be &gt; 0.0).
     * 
     * @see #getBlockWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBlockWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>width</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'width' argument must be &gt; 0.0"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>blockWidth</name></name> = <name>width</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateOffsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the block height, in data/axis units.
     * 
     * @return The block height.
     * 
     * @see #setBlockHeight(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBlockHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>blockHeight</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the height of the blocks used to represent each data item and
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param height  the new height, in data/axis units (must be &gt; 0.0).
     * 
     * @see #getBlockHeight()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBlockHeight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>height</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'height' argument must be &gt; 0.0"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>blockHeight</name></name> = <name>height</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateOffsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the anchor point used to align a block at its (x, y) location.
     * The default values is {@link RectangleAnchor#CENTER}.
     * 
     * @return The anchor point (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBlockAnchor(RectangleAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleAnchor</name></type> <name>getBlockAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>blockAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the anchor point used to align a block at its (x, y) location and
     * sends a {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param anchor  the anchor.
     * 
     * @see #getBlockAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBlockAnchor</name><parameter_list>(<param><decl><type><name>RectangleAnchor</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>anchor</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'anchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no change</comment>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>blockAnchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateOffsets</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint scale used by the renderer.
     * 
     * @return The paint scale (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPaintScale(PaintScale)
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>PaintScale</name></type> <name>getPaintScale</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paintScale</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint scale used by the renderer and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param scale  the scale (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaintScale()
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaintScale</name><parameter_list>(<param><decl><type><name>PaintScale</name></type> <name>scale</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>scale</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'scale' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paintScale</name></name> = <name>scale</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Updates the offsets to take into account the block width, height and
     * anchor.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>updateOffsets</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = 0.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = 0.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = 0.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name> / 2.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name> / 2.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name> / 2.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>RectangleAnchor</name>.<name>TOP_RIGHT</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = -<name><name>this</name>.<name>blockWidth</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = -<name><name>this</name>.<name>blockHeight</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the lower and upper bounds (range) of the x-values in the 
     * specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt;
     *         or empty).
     *         
     * @see #findRangeBounds(XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findDomainBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return> 
            }</block></then>
            <else>else <block>{
                <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>xOffset</name></name></expr></argument>, 
                        <argument><expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>blockWidth</name></name> + <name><name>this</name>.<name>xOffset</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of values the renderer requires to display all the 
     * items from the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range (&lt;code&gt;null&lt;/code&gt; if the dataset is &lt;code&gt;null&lt;/code&gt; 
     *         or empty).
     *         
     * @see #findDomainBounds(XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <return>return <expr><name>null</name></expr>;</return> 
            }</block></then>
            <else>else <block>{
                <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>yOffset</name></name></expr></argument>, 
                        <argument><expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>blockHeight</name></name> + <name><name>this</name>.<name>yOffset</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the block representing the specified item.
     * 
     * @param g2  the graphics device.
     * @param state  the state.
     * @param dataArea  the data area.
     * @param info  the plot rendering info.
     * @param plot  the plot.
     * @param domainAxis  the x-axis.
     * @param rangeAxis  the y-axis.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param crosshairState  the crosshair state.
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
            <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>z</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>XYZDataset</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>z</name> = ((<name>XYZDataset</name>) <name>dataset</name>).<call><name>getZValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name><name>this</name>.<name>paintScale</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name> + <name><name>this</name>.<name>xOffset</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name> + <name><name>this</name>.<name>yOffset</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name> + <name><name>this</name>.<name>blockWidth</name></name> 
                + <name><name>this</name>.<name>xOffset</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name> + <name><name>this</name>.<name>blockHeight</name></name> 
                + <name><name>this</name>.<name>yOffset</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>block</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>orientation</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>block</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy1</name> - <name>yy0</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx0</name> - <name>xx1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>block</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx1</name> - <name>xx0</name></expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy1</name> - <name>yy0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this &lt;code&gt;XYBlockRenderer&lt;/code&gt; for equality with an arbitrary
     * object.  This method returns &lt;code&gt;true&lt;/code&gt; if and only if:
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;XYBlockRenderer&lt;/code&gt; (not
     *     &lt;code&gt;null&lt;/code&gt;);&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; has the same field values as this 
     *     &lt;code&gt;XYBlockRenderer&lt;/code&gt;;&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYBlockRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYBlockRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYBlockRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>blockHeight</name></name> != <name><name>that</name>.<name>blockHeight</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>blockWidth</name></name> != <name><name>that</name>.<name>blockWidth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>blockAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>blockAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>paintScale</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>paintScale</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this renderer.
     * 
     * @return A clone of this renderer.
     * 
     * @throws CloneNotSupportedException if there is a problem creating the 
     *     clone.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYBlockRenderer</name></type> <name>clone</name> =<init> <expr>(<name>XYBlockRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>paintScale</name></name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PublicCloneable</name></type> <name>pc</name> =<init> <expr>(<name>PublicCloneable</name>) <name><name>this</name>.<name>paintScale</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>clone</name>.<name>paintScale</name></name> = (<name>PaintScale</name>) <call><name><name>pc</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
