<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYBoxAndWhiskerRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------------
 * XYBoxAndWhiskerRenderer.java
 * ----------------------------
 * (C) Copyright 2003-2008, by David Browning and Contributors.
 *
 * Original Author:  David Browning (for Australian Institute of Marine 
 *                   Science);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 05-Aug-2003 : Version 1, contributed by David Browning.  Based on code in the
 *               CandlestickRenderer class.  Additional modifications by David 
 *               Gilbert to make the code work with 0.9.10 changes (DG);
 * 08-Aug-2003 : Updated some of the Javadoc
 *               Allowed BoxAndwhiskerDataset Average value to be null - the 
 *               average value is an AIMS requirement
 *               Allow the outlier and farout coefficients to be set - though 
 *               at the moment this only affects the calculation of farouts.
 *               Added artifactPaint variable and setter/getter
 * 12-Aug-2003   Rewrote code to sort out and process outliers to take 
 *               advantage of changes in DefaultBoxAndWhiskerDataset
 *               Added a limit of 10% for width of box should no width be 
 *               specified...maybe this should be setable???
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 08-Sep-2003 : Changed ValueAxis API (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 23-Apr-2004 : Added fillBox attribute, extended equals() method and fixed 
 *               serialization issue (DG);
 * 29-Apr-2004 : Fixed problem with drawing upper and lower shadows - bug id 
 *               944011 (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 01-Oct-2004 : Renamed 'paint' --&gt; 'boxPaint' to avoid conflict with 
 *               inherited attribute (DG);
 * 10-Jun-2005 : Updated equals() to handle GradientPaint (DG);
 * 06-Oct-2005 : Removed setPaint() call in drawItem(), it is causing a 
 *               loop (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags from all over JFreeChart sources (DG);
 * 05-Feb-2007 : Added event notifications and fixed drawing for horizontal 
 *               plot orientation (DG);
 * 13-Jun-2007 : Replaced deprecated method call (DG);
 * 03-Jan-2008 : Check visibility of average marker before drawing it (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>BoxAndWhiskerXYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>Outlier</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>OutlierList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>OutlierListCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>statistics</name>.<name>BoxAndWhiskerXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that draws box-and-whisker items on an {@link XYPlot}.  This 
 * renderer requires a {@link BoxAndWhiskerXYDataset}).
 * &lt;P&gt;
 * This renderer does not include any code to calculate the crosshair point.
 */</comment>
<class><specifier>public</specifier> class <name>XYBoxAndWhiskerRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                                     <implements>implements <name>XYItemRenderer</name>, 
                                                <name>Cloneable</name>,
                                                <name>PublicCloneable</name>,
                                                <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8020170108532232324L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The box width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>boxWidth</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to fill the box. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>boxPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the box is filled. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>fillBox</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint used to draw various artifacts such as outliers, farout 
     * symbol, average ellipse and median line. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>artifactPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer for box and whisker charts.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYBoxAndWhiskerRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>-1.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new renderer for box and whisker charts.
     * &lt;P&gt;
     * Use -1 for the box width if you prefer the width to be calculated 
     * automatically.
     *
     * @param boxWidth  the box width.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYBoxAndWhiskerRenderer</name><parameter_list>(<param><decl><type><name>double</name></type> <name>boxWidth</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>boxWidth</name></name> = <name>boxWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>boxPaint</name></name> = <name><name>Color</name>.<name>green</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillBox</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr>new <call><name>BoxAndWhiskerXYToolTipGenerator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the width of each box.
     *
     * @return The box width.
     * 
     * @see #setBoxWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBoxWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>boxWidth</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the box width and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * &lt;P&gt;
     * If you set the width to a negative value, the renderer will calculate
     * the box width automatically based on the space available on the chart.
     *
     * @param width  the width.
     * 
     * @see #getBoxWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoxWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>width</name> != <name><name>this</name>.<name>boxWidth</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>boxWidth</name></name> = <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to fill boxes.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBoxPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBoxPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>boxPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill boxes and sends a {@link RendererChangeEvent}
     * to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getBoxPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBoxPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>boxPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the box is filled.
     * 
     * @return A boolean.
     * 
     * @see #setFillBox(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFillBox</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fillBox</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the box is filled and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #setFillBox(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFillBox</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fillBox</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to paint the various artifacts such as outliers, 
     * farout symbol, median line and the averages ellipse.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setArtifactPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getArtifactPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>artifactPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to paint the various artifacts such as outliers, 
     * farout symbol, median line and the averages ellipse, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getArtifactPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setArtifactPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>artifactPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects info about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawHorizontalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawVerticalItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects info about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawHorizontalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                   <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                                   <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                                   <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                                   <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                   <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                                   <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                                   <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                   <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>BoxAndWhiskerXYDataset</name></type> <name>boxAndWhiskerData</name> 
                =<init> <expr>(<name>BoxAndWhiskerXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMax</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMin</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMedian</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMedianValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yAverage</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMeanValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yQ1Median</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getQ1Value</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yQ3Median</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getQ3Value</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>location</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMax</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMax</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMin</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMin</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMedian</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMedian</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyAverage</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yAverage</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yyAverage</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yAverage</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>yyQ1Median</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ1Median</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyQ3Median</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ3Median</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>exactBoxWidth</name> =<init> <expr><call><name>getBoxWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><name>exactBoxWidth</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dataAreaX</name> =<init> <expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxBoxPercent</name> =<init> <expr>0.1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxBoxWidth</name> =<init> <expr><name>dataAreaX</name> * <name>maxBoxPercent</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>exactBoxWidth</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>exactBoxWidth</name> = <name>dataAreaX</name> / <name>itemCount</name> * 4.5 / 7</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>exactBoxWidth</name> &lt; 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>width</name> = 3</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>exactBoxWidth</name> &gt; <name>maxBoxWidth</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>width</name> = <name>maxBoxWidth</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>width</name> = <name>exactBoxWidth</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name>getBoxPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>s</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the upper shadow</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyQ3Median</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMax</name></expr></argument>, 
                <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the lower shadow</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyQ1Median</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMin</name></expr></argument>, 
                <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the body</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>box</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yyQ1Median</name> &lt; <name>yyQ3Median</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyQ1Median</name></expr></argument>, <argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, 
                    <argument><expr><name>yyQ3Median</name> - <name>yyQ1Median</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyQ3Median</name></expr></argument>, <argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, 
                    <argument><expr><name>yyQ1Median</name> - <name>yyQ3Median</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><call><name>getBoxPaint</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getBoxPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fillBox</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw median</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getArtifactPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yyMedian</name></expr></argument>, 
                <argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMedian</name></expr></argument>, <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// draw average - SPECIAL AIMS REQUIREMENT</comment>
        <if>if <condition>(<expr><name>yAverage</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>aRadius</name> =<init> <expr><name>width</name> / 4</expr></init></decl>;</decl_stmt>
            <comment type="line">// here we check that the average marker will in fact be visible</comment>
            <comment type="line">// before drawing it...</comment>
            <if>if <condition>(<expr>(<name>yyAverage</name> &gt; (<call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> - <name>aRadius</name>)) 
                    &amp;&amp; (<name>yyAverage</name> &lt; (<call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name>aRadius</name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>avgEllipse</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(
                        <argument><expr><name>yyAverage</name> - <name>aRadius</name></expr></argument>, <argument><expr><name>xx</name> - <name>aRadius</name></expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>, 
                        <argument><expr><name>aRadius</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <comment type="line">// FIXME: draw outliers</comment>
        
        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <call><name><name>box</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>box</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>yyAverage</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area within which the plot is being drawn.
     * @param info  collects info about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawVerticalItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                 <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                                 <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                                 <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                                 <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                 <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                                 <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                                 <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                 <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// setup for collecting optional entity info...</comment>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>BoxAndWhiskerXYDataset</name></type> <name>boxAndWhiskerData</name> 
            =<init> <expr>(<name>BoxAndWhiskerXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMax</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMin</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yMedian</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMedianValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yAverage</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getMeanValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yQ1Median</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getQ1Value</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>yQ3Median</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getQ3Value</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>yOutliers</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getOutliers</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>x</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>location</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMax</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMax</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMin</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMin</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyMedian</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yMedian</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyAverage</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yAverage</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>yyAverage</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yAverage</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>yyQ1Median</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ1Median</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyQ3Median</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>yQ3Median</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yyOutlier</name></decl>;</decl_stmt>


        <decl_stmt><decl><type><name>double</name></type> <name>exactBoxWidth</name> =<init> <expr><call><name>getBoxWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr><name>exactBoxWidth</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>dataAreaX</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxBoxPercent</name> =<init> <expr>0.1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxBoxWidth</name> =<init> <expr><name>dataAreaX</name> * <name>maxBoxPercent</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>exactBoxWidth</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>boxAndWhiskerData</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>exactBoxWidth</name> = <name>dataAreaX</name> / <name>itemCount</name> * 4.5 / 7</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>exactBoxWidth</name> &lt; 3</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>width</name> = 3</expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>exactBoxWidth</name> &gt; <name>maxBoxWidth</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>width</name> = <name>maxBoxWidth</name></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><name>width</name> = <name>exactBoxWidth</name></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name>getBoxPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>s</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the upper shadow</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyQ3Median</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMax</name></expr></argument>, <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>, 
                <argument><expr><name>yyMax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the lower shadow</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyQ1Median</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMin</name></expr></argument>, <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>, 
                <argument><expr><name>yyMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// draw the body</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>box</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>yyQ1Median</name> &gt; <name>yyQ3Median</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyQ3Median</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, 
                    <argument><expr><name>yyQ1Median</name> - <name>yyQ3Median</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>box</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyQ1Median</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, 
                    <argument><expr><name>yyQ3Median</name> - <name>yyQ1Median</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fillBox</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw median</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getArtifactPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>width</name> / 2</expr></argument>, <argument><expr><name>yyMedian</name></expr></argument>, <argument><expr><name>xx</name> + <name>width</name> / 2</expr></argument>, 
                <argument><expr><name>yyMedian</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>aRadius</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>                 <comment type="line">// average radius</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>oRadius</name> =<init> <expr><name>width</name> / 3</expr></init></decl>;</decl_stmt>    <comment type="line">// outlier radius</comment>

        <comment type="line">// draw average - SPECIAL AIMS REQUIREMENT</comment>
        <if>if <condition>(<expr><name>yAverage</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>aRadius</name> = <name>width</name> / 4</expr>;</expr_stmt>
            <comment type="line">// here we check that the average marker will in fact be visible</comment>
            <comment type="line">// before drawing it...</comment>
            <if>if <condition>(<expr>(<name>yyAverage</name> &gt; (<call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <name>aRadius</name>)) 
                    &amp;&amp; (<name>yyAverage</name> &lt; (<call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> + <name>aRadius</name>))</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>avgEllipse</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>aRadius</name></expr></argument>, 
                        <argument><expr><name>yyAverage</name> - <name>aRadius</name></expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>, <argument><expr><name>aRadius</name> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>avgEllipse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>List</name></type> <name>outliers</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutlierListCollection</name></type> <name>outlierListCollection</name> 
                =<init> <expr>new <call><name>OutlierListCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* From outlier array sort out which are outliers and put these into 
         * an arraylist. If there are any farouts, set the flag on the 
         * OutlierListCollection
         */</comment>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>yOutliers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>outlier</name> =<init> <expr>((<name>Number</name>) <call><name><name>yOutliers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>outlier</name> &gt; <call><name><name>boxAndWhiskerData</name>.<name>getMaxOutlier</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>setHighFarOut</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>outlier</name> &lt; <call><name><name>boxAndWhiskerData</name>.<name>getMinOutlier</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>setLowFarOut</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <if>if <condition>(<expr><name>outlier</name> &gt; <call><name><name>boxAndWhiskerData</name>.<name>getMaxRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>yyOutlier</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>outliers</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Outlier</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyOutlier</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>outlier</name> &lt; <call><name><name>boxAndWhiskerData</name>.<name>getMinRegularValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, 
                    <argument><expr><name>item</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>yyOutlier</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>outliers</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>Outlier</name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyOutlier</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>
            <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name>outliers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// Process outliers. Each outlier is either added to the appropriate </comment>
        <comment type="line">// outlier list or a new outlier list is made</comment>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>outliers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Outlier</name></type> <name>outlier</name> =<init> <expr>(<name>Outlier</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>outlierListCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>outlier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// draw yOutliers</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>maxAxisValue</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>rangeAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call> + <name>aRadius</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>minAxisValue</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>rangeAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call> - <name>aRadius</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw outliers</comment>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>outlierListCollection</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> 
                <condition><expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>OutlierList</name></type> <name>list</name> =<init> <expr>(<name>OutlierList</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Outlier</name></type> <name>outlier</name> =<init> <expr><call><name><name>list</name>.<name>getAveragedOutlier</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>point</name> =<init> <expr><call><name><name>outlier</name>.<name>getPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>list</name>.<name>isMultiple</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawMultipleEllipse</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><call><name>drawEllipse</name><argument_list>(<argument><expr><name>point</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <comment type="line">// draw farout</comment>
        <if>if <condition>(<expr><call><name><name>outlierListCollection</name>.<name>isHighFarOut</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawHighFarOut</name><argument_list>(<argument><expr><name>aRadius</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>maxAxisValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>outlierListCollection</name>.<name>isLowFarOut</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawLowFarOut</name><argument_list>(<argument><expr><name>aRadius</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>minAxisValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <call><name><name>box</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>box</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yyAverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws an ellipse to represent an outlier.
     * 
     * @param point  the location.
     * @param oRadius  the radius.
     * @param g2  the graphics device.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawEllipse</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>point</name></decl></param>, <param><decl><type><name>double</name></type> <name>oRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>dot</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>oRadius</name> / 2</expr></argument>,
                <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws two ellipses to represent overlapping outliers.
     * 
     * @param point  the location.
     * @param boxWidth  the box width.
     * @param oRadius  the radius.
     * @param g2  the graphics device.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawMultipleEllipse</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>point</name></decl></param>, <param><decl><type><name>double</name></type> <name>boxWidth</name></decl></param>, 
                                       <param><decl><type><name>double</name></type> <name>oRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{
                                         
        <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>dot1</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                - (<name>boxWidth</name> / 2) + <name>oRadius</name></expr></argument>, <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Ellipse2D</name>.<name>Double</name></name></type> <name>dot2</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                + (<name>boxWidth</name> / 2)</expr></argument>, <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>, <argument><expr><name>oRadius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>dot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws a triangle to indicate the presence of far out values.
     * 
     * @param aRadius  the radius.
     * @param g2  the graphics device.
     * @param xx  the x value.
     * @param m  the max y value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawHighFarOut</name><parameter_list>(<param><decl><type><name>double</name></type> <name>aRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>xx</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>side</name> =<init> <expr><name>aRadius</name> * 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> + <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a triangle to indicate the presence of far out values.
     * 
     * @param aRadius  the radius.
     * @param g2  the graphics device.
     * @param xx  the x value.
     * @param m  the min y value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLowFarOut</name><parameter_list>(<param><decl><type><name>double</name></type> <name>aRadius</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>double</name></type> <name>xx</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>m</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>side</name> =<init> <expr><name>aRadius</name> * 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>side</name></expr></argument>, <argument><expr><name>m</name> - <name>side</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYBoxAndWhiskerRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYBoxAndWhiskerRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYBoxAndWhiskerRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>boxWidth</name></name> != <call><name><name>that</name>.<name>getBoxWidth</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>boxPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>boxPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>artifactPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fillBox</name></name> != <name><name>that</name>.<name>fillBox</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>boxPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>artifactPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>boxPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>artifactPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
