<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYDifferenceRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------
 * XYDifferenceRenderer.java
 * -------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Richard West, Advanced Micro Devices, Inc. (major rewrite 
 *                   of difference drawing algorithm);
 *
 * Changes:
 * --------
 * 30-Apr-2003 : Version 1 (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 09-Feb-2004 : Updated to support horizontal plot orientation (DG);
 * 10-Feb-2004 : Added default constructor, setter methods and updated 
 *               Javadocs (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 30-Mar-2004 : Fixed bug in getNegativePaint() method (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 25-Aug-2004 : Fixed a bug preventing the use of crosshairs (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 19-Jan-2005 : Now accesses only primitive values from dataset (DG);
 * 22-Feb-2005 : Override getLegendItem(int, int) to return "line" items (DG);
 * 13-Apr-2005 : Fixed shape positioning bug (id = 1182062) (DG);
 * 20-Apr-2005 : Use generators for legend tooltips and URLs (DG);
 * 04-May-2005 : Override equals() method, renamed get/setPlotShapes() --&gt;
 *               get/setShapesVisible (DG);
 * 09-Jun-2005 : Updated equals() to handle GradientPaint (DG);
 * 16-Jun-2005 : Fix bug (1221021) affecting stroke used for each series (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 24-Jan-2007 : Added flag to allow rounding of x-coordinates, and fixed
 *               bug in clone() (DG);
 * 05-Feb-2007 : Added an extra call to updateCrosshairValues() in 
 *               drawItemPass1(), to fix bug 1564967 (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 08-Mar-2007 : Fixed entity generation (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 23-Apr-2007 : Rewrite of difference drawing algorithm to allow use of 
 *               series with disjoint x-values (RW);
 * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);
 * 17-May-2007 : Set datasetIndex and seriesIndex in getLegendItem() (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 05-Nov-2007 : Draw item labels if visible (RW);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>LinkedList</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>XYItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A renderer for an {@link XYPlot} that highlights the differences between two
 * series.
 */</comment>
<class><specifier>public</specifier> class <name>XYDifferenceRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                                  <implements>implements <name>XYItemRenderer</name>, 
                                             <name>Cloneable</name>,
                                             <name>PublicCloneable</name>,
                                             <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8447915602375584857L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to highlight positive differences (y(0) &gt; y(1)). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>positivePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to highlight negative differences (y(0) &lt; y(1)). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>negativePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Display shapes at each point? */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapesVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The shape to display in the legend item. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendLine</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This flag controls whether or not the x-coordinates (in Java2D space) 
     * are rounded to integers.  When set to true, this can avoid the vertical
     * striping that anti-aliasing can generate.  However, the rounding may not
     * be appropriate for output in high resolution formats (for example, 
     * vector graphics formats such as SVG and PDF).
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>roundXCoordinates</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer with default attributes.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYDifferenceRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>Color</name>.<name>green</name></name></expr></argument>, <argument><expr><name><name>Color</name>.<name>red</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     *
     * @param positivePaint  the highlight color for positive differences 
     *                       (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param negativePaint  the highlight color for negative differences 
     *                       (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param shapes  draw shapes?
     */</comment>
    <constructor><specifier>public</specifier> <name>XYDifferenceRenderer</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>positivePaint</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>negativePaint</name></decl></param>, 
                                <param><decl><type><name>boolean</name></type> <name>shapes</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>positivePaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'positivePaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>negativePaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'negativePaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>positivePaint</name></name> = <name>positivePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>negativePaint</name></name> = <name>negativePaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = <name>shapes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-7.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>7.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>roundXCoordinates</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the paint used to highlight positive differences.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPositivePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPositivePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>positivePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to highlight positive differences and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPositivePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPositivePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>positivePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to highlight negative differences.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setNegativePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNegativePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>negativePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to highlight negative differences.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getNegativePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNegativePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>negativePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>RendererChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not shapes are drawn for each 
     * data value.
     * 
     * @return A boolean.
     * 
     * @see #setShapesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getShapesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not shapes are drawn for each 
     * data value, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #getShapesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the shape used to represent a line in the legend.
     * 
     * @return The legend line (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLine(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shape used as a line in each legend item and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendLine()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLine</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>line</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'line' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <name>line</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the x-coordinates (in
     * Java2D space) are rounded to integer values.
     * 
     * @return The flag.
     * 
     * @since 1.0.4
     * 
     * @see #setRoundXCoordinates(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getRoundXCoordinates</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the x-coordinates (in 
     * Java2D space) are rounded to integer values, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param round  the new flag value.
     * 
     * @since 1.0.4
     * 
     * @see #getRoundXCoordinates()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRoundXCoordinates</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>round</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>roundXCoordinates</name></name> = <name>round</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer and returns a state object that should be 
     * passed to subsequent calls to the drawItem() method.  This method will 
     * be called before the first item is rendered, giving the renderer an 
     * opportunity to initialise any state information it wants to maintain.  
     * The renderer can do nothing if it chooses.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return A state object.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, 
                <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;2&lt;/code&gt;, the number of passes required by the renderer.  
     * The {@link XYPlot} will run through the dataset this number of times.
     * 
     * @return The number of passes required by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain (horizontal) axis.
     * @param rangeAxis  the range (vertical) axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>pass</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemPass0</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>pass</name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemPass1</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item, first pass.
     *
     * @param x_graphics  the graphics device.
     * @param x_dataArea  the area within which the data is being drawn.
     * @param x_info  collects information about the drawing.
     * @param x_plot  the plot (can be used to obtain standard color 
     *                information etc).
     * @param x_domainAxis  the domain (horizontal) axis.
     * @param x_rangeAxis  the range (vertical) axis.
     * @param x_dataset  the dataset.
     * @param x_series  the series index (zero-based).
     * @param x_item  the item index (zero-based).
     * @param x_crosshairState  crosshair information for the plot 
     *                          (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItemPass0</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>x_graphics</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>x_dataArea</name></decl></param>,
                                 <param><decl><type><name>PlotRenderingInfo</name></type> <name>x_info</name></decl></param>,
                                 <param><decl><type><name>XYPlot</name></type> <name>x_plot</name></decl></param>,
                                 <param><decl><type><name>ValueAxis</name></type> <name>x_domainAxis</name></decl></param>,
                                 <param><decl><type><name>ValueAxis</name></type> <name>x_rangeAxis</name></decl></param>,
                                 <param><decl><type><name>XYDataset</name></type> <name>x_dataset</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>x_series</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>x_item</name></decl></param>,
                                 <param><decl><type><name>CrosshairState</name></type> <name>x_crosshairState</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>!((0 == <name>x_series</name>) &amp;&amp; (0 == <name>x_item</name>))</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>b_impliedZeroSubtrahend</name> =<init> <expr>(1 == <call><name><name>x_dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call>)</expr></init></decl>;</decl_stmt>

        <comment type="line">// check if either series is a degenerate case (i.e. less than 2 points)</comment>
        <if>if <condition>(<expr><call><name>isEitherSeriesDegenerate</name><argument_list>(<argument><expr><name>x_dataset</name></expr></argument>, <argument><expr><name>b_impliedZeroSubtrahend</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// check if series are disjoint (i.e. domain-spans do not overlap)</comment>
        <if>if <condition>(<expr>!<name>b_impliedZeroSubtrahend</name> &amp;&amp; <call><name>areSeriesDisjoint</name><argument_list>(<argument><expr><name>x_dataset</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// polygon definitions</comment>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_minuendXs</name>    =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_minuendYs</name>    =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_subtrahendXs</name> =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_subtrahendYs</name> =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_polygonXs</name>    =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LinkedList</name></type> <name>l_polygonYs</name>    =<init> <expr>new <call><name>LinkedList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// state</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>l_minuendItem</name>      =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l_minuendItemCount</name> =<init> <expr><call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_minuendCurX</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_minuendNextX</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_minuendCurY</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_minuendNextY</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_minuendMaxY</name>   =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_minuendMinY</name>   =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>l_subtrahendItem</name>      =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l_subtrahendItemCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> <comment type="line">// actual value set below</comment>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_subtrahendCurX</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_subtrahendNextX</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_subtrahendCurY</name>   =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Double</name></type> <name>l_subtrahendNextY</name>  =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_subtrahendMaxY</name>   =<init> <expr><name><name>Double</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_subtrahendMinY</name>   =<init> <expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// if a subtrahend is not specified, assume it is zero</comment>
        <if>if <condition>(<expr><name>b_impliedZeroSubtrahend</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l_subtrahendItem</name>      = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendItemCount</name> = 2</expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendCurX</name>      = new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendNextX</name>     = new <call><name>Double</name><argument_list>(<argument><expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, 
                    <argument><expr>(<name>l_minuendItemCount</name> - 1)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendCurY</name>      = new <call><name>Double</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendNextY</name>     = new <call><name>Double</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendMaxY</name>      = 0.0</expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendMinY</name>      = 0.0</expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>l_subtrahendItemCount</name> = <call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>b_minuendDone</name>           =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_minuendAdvanced</name>       =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_minuendAtIntersect</name>    =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_minuendFastForward</name>    =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_subtrahendDone</name>        =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_subtrahendAdvanced</name>    =<init> <expr>true</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_subtrahendAtIntersect</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_subtrahendFastForward</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_colinear</name>              =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>b_positive</name></decl>;</decl_stmt>

        <comment type="line">// coordinate pairs</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>l_x1</name> =<init> <expr>0.0</expr></init>, <name>l_y1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt> <comment type="line">// current minuend point</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>l_x2</name> =<init> <expr>0.0</expr></init>, <name>l_y2</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt> <comment type="line">// next minuend point</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>l_x3</name> =<init> <expr>0.0</expr></init>, <name>l_y3</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt> <comment type="line">// current subtrahend point</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>l_x4</name> =<init> <expr>0.0</expr></init>, <name>l_y4</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt> <comment type="line">// next subtrahend point</comment>

        <comment type="line">// fast-forward through leading tails</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b_fastForwardDone</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr>!<name>b_fastForwardDone</name></expr>)</condition> <block>{
            <comment type="line">// get the x and y coordinates</comment>
            <expr_stmt><expr><name>l_x1</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_y1</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_x2</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_y2</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>l_minuendCurX</name>  = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_minuendCurY</name>  = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_minuendNextX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_minuendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>b_impliedZeroSubtrahend</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_x3</name> = <call><name><name>l_subtrahendCurX</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y3</name> = <call><name><name>l_subtrahendCurY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_x4</name> = <call><name><name>l_subtrahendNextX</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y4</name> = <call><name><name>l_subtrahendNextY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>l_x3</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y3</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_x4</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y4</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>l_subtrahendCurX</name>  = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendCurY</name>  = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendNextX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>l_x2</name> &lt;= <name>l_x3</name></expr>)</condition><then> <block>{
                <comment type="line">// minuend needs to be fast forwarded</comment>
                <expr_stmt><expr><name>l_minuendItem</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>b_minuendFastForward</name> = true</expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <if>if <condition>(<expr><name>l_x4</name> &lt;= <name>l_x1</name></expr>)</condition><then> <block>{
                <comment type="line">// subtrahend needs to be fast forwarded</comment>
                <expr_stmt><expr><name>l_subtrahendItem</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>b_subtrahendFastForward</name> = true</expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <comment type="line">// check if initial polygon needs to be clipped</comment>
            <if>if <condition>(<expr>(<name>l_x3</name> &lt; <name>l_x1</name>) &amp;&amp; (<name>l_x1</name> &lt; <name>l_x4</name>)</expr>)</condition><then> <block>{
                <comment type="line">// project onto subtrahend</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_slope</name>   =<init> <expr>(<name>l_y4</name> - <name>l_y3</name>) / (<name>l_x4</name> - <name>l_x3</name>)</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>l_subtrahendCurX</name> = <name>l_minuendCurX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendCurY</name> = new <call><name>Double</name><argument_list>(<argument><expr>(<name>l_slope</name> * <name>l_x1</name>) 
                        + (<name>l_y3</name> - (<name>l_slope</name> * <name>l_x3</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>(<name>l_x1</name> &lt; <name>l_x3</name>) &amp;&amp; (<name>l_x3</name> &lt; <name>l_x2</name>)</expr>)</condition><then> <block>{
                <comment type="line">// project onto minuend</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_slope</name> =<init> <expr>(<name>l_y2</name> - <name>l_y1</name>) / (<name>l_x2</name> - <name>l_x1</name>)</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>l_minuendCurX</name>  = <name>l_subtrahendCurX</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendCurY</name>  = new <call><name>Double</name><argument_list>(<argument><expr>(<name>l_slope</name> * <name>l_x3</name>) 
                        + (<name>l_y1</name> - (<name>l_slope</name> * <name>l_x1</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>l_minuendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_minuendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>l_minuendMaxY</name>    = <call><name><name>l_minuendCurY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_minuendMinY</name>    = <call><name><name>l_minuendCurY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendMaxY</name> = <call><name><name>l_subtrahendCurY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendMinY</name> = <call><name><name>l_subtrahendCurY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>b_fastForwardDone</name> = true</expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// start of algorithm</comment>
        <while>while <condition>(<expr>!<name>b_minuendDone</name> &amp;&amp; !<name>b_subtrahendDone</name></expr>)</condition> <block>{
            <if>if <condition>(<expr>!<name>b_minuendDone</name> &amp;&amp; !<name>b_minuendFastForward</name> &amp;&amp; <name>b_minuendAdvanced</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_x1</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y1</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendCurX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendCurY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr>!<name>b_minuendAtIntersect</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>l_minuendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>l_minuendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name>l_minuendMaxY</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>l_minuendMaxY</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendMinY</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>l_minuendMinY</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>l_x2</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y2</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendNextX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// never updated the subtrahend if it is implied to be zero</comment>
            <if>if <condition>(<expr>!<name>b_impliedZeroSubtrahend</name> &amp;&amp; !<name>b_subtrahendDone</name> 
                    &amp;&amp; !<name>b_subtrahendFastForward</name> &amp;&amp; <name>b_subtrahendAdvanced</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_x3</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y3</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendCurX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendCurY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr>!<name>b_subtrahendAtIntersect</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name>l_subtrahendMaxY</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>l_subtrahendMaxY</name></expr></argument>, <argument><expr><name>l_y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendMinY</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>l_subtrahendMinY</name></expr></argument>, <argument><expr><name>l_y3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>l_x4</name> = <call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_y4</name> = <call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>l_subtrahendItem</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendNextX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// deassert b_*FastForward (only matters for 1st time through loop)</comment>
            <expr_stmt><expr><name>b_minuendFastForward</name>    = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>b_subtrahendFastForward</name> = false</expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Double</name></type> <name>l_intersectX</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Double</name></type> <name>l_intersectY</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>b_intersect</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>b_minuendAtIntersect</name>    = false</expr>;</expr_stmt>
            <expr_stmt><expr><name>b_subtrahendAtIntersect</name> = false</expr>;</expr_stmt>

            <comment type="line">// check for intersect</comment>
            <if>if <condition>(<expr>(<name>l_x2</name> == <name>l_x4</name>) &amp;&amp; (<name>l_y2</name> == <name>l_y4</name>)</expr>)</condition><then> <block>{
                <comment type="line">// check if line segments are colinear</comment>
                <if>if <condition>(<expr>(<name>l_x1</name> == <name>l_x3</name>) &amp;&amp; (<name>l_y1</name> == <name>l_y3</name>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>b_colinear</name> = true</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <comment type="line">// the intersect is at the next point for both the minuend </comment>
                    <comment type="line">// and subtrahend</comment>
                    <expr_stmt><expr><name>l_intersectX</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l_intersectY</name> = new <call><name>Double</name><argument_list>(<argument><expr><name>l_y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>b_intersect</name>             = true</expr>;</expr_stmt>
                    <expr_stmt><expr><name>b_minuendAtIntersect</name>    = true</expr>;</expr_stmt>
                    <expr_stmt><expr><name>b_subtrahendAtIntersect</name> = true</expr>;</expr_stmt>
                 }</block></else></if>
            }</block></then>
            <else>else <block>{
                <comment type="line">// compute common denominator</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_denominator</name> =<init> <expr>((<name>l_y4</name> - <name>l_y3</name>) * (<name>l_x2</name> - <name>l_x1</name>)) 
                        - ((<name>l_x4</name> - <name>l_x3</name>) * (<name>l_y2</name> - <name>l_y1</name>))</expr></init></decl>;</decl_stmt>

                <comment type="line">// compute common deltas</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_deltaY</name> =<init> <expr><name>l_y1</name> - <name>l_y3</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>l_deltaX</name> =<init> <expr><name>l_x1</name> - <name>l_x3</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// compute numerators</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_numeratorA</name> =<init> <expr>((<name>l_x4</name> - <name>l_x3</name>) * <name>l_deltaY</name>) 
                        - ((<name>l_y4</name> - <name>l_y3</name>) * <name>l_deltaX</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>l_numeratorB</name> =<init> <expr>((<name>l_x2</name> - <name>l_x1</name>) * <name>l_deltaY</name>) 
                        - ((<name>l_y2</name> - <name>l_y1</name>) * <name>l_deltaX</name>)</expr></init></decl>;</decl_stmt>

                <comment type="line">// check if line segments are colinear</comment>
                <if>if <condition>(<expr>(0 == <name>l_numeratorA</name>) &amp;&amp; (0 == <name>l_numeratorB</name>) 
                        &amp;&amp; (0 == <name>l_denominator</name>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>b_colinear</name> = true</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <comment type="line">// check if previously colinear</comment>
                    <if>if <condition>(<expr><name>b_colinear</name></expr>)</condition><then> <block>{
                        <comment type="line">// clear colinear points and flag</comment>
                        <expr_stmt><expr><call><name><name>l_minuendXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_minuendYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name>b_colinear</name> = false</expr>;</expr_stmt>

                        <comment type="line">// set new starting point for the polygon</comment>
                        <decl_stmt><decl><type><name>boolean</name></type> <name>b_useMinuend</name> =<init> <expr>((<name>l_x3</name> &lt;= <name>l_x1</name>) 
                                &amp;&amp; (<name>l_x1</name> &lt;= <name>l_x4</name>))</expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>b_useMinuend</name> ? <name>l_minuendCurX</name> 
                                : <name>l_subtrahendCurX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>b_useMinuend</name> ? <name>l_minuendCurY</name> 
                                : <name>l_subtrahendCurY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                    <comment type="line">// compute slope components</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>l_slopeA</name> =<init> <expr><name>l_numeratorA</name> / <name>l_denominator</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>l_slopeB</name> =<init> <expr><name>l_numeratorB</name> / <name>l_denominator</name></expr></init></decl>;</decl_stmt>

                    <comment type="line">// check if the line segments intersect</comment>
                    <if>if <condition>(<expr>(0 &lt; <name>l_slopeA</name>) &amp;&amp; (<name>l_slopeA</name> &lt;= 1) &amp;&amp; (0 &lt; <name>l_slopeB</name>) 
                            &amp;&amp; (<name>l_slopeB</name> &lt;= 1)</expr>)</condition><then> <block>{
                        <comment type="line">// compute the point of intersection</comment>
                        <decl_stmt><decl><type><name>double</name></type> <name>l_xi</name> =<init> <expr><name>l_x1</name> + (<name>l_slopeA</name> * (<name>l_x2</name> - <name>l_x1</name>))</expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>l_yi</name> =<init> <expr><name>l_y1</name> + (<name>l_slopeA</name> * (<name>l_y2</name> - <name>l_y1</name>))</expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>l_intersectX</name>            = new <call><name>Double</name><argument_list>(<argument><expr><name>l_xi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>l_intersectY</name>            = new <call><name>Double</name><argument_list>(<argument><expr><name>l_yi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b_intersect</name>             = true</expr>;</expr_stmt>
                        <expr_stmt><expr><name>b_minuendAtIntersect</name>    = ((<name>l_xi</name> == <name>l_x2</name>) 
                                &amp;&amp; (<name>l_yi</name> == <name>l_y2</name>))</expr>;</expr_stmt>
                        <expr_stmt><expr><name>b_subtrahendAtIntersect</name> = ((<name>l_xi</name> == <name>l_x4</name>) 
                                &amp;&amp; (<name>l_yi</name> == <name>l_y4</name>))</expr>;</expr_stmt>

                        <comment type="line">// advance minuend and subtrahend to intesect</comment>
                        <expr_stmt><expr><name>l_minuendCurX</name>    = <name>l_intersectX</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>l_minuendCurY</name>    = <name>l_intersectY</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>l_subtrahendCurX</name> = <name>l_intersectX</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>l_subtrahendCurY</name> = <name>l_intersectY</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></else></if>

            <if>if <condition>(<expr><name>b_intersect</name></expr>)</condition><then> <block>{
                <comment type="line">// create the polygon</comment>
                <comment type="line">// add the minuend's points to polygon</comment>
                <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_minuendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_minuendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// add intersection point to the polygon</comment>
                <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_intersectX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_intersectY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// add the subtrahend's points to the polygon in reverse</comment>
                <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>l_subtrahendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>l_subtrahendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_subtrahendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_subtrahendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// create an actual polygon</comment>
                <expr_stmt><expr><name>b_positive</name> = (<name>l_subtrahendMaxY</name> &lt;= <name>l_minuendMaxY</name>) 
                        &amp;&amp; (<name>l_subtrahendMinY</name> &lt;= <name>l_minuendMinY</name>)</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>createPolygon</name><argument_list>(<argument><expr><name>x_graphics</name></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, <argument><expr><name>x_plot</name></expr></argument>, <argument><expr><name>x_domainAxis</name></expr></argument>, 
                        <argument><expr><name>x_rangeAxis</name></expr></argument>, <argument><expr><name>b_positive</name></expr></argument>, <argument><expr><name>l_polygonXs</name></expr></argument>, <argument><expr><name>l_polygonYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// clear the point vectors</comment>
                <expr_stmt><expr><call><name><name>l_minuendXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_minuendYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// set the maxY and minY values to intersect y-value</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>l_y</name>       =<init> <expr><call><name><name>l_intersectY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>l_minuendMaxY</name>    = <name>l_y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendMaxY</name> = <name>l_y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_minuendMinY</name>    = <name>l_y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l_subtrahendMinY</name> = <name>l_y</name></expr>;</expr_stmt>

                <comment type="line">// add interection point to new polygon</comment>
                <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_intersectX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_intersectY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// advance the minuend if needed</comment>
            <if>if <condition>(<expr><name>l_x2</name> &lt;= <name>l_x4</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_minuendItem</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>b_minuendAdvanced</name> = true</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>b_minuendAdvanced</name> = false</expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// advance the subtrahend if needed</comment>
            <if>if <condition>(<expr><name>l_x4</name> &lt;= <name>l_x2</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_subtrahendItem</name>++</expr>;</expr_stmt>
                <expr_stmt><expr><name>b_subtrahendAdvanced</name> = true</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>b_subtrahendAdvanced</name> = false</expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>b_minuendDone</name>    = (<name>l_minuendItem</name> == (<name>l_minuendItemCount</name> - 1))</expr>;</expr_stmt>
            <expr_stmt><expr><name>b_subtrahendDone</name> = (<name>l_subtrahendItem</name> == (<name>l_subtrahendItemCount</name> 
                    - 1))</expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// check if the final polygon needs to be clipped</comment>
        <if>if <condition>(<expr><name>b_minuendDone</name> &amp;&amp; (<name>l_x3</name> &lt; <name>l_x2</name>) &amp;&amp; (<name>l_x2</name> &lt; <name>l_x4</name>)</expr>)</condition><then> <block>{
            <comment type="line">// project onto subtrahend</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>l_slope</name>    =<init> <expr>(<name>l_y4</name> - <name>l_y3</name>) / (<name>l_x4</name> - <name>l_x3</name>)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>l_subtrahendNextX</name> = <name>l_minuendNextX</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_subtrahendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr>(<name>l_slope</name> * <name>l_x2</name>) 
                    + (<name>l_y3</name> - (<name>l_slope</name> * <name>l_x3</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>b_subtrahendDone</name> &amp;&amp; (<name>l_x1</name> &lt; <name>l_x4</name>) &amp;&amp; (<name>l_x4</name> &lt; <name>l_x2</name>)</expr>)</condition><then> <block>{
            <comment type="line">// project onto minuend</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>l_slope</name> =<init> <expr>(<name>l_y2</name> - <name>l_y1</name>) / (<name>l_x2</name> - <name>l_x1</name>)</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>l_minuendNextX</name> = <name>l_subtrahendNextX</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l_minuendNextY</name> = new <call><name>Double</name><argument_list>(<argument><expr>(<name>l_slope</name> * <name>l_x4</name>) 
                    + (<name>l_y1</name> - (<name>l_slope</name> * <name>l_x1</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// consider last point of minuend and subtrahend for determining </comment>
        <comment type="line">// positivity</comment>
        <expr_stmt><expr><name>l_minuendMaxY</name>    = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>l_minuendMaxY</name></expr></argument>, 
                <argument><expr><call><name><name>l_minuendNextY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l_subtrahendMaxY</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>l_subtrahendMaxY</name></expr></argument>, 
                <argument><expr><call><name><name>l_subtrahendNextY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l_minuendMinY</name>    = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>l_minuendMinY</name></expr></argument>, 
                <argument><expr><call><name><name>l_minuendNextY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l_subtrahendMinY</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>l_subtrahendMinY</name></expr></argument>, 
                <argument><expr><call><name><name>l_subtrahendNextY</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add the last point of the minuned and subtrahend</comment>
        <expr_stmt><expr><call><name><name>l_minuendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendNextX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_minuendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_minuendNextY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_subtrahendXs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendNextX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_subtrahendYs</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_subtrahendNextY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create the polygon</comment>
        <comment type="line">// add the minuend's points to polygon</comment>
        <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_minuendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_minuendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add the subtrahend's points to the polygon in reverse</comment>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>l_subtrahendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>reverse</name></name><argument_list>(<argument><expr><name>l_subtrahendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_polygonXs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_subtrahendXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>l_polygonYs</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>l_subtrahendYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create an actual polygon</comment>
        <expr_stmt><expr><name>b_positive</name> = (<name>l_subtrahendMaxY</name> &lt;= <name>l_minuendMaxY</name>) 
                &amp;&amp; (<name>l_subtrahendMinY</name> &lt;= <name>l_minuendMinY</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createPolygon</name><argument_list>(<argument><expr><name>x_graphics</name></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, <argument><expr><name>x_plot</name></expr></argument>, <argument><expr><name>x_domainAxis</name></expr></argument>, 
                <argument><expr><name>x_rangeAxis</name></expr></argument>, <argument><expr><name>b_positive</name></expr></argument>, <argument><expr><name>l_polygonXs</name></expr></argument>, <argument><expr><name>l_polygonYs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item, second pass.  In 
     * the second pass, the renderer draws the lines and shapes for the 
     * individual points in the two series.
     *
     * @param x_graphics  the graphics device.
     * @param x_dataArea  the area within which the data is being drawn.
     * @param x_info  collects information about the drawing.
     * @param x_plot  the plot (can be used to obtain standard color 
     *         information etc).
     * @param x_domainAxis  the domain (horizontal) axis.
     * @param x_rangeAxis  the range (vertical) axis.
     * @param x_dataset  the dataset.
     * @param x_series  the series index (zero-based).
     * @param x_item  the item index (zero-based).
     * @param x_crosshairState  crosshair information for the plot 
     *                          (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItemPass1</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>x_graphics</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>x_dataArea</name></decl></param>,
                                 <param><decl><type><name>PlotRenderingInfo</name></type> <name>x_info</name></decl></param>,
                                 <param><decl><type><name>XYPlot</name></type> <name>x_plot</name></decl></param>,
                                 <param><decl><type><name>ValueAxis</name></type> <name>x_domainAxis</name></decl></param>,
                                 <param><decl><type><name>ValueAxis</name></type> <name>x_rangeAxis</name></decl></param>,
                                 <param><decl><type><name>XYDataset</name></type> <name>x_dataset</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>x_series</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>x_item</name></decl></param>,
                                 <param><decl><type><name>CrosshairState</name></type> <name>x_crosshairState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Shape</name></type> <name>l_entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>l_entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>null</name> != <name>x_info</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l_entities</name> = <call><name><name>x_info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Paint</name></type> <name>l_seriesPaint</name>   =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>l_seriesStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>l_seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>l_seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>l_orientation</name>      =<init> <expr><call><name><name>x_plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>l_domainAxisLocation</name> =<init> <expr><call><name><name>x_plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>l_rangeAxisLocation</name>  =<init> <expr><call><name><name>x_plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>l_x0</name> =<init> <expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_y0</name> =<init> <expr><call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_x1</name> =<init> <expr><call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>l_x0</name></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_y1</name> =<init> <expr><call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>l_y0</name></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>getShapesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Shape</name></type> <name>l_shape</name> =<init> <expr><call><name>getItemShape</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>l_orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>l_shape</name></expr></argument>, 
                        <argument><expr><name>l_y1</name></expr></argument>, <argument><expr><name>l_x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>l_shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>l_shape</name></expr></argument>, 
                        <argument><expr><name>l_x1</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><call><name><name>l_shape</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>x_dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>x_graphics</name>.<name>fill</name></name><argument_list>(<argument><expr><name>l_shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>l_entityArea</name> = <name>l_shape</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// add an entity for the item...</comment>
        <if>if <condition>(<expr><name>null</name> != <name>l_entities</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>null</name> == <name>l_entityArea</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_entityArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>(<name>l_x1</name> - 2)</expr></argument>, <argument><expr>(<name>l_y1</name> - 2)</expr></argument>, 
                        <argument><expr>4</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>l_tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>XYToolTipGenerator</name></type> <name>l_tipGenerator</name> =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, 
                    <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>l_tipGenerator</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_tip</name> = <call><name><name>l_tipGenerator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>x_dataset</name></expr></argument>, <argument><expr><name>x_series</name></expr></argument>, 
                        <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>l_url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>XYURLGenerator</name></type> <name>l_urlGenerator</name> =<init> <expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>null</name> != <name>l_urlGenerator</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_url</name> = <call><name><name>l_urlGenerator</name>.<name>generateURL</name></name><argument_list>(<argument><expr><name>x_dataset</name></expr></argument>, <argument><expr><name>x_series</name></expr></argument>, 
                        <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>XYItemEntity</name></type> <name>l_entity</name> =<init> <expr>new <call><name>XYItemEntity</name><argument_list>(<argument><expr><name>l_entityArea</name></expr></argument>, <argument><expr><name>x_dataset</name></expr></argument>, 
                    <argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>, <argument><expr><name>l_tip</name></expr></argument>, <argument><expr><name>l_url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>l_entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>l_entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw the item label if there is one...</comment>
        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>x_graphics</name></expr></argument>, <argument><expr><name>l_orientation</name></expr></argument>, <argument><expr><name>x_dataset</name></expr></argument>, <argument><expr><name>x_series</name></expr></argument>,
                          <argument><expr><name>x_item</name></expr></argument>, <argument><expr><name>l_x1</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>, <argument><expr>(<name>l_y1</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>l_domainAxisIndex</name> =<init> <expr><call><name><name>x_plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>x_domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l_rangeAxisIndex</name>  =<init> <expr><call><name><name>x_plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>x_rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>x_crosshairState</name></expr></argument>, <argument><expr><name>l_x0</name></expr></argument>, <argument><expr><name>l_y0</name></expr></argument>, <argument><expr><name>l_domainAxisIndex</name></expr></argument>,
                              <argument><expr><name>l_rangeAxisIndex</name></expr></argument>, <argument><expr><name>l_x1</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>, <argument><expr><name>l_orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>0 == <name>x_item</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>l_x2</name> =<init> <expr><call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, 
                <argument><expr>(<name>x_item</name> - 1)</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_y2</name> =<init> <expr><call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>x_dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, 
                <argument><expr>(<name>x_item</name> - 1)</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Line2D</name></type> <name>l_line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name> == <name>l_orientation</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l_line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>l_y1</name></expr></argument>, <argument><expr><name>l_x1</name></expr></argument>, <argument><expr><name>l_y2</name></expr></argument>, <argument><expr><name>l_x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>PlotOrientation</name>.<name>VERTICAL</name></name> == <name>l_orientation</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>l_line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>l_x1</name></expr></argument>, <argument><expr><name>l_y1</name></expr></argument>, <argument><expr><name>l_x2</name></expr></argument>, <argument><expr><name>l_y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
 
        <if>if <condition>(<expr>(<name>null</name> != <name>l_line</name>) &amp;&amp; <call><name><name>l_line</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>x_dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>x_series</name></expr></argument>, <argument><expr><name>x_item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>x_graphics</name>.<name>draw</name></name><argument_list>(<argument><expr><name>l_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if a dataset is degenerate.  A degenerate dataset is a 
     * dataset where either series has less than two (2) points.
     *
     * @param x_dataset  the dataset.
     * @param x_impliedZeroSubtrahend  if false, do not check the subtrahend
     *
     * @return true if the dataset is degenerate.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isEitherSeriesDegenerate</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>x_dataset</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>x_impliedZeroSubtrahend</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>x_impliedZeroSubtrahend</name></expr>)</condition><then> <block>{
            <return>return <expr>(<call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> &lt; 2)</expr>;</return>
        }</block></then></if>

        <return>return <expr>((<call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call> &lt; 2) 
                || (<call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call> &lt; 2))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if the two (2) series are disjoint.
     * Disjoint series do not overlap in the domain space.
     *
     * @param x_dataset  the dataset.
     *
     * @return true if the dataset is degenerate.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>areSeriesDisjoint</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>x_dataset</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>l_minuendItemCount</name> =<init> <expr><call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_minuendFirst</name>  =<init> <expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_minuendLast</name>   =<init> <expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>l_minuendItemCount</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>l_subtrahendItemCount</name> =<init> <expr><call><name><name>x_dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_subtrahendFirst</name>  =<init> <expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>l_subtrahendLast</name>   =<init> <expr><call><name><name>x_dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr>1</expr></argument>, 
                <argument><expr><name>l_subtrahendItemCount</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr>((<name>l_minuendLast</name> &lt; <name>l_subtrahendFirst</name>) 
                || (<name>l_subtrahendLast</name> &lt; <name>l_minuendFirst</name>))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation of a polygon
     *
     * @param x_graphics  the graphics device.
     * @param x_dataArea  the area within which the data is being drawn.
     * @param x_plot  the plot (can be used to obtain standard color
     *                information etc).
     * @param x_domainAxis  the domain (horizontal) axis.
     * @param x_rangeAxis  the range (vertical) axis.
     * @param x_positive  indicates if the polygon is positive (true) or 
     *                    negative (false).
     * @param x_xValues  a linked list of the x values (expects values to be 
     *                   of type Double).
     * @param x_yValues  a linked list of the y values (expects values to be 
     *                   of type Double).
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>createPolygon</name> <parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>x_graphics</name></decl></param>,
                                <param><decl><type><name>Rectangle2D</name></type> <name>x_dataArea</name></decl></param>,
                                <param><decl><type><name>XYPlot</name></type> <name>x_plot</name></decl></param>,
                                <param><decl><type><name>ValueAxis</name></type> <name>x_domainAxis</name></decl></param>,
                                <param><decl><type><name>ValueAxis</name></type> <name>x_rangeAxis</name></decl></param>,
                                <param><decl><type><name>boolean</name></type> <name>x_positive</name></decl></param>,
                                <param><decl><type><name>LinkedList</name></type> <name>x_xValues</name></decl></param>,
                                <param><decl><type><name>LinkedList</name></type> <name>x_yValues</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>l_orientation</name>      =<init> <expr><call><name><name>x_plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>l_domainAxisLocation</name> =<init> <expr><call><name><name>x_plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>l_rangeAxisLocation</name>  =<init> <expr><call><name><name>x_plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>l_xValues</name> =<init> <expr><call><name><name>x_xValues</name>.<name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>l_yValues</name> =<init> <expr><call><name><name>x_yValues</name>.<name>toArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>GeneralPath</name></type> <name>l_path</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>PlotOrientation</name>.<name>VERTICAL</name></name> == <name>l_orientation</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>l_x</name> =<init> <expr><call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                    (<name>Double</name>) <name><name>l_xValues</name><index>[<expr>0</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                    <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_x</name> = <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>double</name></type> <name>l_y</name> =<init> <expr><call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                    (<name>Double</name>) <name><name>l_yValues</name><index>[<expr>0</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                    <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>l_path</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>l_x</name></expr></argument>, <argument><expr>(<name>float</name>) <name>l_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>l_xValues</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>l_x</name> = <call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                        (<name>Double</name>) <name><name>l_xValues</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                        <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>l_x</name> = <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name>l_y</name> = <call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                        (<name>Double</name>) <name><name>l_yValues</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                        <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_path</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>l_x</name></expr></argument>, <argument><expr>(<name>float</name>) <name>l_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>l_path</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>l_x</name> =<init> <expr><call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                    (<name>Double</name>) <name><name>l_xValues</name><index>[<expr>0</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                    <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>l_x</name> = <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>double</name></type> <name>l_y</name> =<init> <expr><call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                    (<name>Double</name>) <name><name>l_yValues</name><index>[<expr>0</expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                    <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>l_path</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>l_y</name></expr></argument>, <argument><expr>(<name>float</name>) <name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>l_xValues</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>l_x</name> = <call><name><name>x_domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                        (<name>Double</name>) <name><name>l_xValues</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                        <argument><expr><name>l_domainAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>l_x</name> = <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><name>l_y</name> = <call><name><name>x_rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr>(
                        (<name>Double</name>) <name><name>l_yValues</name><index>[<expr><name>i</name></expr>]</index></name>).<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>x_dataArea</name></expr></argument>, 
                        <argument><expr><name>l_rangeAxisLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>l_path</name>.<name>lineTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <name>l_y</name></expr></argument>, <argument><expr>(<name>float</name>) <name>l_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>l_path</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><call><name><name>l_path</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>x_dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>x_graphics</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>x_positive</name> ? <call><name>getPositivePaint</name><argument_list>()</argument_list></call> 
                    : <call><name>getNegativePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>x_graphics</name>.<name>fill</name></name><argument_list>(<argument><expr><name>l_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a default legend item for the specified series.  Subclasses 
     * should override this method to generate customised items.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>p</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>p</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>toolTipText</name> 
                            = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                                <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>lookupSeriesStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// TODO:  the following hard-coded line needs generalising</comment>
                    <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-7.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>7.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, 
                            <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYDifferenceRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>XYDifferenceRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYDifferenceRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positivePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>positivePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>negativePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapesVisible</name></name> != <name><name>that</name>.<name>shapesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>roundXCoordinates</name></name> != <name><name>that</name>.<name>roundXCoordinates</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYDifferenceRenderer</name></type> <name>clone</name> =<init> <expr>(<name>XYDifferenceRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>legendLine</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>positivePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>negativePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positivePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>negativePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
