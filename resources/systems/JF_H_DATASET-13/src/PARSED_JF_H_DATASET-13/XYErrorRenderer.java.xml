<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYErrorRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * XYErrorRenderer.java
 * --------------------
 * (C) Copyright 2006, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 25-Oct-2006 : Version 1 (DG);
 * 23-Mar-2007 : Check item visibility before drawing error bars - see bug
 *               1686178 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>IntervalXYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A line and shape renderer that can also display x and/or y-error values.  
 * This renderer expects an {@link IntervalXYDataset}, otherwise it reverts
 * to the behaviour of the super class.
 * 
 * @since 1.0.3
 */</comment>
<class><specifier>public</specifier> class <name>XYErrorRenderer</name> <super><extends>extends <name>XYLineAndShapeRenderer</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5162283570955172424L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not the x-error bars are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawXError</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not the y-error bars are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawYError</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The length of the cap at the end of the error bars. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>capLength</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint used to draw the error bars (if &lt;code&gt;null&lt;/code&gt; we use the
     * series paint).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>errorPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;XYErrorRenderer&lt;/code&gt; instance.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYErrorRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawXError</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawYError</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>errorPaint</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>capLength</name></name> = 4.0</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the renderer draws error
     * bars for the x-values.
     * 
     * @return A boolean.
     * 
     * @see #setDrawXError(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawXError</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawXError</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the renderer draws error
     * bars for the x-values and, if the flag changes, sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param draw  the flag value.
     * 
     * @see #getDrawXError()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawXError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>drawXError</name></name> != <name>draw</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>drawXError</name></name> = <name>draw</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the renderer draws error
     * bars for the y-values.
     * 
     * @return A boolean.
     * 
     * @see #setDrawYError(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawYError</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawYError</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the renderer draws error
     * bars for the y-values and, if the flag changes, sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param draw  the flag value.
     * 
     * @see #getDrawYError()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawYError</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>drawYError</name></name> != <name>draw</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>drawYError</name></name> = <name>draw</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length (in Java2D units) of the cap at the end of the error 
     * bars.
     * 
     * @return The cap length.
     * 
     * @see #setCapLength(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCapLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>capLength</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the length of the cap at the end of the error bars, and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param length  the length (in Java2D units).
     * 
     * @see #getCapLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCapLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>capLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the error bars.  If this is 
     * &lt;code&gt;null&lt;/code&gt; (the default), the item paint is used instead.
     * 
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setErrorPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getErrorPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>errorPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the error bars and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getErrorPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setErrorPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>errorPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the range required by this renderer to display all the domain
     * values in the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range, or &lt;code&gt;null&lt;/code&gt; if the dataset is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findDomainBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range required by this renderer to display all the range
     * values in the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The range, or &lt;code&gt;null&lt;/code&gt; if the dataset is 
     *     &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>findRangeBounds</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>DatasetUtilities</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the visual representation for one data item.
     * 
     * @param g2  the graphics output target.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param info  the plot rendering info.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index.
     * @param item  the item index.
     * @param crosshairState  the crosshair state.
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
            <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>pass</name> == 0 &amp;&amp; <name>dataset</name> <name>instanceof</name> <name>IntervalXYDataset</name> 
                &amp;&amp; <call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>IntervalXYDataset</name></type> <name>ixyd</name> =<init> <expr>(<name>IntervalXYDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>drawXError</name></name></expr>)</condition><then> <block>{
                <comment type="line">// draw the error bar for the x-interval</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>ixyd</name>.<name>getStartXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>ixyd</name>.<name>getEndXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>ixyd</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>xx1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>cap1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>cap2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>adj</name> =<init> <expr><name><name>this</name>.<name>capLength</name></name> / 2.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy</name> - <name>adj</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy</name> + <name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy</name> - <name>adj</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy</name> + <name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.HORIZONTAL</comment>
                    <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy</name> - <name>adj</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>yy</name> + <name>adj</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy</name> - <name>adj</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy</name> + <name>adj</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>errorPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>errorPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>cap1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>cap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>drawYError</name></name></expr>)</condition><then> <block>{
                <comment type="line">// draw the error bar for the y-interval</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>ixyd</name>.<name>getStartYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>ixyd</name>.<name>getEndYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>ixyd</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>yy0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>yy1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>cap1</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>cap2</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>adj</name> =<init> <expr><name><name>this</name>.<name>capLength</name></name> / 2.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>adj</name></expr></argument>, <argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx</name> + <name>adj</name></expr></argument>, <argument><expr><name>yy0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> - <name>adj</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>xx</name> + <name>adj</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.HORIZONTAL</comment>
                    <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap1</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx</name> - <name>adj</name></expr></argument>, <argument><expr><name>yy0</name></expr></argument>, <argument><expr><name>xx</name> + <name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cap2</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>xx</name> - <name>adj</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>xx</name> + <name>adj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>errorPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>errorPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>cap1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>cap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, 
                <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYErrorRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYErrorRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYErrorRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawXError</name></name> != <name><name>that</name>.<name>drawXError</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawYError</name></name> != <name><name>that</name>.<name>drawYError</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>capLength</name></name> != <name><name>that</name>.<name>capLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>errorPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>errorPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>errorPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>errorPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
