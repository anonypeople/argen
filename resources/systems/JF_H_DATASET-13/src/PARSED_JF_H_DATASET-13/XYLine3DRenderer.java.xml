<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYLine3DRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * XYLine3DRenderer.java
 * ---------------------
 * (C) Copyright 2005, 2007, by Object Refinery Limited.
 *
 * Original Author:  Thomas Morgner;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 14-Jan-2005 : Added standard header (DG);
 * 01-May-2007 : Fixed equals() and serialization bugs (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>Effect3D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A XYLineAndShapeRenderer that adds a shadow line to the graph
 * to emulate a 3D-effect.
 */</comment>
<class><specifier>public</specifier> class <name>XYLine3DRenderer</name> <super><extends>extends <name>XYLineAndShapeRenderer</name></extends> 
                              <implements>implements <name>Effect3D</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>588933208243446087L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default x-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_X_OFFSET</name> =<init> <expr>12.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default y-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_Y_OFFSET</name> =<init> <expr>8.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default wall paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_WALL_PAINT</name> =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>0xDD</expr></argument>, <argument><expr>0xDD</expr></argument>, <argument><expr>0xDD</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The size of x-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>xOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The size of y-offset for the 3D effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>yOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to shade the left and lower 3D wall. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>wallPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYLine3DRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <name>DEFAULT_WALL_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = <name>DEFAULT_X_OFFSET</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = <name>DEFAULT_Y_OFFSET</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the x-offset for the 3D effect.
     *
     * @return The 3D effect.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getXOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>xOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the y-offset for the 3D effect.
     *
     * @return The 3D effect.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getYOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>yOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the x-offset and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * 
     * @param xOffset  the x-offset.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setXOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>xOffset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>xOffset</name></name> = <name>xOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the y-offset and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * 
     * @param yOffset  the y-offset.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setYOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>yOffset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>yOffset</name></name> = <name>yOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to highlight the left and bottom wall in the plot
     * background.
     *
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getWallPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>wallPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to hightlight the left and bottom walls in the plot 
     * background and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param paint  the paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWallPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of passes through the data that the renderer requires 
     * in order to draw the chart.  Most charts will require a single pass, 
     * but some require two passes.
     *
     * @return The pass count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>3</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified pass involves drawing lines.
     * 
     * @param pass  the pass.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isLinePass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>pass</name> == 0 || <name>pass</name> == 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified pass involves drawing items.
     * 
     * @param pass  the pass.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isItemPass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>pass</name> == 2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified pass involves drawing shadows.
     * 
     * @param pass  the pass.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isShadowPass</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>pass</name> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overrides the method in the subclass to draw a shadow in the first pass.
     * 
     * @param g2  the graphics device.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param shape  the shape.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawFirstPassShape</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>pass</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                      <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isShadowPass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getWallPaint</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getWallPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>translate</name></name><argument_list>(<argument><expr><call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>translate</name></name><argument_list>(<argument><expr>-<call><name>getXOffset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>-<call><name>getYOffset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">// now draw the real shape</comment>
            <expr_stmt><expr><call><name><name>super</name>.<name>drawFirstPassShape</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYLine3DRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYLine3DRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYLine3DRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>xOffset</name></name> != <name><name>that</name>.<name>xOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>yOffset</name></name> != <name><name>that</name>.<name>yOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>wallPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>wallPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>wallPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>wallPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
