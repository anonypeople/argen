<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYLineAndShapeRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * XYLineAndShapeRenderer.java
 * ---------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 27-Jan-2004 : Version 1 (DG);
 * 10-Feb-2004 : Minor change to drawItem() method to make cut-and-paste 
 *               overriding easier (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 25-Aug-2004 : Added support for chart entities (required for tooltips) (DG);
 * 24-Sep-2004 : Added flag to allow whole series to be drawn as a path 
 *               (necessary when using a dashed stroke with many data 
 *               items) (DG);
 * 04-Oct-2004 : Renamed BooleanUtils --&gt; BooleanUtilities (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 27-Jan-2005 : The getLegendItem() method now omits hidden series (DG);
 * 28-Jan-2005 : Added new constructor (DG);
 * 09-Mar-2005 : Added fillPaint settings (DG);
 * 20-Apr-2005 : Use generators for legend tooltips and URLs (DG);
 * 22-Jul-2005 : Renamed defaultLinesVisible --&gt; baseLinesVisible, 
 *               defaultShapesVisible --&gt; baseShapesVisible and
 *               defaultShapesFilled --&gt; baseShapesFilled (DG);
 * 29-Jul-2005 : Added code to draw item labels (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Jul-2006 : Set dataset and series indices in LegendItem (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 21-Feb-2007 : Fixed bugs in clone() and equals() (DG);
 * 20-Apr-2007 : Updated getLegendItem() for renderer change (DG);
 * 18-May-2007 : Set dataset and seriesKey for LegendItem (DG);
 * 08-Jun-2007 : Fix for bug 1731912 where entities are created even for data
 *               items that are not displayed (DG);
 * 26-Oct-2007 : Deprecated override attributes (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>BooleanUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A renderer that connects data points with lines and/or draws shapes at each
 * data point.  This renderer is designed for use with the {@link XYPlot} 
 * class.
 */</comment>
<class><specifier>public</specifier> class <name>XYLineAndShapeRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                                    <implements>implements <name>XYItemRenderer</name>, 
                                               <name>Cloneable</name>,
                                               <name>PublicCloneable</name>,
                                               <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7435246895986425885L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not lines are visible for ALL series. 
     * 
     * @deprecated As of 1.0.7.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>linesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A table of flags that control (per series) whether or not lines are 
     * visible. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BooleanList</name></type> <name>seriesLinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value returned by the getLinesVisible() method. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>baseLinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The shape that is used to represent a line in the legend. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendLine</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not shapes are visible for ALL series.
     * 
     * @deprecated As of 1.0.7.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>shapesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A table of flags that control (per series) whether or not shapes are 
     * visible. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BooleanList</name></type> <name>seriesShapesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value returned by the getShapeVisible() method. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>baseShapesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not shapes are filled for ALL series. 
     * 
     * @deprecated As of 1.0.7.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Boolean</name></type> <name>shapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A table of flags that control (per series) whether or not shapes are 
     * filled. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>BooleanList</name></type> <name>seriesShapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value returned by the getShapeFilled() method. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>baseShapesFilled</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether outlines are drawn for shapes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawOutlines</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the fill paint is used for filling 
     * shapes. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useFillPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the outline paint is used for drawing shape 
     * outlines. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useOutlinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not each series is drawn as a single 
     * path. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawSeriesLineAsPath</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new renderer with both lines and shapes visible.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYLineAndShapeRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer.
     * 
     * @param lines  lines visible?
     * @param shapes  shapes visible?
     */</comment>
    <constructor><specifier>public</specifier> <name>XYLineAndShapeRenderer</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>lines</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>shapes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>linesVisible</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesLinesVisible</name></name> = new <call><name>BooleanList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseLinesVisible</name></name> = <name>lines</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-7.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>7.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesShapesVisible</name></name> = new <call><name>BooleanList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesVisible</name></name> = <name>shapes</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>shapesFilled</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>useFillPaint</name></name> = false</expr>;</expr_stmt>     <comment type="line">// use item paint for fills by default</comment>
        <expr_stmt><expr><name><name>this</name>.<name>seriesShapesFilled</name></name> = new <call><name>BooleanList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesFilled</name></name> = true</expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>drawOutlines</name></name> = true</expr>;</expr_stmt>     
        <expr_stmt><expr><name><name>this</name>.<name>useOutlinePaint</name></name> = false</expr>;</expr_stmt>  <comment type="line">// use item paint for outlines by </comment>
                                       <comment type="line">// default, not outline paint</comment>
        
        <expr_stmt><expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not each series is drawn as a 
     * single path.
     * 
     * @return A boolean.
     * 
     * @see #setDrawSeriesLineAsPath(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawSeriesLineAsPath</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not each series is drawn as a 
     * single path and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #getDrawSeriesLineAsPath()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawSeriesLineAsPath</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of passes through the data that the renderer requires 
     * in order to draw the chart.  Most charts will require a single pass, but 
     * some require two passes.
     * 
     * @return The pass count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>2</expr>;</return>
    }</block></function>
    
    <comment type="line">// LINES VISIBLE</comment>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shape for an item is 
     * visible.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getItemLineVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Boolean</name></type> <name>flag</name> =<init> <expr><name><name>this</name>.<name>linesVisible</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flag</name> = <call><name>getSeriesLinesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>flag</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>flag</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>baseLinesVisible</name></name></expr>;</return>   
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not lines are drawn for ALL 
     * series.  If this flag is &lt;code&gt;null&lt;/code&gt;, then the "per series" 
     * settings will apply.
     * 
     * @return A flag (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLinesVisible(Boolean)
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getLinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>linesVisible</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that controls whether or not lines are drawn between the 
     * items in ALL series, and sends a {@link RendererChangeEvent} to all 
     * registered listeners.  You need to set this to &lt;code&gt;null&lt;/code&gt; if you 
     * want the "per series" settings to apply.
     *
     * @param visible  the flag (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLinesVisible()
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLinesVisible</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>linesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not lines are drawn between the 
     * items in ALL series, and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     *
     * @param visible  the flag.
     * 
     * @see #getLinesVisible()
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// we use BooleanUtilities here to preserve JRE 1.3.1 compatibility</comment>
        <expr_stmt><expr><call><name>setLinesVisible</name><argument_list>(<argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the lines for a series 
     * are visible.
     *
     * @param series  the series index (zero-based).
     *
     * @return The flag (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeriesLinesVisible(int, Boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getSeriesLinesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesLinesVisible</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'lines visible' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSeriesLinesVisible(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesLinesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesLinesVisible</name>.<name>setBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'lines visible' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param visible  the flag.
     * 
     * @see #getSeriesLinesVisible(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesLinesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSeriesLinesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the base 'lines visible' attribute.
     *
     * @return The base flag.
     * 
     * @see #setBaseLinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBaseLinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseLinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base 'lines visible' flag and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getBaseLinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseLinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseLinesVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the shape used to represent a line in the legend.
     * 
     * @return The legend line (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLine(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shape used as a line in each legend item and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendLine()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLine</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>line</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'line' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <name>line</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// SHAPES VISIBLE</comment>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shape for an item is
     * visible.
     * &lt;p&gt;
     * The default implementation passes control to the 
     * &lt;code&gt;getSeriesShapesVisible&lt;/code&gt; method. You can override this method
     * if you require different behaviour.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getItemShapeVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Boolean</name></type> <name>flag</name> =<init> <expr><name><name>this</name>.<name>shapesVisible</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flag</name> = <call><name>getSeriesShapesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>flag</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>flag</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>baseShapesVisible</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether the shapes are visible for the 
     * items in ALL series.
     * 
     * @return The flag (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setShapesVisible(Boolean)
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getShapesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapesVisible</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the 'shapes visible' for ALL series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param visible  the flag (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getShapesVisible()
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesVisible</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes visible' for ALL series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param visible  the flag.
     * 
     * @see #getShapesVisible()
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setShapesVisible</name><argument_list>(<argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shapes for a series
     * are visible.
     *
     * @param series  the series index (zero-based).
     *
     * @return A boolean.
     * 
     * @see #setSeriesShapesVisible(int, Boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getSeriesShapesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesShapesVisible</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes visible' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param visible  the flag.
     * 
     * @see #getSeriesShapesVisible(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesShapesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSeriesShapesVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>visible</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the 'shapes visible' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag.
     * 
     * @see #getSeriesShapesVisible(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesShapesVisible</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesShapesVisible</name>.<name>setBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base 'shape visible' attribute.
     *
     * @return The base flag.
     * 
     * @see #setBaseShapesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBaseShapesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseShapesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base 'shapes visible' flag and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getBaseShapesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseShapesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// SHAPES FILLED</comment>

    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shape for an item 
     * is filled.
     * &lt;p&gt;
     * The default implementation passes control to the 
     * &lt;code&gt;getSeriesShapesFilled&lt;/code&gt; method. You can override this method
     * if you require different behaviour.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getItemShapeFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Boolean</name></type> <name>flag</name> =<init> <expr><name><name>this</name>.<name>shapesFilled</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>flag</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flag</name> = <call><name>getSeriesShapesFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>flag</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>flag</name>.<name>booleanValue</name></name><argument_list>()</argument_list></call></expr>;</return>   
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>baseShapesFilled</name></name></expr>;</return>   
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the 'shapes filled' for ALL series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param filled  the flag.
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setShapesFilled</name><argument_list>(<argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>filled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes filled' for ALL series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param filled  the flag (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @deprecated As of 1.0.7, use the per-series and base level settings.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesFilled</name><parameter_list>(<param><decl><type><name>Boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesFilled</name></name> = <name>filled</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag used to control whether or not the shapes for a series
     * are filled.
     *
     * @param series  the series index (zero-based).
     *
     * @return A boolean.
     * 
     * @see #setSeriesShapesFilled(int, Boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>Boolean</name></type> <name>getSeriesShapesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>getBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes filled' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag.
     * 
     * @see #getSeriesShapesFilled(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesShapesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSeriesShapesFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>BooleanUtilities</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'shapes filled' flag for a series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag.
     * 
     * @see #getSeriesShapesFilled(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesShapesFilled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>setBoolean</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base 'shape filled' attribute.
     *
     * @return The base flag.
     * 
     * @see #setBaseShapesFilled(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getBaseShapesFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseShapesFilled</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base 'shapes filled' flag and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #getBaseShapesFilled()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseShapesFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseShapesFilled</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if outlines should be drawn for shapes, and 
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     * 
     * @see #setDrawOutlines(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawOutlines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawOutlines</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether outlines are drawn for 
     * shapes, and sends a {@link RendererChangeEvent} to all registered 
     * listeners. 
     * &lt;P&gt;
     * In some cases, shapes look better if they do NOT have an outline, but 
     * this flag allows you to set your own preference.
     * 
     * @param flag  the flag.
     * 
     * @see #getDrawOutlines()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawOutlines</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawOutlines</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer should use the fill paint 
     * setting to fill shapes, and &lt;code&gt;false&lt;/code&gt; if it should just
     * use the regular paint.
     * &lt;p&gt;
     * Refer to &lt;code&gt;XYLineAndShapeRendererDemo2.java&lt;/code&gt; to see the
     * effect of this flag.
     * 
     * @return A boolean.
     * 
     * @see #setUseFillPaint(boolean)
     * @see #getUseOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseFillPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>useFillPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the fill paint is used to fill 
     * shapes, and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #getUseFillPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseFillPaint</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>useFillPaint</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the renderer should use the outline paint 
     * setting to draw shape outlines, and &lt;code&gt;false&lt;/code&gt; if it should just
     * use the regular paint.
     * 
     * @return A boolean.
     * 
     * @see #setUseOutlinePaint(boolean)
     * @see #getUseFillPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>useOutlinePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the outline paint is used to draw 
     * shape outlines, and sends a {@link RendererChangeEvent} to all 
     * registered listeners.
     * &lt;p&gt;
     * Refer to &lt;code&gt;XYLineAndShapeRendererDemo2.java&lt;/code&gt; to see the
     * effect of this flag.
     * 
     * @param flag  the flag.
     * 
     * @see #getUseOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseOutlinePaint</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>useOutlinePaint</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Records the state for the renderer.  This is used to preserve state 
     * information between calls to the drawItem() method for a single chart 
     * drawing.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>State</name> <super><extends>extends <name>XYItemRendererState</name></extends></super> <block>{
        
        <comment type="javadoc">/** The path for the current series. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>GeneralPath</name></type> <name>seriesPath</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** 
         * A flag that indicates if the last (x, y) point was 'good' 
         * (non-null). 
         */</comment>
        <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>lastPointGood</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/**
         * Creates a new state instance.
         * 
         * @param info  the plot rendering info.
         */</comment>
        <constructor><specifier>public</specifier> <name>State</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        
        <comment type="javadoc">/**
         * Returns a flag that indicates if the last point drawn (in the 
         * current series) was 'good' (non-null).
         * 
         * @return A boolean.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isLastPointGood</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>lastPointGood</name></name></expr>;</return>
        }</block></function>
        
        <comment type="javadoc">/**
         * Sets a flag that indicates if the last point drawn (in the current 
         * series) was 'good' (non-null).
         * 
         * @param good  the flag.
         */</comment>
        <function><type><specifier>public</specifier> <name>void</name></type> <name>setLastPointGood</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>good</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>lastPointGood</name></name> = <name>good</name></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
    
    <comment type="javadoc">/**
     * Initialises the renderer.
     * &lt;P&gt;
     * This method will be called before the first item is rendered, giving the
     * renderer an opportunity to initialise any state information it wants to 
     * maintain.  The renderer can do nothing if it chooses.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>State</name></type> <name>state</name> =<init> <expr>new <call><name>State</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>state</name>.<name>seriesPath</name></name> = new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// do nothing if item is not visible</comment>
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>

        <comment type="line">// first pass draws the background (lines, for instance)</comment>
        <if>if <condition>(<expr><call><name>isLinePass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>item</name> == 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>State</name></type> <name>s</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name>.<name>lastPointGood</name></name> = false</expr>;</expr_stmt>     
                }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr><call><name>getItemLineVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>drawPrimaryLineAsPath</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, 
                            <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>drawPrimaryLine</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, 
                            <argument><expr><name>item</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then>
        <comment type="line">// second pass adds shapes where the items are ..</comment>
        <else>else <if>if <condition>(<expr><call><name>isItemPass</name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// setup for collecting optional entity info...</comment>
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>drawSecondaryPass</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, 
                    <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified pass is the one for drawing 
     * lines.
     * 
     * @param pass  the pass.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isLinePass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>pass</name> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the specified pass is the one for drawing 
     * items.
     * 
     * @param pass  the pass.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>protected</specifier> <name>boolean</name></type> <name>isItemPass</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>pass</name> == 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the item (first pass). This method draws the lines
     * connecting the items.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawPrimaryLine</name><parameter_list>(<param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                                   <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                   <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                   <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>pass</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                                   <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                   <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                                   <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>item</name> == 0</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// only draw if we have good values</comment>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>)</argument_list></call>
            || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><call><name><name>state</name>.<name>workingLine</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawFirstPassShape</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>state</name>.<name>workingLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the first pass shape.
     * 
     * @param g2  the graphics device.
     * @param pass  the pass.
     * @param series  the series index.
     * @param item  the item index.
     * @param shape  the shape.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawFirstPassShape</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="javadoc">/**
     * Draws the item (first pass). This method draws the lines
     * connecting the items. Instead of drawing separate lines,
     * a GeneralPath is constructed and drawn at the end of
     * the series painting.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param dataset  the dataset.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataArea  the area within which the data is being drawn.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawPrimaryLineAsPath</name><parameter_list>(<param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                                         <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>,
                                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{


        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>State</name></type> <name>s</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// update path to reflect latest point</comment>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <name>transX1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr>(<name>float</name>) <name>transY1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>x</name> = (<name>float</name>) <name>transY1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = (<name>float</name>) <name>transX1</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>s</name>.<name>isLastPointGood</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>s</name>.<name>setLastPointGood</name></name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>s</name>.<name>setLastPointGood</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// if this is the last item, draw the path ...</comment>
        <if>if <condition>(<expr><name>item</name> == <call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr>)</condition><then> <block>{
            <comment type="line">// draw path</comment>
            <expr_stmt><expr><call><name>drawFirstPassShape</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>s</name>.<name>seriesPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the item shapes and adds chart entities (second pass). This method 
     * draws the shapes which mark the item positions. If &lt;code&gt;entities&lt;/code&gt; 
     * is not &lt;code&gt;null&lt;/code&gt; it will be populated with entity information
     * for points that fall within the data area.
     *
     * @param g2  the graphics device.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param dataArea  the area within which the data is being drawn.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  the crosshair state.
     * @param entities the entity collection.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawSecondaryPass</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                                     <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>pass</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                                     <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                                     <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                     <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
                                     <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                                     <param><decl><type><name>EntityCollection</name></type> <name>entities</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Shape</name></type> <name>entityArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>getItemShapeVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>getItemShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, 
                        <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, 
                        <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name>entityArea</name> = <name>shape</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>shape</name>.<name>intersects</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getItemShapeFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>this</name>.<name>useFillPaint</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemFillPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>this</name>.<name>drawOutlines</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>getUseOutlinePaint</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getItemOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><name>transX1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><name>transY1</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xx</name> = <name>transY1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>yy</name> = <name>transX1</name></expr>;</expr_stmt>
        }</block></then></if>          

        <comment type="line">// draw the item label if there is one...</comment>
        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr>(<name>y1</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add an entity for the item, but only if it falls within the data</comment>
        <comment type="line">// area...</comment>
        <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addEntity</name><argument_list>(<argument><expr><name>entities</name></expr></argument>, <argument><expr><name>entityArea</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>


    <comment type="javadoc">/**
     * Returns a legend item for the specified series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItem</name></type> <name>getLegendItem</name><parameter_list>(<param><decl><type><name>int</name></type> <name>datasetIndex</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>LegendItem</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name>getLegendItemLabelGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                        <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>toolTipText</name> = <call><name>getLegendItemToolTipGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>urlText</name> = <call><name>getLegendItemURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateLabel</name><argument_list>(
                            <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>boolean</name></type> <name>shapeIsVisible</name> =<init> <expr><call><name>getItemShapeVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>lookupSeriesShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>shapeIsFilled</name> =<init> <expr><call><name>getItemShapeFilled</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>fillPaint</name> =<init> <expr>(<name><name>this</name>.<name>useFillPaint</name></name> 
                    ? <call><name>lookupSeriesFillPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> 
                    : <call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>shapeOutlineVisible</name> =<init> <expr><name><name>this</name>.<name>drawOutlines</name></name></expr></init></decl>;</decl_stmt>  
                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr>(<name><name>this</name>.<name>useOutlinePaint</name></name> 
                    ? <call><name>lookupSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> 
                    : <call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>lineVisible</name> =<init> <expr><call><name>getItemLineVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>lineStroke</name> =<init> <expr><call><name>lookupSeriesStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>linePaint</name> =<init> <expr><call><name>lookupSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>toolTipText</name></expr></argument>, 
                        <argument><expr><name>urlText</name></expr></argument>, <argument><expr><name>shapeIsVisible</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>shapeIsFilled</name></expr></argument>, 
                        <argument><expr><name>fillPaint</name></expr></argument>, <argument><expr><name>shapeOutlineVisible</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, 
                        <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>lineVisible</name></expr></argument>, <argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, 
                        <argument><expr><name>lineStroke</name></expr></argument>, <argument><expr><name>linePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesKey</name></name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setSeriesIndex</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>setDatasetIndex</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if the clone cannot be created.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>XYLineAndShapeRenderer</name></type> <name>clone</name> =<init> <expr>(<name>XYLineAndShapeRenderer</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesLinesVisible</name></name> 
                = (<name>BooleanList</name>) <call><name><name>this</name>.<name>seriesLinesVisible</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>legendLine</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>legendLine</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesShapesVisible</name></name> 
                = (<name>BooleanList</name>) <call><name><name>this</name>.<name>seriesShapesVisible</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesShapesFilled</name></name> 
                = (<name>BooleanList</name>) <call><name><name>this</name>.<name>seriesShapesFilled</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYLineAndShapeRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYLineAndShapeRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYLineAndShapeRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>linesVisible</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>linesVisible</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>seriesLinesVisible</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>seriesLinesVisible</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseLinesVisible</name></name> != <name><name>that</name>.<name>baseLinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendLine</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapesVisible</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapesVisible</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>seriesShapesVisible</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>seriesShapesVisible</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseShapesVisible</name></name> != <name><name>that</name>.<name>baseShapesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapesFilled</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapesFilled</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>seriesShapesFilled</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>seriesShapesFilled</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseShapesFilled</name></name> != <name><name>that</name>.<name>baseShapesFilled</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawOutlines</name></name> != <name><name>that</name>.<name>drawOutlines</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useOutlinePaint</name></name> != <name><name>that</name>.<name>useOutlinePaint</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useFillPaint</name></name> != <name><name>that</name>.<name>useFillPaint</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawSeriesLineAsPath</name></name> != <name><name>that</name>.<name>drawSeriesLineAsPath</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLine</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLine</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  
}</block></class>
</unit>
