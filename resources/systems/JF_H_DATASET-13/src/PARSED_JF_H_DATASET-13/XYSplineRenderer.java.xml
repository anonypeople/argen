<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYSplineRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------
 * XYSplineRenderer.java
 * ---------------------
 * (C) Copyright 2007, by Klaus Rheinwald and Contributors.
 *
 * Original Author:  Klaus Rheinwald;
 * Contributor(s):   Tobias von Petersdorff (tvp@math.umd.edu, 
 *                       http://www.wam.umd.edu/~petersd/);
 *                   David Gilbert (for Object Refinery Limited);
 *
 * Changes:
 * --------
 * 25-Jul-2007 : Version 1, contributed by Klaus Rheinwald (DG);
 * 03-Aug-2007 : Added new constructor (KR);
 * 25-Oct-2007 : Prevent duplicate control points (KR);
 *
 */</comment>


<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Vector</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>


<comment type="javadoc">/**
 * A renderer that connects data points with natural cubic splines and/or 
 * draws shapes at each data point.  This renderer is designed for use with 
 * the {@link XYPlot} class.
 * 
 * @since 1.0.7
 */</comment>
<class><specifier>public</specifier> class <name>XYSplineRenderer</name> <super><extends>extends <name>XYLineAndShapeRenderer</name></extends></super> <block>{

    <comment type="javadoc">/**
     * To collect data points for later splining.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Vector</name></type> <name>points</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Resolution of splines (number of line segments between points)
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>precision</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new instance with the 'precision' attribute defaulting to 
     * 5.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYSplineRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new renderer with the specified precision.
     * 
     * @param precision  the number of points between data items.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYSplineRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>precision</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>precision</name> &lt;= 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires precision &gt; 0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>precision</name></name> = <name>precision</name></expr>;</expr_stmt>
    }</block></constructor>    
    
    <comment type="javadoc">/**
     * Get the resolution of splines.
     *
     * @return Number of line segments between points.
     * 
     * @see #setPrecision(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPrecision</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>precision</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Set the resolution of splines and sends a {@link RendererChangeEvent}
     * to all registered listeners.
     *
     * @param p  number of line segments between points (must be &gt; 0).
     * 
     * @see #getPrecision()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPrecision</name><parameter_list>(<param><decl><type><name>int</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>p</name> &lt;= 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires p &gt; 0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>precision</name></name> = <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer.
     * &lt;P&gt;
     * This method will be called before the first item is rendered, giving the
     * renderer an opportunity to initialise any state information it wants to
     * maintain.  The renderer can do nothing if it chooses.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to
     *              the caller.
     *
     * @return The renderer state.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>State</name></type> <name>state</name> =<init> <expr>(<name>State</name>) <call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>points</name></name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDrawSeriesLineAsPath</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the item (first pass). This method draws the lines
     * connecting the items. Instead of drawing separate lines,
     * a GeneralPath is constructed and drawn at the end of
     * the series painting.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param plot  the plot (can be used to obtain standard color information
     *              etc).
     * @param dataset  the dataset.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataArea  the area within which the data is being drawn.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawPrimaryLineAsPath</name><parameter_list>(<param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>, 
            <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>pass</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// get the data points</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// collect points</comment>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ControlPoint</name></type> <name>p</name> =<init> <expr>new <call><name>ControlPoint</name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> 
                                == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name> ? (<name>float</name>) <name>transY1</name> 
                                : (<name>float</name>) <name>transX1</name></expr></argument>, <argument><expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> 
                                == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name> ? (<name>float</name>) <name>transX1</name> 
                                        : (<name>float</name>) <name>transY1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>points</name>.<name>contains</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>points</name>.<name>add</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>item</name> == <call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>State</name></type> <name>s</name> =<init> <expr>(<name>State</name>) <name>state</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// construct path</comment>
            <if>if <condition>(<expr><call><name><name>this</name>.<name>points</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
                <comment type="line">// we need at least two points to draw something</comment>
                <decl_stmt><decl><type><name>ControlPoint</name></type> <name>cp0</name> =<init> <expr>(<name>ControlPoint</name>) <call><name><name>this</name>.<name>points</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name><name>cp0</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>cp0</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>this</name>.<name>points</name>.<name>size</name></name><argument_list>()</argument_list></call> == 2</expr>)</condition><then> <block>{
                    <comment type="line">// we need at least 3 points to spline. Draw simple line </comment>
                    <comment type="line">// for two points</comment>
                    <decl_stmt><decl><type><name>ControlPoint</name></type> <name>cp1</name> =<init> <expr>(<name>ControlPoint</name>) <call><name><name>this</name>.<name>points</name>.<name>get</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name><name>cp1</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>cp1</name>.<name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <comment type="line">// construct spline</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>np</name> =<init> <expr><call><name><name>this</name>.<name>points</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// number of points</comment>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>d</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// Newton form coefficients</comment>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// x-coordinates of nodes</comment>
                    <decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>oldy</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>oldt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>a</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t1</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>t2</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>h</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>np</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>ControlPoint</name></type> <name>cpi</name> =<init> <expr>(<name>ControlPoint</name>) <call><name><name>this</name>.<name>points</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>cpi</name>.<name>x</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>cpi</name>.<name>y</name></name></expr>;</expr_stmt>
                    }</block></for>

                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>np</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>x</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</expr_stmt>
                    }</block></for>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>sub</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>diag</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name><index>[]</index></type> <name>sup</name> =<init> <expr>new <name><name>float</name><index>[<expr><name>np</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>np</name> - 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <expr_stmt><expr><name><name>diag</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> + <name><name>h</name><index>[<expr><name>i</name> + 1</expr>]</index></name>) / 3</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>sup</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>h</name><index>[<expr><name>i</name> + 1</expr>]</index></name> / 6</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> / 6</expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>d</name><index>[<expr><name>i</name> + 1</expr>]</index></name> - <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name>) / <name><name>h</name><index>[<expr><name>i</name> + 1</expr>]</index></name> 
                                   - (<name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>d</name><index>[<expr><name>i</name> - 1</expr>]</index></name>) / <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name>solveTridiag</name><argument_list>(<argument><expr><name>sub</name></expr></argument>, <argument><expr><name>diag</name></expr></argument>, <argument><expr><name>sup</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>np</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// note that a[0]=a[np-1]=0</comment>
                    <comment type="line">// draw</comment>
                    <expr_stmt><expr><name>oldt</name> = <name><name>x</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>oldy</name> = <name><name>d</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>moveTo</name></name><argument_list>(<argument><expr><name>oldt</name></expr></argument>, <argument><expr><name>oldy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>np</name> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <comment type="line">// loop over intervals between nodes</comment>
                        <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>j</name> &lt;= <name><name>this</name>.<name>precision</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><name>t1</name> = (<name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> * <name>j</name>) / <name><name>this</name>.<name>precision</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>t2</name> = <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> - <name>t1</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>y</name> = ((-<name><name>a</name><index>[<expr><name>i</name> - 1</expr>]</index></name> / 6 * (<name>t2</name> + <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name>) * <name>t1</name> + <name><name>d</name><index>[<expr><name>i</name> - 1</expr>]</index></name>) 
                                    * <name>t2</name> + (-<name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> / 6 * (<name>t1</name> + <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name>) * <name>t2</name> 
                                    + <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name>) * <name>t1</name>) / <name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>t</name> = <name><name>x</name><index>[<expr><name>i</name> - 1</expr>]</index></name> + <name>t1</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>s</name>.<name>seriesPath</name>.<name>lineTo</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>oldt</name> = <name>t</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>oldy</name> = <name>y</name></expr>;</expr_stmt>
                        }</block></for>
                    }</block></for>
                }</block></else></if>
                <comment type="line">// draw path</comment>
                <expr_stmt><expr><call><name>drawFirstPassShape</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name><name>s</name>.<name>seriesPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// reset points vector</comment>
            <expr_stmt><expr><name><name>this</name>.<name>points</name></name> = new <call><name>Vector</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Document me!
     * 
     * @param sub
     * @param diag
     * @param sup
     * @param b
     * @param n
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>solveTridiag</name><parameter_list>(<param><decl><type><name><name>float</name><index>[]</index></name></type> <name>sub</name></decl></param>, <param><decl><type><name><name>float</name><index>[]</index></name></type> <name>diag</name></decl></param>, <param><decl><type><name><name>float</name><index>[]</index></name></type> <name>sup</name></decl></param>, 
            <param><decl><type><name><name>float</name><index>[]</index></name></type> <name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list> <block>{
<comment type="block">/*      solve linear system with tridiagonal n by n matrix a
        using Gaussian elimination *without* pivoting
        where   a(i,i-1) = sub[i]  for 2&lt;=i&lt;=n
        a(i,i)   = diag[i] for 1&lt;=i&lt;=n
        a(i,i+1) = sup[i]  for 1&lt;=i&lt;=n-1
        (the values sub[1], sup[n] are ignored)
        right hand side vector b[1:n] is overwritten with solution
        NOTE: 1...n is used in all arrays, 0 is unused */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<comment type="block">/*                  factorization and forward substitution */</comment>
        <for>for (<init><expr><name>i</name> = 2</expr>;</init> <condition><expr><name>i</name> &lt;= <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name> / <name><name>diag</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>diag</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>diag</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name> * <name><name>sup</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>sub</name><index>[<expr><name>i</name></expr>]</index></name> * <name><name>b</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> = <name><name>b</name><index>[<expr><name>n</name></expr>]</index></name> / <name><name>diag</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = <name>n</name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 1</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
            <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> = (<name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> - <name><name>sup</name><index>[<expr><name>i</name></expr>]</index></name> * <name><name>b</name><index>[<expr><name>i</name> + 1</expr>]</index></name>) / <name><name>diag</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYSplineRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYSplineRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYSplineRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>precision</name></name> != <name><name>that</name>.<name>precision</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Represents a control point.
     */</comment>
    <class>class <name>ControlPoint</name> <block>{
        
        <comment type="javadoc">/** The x-coordinate. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>float</name></type> <name>x</name></decl>;</decl_stmt>
        
        <comment type="javadoc">/** The y-coordinate. */</comment>
        <decl_stmt><decl><type><specifier>public</specifier> <name>float</name></type> <name>y</name></decl>;</decl_stmt>

        <comment type="javadoc">/**
         * Creates a new control point.
         * 
         * @param x  the x-coordinate.
         * @param y  the y-coordinate.
         */</comment>
        <constructor><specifier>public</specifier> <name>ControlPoint</name><parameter_list>(<param><decl><type><name>float</name></type> <name>x</name></decl></param>, <param><decl><type><name>float</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>x</name></name> = <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>y</name></name> = <name>y</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="javadoc">/**
         * Tests this point for equality with an arbitrary object.
         * 
         * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted.
         * 
         * @return A boolean.
         */</comment>
        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ControlPoint</name>)</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>ControlPoint</name></type> <name>that</name> =<init> <expr>(<name>ControlPoint</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>x</name></name> != <name><name>that</name>.<name>x</name></name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <comment type="block">/*&amp;&amp; y == ((ControlPoint) obj).y*/</comment><empty_stmt>;</empty_stmt>
            <return>return <expr>true</expr>;</return>
        }</block></function>

    }</block></class>
}</block></class>
</unit>
