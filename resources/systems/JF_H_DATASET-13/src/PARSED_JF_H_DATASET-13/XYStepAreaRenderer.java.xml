<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYStepAreaRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------
 * XYStepAreaRenderer.java
 * -----------------------
 * (C) Copyright 2003-2007, by Matthias Rose and Contributors.
 *
 * Original Author:  Matthias Rose (based on XYAreaRenderer.java);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes:
 * --------
 * 07-Oct-2003 : Version 1, contributed by Matthias Rose (DG);
 * 10-Feb-2004 : Added some getter and setter methods (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed 
 *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 11-Nov-2004 : Now uses ShapeUtilities to translate shapes (DG);
 * 06-Jul-2005 : Renamed get/setPlotShapes() --&gt; get/setShapesVisible() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Jul-2006 : Modified to call dataset methods that return double 
 *               primitives only (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 * 14-Feb-2007 : Added equals() method override (DG);
 * 04-May-2007 : Set processVisibleItemsOnly flag to false (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>XYItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A step chart renderer that fills the area between the step and the x-axis.
 */</comment>
<class><specifier>public</specifier> class <name>XYStepAreaRenderer</name> <super><extends>extends <name>AbstractXYItemRenderer</name></extends> 
                                <implements>implements <name>XYItemRenderer</name>, 
                                           <name>Cloneable</name>,
                                           <name>PublicCloneable</name>,
                                           <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7311560779702649635L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Useful constant for specifying the type of rendering (shapes only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SHAPES</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Useful constant for specifying the type of rendering (area only). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AREA</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Useful constant for specifying the type of rendering (area and shapes). 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AREA_AND_SHAPES</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not shapes are drawn at each XY point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not shapes are filled for ALL series. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>shapesFilled</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag indicating whether or not Area are drawn at each XY point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>plotArea</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the outline is shown. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showOutline</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Area of the complete series */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>transient</name> <name>Polygon</name></type> <name>pArea</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The value on the range axis which defines the 'lower' border of the 
     * area. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rangeBase</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYStepAreaRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>AREA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     *
     * @param type  the type of the renderer.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYStepAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer.
     * &lt;p&gt;
     * To specify the type of renderer, use one of the constants:
     * AREA, SHAPES or AREA_AND_SHAPES.
     *
     * @param type  the type of renderer.
     * @param toolTipGenerator  the tool tip generator to use 
     *                          (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYStepAreaRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>,
                              <param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>, 
                              <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr><name>toolTipGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setURLGenerator</name><argument_list>(<argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>type</name> == <name>AREA</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>type</name> == <name>SHAPES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = true</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>type</name> == <name>AREA_AND_SHAPES</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = true</expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
        <expr_stmt><expr><name><name>this</name>.<name>showOutline</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not outlines of the areas are 
     * drawn.
     *
     * @return The flag.
     * 
     * @see #setOutline(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isOutline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>showOutline</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not outlines of the areas are 
     * drawn, and sends a {@link RendererChangeEvent} to all registered 
     * listeners.
     *
     * @param show  the flag.
     * 
     * @see #isOutline()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutline</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>show</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showOutline</name></name> = <name>show</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if shapes are being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if shapes are being plotted by the renderer.
     * 
     * @see #setShapesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getShapesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapesVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not shapes are displayed for each 
     * data item, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #getShapesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the shapes are filled.
     * 
     * @return A boolean.
     * 
     * @see #setShapesFilled(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isShapesFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shapesFilled</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the 'shapes filled' for ALL series and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param filled  the flag.
     * 
     * @see #isShapesFilled()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShapesFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>filled</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shapesFilled</name></name> = <name>filled</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if Area is being plotted by the renderer.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if Area is being plotted by the renderer.
     * 
     * @see #setPlotArea(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getPlotArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotArea</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not areas are drawn for each data 
     * item and sends a {@link RendererChangeEvent} to all registered 
     * listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #getPlotArea()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlotArea</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the value on the range axis which defines the 'lower' border of
     * the area.
     *
     * @return &lt;code&gt;double&lt;/code&gt; the value on the range axis which defines 
     *         the 'lower' border of the area.
     *         
     * @see #setRangeBase(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeBase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeBase</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value on the range axis which defines the default border of the 
     * area, and sends a {@link RendererChangeEvent} to all registered 
     * listeners.  E.g. setRangeBase(Double.NEGATIVE_INFINITY) lets areas always
     * reach the lower border of the plotArea. 
     * 
     * @param val  the value on the range axis which defines the default border
     *             of the area.
     *             
     * @see #getRangeBase()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeBase</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rangeBase</name></name> = <name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fireChangeEvent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the renderer.  Here we calculate the Java2D y-coordinate for
     * zero, since all the bars have their bases fixed at zero.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param plot  the plot.
     * @param data  the data.
     * @param info  an optional info collection object to return data back to 
     *              the caller.
     *
     * @return The number of passes required by the renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRendererState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                                          <param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>,
                                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        
        <decl_stmt><decl><type><name>XYItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, 
                <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// disable visible items optimisation - it doesn't work for this</comment>
        <comment type="line">// renderer...</comment>
        <expr_stmt><expr><call><name><name>state</name>.<name>setProcessVisibleItemsOnly</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>

    }</block></function>


    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information 
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>,
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{
                             
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// Get the item count for the series, so that we can know which is the </comment>
        <comment type="line">// end of the series.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>itemCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>seriesStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name>x1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call> ? <call><name>getRangeBase</name><argument_list>()</argument_list></call> : <name>y1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                                          
        <comment type="line">// avoid possible sun.dc.pr.PRException: endPath: bad path</comment>
        <expr_stmt><expr><name>transY1</name> = <call><name>restrictValueToDataArea</name><argument_list>(<argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         

        <if>if <condition>(<expr><name><name>this</name>.<name>pArea</name></name> == <name>null</name> &amp;&amp; !<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

            <comment type="line">// Create a new Area for the series</comment>
            <expr_stmt><expr><name><name>this</name>.<name>pArea</name></name> = new <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
            <comment type="line">// start from Y = rangeBase</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name>getRangeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
            <comment type="line">// avoid possible sun.dc.pr.PRException: endPath: bad path</comment>
            <expr_stmt><expr><name>transY2</name> = <call><name>restrictValueToDataArea</name><argument_list>(<argument><expr><name>transY2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         
        
            <comment type="line">// The first point is (x, this.baseYValue)</comment>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name>restrictValueToDataArea</name><argument_list>(<argument><expr><call><name>getRangeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>plot</name></expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>item</name> &gt; 0</expr>)</condition><then> <block>{
            <comment type="line">// get the previous data point...</comment>
            <expr_stmt><expr><name>x0</name> = <call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y0</name> = <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call> ? <name>y1</name> : <call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>x</name> = <name>x0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> = <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call> ? <call><name>getRangeBase</name><argument_list>()</argument_list></call> : <name>y0</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>transX0</name> = <call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>transY0</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// avoid possible sun.dc.pr.PRException: endPath: bad path</comment>
            <expr_stmt><expr><name>transY0</name> = <call><name>restrictValueToDataArea</name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        
            <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// NULL value -&gt; insert point on base line</comment>
                <comment type="line">// instead of 'step point'</comment>
                <expr_stmt><expr><name>transX1</name> = <name>transX0</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>transY0</name> = <name>transY1</name></expr>;</expr_stmt>          
            }</block></then></if>
            <if>if <condition>(<expr><name>transY0</name> != <name>transY1</name></expr>)</condition><then> <block>{
                <comment type="line">// not just a horizontal bar but need to perform a 'step'.</comment>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY0</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></then></if>
        }</block></then></if>           

        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Add each point to Area (x, y)</comment>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if>if <condition>(<expr><call><name>getShapesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shape</name> = <call><name>getItemShape</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, 
                            <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = <call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>, 
                            <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <if>if <condition>(<expr><call><name>isShapesFilled</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>   
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>shape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>   
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transX1</name> - 2</expr></argument>, <argument><expr><name>transY1</name> - 2</expr></argument>, 
                            <argument><expr>4.0</expr></argument>, <argument><expr>4.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>shape</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transY1</name> - 2</expr></argument>, <argument><expr><name>transX1</name> - 2</expr></argument>, 
                            <argument><expr>4.0</expr></argument>, <argument><expr>4.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// Check if the item is the last item for the series or if it</comment>
        <comment type="line">// is a NULL value and number of items &gt; 0.  We can't draw an area for </comment>
        <comment type="line">// a single point.</comment>
        <if>if <condition>(<expr><call><name>getPlotArea</name><argument_list>()</argument_list></call> &amp;&amp; <name>item</name> &gt; 0 &amp;&amp; <name><name>this</name>.<name>pArea</name></name> != <name>null</name> 
                          &amp;&amp; (<name>item</name> == (<name>itemCount</name> - 1) || <call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>double</name></type> <name>transY2</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name>getRangeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// avoid possible sun.dc.pr.PRException: endPath: bad path</comment>
            <expr_stmt><expr><name>transY2</name> = <call><name>restrictValueToDataArea</name><argument_list>(<argument><expr><name>transY2</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         

            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <comment type="line">// Add the last point (x,0)</comment>
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <comment type="line">// Add the last point (x,0)</comment>
                <expr_stmt><expr><call><name><name>this</name>.<name>pArea</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>transY2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <comment type="line">// fill the polygon</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>pArea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw an outline around the Area.</comment>
            <if>if <condition>(<expr><call><name>isOutline</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getOutlineStroke</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>pArea</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// start new area when needed (see above)</comment>
            <expr_stmt><expr><name><name>this</name>.<name>pArea</name></name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// do we need to update the crosshair values?</comment>
        <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                    <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name> &amp;&amp; <name>shape</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>XYToolTipGenerator</name></type> <name>generator</name> 
                    =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>generator</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tip</name> = <call><name><name>generator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>url</name> = <call><name>getURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>XYItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>XYItemEntity</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, 
                        <argument><expr><name>item</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this renderer for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{    
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYStepAreaRenderer</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYStepAreaRenderer</name></type> <name>that</name> =<init> <expr>(<name>XYStepAreaRenderer</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>showOutline</name></name> != <name><name>that</name>.<name>showOutline</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapesVisible</name></name> != <name><name>that</name>.<name>shapesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapesFilled</name></name> != <name><name>that</name>.<name>shapesFilled</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotArea</name></name> != <name><name>that</name>.<name>plotArea</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeBase</name></name> != <name><name>that</name>.<name>rangeBase</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Helper method which returns a value if it lies
     * inside the visible dataArea and otherwise the corresponding
     * coordinate on the border of the dataArea. The PlotOrientation
     * is taken into account. 
     * Useful to avoid possible sun.dc.pr.PRException: endPath: bad path
     * which occurs when trying to draw lines/shapes which in large part
     * lie outside of the visible dataArea.
     * 
     * @param value the value which shall be 
     * @param dataArea  the area within which the data is being drawn.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @return &lt;code&gt;double&lt;/code&gt; value inside the data area.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>double</name></type> <name>restrictValueToDataArea</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, 
                                                    <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                                                    <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <if>if <condition>(<expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call> ==  <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>       
        <if>if <condition>(<expr><name>value</name> &lt; <name>min</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <name>min</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>value</name> &gt; <name>max</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <name>max</name></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
