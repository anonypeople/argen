<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-13\src\XYStepRenderer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * XYStepRenderer.java
 * -------------------
 * (C) Copyright 2002-2007, by Roger Studner and Contributors.
 *
 * Original Author:  Roger Studner;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Matthias Rose;
 *                   Gerald Struck (fix for bug 1569094);
 *
 * Changes
 * -------
 * 13-May-2002 : Version 1, contributed by Roger Studner (DG);
 * 25-Jun-2002 : Updated import statements (DG);
 * 22-Jul-2002 : Added check for null data items (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 01-May-2003 : Modified drawItem() method signature (DG);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 28-Oct-2003 : Added tooltips, code contributed by Matthias Rose 
 *               (RFE 824857) (DG);
 * 10-Feb-2004 : Removed working line (use line from state object instead) (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState.  Renamed 
 *               XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 19-Jan-2005 : Now accesses only primitives from dataset (DG);
 * 15-Mar-2005 : Fix silly bug in drawItem() method (DG);
 * 19-Sep-2005 : Extend XYLineAndShapeRenderer (fixes legend shapes), added 
 *               support for series visibility, and use getDefaultEntityRadius()
 *               for entity hotspot size (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 15-Jun-2006 : Added basic support for item labels (DG);
 * 11-Oct-2006 : Fixed rendering with horizontal orientation (see bug 1569094),
 *               thanks to Gerald Struck (DG);
 * 06-Feb-2007 : Fixed bug 1086307, crosshairs with multiple axes (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>XYItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>XYToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CrosshairState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>XYPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>XYURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * Line/Step item renderer for an {@link XYPlot}.  This class draws lines 
 * between data points, only allowing horizontal or vertical lines (steps).
 */</comment>
<class><specifier>public</specifier> class <name>XYStepRenderer</name> <super><extends>extends <name>XYLineAndShapeRenderer</name></extends> 
                            <implements>implements <name>XYItemRenderer</name>, 
                                       <name>Cloneable</name>,
                                       <name>PublicCloneable</name>,
                                       <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8918141928884796108L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs a new renderer with no tooltip or URL generation.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYStepRenderer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new renderer with the specified tool tip and URL 
     * generators.
     *
     * @param toolTipGenerator  the item label generator (&lt;code&gt;null&lt;/code&gt; 
     *     permitted).
     * @param urlGenerator  the URL generator (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYStepRenderer</name><parameter_list>(<param><decl><type><name>XYToolTipGenerator</name></type> <name>toolTipGenerator</name></decl></param>,
                          <param><decl><type><name>XYURLGenerator</name></type> <name>urlGenerator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBaseToolTipGenerator</name><argument_list>(<argument><expr><name>toolTipGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setURLGenerator</name><argument_list>(<argument><expr><name>urlGenerator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setShapesVisible</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color 
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the vertical axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot 
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param pass  the pass index (ignored here).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                         <param><decl><type><name>XYItemRendererState</name></type> <name>state</name></decl></param>,
                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                         <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                         <param><decl><type><name>XYPlot</name></type> <name>plot</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, 
                         <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                         <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>item</name></decl></param>,
                         <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>, 
                         <param><decl><type><name>int</name></type> <name>pass</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// do nothing if item is not visible</comment>
        <if>if <condition>(<expr>!<call><name>getItemVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Paint</name></type> <name>seriesPaint</name> =<init> <expr><call><name>getItemPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>seriesStroke</name> =<init> <expr><call><name>getItemStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>seriesPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>seriesStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get the data point...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisLocation</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisEdge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transX1</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>transY1</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y1</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>item</name> &gt; 0</expr>)</condition><then> <block>{
            <comment type="line">// get the previous data point...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>transX0</name> =<init> <expr><call><name><name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>xAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>transY0</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>yAxisLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name><name>state</name>.<name>workingLine</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>transY0</name> == <name>transY1</name></expr>)</condition><then> <block>{ <comment type="line">//this represents the situation </comment>
                                              <comment type="line">// for drawing a horizontal bar.</comment>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{  <comment type="line">//this handles the need to perform a 'step'.</comment>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>transY0</name> == <name>transY1</name></expr>)</condition><then> <block>{ <comment type="line">// this represents the situation </comment>
                                              <comment type="line">// for drawing a horizontal bar.</comment>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{  <comment type="line">//this handles the need to perform a 'step'.</comment>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX0</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>line</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY0</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if></else></if>

            }</block></then></if>
        }</block></then></if>

        <comment type="line">// draw the item label if there is one...</comment>
        <if>if <condition>(<expr><call><name>isItemLabelVisible</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><name>transX1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><name>transY1</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xx</name> = <name>transY1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>yy</name> = <name>transX1</name></expr>;</expr_stmt>
            }</block></then></if>          
            <expr_stmt><expr><call><name>drawItemLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr>(<name>y1</name> &lt; 0.0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisIndex</name> =<init> <expr><call><name><name>plot</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>updateCrosshairValues</name><argument_list>(<argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>domainAxisIndex</name></expr></argument>, 
                <argument><expr><name>rangeAxisIndex</name></expr></argument>, <argument><expr><name>transX1</name></expr></argument>, <argument><expr><name>transY1</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// collect entity and tool tip information...</comment>
        <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>getDefaultEntityRadius</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name>
                    ? new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transX1</name> - <name>r</name></expr></argument>, <argument><expr><name>transY1</name> - <name>r</name></expr></argument>, <argument><expr>2 * <name>r</name></expr></argument>, 
                            <argument><expr>2 * <name>r</name></expr></argument>)</argument_list></call>
                    : new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>transY1</name> - <name>r</name></expr></argument>, <argument><expr><name>transX1</name> - <name>r</name></expr></argument>, <argument><expr>2 * <name>r</name></expr></argument>, 
                            <argument><expr>2 * <name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>           
                <if>if <condition>(<expr><name>shape</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>XYToolTipGenerator</name></type> <name>generator</name> 
                        =<init> <expr><call><name>getToolTipGenerator</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>generator</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>tip</name> = <call><name><name>generator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>url</name> = <call><name>getURLGenerator</name><argument_list>()</argument_list></call>.<call><name>generateURL</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, 
                                <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>XYItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>XYItemEntity</name><argument_list>(<argument><expr><name>shape</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, 
                            <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the renderer.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the renderer cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
