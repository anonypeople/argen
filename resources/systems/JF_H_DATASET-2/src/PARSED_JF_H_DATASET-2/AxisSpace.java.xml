<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\AxisSpace.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * AxisSpace.java
 * --------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Jul-2003 : Version 1 (DG);
 * 14-Aug-2003 : Implemented Cloneable (DG);
 * 18-Aug-2003 : Implemented Serializable (DG);
 * 17-Mar-2004 : Added a toString() method for debugging (DG);
 * 07-Jan-2005 : Updated equals() method (DG);
 * 11-Jan-2005 : Removed deprecated methods in preparation for 1.0.0 
 *               release (DG);
 * 
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A record that contains the space required at each edge of a plot.
 */</comment>
<class><specifier>public</specifier> class <name>AxisSpace</name> <super><implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-2490732595134766305L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The top space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>top</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The bottom space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>bottom</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The left space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>left</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The right space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>right</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new axis space record.
     */</comment>
    <constructor><specifier>public</specifier> <name>AxisSpace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>top</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bottom</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = 0.0</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the space reserved for axes at the top of the plot area.
     * 
     * @return The space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTop</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>top</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the space reserved for axes at the top of the plot area. 
     * 
     * @param space  the space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTop</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>top</name></name> = <name>space</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the space reserved for axes at the bottom of the plot area.
     * 
     * @return The space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBottom</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>bottom</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the space reserved for axes at the bottom of the plot area. 
     * 
     * @param space  the space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBottom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>bottom</name></name> = <name>space</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the space reserved for axes at the left of the plot area.
     * 
     * @return The space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLeft</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>left</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the space reserved for axes at the left of the plot area. 
     * 
     * @param space  the space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLeft</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = <name>space</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the space reserved for axes at the right of the plot area.
     * 
     * @return The space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>right</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the space reserved for axes at the right of the plot area. 
     * 
     * @param space  the space (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = <name>space</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds space to the top, bottom, left or right edge of the plot area.
     * 
     * @param space  the space (in Java2D units).
     * @param edge  the edge (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>edge</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'edge' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{     
            <expr_stmt><expr><name><name>this</name>.<name>top</name></name> += <name>space</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>bottom</name></name> += <name>space</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>left</name></name> += <name>space</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>right</name></name> += <name>space</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Unrecognised 'edge' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Ensures that this object reserves at least as much space as another.
     * 
     * @param space  the other space.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureAtLeast</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>top</name></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>top</name></name></expr></argument>, <argument><expr><name><name>space</name>.<name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bottom</name></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bottom</name></name></expr></argument>, <argument><expr><name><name>space</name>.<name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>space</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>right</name></name></expr></argument>, <argument><expr><name><name>space</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Ensures there is a minimum amount of space at the edge corresponding to 
     * the specified axis location.
     * 
     * @param space  the space.
     * @param edge  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>ensureAtLeast</name><parameter_list>(<param><decl><type><name>double</name></type> <name>space</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>top</name></name> &lt; <name>space</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>top</name></name> = <name>space</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>bottom</name></name> &lt; <name>space</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>bottom</name></name> = <name>space</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>left</name></name> &lt; <name>space</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>left</name></name> = <name>space</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>right</name></name> &lt; <name>space</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>right</name></name> = <name>space</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(
                <argument><expr>"AxisSpace.ensureAtLeast(): unrecognised AxisLocation."</expr></argument>
            )</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Shrinks an area by the space attributes.
     * 
     * @param area  the area to shrink.
     * @param result  an optional carrier for the result.
     * 
     * @return The result.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>shrink</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>result</name>.<name>setRect</name></name><argument_list>(
            <argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>left</name></name></expr></argument>, 
            <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>top</name></name></expr></argument>,
            <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>left</name></name> - <name><name>this</name>.<name>right</name></name></expr></argument>,
            <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>top</name></name> - <name><name>this</name>.<name>bottom</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Expands an area by the amount of space represented by this object.
     * 
     * @param area  the area to expand.
     * @param result  an optional carrier for the result.
     * 
     * @return The result.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>expand</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>result</name>.<name>setRect</name></name><argument_list>(
            <argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>left</name></name></expr></argument>, 
            <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>top</name></name></expr></argument>,
            <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>left</name></name> + <name><name>this</name>.<name>right</name></name></expr></argument>,
            <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>top</name></name> + <name><name>this</name>.<name>bottom</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the reserved area.
     * 
     * @param area  the area.
     * @param edge  the edge.
     * 
     * @return The reserved area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>reserved</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>top</name></name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>top</name></name></expr></argument>,
                <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>bottom</name></name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>left</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>right</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>this</name>.<name>right</name></name></expr></argument>, <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the object.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException This class won't throw this exception,
     *         but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with another object.
     * 
     * @param obj  the object to compare against.
     * 
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{       
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>AxisSpace</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>that</name> =<init> <expr>(<name>AxisSpace</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>top</name></name> != <name><name>that</name>.<name>top</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>   
        <if>if <condition>(<expr><name><name>this</name>.<name>bottom</name></name> != <name><name>that</name>.<name>bottom</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>left</name></name> != <name><name>that</name>.<name>left</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>right</name></name> != <name><name>that</name>.<name>right</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>23</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>l</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>l</name> ^ (<name>l</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>l</name> ^ (<name>l</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>l</name> ^ (<name>l</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>l</name> ^ (<name>l</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string representing the object (for debugging purposes).
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "[left=" + <name><name>this</name>.<name>left</name></name> + ",right=" + <name><name>this</name>.<name>right</name></name> 
                    + ",top=" + <name><name>this</name>.<name>top</name></name> + ",bottom=" + <name><name>this</name>.<name>bottom</name></name> + "]"</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
