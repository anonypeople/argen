<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\CategoryAxis3D.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2006, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * CategoryAxis3D.java
 * -------------------
 * (C) Copyright 2003-2006, by Klaus Rheinwald and Contributors.
 *
 * Original Author:  Klaus Rheinwald;
 * Contributor(s):   Tin Luu,
 *                   David Gilbert (for Object Refinery Limited);
 *                   Adriaan Joubert;
 *
 * Changes
 * -------
 * 19-Feb-2003 : File creation;
 * 21-Mar-2003 : Added to JFreeChart CVS, see bug id 685501 for code 
 *               contribution from KR (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 13-May-2003 : Renamed HorizontalCategoryAxis3D --&gt; CategoryAxis3D, and 
 *               modified to take into account the plot orientation (DG);
 * 14-Aug-2003 : Implemented Cloneable (DG);
 * 21-Aug-2003 : Fixed draw() method bugs (DG);
 * 22-Mar-2004 : Added workaround for bug 920959 (null pointer exception with 
 *               no renderer) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 18-Aug-2006 : Fix for bug drawing category labels, thanks to Adriaan
 *               Joubert (1277726) (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>Effect3D</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name>.<name>CategoryItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>

<comment type="javadoc">/**
 * An axis that displays categories and has a 3D effect.
 * Used for bar charts and line charts.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryAxis3D</name> <super><extends>extends <name>CategoryAxis</name></extends> 
                            <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4114732251353700972L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new axis.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryAxis3D</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new axis using default attribute values.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryAxis3D</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location.
     * @param plotArea  the area within which the axis should be drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area within which the plot is being drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the location of the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot (&lt;code&gt;null&lt;/code&gt;
     *                   permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the axis is not visible, don't draw it...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="line">// calculate the adjusted data area taking into account the 3D effect...</comment>
        <comment type="line">// this assumes that there is a 3D renderer, all this 3D effect is a </comment>
        <comment type="line">// bit of an ugly hack...</comment>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot</name> =<init> <expr>(<name>CategoryPlot</name>) <call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjustedDataArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>plot</name>.<name>getRenderer</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>Effect3D</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Effect3D</name></type> <name>e3D</name> =<init> <expr>(<name>Effect3D</name>) <call><name><name>plot</name>.<name>getRenderer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedX</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedY</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedW</name> =<init> <expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name><name>e3D</name>.<name>getXOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedH</name> =<init> <expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name><name>e3D</name>.<name>getYOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>adjustedY</name> += <call><name><name>e3D</name>.<name>getYOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>adjustedX</name> += <call><name><name>e3D</name>.<name>getXOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><call><name><name>adjustedDataArea</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>adjustedX</name></expr></argument>, <argument><expr><name>adjustedY</name></expr></argument>, <argument><expr><name>adjustedW</name></expr></argument>, 
                    <argument><expr><name>adjustedH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>adjustedDataArea</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></else></if>

        <comment type="line">// draw the category labels and axis label</comment>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>state</name> = <call><name>drawCategoryLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>adjustedDataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, 
                <argument><expr><name>state</name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>state</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the Java 2D coordinate for a category.
     * 
     * @param anchor  the anchor point.
     * @param category  the category index.
     * @param categoryCount  the category count.
     * @param area  the data area.
     * @param edge  the location of the axis.
     * 
     * @return The coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCategoryJava2DCoordinate</name><parameter_list>(<param><decl><type><name>CategoryAnchor</name></type> <name>anchor</name></decl></param>, 
                                              <param><decl><type><name>int</name></type> <name>category</name></decl></param>, 
                                              <param><decl><type><name>int</name></type> <name>categoryCount</name></decl></param>, 
                                              <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
    
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjustedArea</name> =<init> <expr><name>area</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>plot</name> =<init> <expr>(<name>CategoryPlot</name>) <call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name> =<init> <expr><call><name><name>plot</name>.<name>getRenderer</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>renderer</name> <name>instanceof</name> <name>Effect3D</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Effect3D</name></type> <name>e3D</name> =<init> <expr>(<name>Effect3D</name>) <name>renderer</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedX</name> =<init> <expr><call><name><name>area</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedY</name> =<init> <expr><call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedW</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name><name>e3D</name>.<name>getXOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>adjustedH</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <call><name><name>e3D</name>.<name>getYOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>adjustedY</name> += <call><name><name>e3D</name>.<name>getYOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name> || <name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>adjustedX</name> += <call><name><name>e3D</name>.<name>getXOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name>adjustedArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>adjustedX</name></expr></argument>, <argument><expr><name>adjustedY</name></expr></argument>, 
                    <argument><expr><name>adjustedW</name></expr></argument>, <argument><expr><name>adjustedH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>START</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryStart</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>adjustedArea</name></expr></argument>, 
                    <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryMiddle</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>adjustedArea</name></expr></argument>, 
                    <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>anchor</name> == <name><name>CategoryAnchor</name>.<name>END</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getCategoryEnd</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>categoryCount</name></expr></argument>, <argument><expr><name>adjustedArea</name></expr></argument>, 
                    <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
                                                      
    }</block></function>
                                              
    <comment type="javadoc">/**
     * Returns a clone of the axis.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException If the axis is not cloneable for 
     *         some reason.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
