<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\CategoryLabelPositions.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * CategoryLabelPositions.java
 * ---------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 06-Jan-2004 : Version 1 (DG);
 * 17-Feb-2004 : Added equals() method (DG);
 * 05-Nov-2004 : Adjusted settings for UP_90 and DOWN_90 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlockAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>

<comment type="javadoc">/**
 * Records the label positions for a category axis.  Instances of this class 
 * are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryLabelPositions</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-8999557901920364580L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** STANDARD category label positions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CategoryLabelPositions</name></type> 
        <name>STANDARD</name> =<init> <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// TOP</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// BOTTOM</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// LEFT</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument> <comment type="line">// RIGHT</comment>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** UP_90 category label positions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CategoryLabelPositions</name></type> 
        <name>UP_90</name> =<init> <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr></argument>, <argument><expr>-<name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// TOP</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, <argument><expr>-<name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// BOTTOM</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>, <argument><expr>-<name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>CATEGORY</name></name></expr></argument>, <argument><expr>0.9f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// LEFT</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, <argument><expr>-<name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>CATEGORY</name></name></expr></argument>, <argument><expr>0.90f</expr></argument>
            )</argument_list></call></expr></argument> <comment type="line">// RIGHT</comment>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** DOWN_90 category label positions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CategoryLabelPositions</name></type> 
        <name>DOWN_90</name> =<init> <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr></argument>, <argument><expr><name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// TOP</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>CENTER_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr></argument>, <argument><expr><name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.30f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// BOTTOM</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>, <argument><expr><name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>CATEGORY</name></name></expr></argument>, <argument><expr>0.90f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// LEFT</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>, <argument><expr><name><name>Math</name>.<name>PI</name></name> / 2.0</expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>CATEGORY</name></name></expr></argument>, <argument><expr>0.90f</expr></argument>
            )</argument_list></call></expr></argument> <comment type="line">// RIGHT</comment>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** UP_45 category label positions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CategoryLabelPositions</name></type> <name>UP_45</name> 
        =<init> <expr><call><name>createUpRotationLabelPositions</name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> / 4.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** DOWN_45 category label positions. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>CategoryLabelPositions</name></type> <name>DOWN_45</name> 
        =<init> <expr><call><name>createDownRotationLabelPositions</name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> / 4.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance where the category labels angled upwards by the 
     * specified amount.
     * 
     * @param angle  the rotation angle (should be &lt; Math.PI / 2.0).
     * 
     * @return A category label position specification.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>createUpRotationLabelPositions</name><parameter_list>(
            <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_LEFT</name></name></expr></argument>, <argument><expr>-<name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// TOP</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_RIGHT</name></name></expr></argument>, <argument><expr>-<name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// BOTTOM</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_RIGHT</name></name></expr></argument>, <argument><expr>-<name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// LEFT</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>, <argument><expr>-<name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument> <comment type="line">// RIGHT</comment>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a new instance where the category labels angled downwards by the
     * specified amount.
     * 
     * @param angle  the rotation angle (should be &lt; Math.PI / 2.0).
     * 
     * @return A category label position specification.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>createDownRotationLabelPositions</name><parameter_list>(
            <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_RIGHT</name></name></expr></argument>, <argument><expr><name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// TOP</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_LEFT</name></name></expr></argument>, <argument><expr><name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// BOTTOM</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>TOP_RIGHT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_RIGHT</name></name></expr></argument>, <argument><expr><name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument>, <comment type="line">// LEFT</comment>
            <argument><expr>new <call><name>CategoryLabelPosition</name><argument_list>(
                <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name><name>TextBlockAnchor</name>.<name>BOTTOM_LEFT</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_LEFT</name></name></expr></argument>, <argument><expr><name>angle</name></expr></argument>,
                <argument><expr><name><name>CategoryLabelWidthType</name>.<name>RANGE</name></name></expr></argument>, <argument><expr>0.50f</expr></argument>
            )</argument_list></call></expr></argument> <comment type="line">// RIGHT</comment>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/** 
     * The label positioning details used when an axis is at the top of a 
     * chart. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryLabelPosition</name></type> <name>positionForAxisAtTop</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The label positioning details used when an axis is at the bottom of a 
     * chart. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryLabelPosition</name></type> <name>positionForAxisAtBottom</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The label positioning details used when an axis is at the left of a 
     * chart. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryLabelPosition</name></type> <name>positionForAxisAtLeft</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The label positioning details used when an axis is at the right of a 
     * chart. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryLabelPosition</name></type> <name>positionForAxisAtRight</name></decl>;</decl_stmt>
 
    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryLabelPositions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtTop</name></name> = new <call><name>CategoryLabelPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtBottom</name></name> = new <call><name>CategoryLabelPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtLeft</name></name> = new <call><name>CategoryLabelPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtRight</name></name> = new <call><name>CategoryLabelPosition</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new position specification.
     * 
     * @param top  the label position info used when an axis is at the top 
     *             (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param bottom  the label position info used when an axis is at the 
     *                bottom (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param left  the label position info used when an axis is at the left 
     *              (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param right  the label position info used when an axis is at the right 
     *               (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryLabelPositions</name><parameter_list>(<param><decl><type><name>CategoryLabelPosition</name></type> <name>top</name></decl></param>,
                                  <param><decl><type><name>CategoryLabelPosition</name></type> <name>bottom</name></decl></param>,
                                  <param><decl><type><name>CategoryLabelPosition</name></type> <name>left</name></decl></param>,
                                  <param><decl><type><name>CategoryLabelPosition</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>top</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'top' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>bottom</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'bottom' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>left</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'left' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>right</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'right' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtTop</name></name> = <name>top</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtBottom</name></name> = <name>bottom</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtLeft</name></name> = <name>left</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>positionForAxisAtRight</name></name> = <name>right</name></expr>;</expr_stmt>
    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the category label position specification for an axis at the 
     * given location.
     * 
     * @param edge  the axis location.
     * 
     * @return The category label position specification.
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryLabelPosition</name></type> <name>getLabelPosition</name><parameter_list>(<param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryLabelPosition</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>positionForAxisAtTop</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>positionForAxisAtBottom</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>positionForAxisAtLeft</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>positionForAxisAtRight</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a new instance based on an existing instance but with the top 
     * position changed.
     * 
     * @param base  the base (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param top  the top position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new instance (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>replaceTopPosition</name><parameter_list>(
            <param><decl><type><name>CategoryLabelPositions</name></type> <name>base</name></decl></param>, <param><decl><type><name>CategoryLabelPosition</name></type> <name>top</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>top</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'top' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr><name>top</name></expr></argument>, 
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a new instance based on an existing instance but with the bottom
     * position changed.
     * 
     * @param base  the base (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param bottom  the bottom position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new instance (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>replaceBottomPosition</name><parameter_list>(
            <param><decl><type><name>CategoryLabelPositions</name></type> <name>base</name></decl></param>, <param><decl><type><name>CategoryLabelPosition</name></type> <name>bottom</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>bottom</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'bottom' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>bottom</name></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a new instance based on an existing instance but with the left 
     * position changed.
     * 
     * @param base  the base (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param left  the left position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new instance (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>replaceLeftPosition</name><parameter_list>(
            <param><decl><type><name>CategoryLabelPositions</name></type> <name>base</name></decl></param>, <param><decl><type><name>CategoryLabelPosition</name></type> <name>left</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>left</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'left' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>left</name></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a new instance based on an existing instance but with the right 
     * position changed.
     * 
     * @param base  the base (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param right  the right position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A new instance (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>CategoryLabelPositions</name></type> <name>replaceRightPosition</name><parameter_list>(
            <param><decl><type><name>CategoryLabelPositions</name></type> <name>base</name></decl></param>, <param><decl><type><name>CategoryLabelPosition</name></type> <name>right</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>base</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'base' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>right</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'right' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <return>return <expr>new <call><name>CategoryLabelPositions</name><argument_list>(
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>base</name>.<name>getLabelPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>right</name></expr></argument>
        )</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this object is equal to the specified 
     * object, and &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryLabelPositions</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryLabelPositions</name></type> <name>that</name> =<init> <expr>(<name>CategoryLabelPositions</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>positionForAxisAtTop</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>positionForAxisAtTop</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>positionForAxisAtBottom</name>.<name>equals</name></name><argument_list>(
                <argument><expr><name><name>that</name>.<name>positionForAxisAtBottom</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>positionForAxisAtLeft</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>positionForAxisAtLeft</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>positionForAxisAtRight</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>positionForAxisAtRight</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
  
        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>19</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>positionForAxisAtTop</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>positionForAxisAtBottom</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>positionForAxisAtLeft</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>positionForAxisAtRight</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
