<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\CategoryTick.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * CategoryTick.java
 * -----------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 07-Nov-2003 : Version 1 (DG);
 * 13-May-2004 : Added equals() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlock</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlockAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A tick for a {@link CategoryAxis}.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryTick</name> <super><extends>extends <name>Tick</name></extends></super> <block>{

    <comment type="javadoc">/** The category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>category</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextBlock</name></type> <name>label</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextBlockAnchor</name></type> <name>labelAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new tick.
     * 
     * @param category  the category.
     * @param label  the label.
     * @param labelAnchor  the label anchor.
     * @param rotationAnchor  the rotation anchor.
     * @param angle  the rotation angle (in radians).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryTick</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>,
                        <param><decl><type><name>TextBlock</name></type> <name>label</name></decl></param>,
                        <param><decl><type><name>TextBlockAnchor</name></type> <name>labelAnchor</name></decl></param>,
                        <param><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name></decl></param>,
                        <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
                            
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>category</name></name> = <name>category</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelAnchor</name></name> = <name>labelAnchor</name></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the category.
     * 
     * @return The category.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>category</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label.
     * 
     * @return The label.
     */</comment>
    <function><type><specifier>public</specifier> <name>TextBlock</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>label</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label anchor.
     * 
     * @return The label anchor.
     */</comment>
    <function><type><specifier>public</specifier> <name>TextBlockAnchor</name></type> <name>getLabelAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this category tick for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>CategoryTick</name> &amp;&amp; <call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CategoryTick</name></type> <name>that</name> =<init> <expr>(<name>CategoryTick</name>) <name>obj</name></expr></init></decl>;</decl_stmt>   
            <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>category</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>category</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>label</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelAnchor</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
           }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>41</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>category</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>label</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>labelAnchor</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
