<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\DateTickUnit.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * DateTickUnit.java
 * -----------------
 * (C) Copyright 2000-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Chris Boek;
 *
 * Changes
 * -------
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 27-Nov-2002 : Added IllegalArgumentException to getMillisecondCount() 
 *               method (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 12-Nov-2003 : Added roll fields that can improve the labelling on segmented 
 *               date axes (DG);
 * 03-Dec-2003 : DateFormat constructor argument is now filled with an default 
 *               if null (TM);
 * 07-Dec-2003 : Fixed bug (null pointer exception) in constructor (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 21-Mar-2007 : Added toString() for debugging (DG);
 * 04-Apr-2007 : Added new methods addToDate(Date, TimeZone) and rollDate(Date, 
 *               TimeZone) (CB);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A tick unit for use by subclasses of {@link DateAxis}. Instances of this 
 * class are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>DateTickUnit</name> <super><extends>extends <name>TickUnit</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7289292157229621901L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A constant for years. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>YEAR</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for months. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MONTH</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for days. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DAY</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for hours. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>HOUR</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for minutes. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MINUTE</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for seconds. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>SECOND</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for milliseconds. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MILLISECOND</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The unit. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>unit</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The unit count. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The roll unit. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>rollUnit</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The roll count. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>rollCount</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The date formatter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>formatter</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new date tick unit.  The dates will be formatted using a 
     * SHORT format for the default locale.
     *
     * @param unit  the unit.
     * @param count  the unit count.
     */</comment>
    <constructor><specifier>public</specifier> <name>DateTickUnit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>unit</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new date tick unit.  You can specify the units using one of 
     * the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND.  
     * In addition, you can specify a unit count, and a date format.
     *
     * @param unit  the unit.
     * @param count  the unit count.
     * @param formatter  the date formatter (defaults to DateFormat.SHORT).
     */</comment>
    <constructor><specifier>public</specifier> <name>DateTickUnit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>unit</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>, <param><decl><type><name>DateFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>formatter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new unit.
     *
     * @param unit  the unit.
     * @param count  the count.
     * @param rollUnit  the roll unit.
     * @param rollCount  the roll count.
     * @param formatter  the date formatter (defaults to DateFormat.SHORT).
     */</comment>
    <constructor><specifier>public</specifier> <name>DateTickUnit</name><parameter_list>(<param><decl><type><name>int</name></type> <name>unit</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>, <param><decl><type><name>int</name></type> <name>rollUnit</name></decl></param>, <param><decl><type><name>int</name></type> <name>rollCount</name></decl></param>, 
                        <param><decl><type><name>DateFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>DateTickUnit</name>.<name>getMillisecondCount</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>unit</name></name> = <name>unit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>count</name></name> = <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rollUnit</name></name> = <name>rollUnit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rollCount</name></name> = <name>rollCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>formatter</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>formatter</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>formatter</name></name> = <call><name><name>DateFormat</name>.<name>getDateInstance</name></name><argument_list>(<argument><expr><name><name>DateFormat</name>.<name>SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the date unit.  This will be one of the constants 
     * &lt;code&gt;YEAR&lt;/code&gt;, &lt;code&gt;MONTH&lt;/code&gt;, &lt;code&gt;DAY&lt;/code&gt;, 
     * &lt;code&gt;HOUR&lt;/code&gt;, &lt;code&gt;MINUTE&lt;/code&gt;, &lt;code&gt;SECOND&lt;/code&gt; or 
     * &lt;code&gt;MILLISECOND&lt;/code&gt;, defined by this class.  Note that these 
     * constants do NOT correspond to those defined in Java's 
     * &lt;code&gt;Calendar&lt;/code&gt; class.
     *
     * @return The date unit.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUnit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>unit</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the unit count.
     *
     * @return The unit count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>count</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the roll unit.  This is the amount by which the tick advances if
     * it is "hidden" when displayed on a segmented date axis.  Typically the 
     * roll will be smaller than the regular tick unit (for example, a 7 day 
     * tick unit might use a 1 day roll).
     *
     * @return The roll unit.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRollUnit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rollUnit</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the roll count.
     *
     * @return The roll count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRollCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rollCount</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Formats a value.
     *
     * @param milliseconds  date in milliseconds since 01-01-1970.
     *
     * @return The formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>valueToString</name><parameter_list>(<param><decl><type><name>double</name></type> <name>milliseconds</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <name>milliseconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Formats a date using the tick unit's formatter.
     *
     * @param date  the date.
     *
     * @return The formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>dateToString</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates a new date by adding this unit to the base date.
     *
     * @param base  the base date.
     *
     * @return A new date one unit after the base date.
     * 
     * @see #addToDate(Date, TimeZone)
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>addToDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getCalendarField</name><argument_list>(<argument><expr><name><name>this</name>.<name>unit</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates a new date by adding this unit to the base date.
     *
     * @param base  the base date.
     * @param zone  the time zone for the date calculation.
     *
     * @return A new date one unit after the base date.
     * 
     * @since 1.0.6
     * @see #addToDate(Date)
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>addToDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>base</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getCalendarField</name><argument_list>(<argument><expr><name><name>this</name>.<name>unit</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Rolls the date forward by the amount specified by the roll unit and 
     * count.
     *
     * @param base  the base date.

     * @return The rolled date.
     * 
     * @see #rollDate(Date, TimeZone)
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>rollDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getCalendarField</name><argument_list>(<argument><expr><name><name>this</name>.<name>rollUnit</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>rollCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Rolls the date forward by the amount specified by the roll unit and 
     * count.
     *
     * @param base  the base date.
     * @param zone  the time zone.
     * 
     * @return The rolled date.
     * 
     * @since 1.0.6
     * @see #rollDate(Date)
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>rollDate</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>base</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> =<init> <expr><call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>calendar</name>.<name>add</name></name><argument_list>(<argument><expr><call><name>getCalendarField</name><argument_list>(<argument><expr><name><name>this</name>.<name>rollUnit</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>rollCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>calendar</name>.<name>getTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a field code that can be used with the &lt;code&gt;Calendar&lt;/code&gt; 
     * class.
     *
     * @return The field code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getCalendarField</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getCalendarField</name><argument_list>(<argument><expr><name><name>this</name>.<name>unit</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a field code (that can be used with the Calendar class) for a 
     * given 'unit' code.  The 'unit' is one of:  {@link #YEAR}, {@link #MONTH},
     * {@link #DAY}, {@link #HOUR}, {@link #MINUTE}, {@link #SECOND} and 
     * {@link #MILLISECOND}.
     *
     * @param tickUnit  the unit.
     *
     * @return The field code.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>getCalendarField</name><parameter_list>(<param><decl><type><name>int</name></type> <name>tickUnit</name></decl></param>)</parameter_list> <block>{

        <switch>switch <condition>(<expr><name>tickUnit</name></expr>)</condition> <block>{
            <case>case <expr>(<name>YEAR</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>YEAR</name></name></expr>;</return>
            </case><case>case <expr>(<name>MONTH</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>MONTH</name></name></expr>;</return>
            </case><case>case <expr>(<name>DAY</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>DATE</name></name></expr>;</return>
            </case><case>case <expr>(<name>HOUR</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>HOUR_OF_DAY</name></name></expr>;</return>
            </case><case>case <expr>(<name>MINUTE</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>MINUTE</name></name></expr>;</return>
            </case><case>case <expr>(<name>SECOND</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>SECOND</name></name></expr>;</return>
            </case><case>case <expr>(<name>MILLISECOND</name>)</expr>:
                <return>return <expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr>;</return>
            </case><default>default:
                <return>return <expr><name><name>Calendar</name>.<name>MILLISECOND</name></name></expr>;</return>
        </default>}</block></switch>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the (approximate) number of milliseconds for the given unit and 
     * unit count.
     * &lt;P&gt;
     * This value is an approximation some of the time (e.g. months are 
     * assumed to have 31 days) but this shouldn't matter.
     *
     * @param unit  the unit.
     * @param count  the unit count.
     *
     * @return The number of milliseconds.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>long</name></type> <name>getMillisecondCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>unit</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{

        <switch>switch <condition>(<expr><name>unit</name></expr>)</condition> <block>{
            <case>case <expr>(<name>YEAR</name>)</expr>:
                <return>return <expr>(365L * 24L * 60L * 60L * 1000L) * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>MONTH</name>)</expr>:
                <return>return <expr>(31L * 24L * 60L * 60L * 1000L) * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>DAY</name>)</expr>:
                <return>return <expr>(24L * 60L * 60L * 1000L) * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>HOUR</name>)</expr>:
                <return>return <expr>(60L * 60L * 1000L) * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>MINUTE</name>)</expr>:
                <return>return <expr>(60L * 1000L) * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>SECOND</name>)</expr>:
                <return>return <expr>1000L * <name>count</name></expr>;</return>
            </case><case>case <expr>(<name>MILLISECOND</name>)</expr>:
                <return>return <expr><name>count</name></expr>;</return>
            </case><default>default:
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"DateTickUnit.getMillisecondCount() : unit must "
                    + "be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, "
                    + "SECOND or MILLISECOND defined in the DateTickUnit "
                    + "class. Do *not* use the constants defined in "
                    + "java.util.Calendar."</expr></argument>
                )</argument_list></call></expr>;</throw>
        </default>}</block></switch>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this unit for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DateTickUnit</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>DateTickUnit</name></type> <name>that</name> =<init> <expr>(<name>DateTickUnit</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>unit</name></name> != <name><name>that</name>.<name>unit</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>count</name></name> != <name><name>that</name>.<name>count</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>formatter</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>formatter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>19</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>unit</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <name><name>this</name>.<name>count</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>formatter</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Strings for use by the toString() method.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>units</name> =<init> <expr><block>{<expr>"YEAR"</expr>, <expr>"MONTH"</expr>, <expr>"DAY"</expr>, <expr>"HOUR"</expr>, 
            <expr>"MINUTE"</expr>, <expr>"SECOND"</expr>, <expr>"MILLISECOND"</expr>}</block></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Returns a string representation of this instance, primarily used for
     * debugging purposes.
     *
     * @return A string representation of this instance.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"DateTickUnit[" + <name><name>DateTickUnit</name>.<name>units</name><index>[<expr><name><name>this</name>.<name>unit</name></name></expr>]</index></name> + ", " 
                + <name><name>this</name>.<name>count</name></name> + "]"</expr>;</return>
    }</block></function>

}</block></class>
</unit>
