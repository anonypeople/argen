<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\LogarithmicAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * --------------------
 * LogarithmicAxis.java
 * --------------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  Michael Duffy / Eric Thomas;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   David M. O'Donnell;
 *                   Scott Sams;
 *                   Sergei Ivanov;
 *
 * Changes
 * -------
 * 14-Mar-2002 : Version 1 contributed by Michael Duffy (DG);
 * 19-Apr-2002 : drawVerticalString() is now drawRotatedString() in
 *               RefineryUtilities (DG);
 * 23-Apr-2002 : Added a range property (DG);
 * 15-May-2002 : Modified to be able to deal with negative and zero values (via
 *               new 'adjustedLog10()' method);  occurrences of "Math.log(10)"
 *               changed to "LOG10_VALUE"; changed 'intValue()' to
 *               'longValue()' in 'refreshTicks()' to fix label-text value
 *               out-of-range problem; removed 'draw()' method; added
 *               'autoRangeMinimumSize' check; added 'log10TickLabelsFlag'
 *               parameter flag and implementation (ET);
 * 25-Jun-2002 : Removed redundant import (DG);
 * 25-Jul-2002 : Changed order of parameters in ValueAxis constructor (DG);
 * 16-Jul-2002 : Implemented support for plotting positive values arbitrarily
 *               close to zero (added 'allowNegativesFlag' flag) (ET).
 * 05-Sep-2002 : Updated constructor reflecting changes in the Axis class (DG);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 22-Nov-2002 : Bug fixes from David M. O'Donnell (DG);
 * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --&gt; double (DG);
 * 20-Jan-2003 : Removed unnecessary constructors (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 08-May-2003 : Fixed plotting of datasets with lower==upper bounds when
 *               'minAutoRange' is very small; added 'strictValuesFlag'
 *               and default functionality of throwing a runtime exception
 *               if 'allowNegativesFlag' is false and any values are less
 *               than or equal to zero; added 'expTickLabelsFlag' and
 *               changed to use "1e#"-style tick labels by default
 *               ("10^n"-style tick labels still supported via 'set'
 *               method); improved generation of tick labels when range of
 *               values is small; changed to use 'NumberFormat.getInstance()'
 *               to create 'numberFormatterObj' (ET);
 * 14-May-2003 : Merged HorizontalLogarithmicAxis and
 *               VerticalLogarithmicAxis (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 07-Nov-2003 : Modified to use new NumberTick class (DG);
 * 08-Apr-2004 : Use numberFormatOverride if set - see patch 930139 (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);
 * 21-Apr-2005 : Added support for upper and lower margins; added
 *               get/setAutoRangeNextLogFlag() methods and changed
 *               default to 'autoRangeNextLogFlag'==false (ET);
 * 22-Apr-2005 : Removed refreshTicks() and fixed names and parameters for
 *               refreshHorizontalTicks() &amp; refreshVerticalTicks();
 *               changed javadoc on setExpTickLabelsFlag() to specify
 *               proper default (ET);
 * 22-Apr-2005 : Renamed refreshHorizontalTicks --&gt; refreshTicksHorizontal
 *               (and likewise the vertical version) for consistency with
 *               other axis classes (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 02-Mar-2007 : Applied patch 1671069 to fix zooming (DG);
 * 22-Mar-2007 : Use new defaultAutoRange attribute (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>

<comment type="javadoc">/**
 * A numerical axis that uses a logarithmic scale.
 */</comment>
<class><specifier>public</specifier> class <name>LogarithmicAxis</name> <super><extends>extends <name>NumberAxis</name></extends></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2502918599004103054L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Useful constant for log(10). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>LOG10_VALUE</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>10.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Smallest arbitrarily-close-to-zero value allowed. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>SMALL_LOG_VALUE</name> =<init> <expr>1e-100</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag set true to allow negative values in data. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>allowNegativesFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Flag set true make axis throw exception if any values are
     * &lt;= 0 and 'allowNegativesFlag' is false. 
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>strictValuesFlag</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Number formatter for generating numeric strings. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>NumberFormat</name></type> <name>numberFormatterObj</name>
        =<init> <expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag set true for "1e#"-style tick labels. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>expTickLabelsFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag set true for "10^n"-style tick labels. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>log10TickLabelsFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** True to make 'autoAdjustRange()' select "10^n" values. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>autoRangeNextLogFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Helper flag for log axis processing. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>boolean</name></type> <name>smallLogFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new axis.
     *
     * @param label  the axis label.
     */</comment>
    <constructor><specifier>public</specifier> <name>LogarithmicAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupNumberFmtObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">//setup number formatter obj</comment>
    }</block></constructor>

    <comment type="javadoc">/**
     * Sets the 'allowNegativesFlag' flag; true to allow negative values
     * in data, false to be able to plot positive values arbitrarily close to
     * zero.
     *
     * @param flgVal  the new value of the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllowNegativesFlag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flgVal</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>allowNegativesFlag</name></name> = <name>flgVal</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the 'allowNegativesFlag' flag; true to allow negative values
     * in data, false to be able to plot positive values arbitrarily close
     * to zero.
     *
     * @return The flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAllowNegativesFlag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>allowNegativesFlag</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'
     * is false then this axis will throw a runtime exception if any of its
     * values are less than or equal to zero; if false then the axis will
     * adjust for values less than or equal to zero as needed.
     *
     * @param flgVal true for strict enforcement.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStrictValuesFlag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flgVal</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>strictValuesFlag</name></name> = <name>flgVal</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the 'strictValuesFlag' flag; if true and 'allowNegativesFlag'
     * is false then this axis will throw a runtime exception if any of its
     * values are less than or equal to zero; if false then the axis will
     * adjust for values less than or equal to zero as needed.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if strict enforcement is enabled.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getStrictValuesFlag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>strictValuesFlag</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'expTickLabelsFlag' flag.  If the 'log10TickLabelsFlag'
     * is false then this will set whether or not "1e#"-style tick labels
     * are used.  The default is to use regular numeric tick labels.
     *
     * @param flgVal true for "1e#"-style tick labels, false for
     * log10 or regular numeric tick labels.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExpTickLabelsFlag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flgVal</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>expTickLabelsFlag</name></name> = <name>flgVal</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupNumberFmtObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>             <comment type="line">//setup number formatter obj</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the 'expTickLabelsFlag' flag.
     *
     * @return &lt;code&gt;true&lt;/code&gt; for "1e#"-style tick labels,
     *         &lt;code&gt;false&lt;/code&gt; for log10 or regular numeric tick labels.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getExpTickLabelsFlag</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name>.<name>expTickLabelsFlag</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'log10TickLabelsFlag' flag.  The default value is false.
     *
     * @param flag true for "10^n"-style tick labels, false for "1e#"-style
     * or regular numeric tick labels.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLog10TickLabelsFlag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>log10TickLabelsFlag</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the 'log10TickLabelsFlag' flag.
     *
     * @return &lt;code&gt;true&lt;/code&gt; for "10^n"-style tick labels,
     *         &lt;code&gt;false&lt;/code&gt; for "1e#"-style or regular numeric tick
     *         labels.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getLog10TickLabelsFlag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>log10TickLabelsFlag</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the 'autoRangeNextLogFlag' flag.  This determines whether or
     * not the 'autoAdjustRange()' method will select the next "10^n"
     * values when determining the upper and lower bounds.  The default
     * value is false.
     *
     * @param flag &lt;code&gt;true&lt;/code&gt; to make the 'autoAdjustRange()'
     * method select the next "10^n" values, &lt;code&gt;false&lt;/code&gt; to not.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoRangeNextLogFlag</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>autoRangeNextLogFlag</name></name> = <name>flag</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the 'autoRangeNextLogFlag' flag.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the 'autoAdjustRange()' method will
     * select the next "10^n" values, &lt;code&gt;false&lt;/code&gt; if not.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAutoRangeNextLogFlag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoRangeNextLogFlag</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Overridden version that calls original and then sets up flag for
     * log axis processing.
     *
     * @param range  the new range.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">// call parent method</comment>
        <expr_stmt><expr><call><name>setupSmallLogFlag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>        <comment type="line">// setup flag based on bounds values</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Sets up flag for log axis processing.  Set true if negative values
     * not allowed and the lower bound is between 0 and 10.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupSmallLogFlag</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// set flag true if negative values not allowed and the</comment>
        <comment type="line">// lower bound is between 0 and 10:</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>lowerVal</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>smallLogFlag</name></name> = (!<name><name>this</name>.<name>allowNegativesFlag</name></name> &amp;&amp; <name>lowerVal</name> &lt; 10.0 
                &amp;&amp; <name>lowerVal</name> &gt; 0.0)</expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets up the number formatter object according to the
     * 'expTickLabelsFlag' flag.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setupNumberFmtObj</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormatterObj</name></name> <name>instanceof</name> <name>DecimalFormat</name></expr>)</condition><then> <block>{
            <comment type="line">//setup for "1e#"-style tick labels or regular</comment>
            <comment type="line">// numeric tick labels, depending on flag:</comment>
            <expr_stmt><expr>((<name>DecimalFormat</name>) <name><name>this</name>.<name>numberFormatterObj</name></name>).<call><name>applyPattern</name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>expTickLabelsFlag</name></name> ? "0E0" : "0.###"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the log10 value, depending on if values between 0 and
     * 1 are being plotted.  If negative values are not allowed and
     * the lower bound is between 0 and 10 then a normal log is
     * returned; otherwise the returned value is adjusted if the
     * given value is less than 10.
     *
     * @param val the value.
     *
     * @return log&lt;sub&gt;10&lt;/sub&gt;(val).
     * 
     * @see #switchedPow10(double) 
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>switchedLog10</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>smallLogFlag</name></name> ? <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call>
                / <name>LOG10_VALUE</name> : <call><name>adjustedLog10</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** 
     * Returns a power of 10, depending on if values between 0 and
     * 1 are being plotted.  If negative values are not allowed and
     * the lower bound is between 0 and 10 then a normal power is
     * returned; otherwise the returned value is adjusted if the
     * given value is less than 1.
     * 
     * @param val the value.
     * 
     * @return 10&lt;sup&gt;val&lt;/sup&gt;.
     * 
     * @since 1.0.5
     * @see #switchedLog10(double) 
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>switchedPow10</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>smallLogFlag</name></name> ? <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10.0</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> : <call><name>adjustedPow10</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an adjusted log10 value for graphing purposes.  The first
     * adjustment is that negative values are changed to positive during
     * the calculations, and then the answer is negated at the end.  The
     * second is that, for values less than 10, an increasingly large
     * (0 to 1) scaling factor is added such that at 0 the value is
     * adjusted to 1, resulting in a returned result of 0.
     *
     * @param val  value for which log10 should be calculated.
     *
     * @return An adjusted log&lt;sub&gt;10&lt;/sub&gt;(val).
     * 
     * @see #adjustedPow10(double) 
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>adjustedLog10</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>negFlag</name> =<init> <expr>(<name>val</name> &lt; 0.0)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>negFlag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>val</name> = -<name>val</name></expr>;</expr_stmt>          <comment type="line">// if negative then set flag and make positive</comment>
        }</block></then></if>
        <if>if <condition>(<expr><name>val</name> &lt; 10.0</expr>)</condition><then> <block>{                <comment type="line">// if &lt; 10 then</comment>
            <expr_stmt><expr><name>val</name> += (10.0 - <name>val</name>) / 10.0</expr>;</expr_stmt>  <comment type="line">//increase so 0 translates to 0</comment>
        }</block></then></if>
        <comment type="line">//return value; negate if original value was negative:</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>res</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>negFlag</name> ? (-<name>res</name>) : <name>res</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an adjusted power of 10 value for graphing purposes.  The first
     * adjustment is that negative values are changed to positive during
     * the calculations, and then the answer is negated at the end.  The
     * second is that, for values less than 1, a progressive logarithmic
     * offset is subtracted such that at 0 the returned result is also 0.
     *
     * @param val  value for which power of 10 should be calculated.
     *
     * @return An adjusted 10&lt;sup&gt;val&lt;/sup&gt;.
     * 
     * @since 1.0.5
     * @see #adjustedLog10(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>adjustedPow10</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>negFlag</name> =<init> <expr>(<name>val</name> &lt; 0.0)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>negFlag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>val</name> = -<name>val</name></expr>;</expr_stmt> <comment type="line">// if negative then set flag and make positive</comment>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>res</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>val</name> &lt; 1.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name> = (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>val</name> + 1.0</expr></argument>)</argument_list></call> - 10.0) / 9.0</expr>;</expr_stmt> <comment type="line">//invert adjustLog10</comment>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>res</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></else></if>
        <return>return <expr><name>negFlag</name> ? (-<name>res</name>) : <name>res</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the largest (closest to positive infinity) double value that is
     * not greater than the argument, is equal to a mathematical integer and
     * satisfying the condition that log base 10 of the value is an integer
     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).
     *
     * @param lower a double value below which a floor will be calcualted.
     *
     * @return 10&lt;sup&gt;N&lt;/sup&gt; with N .. { 1 ... }
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>computeLogFloor</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>logFloor</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>allowNegativesFlag</name></name></expr>)</condition><then> <block>{
            <comment type="line">//negative values are allowed</comment>
            <if>if <condition>(<expr><name>lower</name> &gt; 10.0</expr>)</condition><then> <block>{   <comment type="line">//parameter value is &gt; 10</comment>
                <comment type="line">// The Math.log() function is based on e not 10.</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>lower</name> &lt; -10.0</expr>)</condition><then> <block>{   <comment type="line">//parameter value is &lt; -10</comment>
                <comment type="line">//calculate log using positive value:</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>-<name>lower</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <comment type="line">//calculate floor using negative value:</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr>-<name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//calculate power using positive value; then negate</comment>
                <expr_stmt><expr><name>logFloor</name> = -<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">//parameter value is -10 &gt; val &lt; 10</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">//use as-is</comment>
            }</block></else></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">//negative values not allowed</comment>
            <if>if <condition>(<expr><name>lower</name> &gt; 0.0</expr>)</condition><then> <block>{   <comment type="line">//parameter value is &gt; 0</comment>
                <comment type="line">// The Math.log() function is based on e not 10.</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>logFloor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">//parameter value is &lt;= 0</comment>
                <expr_stmt><expr><name>logFloor</name> = <call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">//use as-is</comment>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>logFloor</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the smallest (closest to negative infinity) double value that is
     * not less than the argument, is equal to a mathematical integer and
     * satisfying the condition that log base 10 of the value is an integer
     * (i.e., the value returned will be a power of 10: 1, 10, 100, 1000, etc.).
     *
     * @param upper a double value above which a ceiling will be calcualted.
     *
     * @return 10&lt;sup&gt;N&lt;/sup&gt; with N .. { 1 ... }
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>computeLogCeil</name><parameter_list>(<param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>logCeil</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>allowNegativesFlag</name></name></expr>)</condition><then> <block>{
            <comment type="line">//negative values are allowed</comment>
            <if>if <condition>(<expr><name>upper</name> &gt; 10.0</expr>)</condition><then> <block>{
                <comment type="line">//parameter value is &gt; 10</comment>
                <comment type="line">// The Math.log() function is based on e not 10.</comment>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>upper</name> &lt; -10.0</expr>)</condition><then> <block>{
                <comment type="line">//parameter value is &lt; -10</comment>
                <comment type="line">//calculate log using positive value:</comment>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>-<name>upper</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <comment type="line">//calculate ceil using negative value:</comment>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr>-<name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//calculate power using positive value; then negate</comment>
                <expr_stmt><expr><name>logCeil</name> = -<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
               <comment type="line">//parameter value is -10 &gt; val &lt; 10</comment>
               <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">//use as-is</comment>
            }</block></else></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">//negative values not allowed</comment>
            <if>if <condition>(<expr><name>upper</name> &gt; 0.0</expr>)</condition><then> <block>{
                <comment type="line">//parameter value is &gt; 0</comment>
                <comment type="line">// The Math.log() function is based on e not 10.</comment>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>logCeil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">//parameter value is &lt;= 0</comment>
                <expr_stmt><expr><name>logCeil</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">//use as-is</comment>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>logCeil</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data is visible.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data.</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxisPlot</name></type> <name>vap</name> =<init> <expr>(<name>ValueAxisPlot</name>) <name>plot</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>lower</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>vap</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                   <comment type="line">//no real data present</comment>
                <expr_stmt><expr><name>r</name> = <call><name>getDefaultAutoRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="line">//get lower bound value</comment>
            }</block></then>
            <else>else <block>{
                <comment type="line">//actual data is present</comment>
                <expr_stmt><expr><name>lower</name> = <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="line">//get lower bound value</comment>
                <if>if <condition>(<expr><name><name>this</name>.<name>strictValuesFlag</name></name>
                        &amp;&amp; !<name><name>this</name>.<name>allowNegativesFlag</name></name> &amp;&amp; <name>lower</name> &lt;= 0.0</expr>)</condition><then> <block>{
                    <comment type="line">//strict flag set, allow-negatives not set and values &lt;= 0</comment>
                    <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(<argument><expr>"Values less than or equal to "
                            + "zero not allowed with logarithmic axis"</expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></else></if>

            <comment type="line">//apply lower margin by decreasing lower bound:</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>lowerMargin</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>lower</name> &gt; 0.0 &amp;&amp; (<name>lowerMargin</name> = <call><name>getLowerMargin</name><argument_list>()</argument_list></call>) &gt; 0.0</expr>)</condition><then> <block>{
                   <comment type="line">//lower bound and margin OK; get log10 of lower bound</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>logLower</name> =<init> <expr>(<call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>logAbs</name></decl>;</decl_stmt>      <comment type="line">//get absolute value of log10 value</comment>
                <if>if <condition>(<expr>(<name>logAbs</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>logLower</name></expr></argument>)</argument_list></call>) &lt; 1.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>logAbs</name> = 1.0</expr>;</expr_stmt>     <comment type="line">//if less than 1.0 then make it 1.0</comment>
                }</block></then></if>              <comment type="line">//subtract out margin and get exponential value:</comment>
                <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>(<name>logLower</name> - (<name>logAbs</name> * <name>lowerMargin</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">//if flag then change to log version of lowest value</comment>
            <comment type="line">// to make range begin at a 10^n value:</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>autoRangeNextLogFlag</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <call><name>computeLogFloor</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>!<name><name>this</name>.<name>allowNegativesFlag</name></name> &amp;&amp; <name>lower</name> &gt;= 0.0
                    &amp;&amp; <name>lower</name> &lt; <name>SMALL_LOG_VALUE</name></expr>)</condition><then> <block>{
                <comment type="line">//negatives not allowed and lower range bound is zero</comment>
                <expr_stmt><expr><name>lower</name> = <call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <comment type="line">//use data range bound instead</comment>
            }</block></then></if>

            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

             <comment type="line">//apply upper margin by increasing upper bound:</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>upperMargin</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>upper</name> &gt; 0.0 &amp;&amp; (<name>upperMargin</name> = <call><name>getUpperMargin</name><argument_list>()</argument_list></call>) &gt; 0.0</expr>)</condition><then> <block>{
                   <comment type="line">//upper bound and margin OK; get log10 of upper bound</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>logUpper</name> =<init> <expr>(<call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>logAbs</name></decl>;</decl_stmt>      <comment type="line">//get absolute value of log10 value</comment>
                <if>if <condition>(<expr>(<name>logAbs</name> = <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>logUpper</name></expr></argument>)</argument_list></call>) &lt; 1.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>logAbs</name> = 1.0</expr>;</expr_stmt>     <comment type="line">//if less than 1.0 then make it 1.0</comment>
                }</block></then></if>              <comment type="line">//add in margin and get exponential value:</comment>
                <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>(<name>logUpper</name> + (<name>logAbs</name> * <name>upperMargin</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>!<name><name>this</name>.<name>allowNegativesFlag</name></name> &amp;&amp; <name>upper</name> &lt; 1.0 &amp;&amp; <name>upper</name> &gt; 0.0
                    &amp;&amp; <name>lower</name> &gt; 0.0</expr>)</condition><then> <block>{
                <comment type="line">//negatives not allowed and upper bound between 0 &amp; 1</comment>
                <comment type="line">//round up to nearest significant digit for bound:</comment>
                <comment type="line">//get negative exponent:</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>expVal</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call> / <name>LOG10_VALUE</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>expVal</name> = <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr>-<name>expVal</name> + 0.001</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//get positive exponent</comment>
                <expr_stmt><expr><name>expVal</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>expVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">//create multiplier value</comment>
                <comment type="line">//multiply, round up, and divide for bound value:</comment>
                <expr_stmt><expr><name>upper</name> = (<name>expVal</name> &gt; 0.0) ? <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>upper</name> * <name>expVal</name></expr></argument>)</argument_list></call> / <name>expVal</name>
                    : <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">//negatives allowed or upper bound not between 0 &amp; 1</comment>
                <comment type="line">//if flag then change to log version of highest value to</comment>
                <comment type="line">// make range begin at a 10^n value; else use nearest int</comment>
                <expr_stmt><expr><name>upper</name> = (<name><name>this</name>.<name>autoRangeNextLogFlag</name></name>) ? <call><name>computeLogCeil</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call>
                    : <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line">// ensure the autorange is at least &lt;minRange&gt; in size...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>minRange</name> =<init> <expr><call><name>getAutoRangeMinimumSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>upper</name> - <name>lower</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>upper</name> = (<name>upper</name> + <name>lower</name> + <name>minRange</name>) / 2</expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = (<name>upper</name> + <name>lower</name> - <name>minRange</name>) / 2</expr>;</expr_stmt>
                <comment type="line">//if autorange still below minimum then adjust by 1%</comment>
                <comment type="line">// (can be needed when minRange is very small):</comment>
                <if>if <condition>(<expr><name>upper</name> - <name>lower</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>absUpper</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">//need to account for case where upper==0.0</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>adjVal</name> =<init> <expr>(<name>absUpper</name> &gt; <name>SMALL_LOG_VALUE</name>) ? <name>absUpper</name>
                        / 100.0 : 0.01</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>upper</name> = (<name>upper</name> + <name>lower</name> + <name>adjVal</name>) / 2</expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = (<name>upper</name> + <name>lower</name> - <name>adjVal</name>) / 2</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setupSmallLogFlag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>       <comment type="line">//setup flag based on bounds values</comment>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Converts a data value to a coordinate in Java2D space, assuming that
     * the axis runs along one edge of the specified plotArea.
     * Note that it is possible for the coordinate to fall outside the
     * plotArea.
     *
     * @param value  the data value.
     * @param plotArea  the area for plotting the data.
     * @param edge  the axis location.
     *
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>plotArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>plotArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>plotArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>plotArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <expr_stmt><expr><name>value</name> = <call><name>switchedLog10</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> - (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                    * (<name>max</name> - <name>min</name>))</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> + (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                    * (<name>max</name> - <name>min</name>))</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Converts a coordinate in Java2D space to the corresponding data
     * value, assuming that the axis runs along one edge of the specified
     * plotArea.
     *
     * @param java2DValue  the coordinate in Java2D space.
     * @param plotArea  the area in which the data is plotted.
     * @param edge  the axis location.
     *
     * @return The data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>plotMin</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>plotMax</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>plotMin</name> = <call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>plotMax</name> = <call><name><name>plotArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>plotMin</name> = <call><name><name>plotArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>plotMax</name> = <call><name><name>plotArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>switchedPow10</name><argument_list>(<argument><expr><name>axisMax</name> - ((<name>java2DValue</name> - <name>plotMin</name>) 
                    / (<name>plotMax</name> - <name>plotMin</name>)) * (<name>axisMax</name> - <name>axisMin</name>)</expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>switchedPow10</name><argument_list>(<argument><expr><name>axisMin</name> + ((<name>java2DValue</name> - <name>plotMin</name>) 
                    / (<name>plotMax</name> - <name>plotMin</name>)) * (<name>axisMax</name> - <name>axisMin</name>)</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the current range.
     * 
     * @param lowerPercent  the new lower bound.
     * @param upperPercent  the new upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>startLog</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lengthLog</name> =<init> <expr><call><name>switchedLog10</name><argument_list>(<argument><expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> - <name>startLog</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>adjusted</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>adjusted</name> = new <call><name>Range</name><argument_list>(
                    <argument><expr><call><name>switchedPow10</name><argument_list>(
                            <argument><expr><name>startLog</name> + (<name>lengthLog</name> * (1 - <name>upperPercent</name>))</expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>switchedPow10</name><argument_list>(
                            <argument><expr><name>startLog</name> + (<name>lengthLog</name> * (1 - <name>lowerPercent</name>))</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <expr_stmt><expr><name>adjusted</name> = new <call><name>Range</name><argument_list>(
                    <argument><expr><call><name>switchedPow10</name><argument_list>(<argument><expr><name>startLog</name> + (<name>lengthLog</name> * <name>lowerPercent</name>)</expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>switchedPow10</name><argument_list>(<argument><expr><name>startLog</name> + (<name>lengthLog</name> * <name>upperPercent</name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     *
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//get lower bound value:</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>lowerBoundVal</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <comment type="line">//if small log values and lower bound value too small</comment>
              <comment type="line">// then set to a small value (don't allow &lt;= 0):</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>smallLogFlag</name></name> &amp;&amp; <name>lowerBoundVal</name> &lt; <name>SMALL_LOG_VALUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lowerBoundVal</name> = <name>SMALL_LOG_VALUE</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//get upper bound value</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>upperBoundVal</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//get log10 version of lower bound and round to integer:</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>iBegCount</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><call><name>switchedLog10</name><argument_list>(<argument><expr><name>lowerBoundVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//get log10 version of upper bound and round to integer:</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>iEndCount</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><call><name>switchedLog10</name><argument_list>(<argument><expr><name>upperBoundVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>iBegCount</name> == <name>iEndCount</name> &amp;&amp; <name>iBegCount</name> &gt; 0
                &amp;&amp; <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>iBegCount</name></expr></argument>)</argument_list></call> &gt; <name>lowerBoundVal</name></expr>)</condition><then> <block>{
              <comment type="line">//only 1 power of 10 value, it's &gt; 0 and its resulting</comment>
              <comment type="line">// tick value will be larger than lower bound of data</comment>
            <expr_stmt><expr>--<name>iBegCount</name></expr>;</expr_stmt>       <comment type="line">//decrement to generate more ticks</comment>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>currentTickValue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>zeroTickFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>iBegCount</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>iEndCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <comment type="line">//for each power of 10 value; create ten ticks</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; 10</expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
                <comment type="line">//for each tick to be displayed</comment>
                <if>if <condition>(<expr><name><name>this</name>.<name>smallLogFlag</name></name></expr>)</condition><then> <block>{
                    <comment type="line">//small log values in use; create numeric value for tick</comment>
                    <expr_stmt><expr><name>currentTickValue</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> + (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> * <name>j</name>)</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>expTickLabelsFlag</name></name>
                        || (<name>i</name> &lt; 0 &amp;&amp; <name>currentTickValue</name> &gt; 0.0
                        &amp;&amp; <name>currentTickValue</name> &lt; 1.0)</expr>)</condition><then> <block>{
                        <comment type="line">//showing "1e#"-style ticks or negative exponent</comment>
                        <comment type="line">// generating tick value between 0 &amp; 1; show fewer</comment>
                        <if>if <condition>(<expr><name>j</name> == 0 || (<name>i</name> &gt; -4 &amp;&amp; <name>j</name> &lt; 2)
                                   || <name>currentTickValue</name> &gt;= <name>upperBoundVal</name></expr>)</condition><then> <block>{
                          <comment type="line">//first tick of series, or not too small a value and</comment>
                          <comment type="line">// one of first 3 ticks, or last tick to be displayed</comment>
                            <comment type="line">// set exact number of fractional digits to be shown</comment>
                            <comment type="line">// (no effect if showing "1e#"-style ticks):</comment>
                            <expr_stmt><expr><call><name><name>this</name>.<name>numberFormatterObj</name>
                                .<name>setMaximumFractionDigits</name></name><argument_list>(<argument><expr>-<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                               <comment type="line">//create tick label (force use of fmt obj):</comment>
                            <expr_stmt><expr><name>tickLabel</name> = <call><name>makeTickLabel</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{    <comment type="line">//no tick label to be shown</comment>
                            <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{     <comment type="line">//tick value not between 0 &amp; 1</comment>
                               <comment type="line">//show tick label if it's the first or last in</comment>
                               <comment type="line">// the set, or if it's 1-5; beyond that show</comment>
                               <comment type="line">// fewer as the values get larger:</comment>
                        <expr_stmt><expr><name>tickLabel</name> = (<name>j</name> &lt; 1 || (<name>i</name> &lt; 1 &amp;&amp; <name>j</name> &lt; 5) || (<name>j</name> &lt; 4 - <name>i</name>)
                                         || <name>currentTickValue</name> &gt;= <name>upperBoundVal</name>)
                                         ? <call><name>makeTickLabel</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call> : ""</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{ <comment type="line">//not small log values in use; allow for values &lt;= 0</comment>
                    <if>if <condition>(<expr><name>zeroTickFlag</name></expr>)</condition><then> <block>{   <comment type="line">//if did zero tick last iter then</comment>
                        <expr_stmt><expr>--<name>j</name></expr>;</expr_stmt>              <comment type="line">//decrement to do 1.0 tick now</comment>
                    }</block></then></if>     <comment type="line">//calculate power-of-ten value for tick:</comment>
                    <expr_stmt><expr><name>currentTickValue</name> = (<name>i</name> &gt;= 0)
                        ? <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> + (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> * <name>j</name>)
                        : -(<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>i</name></expr></argument>)</argument_list></call> - (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>i</name> - 1</expr></argument>)</argument_list></call> * <name>j</name>))</expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>zeroTickFlag</name></expr>)</condition><then> <block>{  <comment type="line">// did not do zero tick last iteration</comment>
                        <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>currentTickValue</name> - 1.0</expr></argument>)</argument_list></call> &lt; 0.0001
                            &amp;&amp; <name>lowerBoundVal</name> &lt;= 0.0 &amp;&amp; <name>upperBoundVal</name> &gt;= 0.0</expr>)</condition><then> <block>{
                            <comment type="line">//tick value is 1.0 and 0.0 is within data range</comment>
                            <expr_stmt><expr><name>currentTickValue</name> = 0.0</expr>;</expr_stmt>     <comment type="line">//set tick value to zero</comment>
                            <expr_stmt><expr><name>zeroTickFlag</name> = true</expr>;</expr_stmt>        <comment type="line">//indicate zero tick</comment>
                        }</block></then></if>
                    }</block></then>
                    <else>else <block>{     <comment type="line">//did zero tick last iteration</comment>
                        <expr_stmt><expr><name>zeroTickFlag</name> = false</expr>;</expr_stmt>         <comment type="line">//clear flag</comment>
                    }</block></else></if>               <comment type="line">//create tick label string:</comment>
                               <comment type="line">//show tick label if "1e#"-style and it's one</comment>
                               <comment type="line">// of the first two, if it's the first or last</comment>
                               <comment type="line">// in the set, or if it's 1-5; beyond that</comment>
                               <comment type="line">// show fewer as the values get larger:</comment>
                    <expr_stmt><expr><name>tickLabel</name> = ((<name><name>this</name>.<name>expTickLabelsFlag</name></name> &amp;&amp; <name>j</name> &lt; 2)
                                || <name>j</name> &lt; 1
                                || (<name>i</name> &lt; 1 &amp;&amp; <name>j</name> &lt; 5) || (<name>j</name> &lt; 4 - <name>i</name>)
                                || <name>currentTickValue</name> &gt;= <name>upperBoundVal</name>)
                                   ? <call><name>makeTickLabel</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call> : ""</expr>;</expr_stmt>
                }</block></else></if>

                <if>if <condition>(<expr><name>currentTickValue</name> &gt; <name>upperBoundVal</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>ticks</name></expr>;</return>   <comment type="line">// if past highest data value then exit</comment>
                                    <comment type="line">// method</comment>
                }</block></then></if>

                <if>if <condition>(<expr><name>currentTickValue</name> &gt;= <name>lowerBoundVal</name> - <name>SMALL_LOG_VALUE</name></expr>)</condition><then> <block>{
                    <comment type="line">//tick value not below lowest data value</comment>
                    <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{
                        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>

                    <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>ticks</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     *
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                        <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                        <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//get lower bound value:</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>lowerBoundVal</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//if small log values and lower bound value too small</comment>
        <comment type="line">// then set to a small value (don't allow &lt;= 0):</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>smallLogFlag</name></name> &amp;&amp; <name>lowerBoundVal</name> &lt; <name>SMALL_LOG_VALUE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lowerBoundVal</name> = <name>SMALL_LOG_VALUE</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="line">//get upper bound value</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>upperBoundVal</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//get log10 version of lower bound and round to integer:</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>iBegCount</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><call><name>switchedLog10</name><argument_list>(<argument><expr><name>lowerBoundVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//get log10 version of upper bound and round to integer:</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>iEndCount</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><call><name>switchedLog10</name><argument_list>(<argument><expr><name>upperBoundVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>iBegCount</name> == <name>iEndCount</name> &amp;&amp; <name>iBegCount</name> &gt; 0
                &amp;&amp; <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>iBegCount</name></expr></argument>)</argument_list></call> &gt; <name>lowerBoundVal</name></expr>)</condition><then> <block>{
              <comment type="line">//only 1 power of 10 value, it's &gt; 0 and its resulting</comment>
              <comment type="line">// tick value will be larger than lower bound of data</comment>
            <expr_stmt><expr>--<name>iBegCount</name></expr>;</expr_stmt>       <comment type="line">//decrement to generate more ticks</comment>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>tickVal</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>zeroTickFlag</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>iBegCount</name></expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>iEndCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <comment type="line">//for each tick with a label to be displayed</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>jEndCount</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> == <name>iEndCount</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>jEndCount</name> = 1</expr>;</expr_stmt>
            }</block></then></if>

            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>jEndCount</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <comment type="line">//for each tick to be displayed</comment>
                <if>if <condition>(<expr><name><name>this</name>.<name>smallLogFlag</name></name></expr>)</condition><then> <block>{
                    <comment type="line">//small log values in use</comment>
                    <expr_stmt><expr><name>tickVal</name> = <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> + (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> * <name>j</name>)</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>j</name> == 0</expr>)</condition><then> <block>{
                        <comment type="line">//first tick of group; create label text</comment>
                        <if>if <condition>(<expr><name><name>this</name>.<name>log10TickLabelsFlag</name></name></expr>)</condition><then> <block>{
                            <comment type="line">//if flag then</comment>
                            <expr_stmt><expr><name>tickLabel</name> = "10^" + <name>i</name></expr>;</expr_stmt>   <comment type="line">//create "log10"-type label</comment>
                        }</block></then>
                        <else>else <block>{    <comment type="line">//not "log10"-type label</comment>
                            <if>if <condition>(<expr><name><name>this</name>.<name>expTickLabelsFlag</name></name></expr>)</condition><then> <block>{
                                <comment type="line">//if flag then</comment>
                                <expr_stmt><expr><name>tickLabel</name> = "1e" + <name>i</name></expr>;</expr_stmt>  <comment type="line">//create "1e#"-type label</comment>
                            }</block></then>
                            <else>else <block>{    <comment type="line">//not "1e#"-type label</comment>
                                <if>if <condition>(<expr><name>i</name> &gt;= 0</expr>)</condition><then> <block>{   <comment type="line">// if positive exponent then</comment>
                                                <comment type="line">// make integer</comment>
                                    <decl_stmt><decl><type><name>NumberFormat</name></type> <name>format</name>
                                        =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <if>if <condition>(<expr><name>format</name> != <name>null</name></expr>)</condition><then> <block>{
                                        <expr_stmt><expr><name>tickLabel</name> = <call><name><name>format</name>.<name>format</name></name><argument_list>(<argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></then>
                                    <else>else <block>{
                                        <expr_stmt><expr><name>tickLabel</name> = <call><name><name>Long</name>.<name>toString</name></name><argument_list>(<argument><expr>(<name>long</name>)
                                                <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    }</block></else></if>
                                }</block></then>
                                <else>else <block>{
                                    <comment type="line">//negative exponent; create fractional value</comment>
                                    <comment type="line">//set exact number of fractional digits to</comment>
                                    <comment type="line">// be shown:</comment>
                                    <expr_stmt><expr><call><name><name>this</name>.<name>numberFormatterObj</name>
                                        .<name>setMaximumFractionDigits</name></name><argument_list>(<argument><expr>-<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <comment type="line">//create tick label:</comment>
                                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>this</name>.<name>numberFormatterObj</name>.<name>format</name></name><argument_list>(
                                            <argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                            }</block></else></if>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{   <comment type="line">//not first tick to be displayed</comment>
                        <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt>     <comment type="line">//no tick label</comment>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{ <comment type="line">//not small log values in use; allow for values &lt;= 0</comment>
                    <if>if <condition>(<expr><name>zeroTickFlag</name></expr>)</condition><then> <block>{      <comment type="line">//if did zero tick last iter then</comment>
                        <expr_stmt><expr>--<name>j</name></expr>;</expr_stmt>
                    }</block></then></if>               <comment type="line">//decrement to do 1.0 tick now</comment>
                    <expr_stmt><expr><name>tickVal</name> = (<name>i</name> &gt;= 0) ? <call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> + (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> * <name>j</name>)
                             : -(<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>i</name></expr></argument>)</argument_list></call> - (<call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>-<name>i</name> - 1</expr></argument>)</argument_list></call> * <name>j</name>))</expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>j</name> == 0</expr>)</condition><then> <block>{  <comment type="line">//first tick of group</comment>
                        <if>if <condition>(<expr>!<name>zeroTickFlag</name></expr>)</condition><then> <block>{     <comment type="line">// did not do zero tick last</comment>
                                                 <comment type="line">// iteration</comment>
                            <if>if <condition>(<expr><name>i</name> &gt; <name>iBegCount</name> &amp;&amp; <name>i</name> &lt; <name>iEndCount</name>
                                    &amp;&amp; <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>tickVal</name> - 1.0</expr></argument>)</argument_list></call> &lt; 0.0001</expr>)</condition><then> <block>{
                                <comment type="line">// not first or last tick on graph and value</comment>
                                <comment type="line">// is 1.0</comment>
                                <expr_stmt><expr><name>tickVal</name> = 0.0</expr>;</expr_stmt>        <comment type="line">//change value to 0.0</comment>
                                <expr_stmt><expr><name>zeroTickFlag</name> = true</expr>;</expr_stmt>  <comment type="line">//indicate zero tick</comment>
                                <expr_stmt><expr><name>tickLabel</name> = "0"</expr>;</expr_stmt>      <comment type="line">//create label for tick</comment>
                            }</block></then>
                            <else>else <block>{
                                <comment type="line">//first or last tick on graph or value is 1.0</comment>
                                <comment type="line">//create label for tick:</comment>
                                <if>if <condition>(<expr><name><name>this</name>.<name>log10TickLabelsFlag</name></name></expr>)</condition><then> <block>{
                                       <comment type="line">//create "log10"-type label</comment>
                                    <expr_stmt><expr><name>tickLabel</name> = (((<name>i</name> &lt; 0) ? "-" : "")
                                            + "10^" + <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
                                }</block></then>
                                <else>else <block>{
                                    <if>if <condition>(<expr><name><name>this</name>.<name>expTickLabelsFlag</name></name></expr>)</condition><then> <block>{
                                           <comment type="line">//create "1e#"-type label</comment>
                                        <expr_stmt><expr><name>tickLabel</name> = (((<name>i</name> &lt; 0) ? "-" : "")
                                                + "1e" + <call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
                                    }</block></then>
                                    <else>else <block>{
                                        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>format</name>
                                            =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                        <if>if <condition>(<expr><name>format</name> != <name>null</name></expr>)</condition><then> <block>{
                                            <expr_stmt><expr><name>tickLabel</name> = <call><name><name>format</name>.<name>format</name></name><argument_list>(<argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></then>
                                        <else>else <block>{
                                            <expr_stmt><expr><name>tickLabel</name> =  <call><name><name>Long</name>.<name>toString</name></name><argument_list>(
                                                    <argument><expr>(<name>long</name>) <call><name><name>Math</name>.<name>rint</name></name><argument_list>(<argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        }</block></else></if>
                                    }</block></else></if>
                                }</block></else></if>
                            }</block></else></if>
                        }</block></then>
                        <else>else <block>{     <comment type="line">// did zero tick last iteration</comment>
                            <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt>         <comment type="line">//no label</comment>
                            <expr_stmt><expr><name>zeroTickFlag</name> = false</expr>;</expr_stmt>   <comment type="line">//clear flag</comment>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{       <comment type="line">// not first tick of group</comment>
                        <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt>           <comment type="line">//no label</comment>
                        <expr_stmt><expr><name>zeroTickFlag</name> = false</expr>;</expr_stmt>     <comment type="line">//make sure flag cleared</comment>
                    }</block></else></if>
                }</block></else></if>

                <if>if <condition>(<expr><name>tickVal</name> &gt; <name>upperBoundVal</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>ticks</name></expr>;</return>  <comment type="line">//if past highest data value then exit method</comment>
                }</block></then></if>

                <if>if <condition>(<expr><name>tickVal</name> &gt;= <name>lowerBoundVal</name> - <name>SMALL_LOG_VALUE</name></expr>)</condition><then> <block>{
                    <comment type="line">//tick value not below lowest data value</comment>
                    <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{
                        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>
                    <comment type="line">//create tick object and add to list:</comment>
                    <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>tickVal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tickLabel</name></expr></argument>, 
                            <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>ticks</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts the given value to a tick label string.
     *
     * @param val the value to convert.
     * @param forceFmtFlag true to force the number-formatter object
     * to be used.
     *
     * @return The tick label string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>makeTickLabel</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>forceFmtFlag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>expTickLabelsFlag</name></name> || <name>forceFmtFlag</name></expr>)</condition><then> <block>{
            <comment type="line">//using exponents or force-formatter flag is set</comment>
            <comment type="line">// (convert 'E' to lower-case 'e'):</comment>
            <return>return <expr><call><name><name>this</name>.<name>numberFormatterObj</name>.<name>format</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call>.<call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>valueToString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts the given value to a tick label string.
     * @param val the value to convert.
     *
     * @return The tick label string.
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>makeTickLabel</name><parameter_list>(<param><decl><type><name>double</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>makeTickLabel</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
