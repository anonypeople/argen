<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\MarkerAxisBand.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * MarkerAxisBand.java
 * -------------------
 * (C) Copyright 2000-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Sep-2002 : Updated Javadoc comments (DG);
 * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 13-May-2003 : Renamed HorizontalMarkerAxisBand --&gt; MarkerAxisBand (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 07-Apr-2004 : Changed text bounds calculation (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>LineMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>IntervalMarker</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A band that can be added to a number axis to display regions.
 */</comment>
<class><specifier>public</specifier> class <name>MarkerAxisBand</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-1729482413886398919L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The axis that the band belongs to. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberAxis</name></type> <name>axis</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The top outer gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>topOuterGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The top inner gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>topInnerGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The bottom outer gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>bottomOuterGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The bottom inner gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>bottomInnerGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>font</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the markers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>markers</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new axis band.
     *
     * @param axis  the owner.
     * @param topOuterGap  the top outer gap.
     * @param topInnerGap  the top inner gap.
     * @param bottomOuterGap  the bottom outer gap.
     * @param bottomInnerGap  the bottom inner gap.
     * @param font  the font.
     */</comment>
    <constructor><specifier>public</specifier> <name>MarkerAxisBand</name><parameter_list>(<param><decl><type><name>NumberAxis</name></type> <name>axis</name></decl></param>,
                          <param><decl><type><name>double</name></type> <name>topOuterGap</name></decl></param>, <param><decl><type><name>double</name></type> <name>topInnerGap</name></decl></param>,
                          <param><decl><type><name>double</name></type> <name>bottomOuterGap</name></decl></param>, <param><decl><type><name>double</name></type> <name>bottomInnerGap</name></decl></param>,
                          <param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>axis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>topOuterGap</name></name> = <name>topOuterGap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>topInnerGap</name></name> = <name>topInnerGap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bottomOuterGap</name></name> = <name>bottomOuterGap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>bottomInnerGap</name></name> = <name>bottomInnerGap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>font</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>markers</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a marker to the band.
     *
     * @param marker  the marker.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addMarker</name><parameter_list>(<param><decl><type><name>IntervalMarker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the height of the band.
     *
     * @param g2  the graphics device.
     *
     * @return The height of the band.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHeight</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>markers</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>LineMetrics</name></type> <name>metrics</name> =<init> <expr><call><name><name>this</name>.<name>font</name>.<name>getLineMetrics</name></name><argument_list>(
                <argument><expr>"123g"</expr></argument>, <argument><expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>topOuterGap</name></name> + <name><name>this</name>.<name>topInnerGap</name></name> + <call><name><name>metrics</name>.<name>getHeight</name></name><argument_list>()</argument_list></call>
                     + <name><name>this</name>.<name>bottomInnerGap</name></name> + <name><name>this</name>.<name>bottomOuterGap</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * A utility method that draws a string inside a rectangle.
     *
     * @param g2  the graphics device.
     * @param bounds  the rectangle.
     * @param font  the font.
     * @param text  the text.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>drawStringInRect</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>bounds</name></decl></param>, <param><decl><type><name>Font</name></type> <name>font</name></decl></param>,
                                  <param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>r</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>bounds</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>r</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>x</name> = <name>x</name> + (<call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <call><name><name>r</name>.<name>getWidth</name></name><argument_list>()</argument_list></call>) / 2</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>LineMetrics</name></type> <name>metrics</name> =<init> <expr><call><name><name>font</name>.<name>getLineMetrics</name></name><argument_list>(
            <argument><expr><name>text</name></expr></argument>, <argument><expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(
            <argument><expr><name>text</name></expr></argument>, <argument><expr>(<name>float</name>) <name>x</name></expr></argument>, <argument><expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>bounds</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> 
                - <name><name>this</name>.<name>bottomInnerGap</name></name> - <call><name><name>metrics</name>.<name>getDescent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the band.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param dataArea  the data area.
     * @param x  the x-coordinate.
     * @param y  the y-coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                     <param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name>getHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>IntervalMarker</name></type> <name>marker</name> =<init> <expr>(<name>IntervalMarker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>start</name> =<init>  <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(
                <argument><expr><call><name><name>marker</name>.<name>getStartValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(
                <argument><expr><call><name><name>marker</name>.<name>getEndValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>this</name>.<name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>s</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><name>start</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>e</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>valueToJava2D</name></name><argument_list>(
                <argument><expr><name>end</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>r</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name> + <name><name>this</name>.<name>topOuterGap</name></name></expr></argument>, <argument><expr><name>e</name> - <name>s</name></expr></argument>, 
                <argument><expr><name>h</name> - <name><name>this</name>.<name>topOuterGap</name></name> - <name><name>this</name>.<name>bottomOuterGap</name></name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(
                <argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr><call><name><name>marker</name>.<name>getAlpha</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>marker</name>.<name>getPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name><name>marker</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawStringInRect</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>, <argument><expr><call><name><name>marker</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this axis for equality with another object.  Note that the axis 
     * that the band belongs to is ignored in the test.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MarkerAxisBand</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MarkerAxisBand</name></type> <name>that</name> =<init> <expr>(<name>MarkerAxisBand</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>topOuterGap</name></name> != <name><name>that</name>.<name>topOuterGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>topInnerGap</name></name> != <name><name>that</name>.<name>topInnerGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomInnerGap</name></name> != <name><name>that</name>.<name>bottomInnerGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bottomOuterGap</name></name> != <name><name>that</name>.<name>bottomOuterGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>font</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>font</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>markers</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>markers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for the object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>37</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 19 * <name>result</name> + <call><name><name>this</name>.<name>font</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 19 * <name>result</name> + <call><name><name>this</name>.<name>markers</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
