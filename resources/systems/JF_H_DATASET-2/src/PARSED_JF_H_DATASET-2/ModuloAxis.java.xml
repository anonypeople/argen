<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\ModuloAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * ModuloAxis.java
 * ---------------
 * (C) Copyright 2004, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 13-Aug-2004 : Version 1 (DG);
 * 13-Nov-2007 : Implemented equals() (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>

<comment type="javadoc">/**
 * An axis that displays numerical values within a fixed range using a modulo 
 * calculation.
 */</comment>
<class><specifier>public</specifier> class <name>ModuloAxis</name> <super><extends>extends <name>NumberAxis</name></extends></super> <block>{
    
    <comment type="javadoc">/** 
     * The fixed range for the axis - all data values will be mapped to this
     * range using a modulo calculation. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>fixedRange</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The display start value (this will sometimes be &gt; displayEnd, in which
     * case the axis wraps around at some point in the middle of the axis).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>displayStart</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The display end value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>displayEnd</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new axis.
     * 
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param fixedRange  the fixed range (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>ModuloAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name>Range</name></type> <name>fixedRange</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fixedRange</name></name> = <name>fixedRange</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>displayStart</name></name> = 270.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>displayEnd</name></name> = 90.0</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the display start value.
     * 
     * @return The display start value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDisplayStart</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>displayStart</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the display end value.
     * 
     * @return The display end value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDisplayEnd</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>displayEnd</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the display range.  The values will be mapped to the fixed range if
     * necessary.
     * 
     * @param start  the start value.
     * @param end  the end value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>start</name></decl></param>, <param><decl><type><name>double</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>displayStart</name></name> = <call><name>mapValueToFixedRange</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>displayEnd</name></name> = <call><name>mapValueToFixedRange</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayStart</name></name> &lt; <name><name>this</name>.<name>displayEnd</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name><name>this</name>.<name>displayStart</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>displayEnd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name><name>this</name>.<name>displayStart</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> 
                  + (<name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * This method should calculate a range that will show all the data values.
     * For now, it just sets the axis range to the fixedRange.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name><name>this</name>.<name>fixedRange</name></name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Translates a data value to a Java2D coordinate.
     * 
     * @param value  the value.
     * @param area  the area.
     * @param edge  the edge.
     * 
     * @return A Java2D coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name>mapValueToFixedRange</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayStart</name></name> &lt; <name><name>this</name>.<name>displayEnd</name></name></expr>)</condition><then> <block>{  <comment type="line">// regular number axis</comment>
            <expr_stmt><expr><name>result</name> = <call><name>trans</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{  <comment type="line">// displayStart &gt; displayEnd, need to handle split</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>cutoff</name> =<init> <expr>(<name><name>this</name>.<name>displayStart</name></name> + <name><name>this</name>.<name>displayEnd</name></name>) / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>length1</name> =<init> <expr><call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> 
                             - <name><name>this</name>.<name>displayStart</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>length2</name> =<init> <expr><name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>v</name> &gt; <name>cutoff</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name>transStart</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>length1</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <call><name>transEnd</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>length1</name></expr></argument>, <argument><expr><name>length2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A regular translation from a data value to a Java2D value.
     * 
     * @param value  the value.
     * @param area  the data area.
     * @param edge  the edge along which the axis lies.
     * 
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>trans</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> - ((<name>value</name> - <name><name>this</name>.<name>displayStart</name></name>) 
                   / (<name><name>this</name>.<name>displayEnd</name></name> - <name><name>this</name>.<name>displayStart</name></name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> + ((<name>value</name> - <name><name>this</name>.<name>displayStart</name></name>) 
                   / (<name><name>this</name>.<name>displayEnd</name></name> - <name><name>this</name>.<name>displayStart</name></name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Translates a data value to a Java2D value for the first section of the 
     * axis.
     * 
     * @param value  the value.
     * @param area  the data area.
     * @param edge  the edge along which the axis lies.
     * @param length1  the length of the first section.
     * @param length2  the length of the second section.
     * 
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>transStart</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                              <param><decl><type><name>double</name></type> <name>length1</name></decl></param>, <param><decl><type><name>double</name></type> <name>length2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name>length1</name> / (<name>length1</name> + <name>length2</name>)</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name>length1</name> 
                  / (<name>length1</name> + <name>length2</name>)</expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> - ((<name>value</name> - <name><name>this</name>.<name>displayStart</name></name>) 
                / (<call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>displayStart</name></name>)) 
                * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> + ((<name>value</name> - <name><name>this</name>.<name>displayStart</name></name>) 
                / (<call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>displayStart</name></name>)) 
                * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></else></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Translates a data value to a Java2D value for the second section of the 
     * axis.
     * 
     * @param value  the value.
     * @param area  the data area.
     * @param edge  the edge along which the axis lies.
     * @param length1  the length of the first section.
     * @param length2  the length of the second section.
     * 
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>transEnd</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                            <param><decl><type><name>double</name></type> <name>length1</name></decl></param>, <param><decl><type><name>double</name></type> <name>length2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name>length2</name> 
                  / (<name>length1</name> + <name>length2</name>)</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name>length2</name> 
                  / (<name>length1</name> + <name>length2</name>)</expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> - ((<name>value</name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>) 
                    / (<name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>)) 
                    * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> + ((<name>value</name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>) 
                    / (<name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>)) 
                    * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Maps a data value into the fixed range.
     * 
     * @param value  the value.
     * 
     * @return The mapped value.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>mapValueToFixedRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr><call><name><name>this</name>.<name>fixedRange</name>.<name>getLength</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> &lt; <name>lower</name></expr>)</condition><then> <block>{
            <return>return <expr><name>lower</name> + <name>length</name> + ((<name>value</name> - <name>lower</name>) % <name>length</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>lower</name> + ((<name>value</name> - <name>lower</name>) % <name>length</name>)</expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Translates a Java2D coordinate into a data value.
     * 
     * @param java2DValue  the Java2D coordinate.
     * @param area  the area.
     * @param edge  the edge.
     * 
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayStart</name></name> &lt; <name><name>this</name>.<name>displayEnd</name></name></expr>)</condition><then> <block>{  <comment type="line">// regular number axis</comment>
            <expr_stmt><expr><name>result</name> = <call><name><name>super</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>java2DValue</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{  <comment type="line">// displayStart &gt; displayEnd, need to handle split</comment>
            
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the display length for the axis.
     * 
     * @return The display length.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>getDisplayLength</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>displayStart</name></name> &lt; <name><name>this</name>.<name>displayEnd</name></name></expr>)</condition><then> <block>{
            <return>return <expr>(<name><name>this</name>.<name>displayEnd</name></name> - <name><name>this</name>.<name>displayStart</name></name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>(<call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>displayStart</name></name>)
                + (<name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>)</expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the central value of the current display range.
     * 
     * @return The central value.
     */</comment>
    <function><type><specifier>private</specifier> <name>double</name></type> <name>getDisplayCentralValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>mapValueToFixedRange</name><argument_list>(
            <argument><expr><name><name>this</name>.<name>displayStart</name></name> + (<call><name>getDisplayLength</name><argument_list>()</argument_list></call> / 2)</expr></argument>
        )</argument_list></call></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Increases or decreases the axis range by the specified percentage about 
     * the central value and sends an {@link AxisChangeEvent} to all registered
     * listeners.
     * &lt;P&gt;
     * To double the length of the axis range, use 200% (2.0).
     * To halve the length of the axis range, use 50% (0.5).
     *
     * @param percent  the resize factor.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resizeRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>resizeRange</name><argument_list>(<argument><expr><name>percent</name></expr></argument>, <argument><expr><call><name>getDisplayCentralValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Increases or decreases the axis range by the specified percentage about 
     * the specified anchor value and sends an {@link AxisChangeEvent} to all 
     * registered listeners.
     * &lt;P&gt;
     * To double the length of the axis range, use 200% (2.0).
     * To halve the length of the axis range, use 50% (0.5).
     *
     * @param percent  the resize factor.
     * @param anchorValue  the new central value after the resize.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>resizeRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>, <param><decl><type><name>double</name></type> <name>anchorValue</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>percent</name> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>halfLength</name> =<init> <expr><call><name>getDisplayLength</name><argument_list>()</argument_list></call> * <name>percent</name> / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setDisplayRange</name><argument_list>(<argument><expr><name>anchorValue</name> - <name>halfLength</name></expr></argument>, <argument><expr><name>anchorValue</name> + <name>halfLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>setAutoRange</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function> 
    
    <comment type="javadoc">/**
     * Converts a length in data coordinates into the corresponding length in 
     * Java2D coordinates.
     * 
     * @param length  the length.
     * @param area  the plot area.
     * @param edge  the edge along which the axis lies.
     * 
     * @return The length in Java2D coordinates.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>lengthToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                 <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>axisLength</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayEnd</name></name> &gt; <name><name>this</name>.<name>displayStart</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axisLength</name> = <name><name>this</name>.<name>displayEnd</name></name> - <name><name>this</name>.<name>displayStart</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>axisLength</name> = (<call><name><name>this</name>.<name>fixedRange</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>displayStart</name></name>) 
                + (<name><name>this</name>.<name>displayEnd</name></name> - <call><name><name>this</name>.<name>fixedRange</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>areaLength</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>areaLength</name> = <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>areaLength</name> = <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr>(<name>length</name> / <name>axisLength</name>) * <name>areaLength</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ModuloAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ModuloAxis</name></type> <name>that</name> =<init> <expr>(<name>ModuloAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayStart</name></name> != <name><name>that</name>.<name>displayStart</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>displayEnd</name></name> != <name><name>that</name>.<name>displayEnd</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>fixedRange</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>fixedRange</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
