<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\NumberAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * NumberAxis.java
 * ---------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Laurence Vanhelsuwe;
 *
 * Changes
 * -------
 * 18-Sep-2001 : Added standard header and fixed DOS encoding problem (DG);
 * 22-Sep-2001 : Changed setMinimumAxisValue() and setMaximumAxisValue() so 
 *               that they clear the autoRange flag (DG);
 * 27-Nov-2001 : Removed old, redundant code (DG);
 * 30-Nov-2001 : Added accessor methods for the standard tick units (DG);
 * 08-Jan-2002 : Added setAxisRange() method (since renamed setRange()) (DG);
 * 16-Jan-2002 : Added setTickUnit() method.  Extended ValueAxis to support an 
 *               optional cross-hair (DG);
 * 08-Feb-2002 : Fixes bug to ensure the autorange is recalculated if the
 *               setAutoRangeIncludesZero flag is changed (DG);
 * 25-Feb-2002 : Added a new flag autoRangeStickyZero to provide further 
 *               control over margins in the auto-range mechanism.  Updated 
 *               constructors.  Updated import statements.  Moved the 
 *               createStandardTickUnits() method to the TickUnits class (DG);
 * 19-Apr-2002 : Updated Javadoc comments (DG);
 * 01-May-2002 : Updated for changes to TickUnit class, removed valueToString()
 *               method (DG);
 * 25-Jul-2002 : Moved the lower and upper margin attributes, and the
 *               auto-range minimum size, up one level to the ValueAxis 
 *               class (DG);
 * 05-Sep-2002 : Updated constructor to match changes in Axis class (DG);
 * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 04-Oct-2002 : Moved standardTickUnits from NumberAxis --&gt; ValueAxis (DG);
 * 24-Oct-2002 : Added a number format override (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 19-Nov-2002 : Removed grid settings (now controlled by the plot) (DG);
 * 14-Jan-2003 : Changed autoRangeMinimumSize from Number --&gt; double, and moved
 *               crosshair settings to the plot classes (DG);
 * 20-Jan-2003 : Removed the monolithic constructor (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 16-Jul-2003 : Reworked to allow for multiple secondary axes (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 07-Oct-2003 : Fixed bug (815028) in the auto range calculation (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 07-Nov-2003 : Modified to use NumberTick class (DG);
 * 21-Jan-2004 : Renamed translateJava2DToValue --&gt; java2DToValue, and 
 *               translateValueToJava2D --&gt; valueToJava2D (DG); 
 * 03-Mar-2004 : Added plotState to draw() method (DG);
 * 07-Apr-2004 : Changed string width calculation (DG);
 * 11-Jan-2005 : Removed deprecated methods in preparation for 1.0.0 
 *               release (DG);
 * 28-Mar-2005 : Renamed autoRangeIncludesZero() --&gt; getAutoRangeIncludesZero()
 *               and autoRangeStickyZero() --&gt; getAutoRangeStickyZero() (DG);
 * 21-Apr-2005 : Removed redundant argument from selectAutoTickUnit() (DG);
 * 22-Apr-2005 : Renamed refreshHorizontalTicks --&gt; refreshTicksHorizontal
 *               (and likewise the vertical version) for consistency with
 *               other axis classes (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 10-Feb-2006 : Added some API doc comments in respect of bug 821046 (DG);
 * 20-Feb-2006 : Modified equals() method to check rangeType field (fixes bug
 *               1435461) (DG);
 * 04-Sep-2006 : Fix auto range calculation for the case where all data values
 *               are constant and large (see bug report 1549218) (DG);
 * 11-Dec-2006 : Fix bug in auto-tick unit selection with tick format override,
 *               see bug 1608371 (DG);
 * 22-Mar-2007 : Use new defaultAutoRange attribute (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>FontRenderContext</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>LineMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>RangeType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * An axis for displaying numerical data.
 * &lt;P&gt;
 * If the axis is set up to automatically determine its range to fit the data,
 * you can ensure that the range includes zero (statisticians usually prefer
 * this) by setting the &lt;code&gt;autoRangeIncludesZero&lt;/code&gt; flag to 
 * &lt;code&gt;true&lt;/code&gt;.
 * &lt;P&gt;
 * The &lt;code&gt;NumberAxis&lt;/code&gt; class has a mechanism for automatically 
 * selecting a tick unit that is appropriate for the current axis range.  This
 * mechanism is an adaptation of code suggested by Laurence Vanhelsuwe.
 */</comment>
<class><specifier>public</specifier> class <name>NumberAxis</name> <super><extends>extends <name>ValueAxis</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2805933088476185789L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default value for the autoRangeIncludesZero flag. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_AUTO_RANGE_INCLUDES_ZERO</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value for the autoRangeStickyZero flag. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_AUTO_RANGE_STICKY_ZERO</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default tick unit. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>NumberTickUnit</name></type> <name>DEFAULT_TICK_UNIT</name> =<init> <expr>new <call><name>NumberTickUnit</name><argument_list>(
            <argument><expr>1.0</expr></argument>, <argument><expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default setting for the vertical tick labels flag. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_VERTICAL_TICK_LABELS</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The range type (can be used to force the axis to display only positive
     * values or only negative values).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RangeType</name></type> <name>rangeType</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that affects the axis range when the range is determined
     * automatically.  If the auto range does NOT include zero and this flag
     * is TRUE, then the range is changed to include zero.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoRangeIncludesZero</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag that affects the size of the margins added to the axis range when
     * the range is determined automatically.  If the value 0 falls within the
     * margin and this flag is TRUE, then the margin is truncated at zero.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>autoRangeStickyZero</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The tick unit for the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberTickUnit</name></type> <name>tickUnit</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The override number format. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>numberFormatOverride</name></decl>;</decl_stmt>

    <comment type="javadoc">/** An optional band for marking regions on the axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MarkerAxisBand</name></type> <name>markerBand</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>NumberAxis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Constructs a number axis, using default values where necessary.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>NumberAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><call><name><name>NumberAxis</name>.<name>createStandardTickUnits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeType</name></name> = <name><name>RangeType</name>.<name>FULL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoRangeIncludesZero</name></name> = <name>DEFAULT_AUTO_RANGE_INCLUDES_ZERO</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoRangeStickyZero</name></name> = <name>DEFAULT_AUTO_RANGE_STICKY_ZERO</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickUnit</name></name> = <name>DEFAULT_TICK_UNIT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>numberFormatOverride</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>markerBand</name></name> = <name>null</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the axis range type.
     * 
     * @return The axis range type (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeType(RangeType)
     */</comment>
    <function><type><specifier>public</specifier> <name>RangeType</name></type> <name>getRangeType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeType</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the axis range type.
     * 
     * @param rangeType  the range type (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeType()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeType</name><parameter_list>(<param><decl><type><name>RangeType</name></type> <name>rangeType</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>rangeType</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'rangeType' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeType</name></name> = <name>rangeType</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that indicates whether or not the automatic axis range
     * (if indeed it is determined automatically) is forced to include zero.
     *
     * @return The flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAutoRangeIncludesZero</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoRangeIncludesZero</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that indicates whether or not the axis range, if 
     * automatically calculated, is forced to include zero.
     * &lt;p&gt;
     * If the flag is changed to &lt;code&gt;true&lt;/code&gt;, the axis range is 
     * recalculated.
     * &lt;p&gt;
     * Any change to the flag will trigger an {@link AxisChangeEvent}.
     *
     * @param flag  the new value of the flag.
     * 
     * @see #getAutoRangeIncludesZero()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoRangeIncludesZero</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoRangeIncludesZero</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoRangeIncludesZero</name></name> = <name>flag</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>isAutoRange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that affects the auto-range when zero falls outside the
     * data range but inside the margins defined for the axis.
     *
     * @return The flag.
     * 
     * @see #setAutoRangeStickyZero(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getAutoRangeStickyZero</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoRangeStickyZero</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that affects the auto-range when zero falls outside the data
     * range but inside the margins defined for the axis.
     *
     * @param flag  the new flag.
     * 
     * @see #getAutoRangeStickyZero()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoRangeStickyZero</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>autoRangeStickyZero</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>autoRangeStickyZero</name></name> = <name>flag</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>isAutoRange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit for the axis.  
     * &lt;p&gt;
     * Note: if the &lt;code&gt;autoTickUnitSelection&lt;/code&gt; flag is 
     * &lt;code&gt;true&lt;/code&gt; the tick unit may be changed while the axis is being 
     * drawn, so in that case the return value from this method may be
     * irrelevant if the method is called before the axis has been drawn.
     *
     * @return The tick unit for the axis.
     * 
     * @see #setTickUnit(NumberTickUnit)
     * @see ValueAxis#isAutoTickUnitSelection()
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberTickUnit</name></type> <name>getTickUnit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickUnit</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick unit for the axis and sends an {@link AxisChangeEvent} to 
     * all registered listeners.  A side effect of calling this method is that
     * the "auto-select" feature for tick units is switched off (you can 
     * restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)}
     * method).
     *
     * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickUnit()
     * @see #setTickUnit(NumberTickUnit, boolean, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>NumberTickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick unit for the axis and, if requested, sends an 
     * {@link AxisChangeEvent} to all registered listeners.  In addition, an 
     * option is provided to turn off the "auto-select" feature for tick units 
     * (you can restore it using the 
     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).
     *
     * @param unit  the new tick unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  notify listeners?
     * @param turnOffAutoSelect  turn off the auto-tick selection?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickUnit</name><parameter_list>(<param><decl><type><name>NumberTickUnit</name></type> <name>unit</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>, 
                            <param><decl><type><name>boolean</name></type> <name>turnOffAutoSelect</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>unit</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'unit' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickUnit</name></name> = <name>unit</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>turnOffAutoSelect</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setAutoTickUnitSelection</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the number format override.  If this is non-null, then it will 
     * be used to format the numbers on the axis.
     *
     * @return The number formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setNumberFormatOverride(NumberFormat)
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getNumberFormatOverride</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>numberFormatOverride</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number format override.  If this is non-null, then it will be 
     * used to format the numbers on the axis.
     *
     * @param formatter  the number formatter (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getNumberFormatOverride()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNumberFormatOverride</name><parameter_list>(<param><decl><type><name>NumberFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>numberFormatOverride</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the (optional) marker band for the axis.
     *
     * @return The marker band (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMarkerBand(MarkerAxisBand)
     */</comment>
    <function><type><specifier>public</specifier> <name>MarkerAxisBand</name></type> <name>getMarkerBand</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>markerBand</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the marker band for the axis.
     * &lt;P&gt;
     * The marker band is optional, leave it set to &lt;code&gt;null&lt;/code&gt; if you 
     * don't require it.
     *
     * @param band the new band (&lt;code&gt;null&lt;code&gt; permitted).
     * 
     * @see #getMarkerBand()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMarkerBand</name><parameter_list>(<param><decl><type><name>MarkerAxisBand</name></type> <name>band</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>markerBand</name></name> = <name>band</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the axis to work with the specified plot.  If the axis has
     * auto-scaling, then sets the maximum and minimum values.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isAutoRange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data is visible.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxisPlot</name></type> <name>vap</name> =<init> <expr>(<name>ValueAxisPlot</name>) <name>plot</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>vap</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>r</name> = <call><name>getDefaultAutoRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>rangeType</name></name> == <name><name>RangeType</name>.<name>POSITIVE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>rangeType</name></name> == <name><name>RangeType</name>.<name>NEGATIVE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   
            }</block></then></if></else></if>
            
            <if>if <condition>(<expr><call><name>getAutoRangeIncludesZero</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><name>upper</name> - <name>lower</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// if fixed auto range, then derive lower bound...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>fixedAutoRange</name> =<init> <expr><call><name>getFixedAutoRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fixedAutoRange</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lower</name> = <name>upper</name> - <name>fixedAutoRange</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">// ensure the autorange is at least &lt;minRange&gt; in size...</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>minRange</name> =<init> <expr><call><name>getAutoRangeMinimumSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>range</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>expand</name> =<init> <expr>(<name>minRange</name> - <name>range</name>) / 2</expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>expand</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>expand</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>lower</name> == <name>upper</name></expr>)</condition><then> <block>{ <comment type="line">// see bug report 1549218</comment>
                        <decl_stmt><decl><type><name>double</name></type> <name>adjust</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call> / 10.0</expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>adjust</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>adjust</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>this</name>.<name>rangeType</name></name> == <name><name>RangeType</name>.<name>POSITIVE</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>lower</name> &lt; 0.0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>upper</name> = <name>upper</name> - <name>lower</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>lower</name> = 0.0</expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name><name>this</name>.<name>rangeType</name></name> == <name><name>RangeType</name>.<name>NEGATIVE</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>upper</name> &gt; 0.0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>upper</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>upper</name> = 0.0</expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if></else></if>
                }</block></then></if>

                <if>if <condition>(<expr><call><name>getAutoRangeStickyZero</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>upper</name> &lt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>upper</name> + <call><name>getUpperMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>upper</name> = <name>upper</name> + <call><name>getUpperMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>lower</name> &gt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>lower</name> - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>lower</name> = <name>lower</name> - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>upper</name> = <name>upper</name> + <call><name>getUpperMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <name>lower</name> - <call><name>getLowerMargin</name><argument_list>()</argument_list></call> * <name>range</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>

            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Converts a data value to a coordinate in Java2D space, assuming that the
     * axis runs along one edge of the specified dataArea.
     * &lt;p&gt;
     * Note that it is possible for the coordinate to fall outside the plotArea.
     *
     * @param value  the data value.
     * @param area  the area for plotting the data.
     * @param edge  the axis location.
     *
     * @return The Java2D coordinate.
     * 
     * @see #java2DToValue(double, Rectangle2D, RectangleEdge)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>max</name> 
                   - ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>min</name> 
                   + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) * (<name>max</name> - <name>min</name>)</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Converts a coordinate in Java2D space to the corresponding data value,
     * assuming that the axis runs along one edge of the specified dataArea.
     *
     * @param java2DValue  the coordinate in Java2D space.
     * @param area  the area in which the data is plotted.
     * @param edge  the location.
     *
     * @return The data value.
     * 
     * @see #valueToJava2D(double, Rectangle2D, RectangleEdge)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>axisMax</name> 
                   - (<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) * (<name>axisMax</name> - <name>axisMin</name>)</expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>axisMin</name> 
                   + (<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) * (<name>axisMax</name> - <name>axisMin</name>)</expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the value of the lowest visible tick on the axis.
     *
     * @return The value of the lowest visible tick on the axis.
     * 
     * @see #calculateHighestVisibleTickValue()
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateLowestVisibleTickValue</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>unit</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>index</name> =<init> <expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call> / <name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>index</name> * <name>unit</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the value of the highest visible tick on the axis.
     *
     * @return The value of the highest visible tick on the axis.
     * 
     * @see #calculateLowestVisibleTickValue()
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>calculateHighestVisibleTickValue</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>unit</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>index</name> =<init> <expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call> / <name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>index</name> * <name>unit</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the number of visible ticks.
     *
     * @return The number of visible ticks on the axis.
     */</comment>
    <function><type><specifier>protected</specifier> <name>int</name></type> <name>calculateVisibleTickCount</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>unit</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>floor</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call> / <name>unit</name></expr></argument>)</argument_list></call>
                      - <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call> / <name>unit</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location.
     * @param plotArea  the area within which the axes and data should be drawn
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area within which the data should be drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the location of the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// if the axis is not visible, don't draw it...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>state</name> = new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// even though the axis is not visible, we need ticks for the </comment>
            <comment type="line">// gridlines...</comment>
            <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr><call><name>refreshTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
            <expr_stmt><expr><call><name><name>state</name>.<name>setTicks</name></name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>state</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// draw the tick marks and labels...</comment>
        <expr_stmt><expr><name>state</name> = <call><name>drawTickMarksAndLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        // draw the marker band (if there is one)...</comment>
<comment type="line">//        if (getMarkerBand() != null) {</comment>
<comment type="line">//            if (edge == RectangleEdge.BOTTOM) {</comment>
<comment type="line">//                cursor = cursor - getMarkerBand().getHeight(g2);</comment>
<comment type="line">//            }</comment>
<comment type="line">//            getMarkerBand().draw(g2, plotArea, dataArea, 0, cursor);</comment>
<comment type="line">//        }</comment>
        
        <comment type="line">// draw the axis label...</comment>
        <expr_stmt><expr><name>state</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Creates the standard tick units.
     * &lt;P&gt;
     * If you don't like these defaults, create your own instance of TickUnits
     * and then pass it to the setStandardTickUnits() method in the
     * NumberAxis class.
     *
     * @return The standard tick units.
     * 
     * @see #setStandardTickUnits(TickUnitSource)
     * @see #createIntegerTickUnits()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createStandardTickUnits</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df0</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.00000000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df1</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0000000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df2</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.000000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df3</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.00000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df4</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df5</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.000"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df6</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.00"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df7</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df8</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"#,##0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df9</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"#,###,##0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df10</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"#,###,###,##0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// we can add the units in any order, the TickUnits collection will </comment>
        <comment type="line">// sort them...</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000001</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000001</expr></argument>, <argument><expr><name>df2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00001</expr></argument>, <argument><expr><name>df3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0001</expr></argument>, <argument><expr><name>df4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.001</expr></argument>, <argument><expr><name>df5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.01</expr></argument>, <argument><expr><name>df6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.1</expr></argument>, <argument><expr><name>df7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000000</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000000.0</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000000.0</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00000025</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000025</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000025</expr></argument>, <argument><expr><name>df2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00025</expr></argument>, <argument><expr><name>df3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0025</expr></argument>, <argument><expr><name>df4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.025</expr></argument>, <argument><expr><name>df5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.25</expr></argument>, <argument><expr><name>df6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2.5</expr></argument>, <argument><expr><name>df7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250000</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250000000</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500000000.0</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000000000.0</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250000000000.0</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000005</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000005</expr></argument>, <argument><expr><name>df2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00005</expr></argument>, <argument><expr><name>df3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0005</expr></argument>, <argument><expr><name>df4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.005</expr></argument>, <argument><expr><name>df5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.05</expr></argument>, <argument><expr><name>df6</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.5</expr></argument>, <argument><expr><name>df7</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000L</expr></argument>, <argument><expr><name>df8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000L</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000L</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000L</expr></argument>, <argument><expr><name>df9</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000000L</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000000L</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000000L</expr></argument>, <argument><expr><name>df10</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of tick units for integer values.
     *
     * @return A collection of tick units for integer values.
     * 
     * @see #setStandardTickUnits(TickUnitSource)
     * @see #createStandardTickUnits()
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createIntegerTickUnits</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df0</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DecimalFormat</name></type> <name>df1</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"#,##0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500</expr></argument>, <argument><expr><name>df0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000000</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000000.0</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000000.0</expr></argument>, <argument><expr><name>df1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Creates a collection of standard tick units.  The supplied locale is 
     * used to create the number formatter (a localised instance of 
     * &lt;code&gt;NumberFormat&lt;/code&gt;).
     * &lt;P&gt;
     * If you don't like these defaults, create your own instance of 
     * {@link TickUnits} and then pass it to the 
     * &lt;code&gt;setStandardTickUnits()&lt;/code&gt; method.
     *
     * @param locale  the locale.
     *
     * @return A tick unit collection.
     * 
     * @see #setStandardTickUnits(TickUnitSource)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createStandardTickUnits</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>numberFormat</name> =<init> <expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// we can add the units in any order, the TickUnits collection will </comment>
        <comment type="line">// sort them...</comment>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000001</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000001</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00001</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0001</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.001</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.01</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.1</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1</expr></argument>,            <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000000</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000000.0</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00000025</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000025</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000025</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00025</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0025</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.025</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.25</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2.5</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>250000000</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2500000000.0</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>25000000000.0</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0000005</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.000005</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.00005</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.0005</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.005</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.05</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>0.5</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5L</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50L</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500L</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000L</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000L</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000L</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000L</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000L</expr></argument>,    <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000L</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000000L</expr></argument>,  <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000000L</expr></argument>,  <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of tick units for integer values.
     * Uses a given Locale to create the DecimalFormats.
     *
     * @param locale the locale to use to represent Numbers.
     *
     * @return A collection of tick units for integer values.
     * 
     * @see #setStandardTickUnits(TickUnitSource)
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>TickUnitSource</name></type> <name>createIntegerTickUnits</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>TickUnits</name></type> <name>units</name> =<init> <expr>new <call><name>TickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NumberFormat</name></type> <name>numberFormat</name> =<init> <expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1</expr></argument>,              <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2</expr></argument>,              <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5</expr></argument>,              <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10</expr></argument>,             <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20</expr></argument>,             <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50</expr></argument>,             <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100</expr></argument>,            <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200</expr></argument>,            <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500</expr></argument>,            <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000</expr></argument>,           <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000</expr></argument>,          <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000</expr></argument>,         <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000</expr></argument>,        <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>20000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>50000000</expr></argument>,       <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>100000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>200000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>500000000</expr></argument>,      <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>1000000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>2000000000</expr></argument>,     <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>5000000000.0</expr></argument>,   <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>units</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr>10000000000.0</expr></argument>,  <argument><expr><name>numberFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>units</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum tick label height.
     * 
     * @param g2  the graphics device.
     * 
     * @return The maximum height.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>estimateMaximumTickLabelHeight</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getTop</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> += <call><name><name>tickLabelFont</name>.<name>getLineMetrics</name></name><argument_list>(<argument><expr>"123"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Estimates the maximum width of the tick labels, assuming the specified 
     * tick unit is used.
     * &lt;P&gt;
     * Rather than computing the string bounds of every tick on the axis, we 
     * just look at two values: the lower bound and the upper bound for the 
     * axis.  These two values will usually be representative.
     *
     * @param g2  the graphics device.
     * @param unit  the tick unit to use for calculation.
     *
     * @return The estimated maximum width of the tick labels.
     */</comment>
    <function><type><specifier>protected</specifier> <name>double</name></type> <name>estimateMaximumTickLabelWidth</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                   <param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>tickLabelInsets</name> =<init> <expr><call><name>getTickLabelInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><call><name><name>tickLabelInsets</name>.<name>getLeft</name></name><argument_list>()</argument_list></call> + <call><name><name>tickLabelInsets</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// all tick labels have the same width (equal to the height of the </comment>
            <comment type="line">// font)...</comment>
            <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LineMetrics</name></type> <name>lm</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call>.<call><name>getLineMetrics</name><argument_list>(<argument><expr>"0"</expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>lm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// look at lower and upper bounds...</comment>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name>getRange</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>lowerStr</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>upperStr</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>lowerStr</name> = <call><name><name>unit</name>.<name>valueToString</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>upperStr</name> = <call><name><name>unit</name>.<name>valueToString</name></name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></else></if>
            <decl_stmt><decl><type><name>double</name></type> <name>w1</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>lowerStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>w2</name> =<init> <expr><call><name><name>fm</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>upperStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> += <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>w1</name></expr></argument>, <argument><expr><name>w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                      <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                      <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectHorizontalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectVerticalAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param edge  the axis location.
     */</comment>
   <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectHorizontalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                               <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                               <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelWidth</name> =<init> <expr><call><name>estimateMaximumTickLabelWidth</name><argument_list>(
            <argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TickUnit</name></type> <name>unit1</name> =<init> <expr><call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit1Width</name> =<init> <expr><call><name>lengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// then extrapolate...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>guess</name> =<init> <expr>(<name>tickLabelWidth</name> / <name>unit1Width</name>) * <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>NumberTickUnit</name></type> <name>unit2</name> 
            =<init> <expr>(<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Width</name> =<init> <expr><call><name>lengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tickLabelWidth</name> = <call><name>estimateMaximumTickLabelWidth</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickLabelWidth</name> &gt; <name>unit2Width</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unit2</name> = (<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit2</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Selects an appropriate tick value for the axis.  The strategy is to
     * display as many ticks as possible (selected from an array of 'standard'
     * tick units) without the labels overlapping.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the axis location.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectVerticalAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                              <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                              <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelHeight</name> =<init> <expr><call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// start with the current tick unit...</comment>
        <decl_stmt><decl><type><name>TickUnitSource</name></type> <name>tickUnits</name> =<init> <expr><call><name>getStandardTickUnits</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TickUnit</name></type> <name>unit1</name> =<init> <expr><call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><call><name>getTickUnit</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unitHeight</name> =<init> <expr><call><name>lengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// then extrapolate...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>guess</name> =<init> <expr>(<name>tickLabelHeight</name> / <name>unitHeight</name>) * <call><name><name>unit1</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>NumberTickUnit</name></type> <name>unit2</name> 
            =<init> <expr>(<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getCeilingTickUnit</name></name><argument_list>(<argument><expr><name>guess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit2Height</name> =<init> <expr><call><name>lengthToJava2D</name><argument_list>(<argument><expr><call><name><name>unit2</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tickLabelHeight</name> = <call><name>estimateMaximumTickLabelHeight</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickLabelHeight</name> &gt; <name>unit2Height</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>unit2</name> = (<name>NumberTickUnit</name>) <call><name><name>tickUnits</name>.<name>getLargerTickUnit</name></name><argument_list>(<argument><expr><name>unit2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setTickUnit</name><argument_list>(<argument><expr><name>unit2</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                             <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>refreshTicksVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>size</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>calculateVisibleTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lowestTickValue</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>count</name> &lt;= <name><name>ValueAxis</name>.<name>MAXIMUM_TICK_COUNT</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>currentTickValue</name> =<init> <expr><name>lowestTickValue</name> + (<name>i</name> * <name>size</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>valueToString</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>

                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>NumberTick</name><argument_list>(
                    <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, 
                    <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>
                )</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     *
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                        <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                        <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isAutoTickUnitSelection</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>selectAutoTickUnit</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>double</name></type> <name>size</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>calculateVisibleTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lowestTickValue</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>count</name> &lt;= <name><name>ValueAxis</name>.<name>MAXIMUM_TICK_COUNT</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>currentTickValue</name> =<init> <expr><name>lowestTickValue</name> + (<name>i</name> * <name>size</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>valueToString</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{ 
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>

                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>NumberTick</name><argument_list>(
                    <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, 
                    <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>
                )</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the axis.
     * 
     * @return A clone
     * 
     * @throws CloneNotSupportedException if some component of the axis does 
     *         not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>clone</name> =<init> <expr>(<name>NumberAxis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormatOverride</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>numberFormatOverride</name></name> 
                = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>numberFormatOverride</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>    
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{           
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>NumberAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>that</name> =<init> <expr>(<name>NumberAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>        
        <if>if <condition>(<expr><name><name>this</name>.<name>autoRangeIncludesZero</name></name> != <name><name>that</name>.<name>autoRangeIncludesZero</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>autoRangeStickyZero</name></name> != <name><name>that</name>.<name>autoRangeStickyZero</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnit</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickUnit</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>numberFormatOverride</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>numberFormatOverride</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rangeType</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rangeType</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getLabel</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getLabel</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>0</expr>;</return>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
