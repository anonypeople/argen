<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\PeriodAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * PeriodAxis.java
 * ---------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 01-Jun-2004 : Version 1 (DG);
 * 16-Sep-2004 : Fixed bug in equals() method, added clone() method and 
 *               PublicCloneable interface (DG);
 * 25-Nov-2004 : Updates to support major and minor tick marks (DG);
 * 25-Feb-2005 : Fixed some tick mark bugs (DG);
 * 15-Apr-2005 : Fixed some more tick mark bugs (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 16-Jun-2005 : Fixed zooming (DG);
 * 15-Sep-2005 : Changed configure() method to check autoRange flag,
 *               and added ticks to state (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Oct-2006 : Updated for deprecations in RegularTimePeriod and 
 *               subclasses (DG);
 * 22-Mar-2007 : Use new defaultAutoRange attribute (DG);
 * 31-Jul-2007 : Fix for inverted axis labelling (see bug 1763413) (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Day</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Month</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>RegularTimePeriod</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>Year</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * An axis that displays a date scale based on a 
 * {@link org.jfree.data.time.RegularTimePeriod}.  This axis works when
 * displayed across the bottom or top of a plot, but is broken for display at
 * the left or right of charts.
 */</comment>
<class><specifier>public</specifier> class <name>PeriodAxis</name> <super><extends>extends <name>ValueAxis</name></extends> 
                        <implements>implements <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8353295532075872069L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The first time period in the overall range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularTimePeriod</name></type> <name>first</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The last time period in the overall range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RegularTimePeriod</name></type> <name>last</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The time zone used to convert 'first' and 'last' to absolute 
     * milliseconds. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TimeZone</name></type> <name>timeZone</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A calendar used for date manipulations in the current time zone.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Calendar</name></type> <name>calendar</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The {@link RegularTimePeriod} subclass used to automatically determine 
     * the axis range. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Class</name></type> <name>autoRangeTimePeriodClass</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Indicates the {@link RegularTimePeriod} subclass that is used to 
     * determine the spacing of the major tick marks.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Class</name></type> <name>majorTickTimePeriodClass</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that indicates whether or not tick marks are visible for the 
     * axis. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>minorTickMarksVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Indicates the {@link RegularTimePeriod} subclass that is used to 
     * determine the spacing of the minor tick marks.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Class</name></type> <name>minorTickTimePeriodClass</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The length of the tick mark inside the data area (zero permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>minorTickMarkInsideLength</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The length of the tick mark outside the data area (zero permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name></type> <name>minorTickMarkOutsideLength</name> =<init> <expr>2.0f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw tick marks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>minorTickMarkStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw tick marks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>minorTickMarkPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Info for each labelling band. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PeriodAxisLabelInfo</name><index>[]</index></type> <name>labelInfo</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new axis.
     * 
     * @param label  the axis label.
     */</comment>
    <constructor><specifier>public</specifier> <name>PeriodAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr>new <call><name>Day</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>Day</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new axis.
     * 
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param first  the first time period in the axis range 
     *               (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param last  the last time period in the axis range 
     *              (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PeriodAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, 
                      <param><decl><type><name>RegularTimePeriod</name></type> <name>first</name></decl></param>, <param><decl><type><name>RegularTimePeriod</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new axis.
     * 
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param first  the first time period in the axis range 
     *               (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param last  the last time period in the axis range 
     *              (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param timeZone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PeriodAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, 
                      <param><decl><type><name>RegularTimePeriod</name></type> <name>first</name></decl></param>, <param><decl><type><name>RegularTimePeriod</name></type> <name>last</name></decl></param>, 
                      <param><decl><type><name>TimeZone</name></type> <name>timeZone</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>first</name></name> = <name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>last</name></name> = <name>last</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>timeZone</name></name> = <name>timeZone</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>calendar</name></name> = <call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>timeZone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name> = <call><name><name>first</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickTimePeriodClass</name></name> = <call><name><name>first</name>.<name>getClass</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarksVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickTimePeriodClass</name></name> = <call><name><name>RegularTimePeriod</name>.<name>downsize</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>majorTickTimePeriodClass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAutoRange</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelInfo</name></name> = new <name><name>PeriodAxisLabelInfo</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr>0</expr>]</index></name> = new <call><name>PeriodAxisLabelInfo</name><argument_list>(<argument><expr><name><name>Month</name>.<name><name/></name></name>class</expr></argument>, 
                <argument><expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"MMM"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr>1</expr>]</index></name> = new <call><name>PeriodAxisLabelInfo</name><argument_list>(<argument><expr><name><name>Year</name>.<name><name/></name></name>class</expr></argument>, 
                <argument><expr>new <call><name>SimpleDateFormat</name><argument_list>(<argument><expr>"yyyy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the first time period in the axis range.
     * 
     * @return The first time period (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>getFirst</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>first</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the first time period in the axis range and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param first  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFirst</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>first</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>first</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'first' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>first</name></name> = <name>first</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the last time period in the axis range.
     * 
     * @return The last time period (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>getLast</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>last</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the last time period in the axis range and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param last  the time period (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLast</name><parameter_list>(<param><decl><type><name>RegularTimePeriod</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>last</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'last' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>last</name></name> = <name>last</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the time zone used to convert the periods defining the axis 
     * range into absolute milliseconds.
     * 
     * @return The time zone (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>TimeZone</name></type> <name>getTimeZone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>timeZone</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the time zone that is used to convert the time periods into 
     * absolute milliseconds.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTimeZone</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>zone</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'zone' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>timeZone</name></name> = <name>zone</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>calendar</name></name> = <call><name><name>Calendar</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the class used to create the first and last time periods for 
     * the axis range when the auto-range flag is set to &lt;code&gt;true&lt;/code&gt;.
     * 
     * @return The class (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getAutoRangeTimePeriodClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the class used to create the first and last time periods for the 
     * axis range when the auto-range flag is set to &lt;code&gt;true&lt;/code&gt; and 
     * sends an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param c  the class (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAutoRangeTimePeriodClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'c' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name> = <name>c</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the class that controls the spacing of the major tick marks.
     * 
     * @return The class (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getMajorTickTimePeriodClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>majorTickTimePeriodClass</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the class that controls the spacing of the major tick marks, and 
     * sends an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param c  the class (a subclass of {@link RegularTimePeriod} is 
     *           expected).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMajorTickTimePeriodClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'c' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickTimePeriodClass</name></name> = <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not minor tick marks
     * are displayed for the axis.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isMinorTickMarksVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickMarksVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not minor tick marks
     * are displayed for the axis, and sends a {@link AxisChangeEvent}
     * to all registered listeners.
     * 
     * @param visible  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickMarksVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarksVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the class that controls the spacing of the minor tick marks.
     * 
     * @return The class (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getMinorTickTimePeriodClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickTimePeriodClass</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the class that controls the spacing of the minor tick marks, and 
     * sends an {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param c  the class (a subclass of {@link RegularTimePeriod} is 
     *           expected).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickTimePeriodClass</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>c</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'c' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickTimePeriodClass</name></name> = <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to display minor tick marks, if they are 
     * visible.
     * 
     * @return A stroke (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getMinorTickMarkStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickMarkStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to display minor tick marks, if they are 
     * visible, and sends a {@link AxisChangeEvent} to all registered 
     * listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickMarkStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to display minor tick marks, if they are 
     * visible.
     * 
     * @return A paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getMinorTickMarkPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickMarkPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to display minor tick marks, if they are 
     * visible, and sends a {@link AxisChangeEvent} to all registered 
     * listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickMarkPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the inside length for the minor tick marks.
     * 
     * @return The length.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMinorTickMarkInsideLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickMarkInsideLength</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the inside length of the minor tick marks and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param length  the length.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickMarkInsideLength</name><parameter_list>(<param><decl><type><name>float</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkInsideLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outside length for the minor tick marks.
     * 
     * @return The length.
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name></type> <name>getMinorTickMarkOutsideLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the outside length of the minor tick marks and sends an 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param length  the length.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickMarkOutsideLength</name><parameter_list>(<param><decl><type><name>float</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkOutsideLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an array of label info records.
     * 
     * @return An array.
     */</comment>
    <function><type><specifier>public</specifier> <name>PeriodAxisLabelInfo</name><index>[]</index></type> <name>getLabelInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelInfo</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the array of label info records.
     * 
     * @param info  the info.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelInfo</name><parameter_list>(<param><decl><type><name><name>PeriodAxisLabelInfo</name><index>[]</index></name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelInfo</name></name> = <name>info</name></expr>;</expr_stmt>
        <comment type="line">// FIXME: shouldn't this generate an event?</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the range for the axis.
     *
     * @return The axis range (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getRange</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// TODO: find a cleaner way to do this...</comment>
        <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>first</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>this</name>.<name>last</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range for the axis, if requested, sends an 
     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, 
     * the auto-range flag is set to &lt;code&gt;false&lt;/code&gt; (optional).
     *
     * @param range  the range (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param turnOffAutoRange  a flag that controls whether or not the auto 
     *                          range is turned off.         
     * @param notify  a flag that controls whether or not listeners are 
     *                notified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>turnOffAutoRange</name></decl></param>, 
                         <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setRange</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>turnOffAutoRange</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>upper</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>lower</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name><name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>first</name></name> = <call><name>createInstance</name><argument_list>(<argument><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name></expr></argument>, 
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>last</name></name> = <call><name>createInstance</name><argument_list>(<argument><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name></expr></argument>, 
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>

    <comment type="javadoc">/**
     * Configures the axis to work with the current plot.  Override this method
     * to perform any special processing (such as auto-rescaling).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configure</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>isAutoRange</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>autoAdjustRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Estimates the space (height or width) required to draw the axis.
     *
     * @param g2  the graphics device.
     * @param plot  the plot that the axis belongs to.
     * @param plotArea  the area within which the plot (including axes) should 
     *                  be drawn.
     * @param edge  the axis location.
     * @param space  space already reserved.
     *
     * @return The space required to draw the axis (including pre-reserved 
     *         space).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>reserveSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Plot</name></type> <name>plot</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
                                  <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// create a new space object if one wasn't supplied...</comment>
        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// if the axis is not visible, no additional space is required...</comment>
        <if>if <condition>(<expr>!<call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>space</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// if the axis has a fixed dimension, return it...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>dimension</name> =<init> <expr><call><name>getFixedDimension</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dimension</name> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><name>dimension</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// get the axis label size and update the space object...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>labelEnclosure</name> =<init> <expr><call><name>getLabelEnclosure</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelHeight</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelWidth</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>tickLabelBandsDimension</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>labelInfo</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PeriodAxisLabelInfo</name></type> <name>info</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><call><name><name>info</name>.<name>getLabelFont</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tickLabelBandsDimension</name> 
                += <call><name><name>info</name>.<name>getPadding</name></name><argument_list>()</argument_list></call>.<call><name>extendHeight</name><argument_list>(<argument><expr><call><name><name>fm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelHeight</name> = <call><name><name>labelEnclosure</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>space</name>.<name>add</name></name><argument_list>(<argument><expr><name>labelHeight</name> + <name>tickLabelBandsDimension</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelWidth</name> = <call><name><name>labelEnclosure</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>space</name>.<name>add</name></name><argument_list>(<argument><expr><name>labelWidth</name> + <name>tickLabelBandsDimension</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="line">// add space for the outer tick labels, if any...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>tickMarkSpace</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isTickMarksVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tickMarkSpace</name> = <call><name>getTickMarkOutsideLength</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minorTickMarksVisible</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tickMarkSpace</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>tickMarkSpace</name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>space</name>.<name>add</name></name><argument_list>(<argument><expr><name>tickMarkSpace</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>space</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location (determines where to draw the axis).
     * @param plotArea  the area within which the axes and plot should be drawn.
     * @param dataArea  the area within which the data should be drawn.
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isAxisLineVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawAxisLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>drawTickMarks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>band</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>band</name> &lt; <name><name>this</name>.<name>labelInfo</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>band</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>axisState</name> = <call><name>drawTickLabels</name><argument_list>(<argument><expr><name>band</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
        <comment type="line">// draw the axis label (note that 'state' is passed in *and* </comment>
        <comment type="line">// returned)...</comment>
        <expr_stmt><expr><name>axisState</name> = <call><name>drawLabel</name><argument_list>(<argument><expr><call><name>getLabel</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, 
                <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>axisState</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the tick marks for the axis.
     * 
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the data area.
     * @param edge  the edge.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTickMarks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                 <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawTickMarksHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawTickMarksVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the major and minor tick marks for an axis that lies at the top or 
     * bottom of the plot.
     * 
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the data area.
     * @param edge  the edge.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTickMarksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>, 
                                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                           <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x0</name> =<init> <expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y0</name> =<init> <expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>insideLength</name> =<init> <expr><call><name>getTickMarkInsideLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>outsideLength</name> =<init> <expr><call><name>getTickMarkOutsideLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>t</name> =<init> <expr><call><name><name>RegularTimePeriod</name>.<name>createInstance</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>majorTickTimePeriodClass</name></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>first</name>.<name>getStart</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name>getTimeZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>t0</name> =<init> <expr><call><name><name>t</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>inside</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>outside</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>firstOnAxis</name> =<init> <expr><call><name>getFirst</name><argument_list>()</argument_list></call>.<call><name>getFirstMillisecond</name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>lastOnAxis</name> =<init> <expr><call><name>getLast</name><argument_list>()</argument_list></call>.<call><name>getLastMillisecond</name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>t0</name> &lt;= <name>lastOnAxis</name></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, 
                    <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x0</name> = <call><name>valueToJava2D</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>inside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name> + <name>insideLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
                <expr_stmt><expr><name>outside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name> - <name>outsideLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>inside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name> - <name>insideLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>outside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name> + <name>outsideLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <if>if <condition>(<expr><name>t0</name> &gt; <name>firstOnAxis</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getTickMarkPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getTickMarkStroke</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>outside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line">// draw minor tick marks</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>minorTickMarksVisible</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>tminor</name> =<init> <expr><call><name><name>RegularTimePeriod</name>.<name>createInstance</name></name><argument_list>(
                        <argument><expr><name><name>this</name>.<name>minorTickTimePeriodClass</name></name></expr></argument>, <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><call><name>getTimeZone</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>tt0</name> =<init> <expr><call><name><name>tminor</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>tt0</name> &lt; <call><name><name>t</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call> 
                        &amp;&amp; <name>tt0</name> &lt; <name>lastOnAxis</name></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>xx0</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>tt0</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, 
                                <argument><expr><name>y0</name> + <name><name>this</name>.<name>minorTickMarkInsideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>outside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, 
                                <argument><expr><name>y0</name> - <name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, 
                                <argument><expr><name>y0</name> - <name><name>this</name>.<name>minorTickMarkInsideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>outside</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>xx0</name></expr></argument>, 
                                <argument><expr><name>y0</name> + <name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <if>if <condition>(<expr><name>tt0</name> &gt;= <name>firstOnAxis</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickMarkPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickMarkStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>inside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>outside</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>tminor</name> = <call><name><name>tminor</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tt0</name> = <call><name><name>tminor</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>            
            <expr_stmt><expr><name>t</name> = <call><name><name>t</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>t0</name> = <call><name><name>t</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorUp</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>outsideLength</name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>state</name>.<name>cursorDown</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>outsideLength</name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>minorTickMarkOutsideLength</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>setTicks</name></name><argument_list>(<argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the tick marks for a vertical axis.
     * 
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the data area.
     * @param edge  the edge.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTickMarksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>, 
                                         <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                         <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// FIXME:  implement this...       </comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the tick labels for one "band" of time periods.
     * 
     * @param band  the band index (zero-based).
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the data area.
     * @param edge  the edge where the axis is located.
     * 
     * @return The updated axis state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisState</name></type> <name>drawTickLabels</name><parameter_list>(<param><decl><type><name>int</name></type> <name>band</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                                       <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                       <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// work out the initial gap</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>delta1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>delta1</name> = <name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getPadding</name><argument_list>()</argument_list></call>.<call><name>calculateTopOutset</name><argument_list>(
                    <argument><expr><call><name><name>fm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>delta1</name> = <name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getPadding</name><argument_list>()</argument_list></call>.<call><name>calculateBottomOutset</name><argument_list>(
                    <argument><expr><call><name><name>fm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>moveCursor</name></name><argument_list>(<argument><expr><name>delta1</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>first</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>axisMax</name> =<init> <expr><call><name><name>this</name>.<name>last</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getLabelPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// work out the number of periods to skip for labelling</comment>
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>p1</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>createInstance</name><argument_list>(
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>axisMin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>p2</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>createInstance</name><argument_list>(
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>axisMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label1</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDateFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>p1</name>.<name>getMiddleMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label2</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDateFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>p2</name>.<name>getMiddleMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>b1</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label1</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>b2</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label2</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><call><name><name>b1</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b2</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>ww</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name>java2DToValue</name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>w</name> + 5.0</expr></argument>, 
                <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ww</name> = <name>axisMax</name> - <name>ww</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>ww</name> = <name>ww</name> - <name>axisMin</name></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>long</name></type> <name>length</name> =<init> <expr><call><name><name>p1</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call> 
                      - <call><name><name>p1</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>periods</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>ww</name> / <name>length</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>p</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>createInstance</name><argument_list>(
                <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>axisMin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>b</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>lastXX</name> =<init> <expr>0L</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr><call>(<name>float</name>) <argument_list>(<argument><expr><call><name><name>state</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>yDelta</name> =<init> <expr>(<name>float</name>) <call><name><name>b1</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>yDelta</name> = -<name>yDelta</name></expr>;</expr_stmt>
        }</block></then></if>
        <while>while <condition>(<expr><call><name><name>p</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call> &lt;= <name>axisMax</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getMiddleMillisecond</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>DateFormat</name></type> <name>df</name> =<init> <expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDateFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>df</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>p</name>.<name>getMiddleMillisecond</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>first</name> =<init> <expr><call><name><name>p</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>last</name> =<init> <expr><call><name><name>p</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>last</name> &gt; <name>axisMax</name></expr>)</condition><then> <block>{
                <comment type="line">// this is the last period, but it is only partially visible </comment>
                <comment type="line">// so check that the label will fit before displaying it...</comment>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bb</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>(<name>x</name> + <call><name><name>bb</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2) &gt; <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>xstart</name> =<init> <expr>(<name>float</name>) <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, 
                            <argument><expr><name>axisMin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>bb</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt; (<call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>xstart</name>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>x</name> = ((<name>float</name>) <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> + <name>xstart</name>) / 2.0f</expr>;</expr_stmt>   
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>label</name> = <name>null</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>first</name> &lt; <name>axisMin</name></expr>)</condition><then> <block>{
                <comment type="line">// this is the first period, but it is only partially visible </comment>
                <comment type="line">// so check that the label will fit before displaying it...</comment>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bb</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>(<name>x</name> - <call><name><name>bb</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2) &lt; <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>float</name></type> <name>xlast</name> =<init> <expr>(<name>float</name>) <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, 
                            <argument><expr><name>axisMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>bb</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt; (<name>xlast</name> - <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>x</name> = (<name>xlast</name> + (<name>float</name>) <call><name><name>dataArea</name>.<name>getX</name></name><argument_list>()</argument_list></call>) / 2.0f</expr>;</expr_stmt>   
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>label</name> = <name>null</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                
            }</block></then></if>
            <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getLabelPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> = <call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>lastXX</name> &gt; 0L</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDrawDividers</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>long</name></type> <name>nextXX</name> =<init> <expr><call><name><name>p</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>mid</name> =<init> <expr>(<name>lastXX</name> + <name>nextXX</name>) / 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>float</name></type> <name>mid2d</name> =<init> <expr>(<name>float</name>) <call><name>valueToJava2D</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDividerStroke</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getDividerPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>(<argument><expr><name>mid2d</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>mid2d</name></expr></argument>, <argument><expr><name>y</name> + <name>yDelta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>lastXX</name> = <name>last</name></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>periods</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>p</name> = <call><name><name>p</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   
            }</block></for>
        }</block></while>
        <decl_stmt><decl><type><name>double</name></type> <name>used</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>used</name> = <call><name><name>b</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// work out the trailing gap</comment>
            <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>used</name> += <name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getPadding</name><argument_list>()</argument_list></call>.<call><name>calculateBottomOutset</name><argument_list>(
                        <argument><expr><call><name><name>fm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then>
            <else>else <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>used</name> += <name><name>this</name>.<name>labelInfo</name><index>[<expr><name>band</name></expr>]</index></name>.<call><name>getPadding</name><argument_list>()</argument_list></call>.<call><name>calculateTopOutset</name><argument_list>(
                        <argument><expr><call><name><name>fm</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>moveCursor</name></name><argument_list>(<argument><expr><name>used</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <return>return <expr><name>state</name></expr>;</return>    
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the ticks for the axis, storing the results
     * in the tick list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area inside the axes.
     * @param edge  the edge on which the axis is located.
     * 
     * @return The list of ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                             <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>Collections</name>.<name>EMPTY_LIST</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Converts a data value to a coordinate in Java2D space, assuming that the
     * axis runs along one edge of the specified dataArea.
     * &lt;p&gt;
     * Note that it is possible for the coordinate to fall outside the area.
     *
     * @param value  the data value.
     * @param area  the area for plotting the data.
     * @param edge  the edge along which the axis lies.
     *
     * @return The Java2D coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>,
                                <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>first</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>this</name>.<name>last</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>minX</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>maxX</name> =<init> <expr><call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name>maxX</name> + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>minX</name> - <name>maxX</name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>minX</name> + ((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxX</name> - <name>minX</name>)</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>minY</name> =<init> <expr><call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>maxY</name> =<init> <expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name>minY</name> + (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxY</name> - <name>minY</name>))</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name>maxY</name> - (((<name>value</name> - <name>axisMin</name>) / (<name>axisMax</name> - <name>axisMin</name>)) 
                         * (<name>maxY</name> - <name>minY</name>))</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Converts a coordinate in Java2D space to the corresponding data value,
     * assuming that the axis runs along one edge of the specified dataArea.
     *
     * @param java2DValue  the coordinate in Java2D space.
     * @param area  the area in which the data is plotted.
     * @param edge  the edge along which the axis lies.
     *
     * @return The data value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>java2DToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>java2DValue</name></decl></param>,
                                <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr><name><name>Double</name>.<name>NaN</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>max</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>first</name>.<name>getFirstMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init> <expr><call><name><name>this</name>.<name>last</name>.<name>getLastMillisecond</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>calendar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>min</name> = <call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max</name> = <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><call><name>isInverted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
             <expr_stmt><expr><name>result</name> = <name>axisMax</name> - ((<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                      * (<name>axisMax</name> - <name>axisMin</name>))</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
             <expr_stmt><expr><name>result</name> = <name>axisMin</name> + ((<name>java2DValue</name> - <name>min</name>) / (<name>max</name> - <name>min</name>) 
                      * (<name>axisMax</name> - <name>axisMin</name>))</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data is visible.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxisPlot</name></type> <name>vap</name> =<init> <expr>(<name>ValueAxisPlot</name>) <name>plot</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Range</name></type> <name>r</name> =<init> <expr><call><name><name>vap</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>r</name> = <call><name>getDefaultAutoRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <decl_stmt><decl><type><name>long</name></type> <name>upper</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>lower</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><call><name><name>r</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>first</name></name> = <call><name>createInstance</name><argument_list>(<argument><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name></expr></argument>, 
                    <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>last</name></name> = <call><name>createInstance</name><argument_list>(<argument><expr><name><name>this</name>.<name>autoRangeTimePeriodClass</name></name></expr></argument>, 
                    <argument><expr>new <call><name>Date</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>PeriodAxis</name> &amp;&amp; <call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PeriodAxis</name></type> <name>that</name> =<init> <expr>(<name>PeriodAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>first</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>first</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>last</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>last</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>timeZone</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>timeZone</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>autoRangeTimePeriodClass</name>.<name>equals</name></name><argument_list>(
                    <argument><expr><name><name>that</name>.<name>autoRangeTimePeriodClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!(<call><name>isMinorTickMarksVisible</name><argument_list>()</argument_list></call> 
                    == <call><name><name>that</name>.<name>isMinorTickMarksVisible</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>majorTickTimePeriodClass</name>.<name>equals</name></name><argument_list>(
                    <argument><expr><name><name>that</name>.<name>majorTickTimePeriodClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>minorTickTimePeriodClass</name>.<name>equals</name></name><argument_list>(
                    <argument><expr><name><name>that</name>.<name>minorTickTimePeriodClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>minorTickMarkPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>minorTickMarkPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>this</name>.<name>minorTickMarkStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>minorTickMarkStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelInfo</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getLabel</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getLabel</name><argument_list>()</argument_list></call>.<call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr>0</expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the axis.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  this class is cloneable, but 
     *         subclasses may not be.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PeriodAxis</name></type> <name>clone</name> =<init> <expr>(<name>PeriodAxis</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>timeZone</name></name> = (<name>TimeZone</name>) <call><name><name>this</name>.<name>timeZone</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>labelInfo</name></name> = new <name><name>PeriodAxisLabelInfo</name><index>[<expr><name><name>this</name>.<name>labelInfo</name>.<name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>labelInfo</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>labelInfo</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>this</name>.<name>labelInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>  <comment type="line">// copy across references </comment>
                                                     <comment type="line">// to immutable objs </comment>
        }</block></for>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * A utility method used to create a particular subclass of the 
     * {@link RegularTimePeriod} class that includes the specified millisecond, 
     * assuming the specified time zone.
     * 
     * @param periodClass  the class.
     * @param millisecond  the time.
     * @param zone  the time zone.
     * 
     * @return The time period.
     */</comment>
    <function><type><specifier>private</specifier> <name>RegularTimePeriod</name></type> <name>createInstance</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>periodClass</name></decl></param>, 
                                             <param><decl><type><name>Date</name></type> <name>millisecond</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Constructor</name></type> <name>c</name> =<init> <expr><call><name><name>periodClass</name>.<name>getDeclaredConstructor</name></name><argument_list>(<argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{
                    <expr><name><name>Date</name>.<name><name/></name></name>class</expr>, <expr><name><name>TimeZone</name>.<name><name/></name></name>class</expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = (<name>RegularTimePeriod</name>) <call><name><name>c</name>.<name>newInstance</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{
                    <expr><name>millisecond</name></expr>, <expr><name>zone</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// do nothing            </comment>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickMarkStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickMarkPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickMarkPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
