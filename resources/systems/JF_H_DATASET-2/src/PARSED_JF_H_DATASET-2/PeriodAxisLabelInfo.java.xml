<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\PeriodAxisLabelInfo.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * PeriodAxisLabelInfo.java
 * ------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 01-Jun-2004 : Version 1 (DG);
 * 23-Feb-2005 : Replaced Spacer with RectangleInsets (DG);
 * 01-Mar-2005 : Modified constructors to accept DateFormat (DG);
 * 20-May-2005 : Added default constants and null argument checks in the 
 *               constructor (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>lang</name>.<name>reflect</name>.<name>Constructor</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>time</name>.<name>RegularTimePeriod</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>

<comment type="javadoc">/**
 * A record that contains information for one "band" of date labels in 
 * a {@link PeriodAxis}.
 */</comment>
<class><specifier>public</specifier> class <name>PeriodAxisLabelInfo</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="line">// TODO: this class is mostly immutable, so implementing Cloneable isn't</comment>
    <comment type="line">// really necessary.  But there is still a hole in that you can get the</comment>
    <comment type="line">// dateFormat and modify it.  We could return a copy, but that would slow</comment>
    <comment type="line">// things down. Needs resolving.</comment>
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5710451740920277357L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default insets. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>RectangleInsets</name></type> <name>DEFAULT_INSETS</name> 
        =<init> <expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_FONT</name> 
        =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default label paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_LABEL_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default divider stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_DIVIDER_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default divider paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_DIVIDER_PAINT</name> =<init> <expr><name><name>Color</name>.<name>gray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The subclass of {@link RegularTimePeriod} to use for this band. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Class</name></type> <name>periodClass</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Controls the gaps around the band. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>padding</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The date formatter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>dateFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>labelFont</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether or not dividers are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawDividers</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The stroke used to draw the dividers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>dividerStroke</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to draw the dividers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>dividerPaint</name></decl>;</decl_stmt>
        
    <comment type="javadoc">/**
     * Creates a new instance.
     * 
     * @param periodClass  the subclass of {@link RegularTimePeriod} to use 
     *                     (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dateFormat  the date format (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PeriodAxisLabelInfo</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>periodClass</name></decl></param>, <param><decl><type><name>DateFormat</name></type> <name>dateFormat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(
            <argument><expr><name>periodClass</name></expr></argument>, <argument><expr><name>dateFormat</name></expr></argument>, <argument><expr><name>DEFAULT_INSETS</name></expr></argument>, <argument><expr><name>DEFAULT_FONT</name></expr></argument>, 
            <argument><expr><name>DEFAULT_LABEL_PAINT</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>DEFAULT_DIVIDER_STROKE</name></expr></argument>, 
            <argument><expr><name>DEFAULT_DIVIDER_PAINT</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance.
     * 
     * @param periodClass  the subclass of {@link RegularTimePeriod} to use
     *                     (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dateFormat  the date format (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param padding  controls the space around the band (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     * @param labelFont  the label font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param labelPaint  the label paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param drawDividers  a flag that controls whether dividers are drawn.
     * @param dividerStroke  the stroke used to draw the dividers 
     *                       (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dividerPaint  the paint used to draw the dividers 
     *                      (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PeriodAxisLabelInfo</name><parameter_list>(<param><decl><type><name>Class</name></type> <name>periodClass</name></decl></param>, <param><decl><type><name>DateFormat</name></type> <name>dateFormat</name></decl></param>, 
                               <param><decl><type><name>RectangleInsets</name></type> <name>padding</name></decl></param>,
                               <param><decl><type><name>Font</name></type> <name>labelFont</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>labelPaint</name></decl></param>, 
                               <param><decl><type><name>boolean</name></type> <name>drawDividers</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>dividerStroke</name></decl></param>, 
                               <param><decl><type><name>Paint</name></type> <name>dividerPaint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>periodClass</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'periodClass' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dateFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dateFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>padding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'padding' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>labelFont</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'labelFont' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>labelPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'labelPaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>dividerStroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'dividerStroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>dividerPaint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dividerPaint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>periodClass</name></name> = <name>periodClass</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dateFormat</name></name> = <name>dateFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name>padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>labelFont</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>labelPaint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>drawDividers</name></name> = <name>drawDividers</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dividerStroke</name></name> = <name>dividerStroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dividerPaint</name></name> = <name>dividerPaint</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the subclass of {@link RegularTimePeriod} that should be used 
     * to generate the date labels.
     * 
     * @return The class.
     */</comment>
    <function><type><specifier>public</specifier> <name>Class</name></type> <name>getPeriodClass</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>periodClass</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the date formatter.
     * 
     * @return The date formatter (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getDateFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dateFormat</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the padding for the band.
     * 
     * @return The padding.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>padding</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label font.
     * 
     * @return The label font (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelFont</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label paint.
     * 
     * @return The label paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not dividers are drawn.
     * 
     * @return A flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawDividers</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawDividers</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the dividers.
     * 
     * @return The stroke.
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDividerStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dividerStroke</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the dividers.
     * 
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDividerPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dividerPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a time period that includes the specified millisecond, assuming
     * the given time zone.
     * 
     * @param millisecond  the time.
     * @param zone  the time zone.
     * 
     * @return The time period.
     */</comment>
    <function><type><specifier>public</specifier> <name>RegularTimePeriod</name></type> <name>createInstance</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>millisecond</name></decl></param>, <param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RegularTimePeriod</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Constructor</name></type> <name>c</name> =<init> <expr><call><name><name>this</name>.<name>periodClass</name>.<name>getDeclaredConstructor</name></name><argument_list>(
                <argument><expr>new <name><name>Class</name><index>[]</index></name> <block>{<expr><name><name>Date</name>.<name><name/></name></name>class</expr>, <expr><name><name>TimeZone</name>.<name><name/></name></name>class</expr>}</block></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = (<name>RegularTimePeriod</name>) <call><name><name>c</name>.<name>newInstance</name></name><argument_list>(
                <argument><expr>new <name><name>Object</name><index>[]</index></name> <block>{<expr><name>millisecond</name></expr>, <expr><name>zone</name></expr>}</block></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>   
        }</block>
        <catch>catch (<param><decl><type><name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// do nothing            </comment>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>  
    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>PeriodAxisLabelInfo</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PeriodAxisLabelInfo</name></type> <name>info</name> =<init> <expr>(<name>PeriodAxisLabelInfo</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>periodClass</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>periodClass</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>dateFormat</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dateFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>padding</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>padding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>labelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>labelPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr><name><name>info</name>.<name>drawDividers</name></name> != <name><name>this</name>.<name>drawDividers</name></name></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>dividerStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dividerStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <if>if <condition>(<expr>!<call><name><name>info</name>.<name>dividerPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dividerPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this object.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>41</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <call><name><name>this</name>.<name>periodClass</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <call><name><name>this</name>.<name>dateFormat</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the object.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PeriodAxisLabelInfo</name></type> <name>clone</name> =<init> <expr>(<name>PeriodAxisLabelInfo</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dividerStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dividerPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dividerStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dividerPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
}</block></class>
</unit>
