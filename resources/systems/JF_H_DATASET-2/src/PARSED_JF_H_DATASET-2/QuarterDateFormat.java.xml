<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\QuarterDateFormat.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * QuarterDateFormat.java
 * ----------------------
 * (C) Copyright 2005, 2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 01-Mar-2005 : Version 1 (DG);
 * 10-May-2005 : Added equals() method, and implemented Cloneable and 
 *               Serializable (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 08-Jun-2007 : Added Greek symbols, and support for reversing the date - see
 *               patch 1577221 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>FieldPosition</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>ParsePosition</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Calendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TimeZone</name></name>;</import>

<comment type="javadoc">/**
 * A formatter that formats dates to show the year and quarter (for example,
 * '2004 IV' for the last quarter of 2004.
 */</comment>
<class><specifier>public</specifier> class <name>QuarterDateFormat</name> <super><extends>extends <name>DateFormat</name></extends> 
                               <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-6738465248529797176L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Symbols for regular quarters. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>REGULAR_QUARTERS</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"1"</expr>, <expr>"2"</expr>, 
            <expr>"3"</expr>, <expr>"4"</expr>}</block></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Symbols for roman numbered quarters. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ROMAN_QUARTERS</name>  =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"I"</expr>, <expr>"II"</expr>, 
            <expr>"III"</expr>, <expr>"IV"</expr>}</block></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Symbols for greek numbered quarters. 
     *
     * @since 1.0.6
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>GREEK_QUARTERS</name> =<init> <expr>new <name><name>String</name><index>[]</index></name> <block>{<expr>"\u0391"</expr>, 
            <expr>"\u0392"</expr>, <expr>"\u0393"</expr>, <expr>"\u0394"</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The strings. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name><index>[]</index></type> <name>quarters</name> =<init> <expr><name>REGULAR_QUARTERS</name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether the quarter or the year goes first. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>quarterFirst</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new instance for the default time zone.
     */</comment>
    <constructor><specifier>public</specifier> <name>QuarterDateFormat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>TimeZone</name>.<name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>QuarterDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>REGULAR_QUARTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quarterSymbols  the quarter symbols.
     */</comment>
    <constructor><specifier>public</specifier> <name>QuarterDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>quarterSymbols</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>quarterSymbols</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified time zone.
     * 
     * @param zone  the time zone (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param quarterSymbols  the quarter symbols.
     * @param quarterFirst  a flag that controls whether the quarter or the 
     *         year is displayed first.
     *         
     * @since 1.0.6
     */</comment>
    <constructor><specifier>public</specifier> <name>QuarterDateFormat</name><parameter_list>(<param><decl><type><name>TimeZone</name></type> <name>zone</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>quarterSymbols</name></decl></param>,
            <param><decl><type><name>boolean</name></type> <name>quarterFirst</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>zone</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'zone' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>calendar</name></name> = new <call><name>GregorianCalendar</name><argument_list>(<argument><expr><name>zone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>quarters</name></name> = <name>quarterSymbols</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>quarterFirst</name></name> = <name>quarterFirst</name></expr>;</expr_stmt>
        
        <comment type="line">// the following is never used, but it seems that DateFormat requires</comment>
        <comment type="line">// it to be non-null.  It isn't well covered in the spec, refer to </comment>
        <comment type="line">// bug parade 5061189 for more info.</comment>
        <expr_stmt><expr><name><name>this</name>.<name>numberFormat</name></name> = <call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Formats the given date.
     * 
     * @param date  the date.
     * @param toAppendTo  the string buffer.
     * @param fieldPosition  the field position.
     * 
     * @return The formatted date.
     */</comment>
    <function><type><specifier>public</specifier> <name>StringBuffer</name></type> <name>format</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, <param><decl><type><name>StringBuffer</name></type> <name>toAppendTo</name></decl></param>,
                               <param><decl><type><name>FieldPosition</name></type> <name>fieldPosition</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>calendar</name>.<name>setTime</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>year</name> =<init> <expr><call><name><name>this</name>.<name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>YEAR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>month</name> =<init> <expr><call><name><name>this</name>.<name>calendar</name>.<name>get</name></name><argument_list>(<argument><expr><name><name>Calendar</name>.<name>MONTH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>quarter</name> =<init> <expr><name>month</name> / 3</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>quarterFirst</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quarters</name><index>[<expr><name>quarter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>toAppendTo</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quarters</name><index>[<expr><name>quarter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>toAppendTo</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Parses the given string (not implemented).
     * 
     * @param source  the date string.
     * @param pos  the parse position.
     * 
     * @return &lt;code&gt;null&lt;/code&gt;, as this method has not been implemented.
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>parse</name><parameter_list>(<param><decl><type><name>String</name></type> <name>source</name></decl></param>, <param><decl><type><name>ParsePosition</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Tests this formatter for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>QuarterDateFormat</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>QuarterDateFormat</name></type> <name>that</name> =<init> <expr>(<name>QuarterDateFormat</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quarters</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>quarters</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>quarterFirst</name></name> != <name><name>that</name>.<name>quarterFirst</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
