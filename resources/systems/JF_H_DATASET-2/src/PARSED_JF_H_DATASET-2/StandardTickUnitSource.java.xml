<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\StandardTickUnitSource.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * StandardTickUnitSource.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 23-Sep-2003 : Version 1 (DG);
 * 25-Oct-2007 : Implemented Serializable and equals() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>

<comment type="javadoc">/**
 * A source that can used by the {@link NumberAxis} class to obtain a
 * suitable {@link TickUnit}.  Instances of this class are {@link Serializable}
 * from version 1.0.7 onwards.  Cloning is not supported, because instances
 * are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>StandardTickUnitSource</name> <super><implements>implements <name>TickUnitSource</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** Constant for log(10.0). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>LOG_10_VALUE</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr>10.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardTickUnitSource</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns a tick unit that is larger than the supplied unit.
     *
     * @param unit  the unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A tick unit that is larger than the supplied unit.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getLargerTickUnit</name><parameter_list>(<param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>unit</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>log</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> / <name>LOG_10_VALUE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>higher</name> =<init> <expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>higher</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0E0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit in the collection that is greater than or equal
     * to (in size) the specified unit.
     *
     * @param unit  the unit (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A unit from the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getCeilingTickUnit</name><parameter_list>(<param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getLargerTickUnit</name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit in the collection that is greater than or equal
     * to the specified size.
     *
     * @param size  the size.
     *
     * @return A unit from the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getCeilingTickUnit</name><parameter_list>(<param><decl><type><name>double</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>log</name> =<init> <expr><call><name><name>Math</name>.<name>log</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> / <name>LOG_10_VALUE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>higher</name> =<init> <expr><call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><name>log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>pow</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr><name>higher</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0E0"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr>(<name>obj</name> <name>instanceof</name> <name>StandardTickUnitSource</name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></function>

}</block></class>
</unit>
