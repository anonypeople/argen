<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\SymbolAxis.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------
 * SymbolAxis.java
 * ---------------
 * (C) Copyright 2002-2007, by Anthony Boulestreau and Contributors.
 *
 * Original Author:  Anthony Boulestreau;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 *
 * Changes
 * -------
 * 29-Mar-2002 : First version (AB);
 * 19-Apr-2002 : Updated formatting and import statements (DG);
 * 21-Jun-2002 : Make change to use the class TickUnit - remove valueToString() 
 *               method and add SymbolicTickUnit (AB);
 * 25-Jun-2002 : Removed redundant code (DG);
 * 25-Jul-2002 : Changed order of parameters in ValueAxis constructor (DG);
 * 05-Sep-2002 : Updated constructor to reflect changes in the Axis class (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 14-Feb-2003 : Added back missing constructor code (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 14-May-2003 : Renamed HorizontalSymbolicAxis --&gt; SymbolicAxis and merged in
 *               VerticalSymbolicAxis (DG);
 * 12-Aug-2003 : Fixed bug where refreshTicks() method has different signature 
 *               to super class (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 02-Nov-2003 : Added code to avoid overlapping labels (MR);
 * 07-Nov-2003 : Modified to use new tick classes (DG);
 * 18-Nov-2003 : Fixed bug where symbols are not being displayed on the 
 *               axis (DG);
 * 24-Nov-2003 : Added fix for gridlines on zooming (bug id 834643) (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 11-Mar-2004 : Modified the way the background grid color is being drawn, see
 *               this thread:
 *               http://www.jfree.org/phpBB2/viewtopic.php?p=22973 (DG);
 * 16-Mar-2004 : Added plotState to draw() method (DG);
 * 07-Apr-2004 : Modified string bounds calculation (DG);
 * 28-Mar-2005 : Renamed autoRangeIncludesZero() --&gt; getAutoRangeIncludesZero()
 *               and autoRangeStickyZero() --&gt; getAutoRangeStickyZero() (DG);
 * 05-Jul-2005 : Fixed signature on refreshTicks() method - see bug report
 *               1232264 (DG);
 * 06-Jul-2005 : Renamed SymbolicAxis --&gt; SymbolAxis, added equals() method, 
 *               renamed getSymbolicValue() --&gt; getSymbols(), renamed 
 *               symbolicGridPaint --&gt; gridBandPaint, fixed serialization of 
 *               gridBandPaint, renamed symbolicGridLinesVisible --&gt; 
 *               gridBandsVisible, eliminated symbolicGridLineList (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 28-Feb-2007 : Fixed bug 1669302 (tick label overlap) (DG);
 * 25-Jul-2007 : Added new field for alternate grid band paint (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>AxisChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>ValueAxisPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A standard linear value axis that replaces integer values with symbols.
 */</comment>
<class><specifier>public</specifier> class <name>SymbolAxis</name> <super><extends>extends <name>NumberAxis</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7216330468770619716L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default grid band paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRID_BAND_PAINT</name> 
            =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>232</expr></argument>, <argument><expr>234</expr></argument>, <argument><expr>232</expr></argument>, <argument><expr>128</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The default paint for alternate grid bands.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRID_BAND_ALTERNATE_PAINT</name>
            =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// transparent</comment>
    
    <comment type="javadoc">/** The list of symbols to display instead of the numeric values. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>symbols</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag that indicates whether or not grid bands are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>gridBandsVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to color the grid bands (if the bands are visible). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>gridBandPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint used to fill the alternate grid bands.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>gridBandAlternatePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a symbol axis, using default attribute values where 
     * necessary.
     *
     * @param label  the axis label (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param sv  the list of symbols to display instead of the numeric
     *            values.
     */</comment>
    <constructor><specifier>public</specifier> <name>SymbolAxis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>label</name></decl></param>, <param><decl><type><name><name>String</name><index>[]</index></name></type> <name>sv</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>symbols</name></name> = <call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandsVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandPaint</name></name> = <name>DEFAULT_GRID_BAND_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name> = <name>DEFAULT_GRID_BAND_ALTERNATE_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAutoTickUnitSelection</name><argument_list>(<argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAutoRangeStickyZero</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns an array of the symbols for the axis.
     *
     * @return The symbols.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name><index>[]</index></type> <name>getSymbols</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>String</name><index>[<expr><call><name><name>this</name>.<name>symbols</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = (<name><name>String</name><index>[]</index></name>) <call><name><name>this</name>.<name>symbols</name>.<name>toArray</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the grid bands are showing, and
     * &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the grid bands are showing, and 
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     *         
     * @see #setGridBandsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isGridBandsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gridBandsVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the visibility of the grid bands and notifies registered
     * listeners that the axis has been modified.
     *
     * @param flag  the new setting.
     * 
     * @see #isGridBandsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGridBandsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>gridBandsVisible</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>gridBandsVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to color the grid bands.
     *
     * @return The grid band paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setGridBandPaint(Paint)
     * @see #isGridBandsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getGridBandPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gridBandPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the grid band paint and sends an {@link AxisChangeEvent} to 
     * all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getGridBandPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGridBandPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used for alternate grid bands.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setGridBandAlternatePaint(Paint)
     * @see #getGridBandPaint()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getGridBandAlternatePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used for alternate grid bands and sends a 
     * {@link AxisChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getGridBandAlternatePaint()
     * @see #setGridBandPaint(Paint)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGridBandAlternatePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>AxisChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * This operation is not supported by this axis.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot and axes should be drawn.
     * @param edge  the edge along which the axis is drawn.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>selectAutoTickUnit</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                      <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <throw>throw <expr>new <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the axis on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param cursor  the cursor location.
     * @param plotArea  the area within which the plot and axes should be drawn
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the area within which the data should be drawn 
     *                  (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param edge  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot 
     *                   (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The axis state (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisState</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>cursor</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>AxisState</name></type> <name>info</name> =<init> <expr>new <call><name>AxisState</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>isVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>info</name> = <call><name><name>super</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gridBandsVisible</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawGridBands</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><call><name><name>info</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>info</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the grid bands.  Alternate bands are colored using 
     * &lt;CODE&gt;gridBandPaint&lt;CODE&gt; (&lt;CODE&gt;DEFAULT_GRID_BAND_PAINT&lt;/CODE&gt; by 
     * default).
     *
     * @param g2  the graphics device.
     * @param plotArea  the area within which the chart should be drawn.
     * @param dataArea  the area within which the plot should be drawn (a 
     *                  subset of the drawArea).
     * @param edge  the axis location.
     * @param ticks  the ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawGridBands</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                 <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                 <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>, 
                                 <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawGridBandsHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawGridBandsVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>ticks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the grid bands for the axis when it is at the top or bottom of 
     * the plot.
     *
     * @param g2  the graphics device.
     * @param plotArea  the area within which the chart should be drawn.
     * @param dataArea  the area within which the plot should be drawn
     *                  (a subset of the drawArea).
     * @param firstGridBandIsDark  True: the first grid band takes the
     *                             color of &lt;CODE&gt;gridBandPaint&lt;CODE&gt;.
     *                             False: the second grid band takes the 
     *                             color of &lt;CODE&gt;gridBandPaint&lt;CODE&gt;.
     * @param ticks  the ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawGridBandsHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                           <param><decl><type><name>boolean</name></type> <name>firstGridBandIsDark</name></decl></param>, 
                                           <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>currentGridBandIsDark</name> =<init> <expr><name>firstGridBandIsDark</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>dataArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx1</name>, <name>xx2</name></decl>;</decl_stmt>

        <comment type="line">//gets the outline stroke width of the plot</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>outlineStrokeWidth</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getPlot</name><argument_list>()</argument_list></call>.<call><name>getOutlineStroke</name><argument_list>()</argument_list></call> !=  <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outlineStrokeWidth</name> 
                = ((<name>BasicStroke</name>) <call><name>getPlot</name><argument_list>()</argument_list></call>.<call><name>getOutlineStroke</name><argument_list>()</argument_list></call>).<call><name>getLineWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>outlineStrokeWidth</name> = 1d</expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>band</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>tick</name> = (<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xx1</name> = <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call> - 0.5d</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xx2</name> = <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call> + 0.5d</expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>currentGridBandIsDark</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>band</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy</name> + <name>outlineStrokeWidth</name></expr></argument>, 
                <argument><expr><name>xx2</name> - <name>xx1</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>yy</name> - <name>outlineStrokeWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentGridBandIsDark</name> = !<name>currentGridBandIsDark</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the grid bands for the axis when it is at the top or bottom of 
     * the plot.
     *
     * @param g2  the graphics device.
     * @param drawArea  the area within which the chart should be drawn.
     * @param plotArea  the area within which the plot should be drawn (a
     *                  subset of the drawArea).
     * @param firstGridBandIsDark  True: the first grid band takes the
     *                             color of &lt;CODE&gt;gridBandPaint&lt;CODE&gt;.
     *                             False: the second grid band takes the 
     *                             color of &lt;CODE&gt;gridBandPaint&lt;CODE&gt;.
     * @param ticks  a list of ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawGridBandsVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                         <param><decl><type><name>Rectangle2D</name></type> <name>drawArea</name></decl></param>,
                                         <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                         <param><decl><type><name>boolean</name></type> <name>firstGridBandIsDark</name></decl></param>,
                                         <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>currentGridBandIsDark</name> =<init> <expr><name>firstGridBandIsDark</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy1</name>, <name>yy2</name></decl>;</decl_stmt>

        <comment type="line">//gets the outline stroke width of the plot</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>outlineStrokeWidth</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call>.<call><name>getOutlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>outlineStroke</name> != <name>null</name> &amp;&amp; <name>outlineStroke</name> <name>instanceof</name> <name>BasicStroke</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>outlineStrokeWidth</name> = ((<name>BasicStroke</name>) <name>outlineStroke</name>).<call><name>getLineWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>outlineStrokeWidth</name> = 1d</expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>band</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>tick</name> = (<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>yy1</name> = <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call> + 0.5d</expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>yy2</name> = <call><name>valueToJava2D</name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call> - 0.5d</expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>currentGridBandIsDark</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>band</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name> + <name>outlineStrokeWidth</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, 
                    <argument><expr><call><name><name>plotArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>xx</name> - <name>outlineStrokeWidth</name></expr></argument>, <argument><expr><name>yy2</name> - <name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentGridBandIsDark</name> = !<name>currentGridBandIsDark</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaintMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Rescales the axis to ensure that all data is visible.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>autoAdjustRange</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Plot</name></type> <name>plot</name> =<init> <expr><call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>plot</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>  <comment type="line">// no plot, no data</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>plot</name> <name>instanceof</name> <name>ValueAxisPlot</name></expr>)</condition><then> <block>{

            <comment type="line">// ensure that all the symbols are displayed</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>upper</name> =<init> <expr><call><name><name>this</name>.<name>symbols</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lower</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><name>upper</name> - <name>lower</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// ensure the autorange is at least &lt;minRange&gt; in size...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>minRange</name> =<init> <expr><call><name>getAutoRangeMinimumSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>range</name> &lt; <name>minRange</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>upper</name> = (<name>upper</name> + <name>lower</name> + <name>minRange</name>) / 2</expr>;</expr_stmt>
                <expr_stmt><expr><name>lower</name> = (<name>upper</name> + <name>lower</name> - <name>minRange</name>) / 2</expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// this ensure that the grid bands will be displayed correctly.</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>upperMargin</name> =<init> <expr>0.5</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>lowerMargin</name> =<init> <expr>0.5</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>getAutoRangeIncludesZero</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>getAutoRangeStickyZero</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>upper</name> &lt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>upper</name> = 0.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>upperMargin</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>lower</name> &gt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lower</name> = 0.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>lowerMargin</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>upper</name> + <name>upperMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>lower</name> - <name>lowerMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name>getAutoRangeStickyZero</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>upper</name> &lt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>upper</name> = <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>upper</name> + <name>upperMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>upperMargin</name> * <name>range</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if <condition>(<expr><name>lower</name> &gt;= 0.0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lower</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>lower</name> - <name>lowerMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>lowerMargin</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>upper</name> = <name>upper</name> + <name>upperMargin</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lower</name> = <name>lower</name> - <name>lowerMargin</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>

            <expr_stmt><expr><call><name>setRange</name><argument_list>(<argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param state  the axis state.
     * @param dataArea  the area in which the data should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return A list of ticks.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>refreshTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                             <param><decl><type><name>AxisState</name></type> <name>state</name></decl></param>,
                             <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                             <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isTopOrBottom</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ticks</name> = <call><name>refreshTicksHorizontal</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>RectangleEdge</name>.<name>isLeftOrRight</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ticks</name> = <call><name>refreshTicksVertical</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>ticks</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the data should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return The ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksHorizontal</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                          <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>size</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>calculateVisibleTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lowestTickValue</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>previousDrawnTickLabelPos</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>         
        <decl_stmt><decl><type><name>double</name></type> <name>previousDrawnTickLabelLength</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>              

        <if>if <condition>(<expr><name>count</name> &lt;= <name><name>ValueAxis</name>.<name>MAXIMUM_TICK_COUNT</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>currentTickValue</name> =<init> <expr><name>lowestTickValue</name> + (<name>i</name> * <name>size</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name>valueToString</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                
                <comment type="line">// avoid to draw overlapping tick labels</comment>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                        <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tickLabelLength</name> =<init> <expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call> 
                        ? <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> : <call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>tickLabelsOverlapping</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>avgTickLabelLength</name> =<init> <expr>(<name>previousDrawnTickLabelLength</name> 
                            + <name>tickLabelLength</name>) / 2.0</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>previousDrawnTickLabelPos</name></expr></argument>)</argument_list></call> 
                            &lt; <name>avgTickLabelLength</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>tickLabelsOverlapping</name> = true</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>tickLabelsOverlapping</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt> <comment type="line">// don't draw this tick label</comment>
                }</block></then>
                <else>else <block>{
                    <comment type="line">// remember these values for next comparison</comment>
                    <expr_stmt><expr><name>previousDrawnTickLabelPos</name> = <name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>previousDrawnTickLabelLength</name> = <name>tickLabelLength</name></expr>;</expr_stmt>         
                }</block></else></if> 
                
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>TOP</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>ticks</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the positions of the tick labels for the axis, storing the 
     * results in the tick label list (ready for drawing).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area in which the plot should be drawn.
     * @param edge  the location of the axis.
     * 
     * @return The ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>List</name></type> <name>refreshTicksVertical</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                        <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                        <param><decl><type><name>RectangleEdge</name></type> <name>edge</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>List</name></type> <name>ticks</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Font</name></type> <name>tickLabelFont</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>tickLabelFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>size</name> =<init> <expr><call><name>getTickUnit</name><argument_list>()</argument_list></call>.<call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name>calculateVisibleTickCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lowestTickValue</name> =<init> <expr><call><name>calculateLowestVisibleTickValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>previousDrawnTickLabelPos</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>         
        <decl_stmt><decl><type><name>double</name></type> <name>previousDrawnTickLabelLength</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>              

        <if>if <condition>(<expr><name>count</name> &lt;= <name><name>ValueAxis</name>.<name>MAXIMUM_TICK_COUNT</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>currentTickValue</name> =<init> <expr><name>lowestTickValue</name> + (<name>i</name> * <name>size</name>)</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name>valueToJava2D</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>NumberFormat</name></type> <name>formatter</name> =<init> <expr><call><name>getNumberFormatOverride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>formatter</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name><name>formatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>tickLabel</name> = <call><name>valueToString</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <comment type="line">// avoid to draw overlapping tick labels</comment>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>,
                        <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>tickLabelLength</name> =<init> <expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call> 
                    ? <call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> : <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>boolean</name></type> <name>tickLabelsOverlapping</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>avgTickLabelLength</name> =<init> <expr>(<name>previousDrawnTickLabelLength</name> 
                            + <name>tickLabelLength</name>) / 2.0</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>previousDrawnTickLabelPos</name></expr></argument>)</argument_list></call> 
                            &lt; <name>avgTickLabelLength</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>tickLabelsOverlapping</name> = true</expr>;</expr_stmt>    
                    }</block></then></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>tickLabelsOverlapping</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tickLabel</name> = ""</expr>;</expr_stmt> <comment type="line">// don't draw this tick label</comment>
                }</block></then>
                <else>else <block>{
                    <comment type="line">// remember these values for next comparison</comment>
                    <expr_stmt><expr><name>previousDrawnTickLabelPos</name> = <name>yy</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>previousDrawnTickLabelLength</name> = <name>tickLabelLength</name></expr>;</expr_stmt>         
                }</block></else></if>
                
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>anchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>isVerticalTickLabels</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>angle</name> = -<name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>angle</name> = <name><name>Math</name>.<name>PI</name></name> / 2.0</expr>;</expr_stmt>
                    }</block></else></if>                    
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>edge</name> == <name><name>RectangleEdge</name>.<name>LEFT</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_RIGHT</name></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>anchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rotationAnchor</name> = <name><name>TextAnchor</name>.<name>CENTER_LEFT</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
                <decl_stmt><decl><type><name>Tick</name></type> <name>tick</name> =<init> <expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>currentTickValue</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>rotationAnchor</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ticks</name>.<name>add</name></name><argument_list>(<argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>ticks</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Converts a value to a string, using the list of symbols.
     *
     * @param value  value to convert.
     *
     * @return The symbol.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>valueToString</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>strToReturn</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>strToReturn</name> = (<name>String</name>) <call><name><name>this</name>.<name>symbols</name>.<name>get</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <catch>catch (<param><decl><type><name>IndexOutOfBoundsException</name></type>  <name>ex</name></decl></param>) <block>{
            <expr_stmt><expr><name>strToReturn</name> = ""</expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>strToReturn</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this axis for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>SymbolAxis</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>SymbolAxis</name></type> <name>that</name> =<init> <expr>(<name>SymbolAxis</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>symbols</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>symbols</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gridBandsVisible</name></name> != <name><name>that</name>.<name>gridBandsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>gridBandPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>gridBandAlternatePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gridBandAlternatePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
