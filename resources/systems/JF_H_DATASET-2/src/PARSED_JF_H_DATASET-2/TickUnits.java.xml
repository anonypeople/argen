<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-2\src\TickUnits.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * TickUnits.java
 * --------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 23-Nov-2001 : Version 1 (DG);
 * 18-Feb-2002 : Fixed bug in getNearestTickUnit (thanks to Mario Inchiosa for 
 *               reporting this, SourceForge bug id 518073) (DG);
 * 25-Feb-2002 : Moved createStandardTickUnits() method from NumberAxis, and 
 *               added createIntegerTickUnits() method (DG);
 * 01-May-2002 : Updated for changes to the TickUnit class (DG);
 * 18-Sep-2002 : Added standardTickUnit methods which take a Locale 
 *               instance (AS);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 08-Nov-2002 : Moved to new package com.jrefinery.chart.axis (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 23-Sep-2003 : Implemented TickUnitSource interface (DG);
 * 03-Dec-2003 : Adding null values now throws exceptions (TM);
 * 11-Jan-2005 : Removed deprecated methods in preparation for 1.0.0 
 *               release (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<comment type="javadoc">/**
 * A collection of tick units, used by the {@link DateAxis} and 
 * {@link NumberAxis} classes.
 */</comment>
<class><specifier>public</specifier> class <name>TickUnits</name> <super><implements>implements <name>TickUnitSource</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1134174035901467545L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the tick units. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>tickUnits</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new collection of tick units.
     */</comment>
    <constructor><specifier>public</specifier> <name>TickUnits</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tickUnits</name></name> = new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a tick unit to the collection.  The tick units are maintained in 
     * ascending order.
     *
     * @param unit  the tick unit to add (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>unit</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>(<argument><expr>"Null 'unit' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>tickUnits</name>.<name>add</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of tick units in this collection.
     * &lt;P&gt;
     * This method is required for the XML writer.
     *
     * @return The number of units in this collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>tickUnits</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tickunit on the given position.
     * &lt;P&gt;
     * This method is required for the XML writer.
     *
     * @param pos the position in the list.
     * 
     * @return The tickunit.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>get</name><parameter_list>(<param><decl><type><name>int</name></type> <name>pos</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>TickUnit</name>) <call><name><name>this</name>.<name>tickUnits</name>.<name>get</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a tick unit that is larger than the supplied unit.
     *
     * @param unit   the unit.
     *
     * @return A tick unit that is larger than the supplied unit.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getLargerTickUnit</name><parameter_list>(<param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnits</name></name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> = <name>index</name> + 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>index</name> = -<name>index</name></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr>(<name>TickUnit</name>) <call><name><name>this</name>.<name>tickUnits</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, 
                <argument><expr><call><name><name>this</name>.<name>tickUnits</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit in the collection that is greater than or equal
     * to (in size) the specified unit.
     *
     * @param unit  the unit.
     *
     * @return A unit from the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getCeilingTickUnit</name><parameter_list>(<param><decl><type><name>TickUnit</name></type> <name>unit</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name><name>Collections</name>.<name>binarySearch</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnits</name></name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &gt;= 0</expr>)</condition><then> <block>{
            <return>return <expr>(<name>TickUnit</name>) <call><name><name>this</name>.<name>tickUnits</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>index</name> = -(<name>index</name> + 1)</expr>;</expr_stmt>
            <return>return <expr>(<name>TickUnit</name>) <call><name><name>this</name>.<name>tickUnits</name>.<name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>tickUnits</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick unit in the collection that is greater than or equal
     * to the specified size.
     *
     * @param size  the size.
     *
     * @return A unit from the collection.
     */</comment>
    <function><type><specifier>public</specifier> <name>TickUnit</name></type> <name>getCeilingTickUnit</name><parameter_list>(<param><decl><type><name>double</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getCeilingTickUnit</name><argument_list>(<argument><expr>new <call><name>NumberTickUnit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, 
                <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the collection.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if an item in the collection does not 
     *         support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>TickUnits</name></type> <name>clone</name> =<init> <expr>(<name>TickUnits</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>tickUnits</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests an object for equality with this instance.
     *
     * @param obj  the object to test (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>TickUnits</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>TickUnits</name></type> <name>that</name> =<init> <expr>(<name>TickUnits</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>that</name>.<name>tickUnits</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickUnits</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
