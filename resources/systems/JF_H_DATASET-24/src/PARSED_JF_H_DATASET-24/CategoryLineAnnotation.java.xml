<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-24\src\CategoryLineAnnotation.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * CategoryLineAnnotation.java
 * ---------------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes:
 * --------
 * 29-Jul-2005 : Version 1, based on CategoryTextAnnotation (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Mar-2007 : Reimplemented hashCode() (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>CategoryPlot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>Plot</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>PlotOrientation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A line annotation that can be placed on a {@link CategoryPlot}.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryLineAnnotation</name> <super><implements>implements <name>CategoryAnnotation</name>, 
                                               <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>3477740483341587984L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The category for the start of the line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>category1</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The value for the start of the line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>value1</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The category for the end of the line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>category2</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The value for the end of the line. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>value2</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The line color. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>paint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The line stroke. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>stroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     
    <comment type="javadoc">/**
     * Creates a new annotation that draws a line between (category1, value1)
     * and (category2, value2).
     *
     * @param category1  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value1  the value.
     * @param category2  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param value2  the value.
     * @param paint  the line color (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the line stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryLineAnnotation</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category1</name></decl></param>, <param><decl><type><name>double</name></type> <name>value1</name></decl></param>, 
                                  <param><decl><type><name>Comparable</name></type> <name>category2</name></decl></param>, <param><decl><type><name>double</name></type> <name>value2</name></decl></param>,
                                  <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category1</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category1' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>category2</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category2' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>category1</name></name> = <name>category1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value1</name></name> = <name>value1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>category2</name></name> = <name>category2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value2</name></name> = <name>value2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the category for the start of the line.
     * 
     * @return The category for the start of the line (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setCategory1(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getCategory1</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>category1</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the category for the start of the line.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getCategory1()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCategory1</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>category1</name></name> = <name>category</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-value for the start of the line.
     * 
     * @return The y-value for the start of the line.
     * 
     * @see #setValue1(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getValue1</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>value1</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-value for the start of the line.
     * 
     * @param value  the value.
     * 
     * @see #getValue1()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue1</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value1</name></name> = <name>value</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the category for the end of the line.
     * 
     * @return The category for the end of the line (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setCategory2(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getCategory2</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>category2</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the category for the end of the line.
     * 
     * @param category  the category (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getCategory2()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCategory2</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>category</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'category' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>category2</name></name> = <name>category</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-value for the end of the line.
     * 
     * @return The y-value for the end of the line.
     * 
     * @see #setValue2(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getValue2</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>value2</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-value for the end of the line.
     * 
     * @param value  the value.
     * 
     * @see #getValue2()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue2</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>value2</name></name> = <name>value</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the connecting line.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the connecting line.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the connecting line.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>stroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the connecting line.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the annotation.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>CategoryPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                     <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>catIndex1</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>category1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>catIndex2</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>category2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>catCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>lineX1</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lineY1</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lineX2</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lineY2</name> =<init> <expr>0.0f</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name><name>plot</name>.<name>getOrientation</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(
            <argument><expr><call><name><name>plot</name>.<name>getDomainAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>rangeEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
            <argument><expr><call><name><name>plot</name>.<name>getRangeAxisLocation</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lineY1</name> = <call><name><name>domainAxis</name>.<name>getCategoryJava2DCoordinate</name></name><argument_list>(
                <argument><expr><name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr></argument>, <argument><expr><name>catIndex1</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineX1</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value1</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineY2</name> = <call><name><name>domainAxis</name>.<name>getCategoryJava2DCoordinate</name></name><argument_list>(
                <argument><expr><name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr></argument>, <argument><expr><name>catIndex2</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineX2</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value2</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lineX1</name> = <call><name><name>domainAxis</name>.<name>getCategoryJava2DCoordinate</name></name><argument_list>(
                <argument><expr><name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr></argument>, <argument><expr><name>catIndex1</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineY1</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value1</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineX2</name> = <call><name><name>domainAxis</name>.<name>getCategoryJava2DCoordinate</name></name><argument_list>(
                <argument><expr><name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr></argument>, <argument><expr><name>catIndex2</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name>domainEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineY2</name> = <call><name><name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value2</name></name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>rangeEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawLine</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>lineX1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>lineY1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>lineX2</name></expr></argument>, <argument><expr>(<name>int</name>) <name>lineY2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with another.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryLineAnnotation</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CategoryLineAnnotation</name></type> <name>that</name> =<init> <expr>(<name>CategoryLineAnnotation</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>category1</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getCategory1</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>value1</name></name> != <call><name><name>that</name>.<name>getValue1</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>    
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>category2</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>that</name>.<name>getCategory2</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>value2</name></name> != <call><name><name>that</name>.<name>getValue2</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>    
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>stroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>category1</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>category2</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>value2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>HashUtilities</name>.<name>hashCodeForPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call><name><name>this</name>.<name>stroke</name>.<name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return> 
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the annotation.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  this class will not throw this 
     *         exception, but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>    
    }</block></function>
  
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>stroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>stroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
