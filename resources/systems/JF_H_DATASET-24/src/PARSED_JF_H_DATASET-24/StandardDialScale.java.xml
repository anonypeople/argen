<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-24\src\StandardDialScale.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * StandardDialScale.java
 * ----------------------
 * (C) Copyright 2006-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Nov-2006 : Version 1 (DG);
 * 17-Nov-2006 : Added flags for tick label visibility (DG);
 * 24-Oct-2007 : Added tick label formatter (DG);
 * 19-Nov-2007 : Added some missing accessor methods (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name>.<name>dial</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A scale for a {@link DialPlot}.
 * 
 * @since 1.0.7
 */</comment>
<class><specifier>public</specifier> class <name>StandardDialScale</name> <super><extends>extends <name>AbstractDialLayer</name></extends> <implements>implements <name>DialScale</name>, 
        <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>3715644629665918516L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The minimum data value for the scale. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum data value for the scale. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperBound</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The start angle for the scale display, in degrees (using the same
     * encoding as Arc2D). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startAngle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The extent of the scale display. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>extent</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The factor (in the range 0.0 to 1.0) that determines the outside limit
     * of the tick marks.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickRadius</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The increment (in data units) between major tick marks. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>majorTickIncrement</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The factor that is subtracted from the tickRadius to determine the
     * inner point of the major ticks.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>majorTickLength</name></decl>;</decl_stmt>    
    
    <comment type="javadoc">/**
     * The paint to use for major tick marks.  This field is transient because
     * it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>majorTickPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The stroke to use for major tick marks.  This field is transient because
     * it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>majorTickStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The number of minor ticks between each major tick.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>minorTickCount</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The factor that is subtracted from the tickRadius to determine the
     * inner point of the minor ticks.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minorTickLength</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The paint to use for minor tick marks.  This field is transient because
     * it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>minorTickPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The stroke to use for minor tick marks.  This field is transient because
     * it requires special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>minorTickStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The tick label offset.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickLabelOffset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The tick label font.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>tickLabelFont</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not the tick labels are 
     * displayed. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>tickLabelsVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The number formatter for the tick labels.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>tickLabelFormatter</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that controls whether or not the first tick label is
     * displayed.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>firstTickLabelVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The tick label paint.  This field is transient because it requires 
     * special handling for serialization.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>tickLabelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Creates a new instance of DialScale.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardDialScale</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>100.0</expr></argument>, <argument><expr>175</expr></argument>, <argument><expr>-170</expr></argument>, <argument><expr>10.0</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance.
     * 
     * @param lowerBound  the lower bound of the scale.
     * @param upperBound  the upper bound of the scale.
     * @param startAngle  the start angle (in degrees, using the same 
     *     orientation as Java's &lt;code&gt;Arc2D&lt;/code&gt; class).
     * @param extent  the extent (in degrees, counter-clockwise).
     * @param majorTickIncrement  the interval between major tick marks
     * @param minorTickCount  the number of minor ticks between major tick
     *          marks.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardDialScale</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerBound</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperBound</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>startAngle</name></decl></param>, <param><decl><type><name>double</name></type> <name>extent</name></decl></param>, <param><decl><type><name>double</name></type> <name>majorTickIncrement</name></decl></param>, 
            <param><decl><type><name>int</name></type> <name>minorTickCount</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>startAngle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>extent</name></name> = <name>extent</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lowerBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upperBound</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickRadius</name></name> = 0.70</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFormatter</name></name> = new <call><name>DecimalFormat</name><argument_list>(<argument><expr>"0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>firstTickLabelVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = new <call><name>Font</name><argument_list>(<argument><expr>"Dialog"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name><name>Color</name>.<name>blue</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelOffset</name></name> = 0.10</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickIncrement</name></name> = <name>majorTickIncrement</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickLength</name></name> = 0.04</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>3.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickCount</name></name> = <name>minorTickCount</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickLength</name></name> = 0.02</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the lower bound for the scale.
     * 
     * @return The lower bound for the scale.
     * 
     * @see #setLowerBound(double)
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerBound</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the lower bound for the scale and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     * 
     * @param lower  the lower bound.
     * 
     * @see #getLowerBound()
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowerBound</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the upper bound for the scale.
     * 
     * @return The upper bound for the scale.
     * 
     * @see #setUpperBound(double)
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperBound</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the upper bound for the scale and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     * 
     * @param upper  the upper bound.
     * 
     * @see #getUpperBound()
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpperBound</name><parameter_list>(<param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upper</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the start angle for the scale (in degrees using the same 
     * orientation as Java's &lt;code&gt;Arc2D&lt;/code&gt; class).
     * 
     * @return The start angle.
     * 
     * @see #setStartAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startAngle</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the start angle for the scale and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     * 
     * @param angle  the angle (in degrees).
     * 
     * @see #getStartAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the extent.
     * 
     * @return The extent.
     * 
     * @see #setExtent(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getExtent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>extent</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the extent and sends a {@link DialLayerChangeEvent} to all 
     * registered listeners.
     * 
     * @param extent  the extent.
     * 
     * @see #getExtent()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExtent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>extent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>extent</name></name> = <name>extent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the radius (as a percentage of the maximum space available) of
     * the outer limit of the tick marks.
     *
     * @return The tick radius.
     *
     * @see #setTickRadius(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTickRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickRadius</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tick radius and sends a {@link DialLayerChangeEvent} to all
     * registered listeners.
     *
     * @param radius  the radius.
     *
     * @see #getTickRadius()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>radius</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'radius' must be positive."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickRadius</name></name> = <name>radius</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the increment (in data units) between major tick labels.
     *
     * @return The increment between major tick labels.
     *
     * @see #setMajorTickIncrement(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMajorTickIncrement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>majorTickIncrement</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the increment (in data units) between major tick labels and sends a
     * {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param increment  the increment.
     *
     * @see #getMajorTickIncrement()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMajorTickIncrement</name><parameter_list>(<param><decl><type><name>double</name></type> <name>increment</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>increment</name> &lt;= 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'increment' must be positive."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickIncrement</name></name> = <name>increment</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length factor for the major tick marks.  The value is
     * subtracted from the tick radius to determine the inner starting point
     * for the tick marks.
     *
     * @return The length factor.
     *
     * @see #setMajorTickLength(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMajorTickLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>majorTickLength</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the length factor for the major tick marks and sends a
     * {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param length  the length.
     *
     * @see #getMajorTickLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMajorTickLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>length</name> &lt; 0.0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'length' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the major tick paint.
     *
     * @return The major tick paint (never &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setMajorTickPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getMajorTickPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>majorTickPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the major tick paint and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getMajorTickPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMajorTickPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the major tick marks.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setMajorTickStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getMajorTickStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>majorTickStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the major tick marks and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getMajorTickStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMajorTickStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of minor tick marks between major tick marks.
     *
     * @return The number of minor tick marks between major tick marks.
     *
     * @see #setMinorTickCount(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMinorTickCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickCount</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the number of minor tick marks between major tick marks and sends 
     * a {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param count  the count.
     *
     * @see #getMinorTickCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>count</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>count</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"The 'count' cannot be negative."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickCount</name></name> = <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length factor for the minor tick marks.  The value is
     * subtracted from the tick radius to determine the inner starting point
     * for the tick marks.
     *
     * @return The length factor.
     *
     * @see #setMinorTickLength(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMinorTickLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickLength</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the length factor for the minor tick marks and sends 
     * a {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param length  the length.
     *
     * @see #getMinorTickLength()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickLength</name><parameter_list>(<param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>length</name> &lt; 0.0</expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative 'length' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickLength</name></name> = <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the minor tick marks.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMinorTickPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getMinorTickPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the minor tick marks and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMinorTickPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the minor tick marks.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMinorTickStroke(Stroke)
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getMinorTickStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minorTickStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the minor tick marks and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMinorTickStroke()
     * 
     * @since 1.0.8
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinorTickStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tick label offset.
     *
     * @return The tick label offset.
     *
     * @see #setTickLabelOffset(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTickLabelOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tick label offset and sends a {@link DialLayerChangeEvent} to 
     * all registered listeners.
     *
     * @param offset  the offset.
     *
     * @see #getTickLabelOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font used to draw the tick labels.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setTickLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getTickLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelFont</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the font used to display the tick labels and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getTickLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the tick labels.
     *
     * @return The paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setTickLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the tick labels and sends a 
     * {@link DialLayerChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the tick labels should be displayed,
     * and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     * 
     * @see #setTickLabelsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTickLabelsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelsVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the tick labels are
     * displayed, and sends a {@link DialLayerChangeEvent} to all registered
     * listeners.
     * 
     * @param visible  the new flag value.
     * 
     * @see #getTickLabelsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number formatter used to convert the tick label values to
     * strings.
     * 
     * @return The formatter (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelFormatter(NumberFormat)
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getTickLabelFormatter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelFormatter</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the number formatter used to convert the tick label values to 
     * strings, and sends a {@link DialLayerChangeEvent} to all registered
     * listeners.
     * 
     * @param formatter  the formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelFormatter()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFormatter</name><parameter_list>(<param><decl><type><name>NumberFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>formatter</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'formatter' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFormatter</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the first tick label is
     * visible.
     * 
     * @return A boolean.
     * 
     * @see #setFirstTickLabelVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFirstTickLabelVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>firstTickLabelVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that controls whether or not the first tick label is 
     * visible, and sends a {@link DialLayerChangeEvent} to all registered
     * listeners.
     * 
     * @param visible  the new flag value.
     * 
     * @see #getFirstTickLabelVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFirstTickLabelVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>firstTickLabelVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>DialLayerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; to indicate that this layer should be 
     * clipped within the dial window. 
     * 
     * @return &lt;code&gt;true&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isClippedToWindow</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the scale on the dial plot.
     *
     * @param g2  the graphics target (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plot  the dial plot (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param frame  the reference frame that is used to construct the
     *     geometry of the plot (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param view  the visible part of the plot (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>DialPlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>frame</name></decl></param>, 
            <param><decl><type><name>Rectangle2D</name></type> <name>view</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcRect</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>tickRadius</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>tickRadius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcRectMajor</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>majorTickLength</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>majorTickLength</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcRectMinor</name> =<init> <expr><name>arcRect</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>minorTickCount</name></name> &gt; 0 &amp;&amp; <name><name>this</name>.<name>minorTickLength</name></name> &gt; 0.0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>arcRectMinor</name> = <call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>minorTickLength</name></name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>minorTickLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcRectForLabels</name> =<init> <expr><call><name><name>DialPlot</name>.<name>rectangleByRadius</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>tickLabelOffset</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>tickRadius</name></name> - <name><name>this</name>.<name>tickLabelOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>boolean</name></type> <name>firstLabel</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>workingLine</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>double</name></type> <name>v</name> =<init> <expr><name><name>this</name>.<name>lowerBound</name></name></expr></init></decl>;</init> <condition><expr><name>v</name> &lt;= <name><name>this</name>.<name>upperBound</name></name></expr>;</condition> 
                <incr><expr><name>v</name> += <name><name>this</name>.<name>majorTickIncrement</name></name></expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>arc</name>.<name>setArc</name></name><argument_list>(<argument><expr><name>arcRect</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> 
                    - <name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>pt0</name> =<init> <expr><call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>arc</name>.<name>setArc</name></name><argument_list>(<argument><expr><name>arcRectMajor</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> 
                    - <name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>pt1</name> =<init> <expr><call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>majorTickPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>majorTickStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>pt0</name></expr></argument>, <argument><expr><name>pt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>workingLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>arc</name>.<name>setArc</name></name><argument_list>(<argument><expr><name>arcRectForLabels</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> 
                    - <name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>pt2</name> =<init> <expr><call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr>!<name>firstLabel</name> || <name><name>this</name>.<name>firstTickLabelVisible</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(
                            <argument><expr><call><name><name>this</name>.<name>tickLabelFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                            <argument><expr>(<name>float</name>) <call><name><name>pt2</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>pt2</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                            <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>firstLabel</name> = false</expr>;</expr_stmt>
            
            <comment type="line">// now do the minor tick marks</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>minorTickCount</name></name> &gt; 0 &amp;&amp; <name><name>this</name>.<name>minorTickLength</name></name> &gt; 0.0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>minorTickIncrement</name> =<init> <expr><name><name>this</name>.<name>majorTickIncrement</name></name> 
                        / (<name><name>this</name>.<name>minorTickCount</name></name> + 1)</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>minorTickCount</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>vv</name> =<init> <expr><name>v</name> + ((<name>i</name> + 1) * <name>minorTickIncrement</name>)</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>vv</name> &gt;= <name><name>this</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                   
                    <expr_stmt><expr><call><name><name>arc</name>.<name>setArc</name></name><argument_list>(<argument><expr><name>arcRect</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name>angle</name> 
                            - <name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pt0</name> = <call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>arc</name>.<name>setArc</name></name><argument_list>(<argument><expr><name>arcRectMinor</name></expr></argument>, <argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name>angle</name> 
                            - <name><name>this</name>.<name>startAngle</name></name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>Point2D</name></type> <name>pt3</name> =<init> <expr><call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>workingLine</name>.<name>setLine</name></name><argument_list>(<argument><expr><name>pt0</name></expr></argument>, <argument><expr><name>pt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>workingLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
            
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Converts a data value to an angle against this scale.
     *
     * @param value  the data value.
     *
     * @return The angle (in degrees, using the same specification as Java's
     *     Arc2D class).
     *     
     * @see #angleToValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><name><name>this</name>.<name>upperBound</name></name> - <name><name>this</name>.<name>lowerBound</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>unit</name> =<init> <expr><name><name>this</name>.<name>extent</name></name> / <name>range</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>this</name>.<name>startAngle</name></name> + <name>unit</name> * (<name>value</name> - <name><name>this</name>.<name>lowerBound</name></name>)</expr>;</return>        
    }</block></function>

    <comment type="javadoc">/** 
     * Converts the given angle to a data value, based on this scale.
     * 
     * @param angle  the angle.
     * 
     * @return The data value.
     * 
     * @see #valueToAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>angleToValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name><name>Double</name>.<name>NaN</name></name></expr>;</return>  <comment type="line">// FIXME</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this &lt;code&gt;StandardDialScale&lt;/code&gt; for equality with an arbitrary
     * object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>    
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StandardDialScale</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StandardDialScale</name></type> <name>that</name> =<init> <expr>(<name>StandardDialScale</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> != <name><name>that</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> != <name><name>that</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>startAngle</name></name> != <name><name>that</name>.<name>startAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>extent</name></name> != <name><name>that</name>.<name>extent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickRadius</name></name> != <name><name>that</name>.<name>tickRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>majorTickIncrement</name></name> != <name><name>that</name>.<name>majorTickIncrement</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>majorTickLength</name></name> != <name><name>that</name>.<name>majorTickLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>majorTickPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>majorTickPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>majorTickStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>majorTickStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minorTickCount</name></name> != <name><name>that</name>.<name>minorTickCount</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>minorTickLength</name></name> != <name><name>that</name>.<name>minorTickLength</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>minorTickPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>minorTickStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>minorTickStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name> != <name><name>that</name>.<name>tickLabelsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelOffset</name></name> != <name><name>that</name>.<name>tickLabelOffset</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickLabelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>tickLabelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>193</expr></init></decl>;</decl_stmt>
        <comment type="line">// lowerBound</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>temp</name> =<init> <expr><call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lowerBound</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// upperBound</comment>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>upperBound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// startAngle</comment>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>startAngle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <comment type="line">// extent</comment>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <comment type="line">// tickRadius</comment>
        <expr_stmt><expr><name>temp</name> = <call><name><name>Double</name>.<name>doubleToLongBits</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickRadius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = 37 * <name>result</name> + <call>(<name>int</name>) <argument_list>(<argument><expr><name>temp</name> ^ (<name>temp</name> &gt;&gt;&gt; 32)</expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <comment type="line">// majorTickIncrement</comment>
        <comment type="line">// majorTickLength</comment>
        <comment type="line">// majorTickPaint</comment>
        <comment type="line">// majorTickStroke</comment>
        <comment type="line">// minorTickCount</comment>
        <comment type="line">// minorTickLength</comment>
        <comment type="line">// minorTickPaint</comment>
        <comment type="line">// minorTickStroke</comment>
        <comment type="line">// tickLabelOffset</comment>
        <comment type="line">// tickLabelFont</comment>
        <comment type="line">// tickLabelsVisible</comment>
        <comment type="line">// tickLabelFormatter</comment>
        <comment type="line">// firstTickLabelsVisible</comment>
        <return>return <expr><name>result</name></expr>;</return> 
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of this instance.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if this instance is not cloneable.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{ 
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>majorTickPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>majorTickStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>minorTickStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>majorTickStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minorTickStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
