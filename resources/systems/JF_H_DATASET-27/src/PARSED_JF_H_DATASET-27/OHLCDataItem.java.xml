<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-27\src\OHLCDataItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * OHLCDataItem.java
 * -----------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 03-Dec-2003 : Version 1 (DG);
 * 29-Apr-2005 : Added equals() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<comment type="javadoc">/**
 * Represents a single (open-high-low-close) data item in 
 * an {@link DefaultOHLCDataset}.  This data item is commonly used 
 * to summarise the trading activity of a financial commodity for 
 * a fixed period (most often one day).
 */</comment>
<class><specifier>public</specifier> class <name>OHLCDataItem</name> <super><implements>implements <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7753817154401169901L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The date. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Date</name></type> <name>date</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The open value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>open</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The high value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>high</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The low value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>low</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The close value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>close</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The trading volume (number of shares, contracts or whatever). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Number</name></type> <name>volume</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new item.
     * 
     * @param date  the date (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param open  the open value.
     * @param high  the high value.
     * @param low  the low value.
     * @param close  the close value.
     * @param volume  the volume.
     */</comment>
    <constructor><specifier>public</specifier> <name>OHLCDataItem</name><parameter_list>(<param><decl><type><name>Date</name></type> <name>date</name></decl></param>, 
                        <param><decl><type><name>double</name></type> <name>open</name></decl></param>, 
                        <param><decl><type><name>double</name></type> <name>high</name></decl></param>, 
                        <param><decl><type><name>double</name></type> <name>low</name></decl></param>, 
                        <param><decl><type><name>double</name></type> <name>close</name></decl></param>,
                        <param><decl><type><name>double</name></type> <name>volume</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>date</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'date' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>date</name></name> = <name>date</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>open</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>high</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>low</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>close</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>volume</name></name> = new <call><name>Double</name><argument_list>(<argument><expr><name>volume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the date that the data item relates to.
     * 
     * @return The date (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Date</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>date</name></name></expr>;</return>
    }</block></function>
 
    <comment type="javadoc">/**
     * Returns the open value.
     * 
     * @return The open value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getOpen</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>open</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the high value.
     * 
     * @return The high value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getHigh</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>high</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the low value.
     * 
     * @return The low value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getLow</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>low</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the close value.
     * 
     * @return The close value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getClose</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>close</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the volume.
     * 
     * @return The volume.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getVolume</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>volume</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Checks this instance for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>OHLCDataItem</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>OHLCDataItem</name></type> <name>that</name> =<init> <expr>(<name>OHLCDataItem</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>date</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>date</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>high</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>high</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>low</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>low</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>open</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>open</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>close</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>close</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Compares this object with the specified object for order. Returns a 
     * negative integer, zero, or a positive integer as this object is less 
     * than, equal to, or greater than the specified object.
     * 
     * @param object  the object to compare to.
     * 
     * @return A negative integer, zero, or a positive integer as this object 
     *         is less than, equal to, or greater than the specified object.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>object</name> <name>instanceof</name> <name>OHLCDataItem</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>OHLCDataItem</name></type> <name>item</name> =<init> <expr>(<name>OHLCDataItem</name>) <name>object</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>this</name>.<name>date</name>.<name>compareTo</name></name><argument_list>(<argument><expr><name><name>item</name>.<name>date</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>ClassCastException</name><argument_list>(<argument><expr>"OHLCDataItem.compareTo()."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>
    
}</block></class>
</unit>
