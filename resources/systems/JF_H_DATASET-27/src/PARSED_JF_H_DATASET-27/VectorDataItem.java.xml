<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-27\src\VectorDataItem.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * VectorDataItem.java
 * -------------------
 * (C) Copyright 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 30-Jan-2007 : Version 1 (DG);
 * 24-May-2007 : Added getVector(), renamed getDeltaX() --&gt; getVectorX(), 
 *               and likewise for getDeltaY() (DG);
 * 25-May-2007 : Moved from experimental to the main source tree (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name></name>;</package>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>ComparableObjectItem</name></name>;</import>

<comment type="javadoc">/**
 * A data item representing data in the form (x, y, deltaX, deltaY), intended
 * for use by the {@link VectorSeries} class.
 * 
 * @since 1.0.6
 */</comment>
<class><specifier>public</specifier> class <name>VectorDataItem</name> <super><extends>extends <name>ComparableObjectItem</name></extends></super> <block>{

    <comment type="javadoc">/** 
     * Creates a new instance of &lt;code&gt;YIntervalItem&lt;/code&gt;.
     *
     * @param x  the x-value.
     * @param y  the y-value.
     * @param deltaX  the vector x.
     * @param deltaY  the vector y.
     */</comment>
    <constructor><specifier>public</specifier> <name>VectorDataItem</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>double</name></type> <name>deltaX</name></decl></param>, <param><decl><type><name>double</name></type> <name>deltaY</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>XYCoordinate</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Vector</name><argument_list>(<argument><expr><name>deltaX</name></expr></argument>, <argument><expr><name>deltaY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the x-value.
     *
     * @return The x-value (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getXValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYCoordinate</name></type> <name>xy</name> =<init> <expr>(<name>XYCoordinate</name>) <call><name>getComparable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>xy</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-value.
     *
     * @return The y-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getYValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYCoordinate</name></type> <name>xy</name> =<init> <expr>(<name>XYCoordinate</name>) <call><name>getComparable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>xy</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the vector.
     * 
     * @return The vector (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Vector</name></type> <name>getVector</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>Vector</name>) <call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-component for the vector.
     * 
     * @return The x-component.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getVectorX</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>vi</name> =<init> <expr>(<name>Vector</name>) <call><name>getObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>vi</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>vi</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>Double</name>.<name>NaN</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-component for the vector.
     * 
     * @return The y-component.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getVectorY</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Vector</name></type> <name>vi</name> =<init> <expr>(<name>Vector</name>) <call><name>getObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>vi</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>vi</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>Double</name>.<name>NaN</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>
    
}</block></class>
</unit>
