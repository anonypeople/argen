<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\AbstractPieItemLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------------------
 * AbstractPieItemLabelGenerator.java
 * ----------------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 09-Nov-2004 : Version 1, draws out code from StandardPieItemLabelGenerator 
 *               and StandardPieToolTipGenerator (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 03-May-2006 : Fixed bug 1480978, a problem in the clone() method (DG);
 * 23-Nov-2007 : Implemented hashCode() (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>

<comment type="javadoc">/**
 * A base class used for generating pie chart item labels.
 */</comment>
<class><specifier>public</specifier> class <name>AbstractPieItemLabelGenerator</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7347703325267846275L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label format string. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>labelFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A number formatter for the value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>numberFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A number formatter for the percentage. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>percentFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates an item label generator using the specified number formatters.
     *
     * @param labelFormat  the label format string (&lt;code&gt;null&lt;/code&gt; not
     *                     permitted).
     * @param numberFormat  the format object for the values (&lt;code&gt;null&lt;/code&gt;
     *                      not permitted).
     * @param percentFormat  the format object for the percentages
     *                       (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractPieItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>,
                                            <param><decl><type><name>NumberFormat</name></type> <name>numberFormat</name></decl></param>, 
                                            <param><decl><type><name>NumberFormat</name></type> <name>percentFormat</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>labelFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'labelFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>numberFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'numberFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>percentFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'percentFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelFormat</name></name> = <name>labelFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>numberFormat</name></name> = <name>numberFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>percentFormat</name></name> = <name>percentFormat</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the label format string.
     * 
     * @return The label format string (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getLabelFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelFormat</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number formatter.
     *
     * @return The formatter (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getNumberFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>numberFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the percent formatter.
     *
     * @return The formatter (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getPercentFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>percentFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the array of items that can be passed to the 
     * {@link MessageFormat} class for creating labels.  The returned array
     * contains four values:
     * &lt;ul&gt;
     * &lt;li&gt;result[0] = the section key converted to a &lt;code&gt;String&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;result[1] = the formatted data value;&lt;/li&gt;
     * &lt;li&gt;result[2] = the formatted percentage (of the total);&lt;/li&gt;
     * &lt;li&gt;result[3] = the formatted total value.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The items (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name><index>[]</index></type> <name>createItemArray</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Object</name><index>[<expr>4</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>total</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>calculatePieDatasetTotal</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <call><name><name>this</name>.<name>numberFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = "null"</expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>double</name></type> <name>percent</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>value</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>v</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>percent</name> = <name>v</name> / <name>total</name></expr>;</expr_stmt> 
            }</block></then></if>
        }</block></then></if>       
        <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call><name><name>this</name>.<name>percentFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <call><name><name>this</name>.<name>numberFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Generates a label for a pie section.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param key  the section key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>String</name></type> <name>generateSectionLabel</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>    
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>items</name> =<init> <expr><call><name>createItemArray</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> = <call><name><name>MessageFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFormat</name></name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the generator for equality with an arbitrary object.
     *
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>AbstractPieItemLabelGenerator</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>AbstractPieItemLabelGenerator</name></type> <name>that</name> 
                =<init> <expr>(<name>AbstractPieItemLabelGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>labelFormat</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>labelFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>numberFormat</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>numberFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>percentFormat</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>percentFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>labelFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>numberFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>percentFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  should not happen.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{      
        <decl_stmt><decl><type><name>AbstractPieItemLabelGenerator</name></type> <name>clone</name> 
                =<init> <expr>(<name>AbstractPieItemLabelGenerator</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>numberFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>numberFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>percentFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>percentFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>percentFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
