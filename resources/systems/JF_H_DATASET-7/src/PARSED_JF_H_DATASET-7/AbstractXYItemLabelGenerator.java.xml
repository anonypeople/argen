<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\AbstractXYItemLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------------
 * AbstractXYItemLabelGenerator.java
 * ---------------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 27-Feb-2004 : Version 1 (DG);
 * 12-May-2004 : Moved default tool tip format to 
 *               StandardXYToolTipGenerator (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 08-Oct-2004 : Modified createItemArray() method to handle null values (DG);
 * 10-Jan-2005 : Updated createItemArray() to use x, y primitives if 
 *               possible (DG);
 * ------------- JFREECHART 1.0.x --------------------------------------------
 * 26-Jan-2006 : Minor API doc update (DG);
 * 25-Jan-2007 : Added new constructor and fixed bug in clone() method (DG);
 * 16-Oct-2007 : Removed redundant code (DG);
 * 23-Nov-2007 : Implemented hashCode() (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>HashUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A base class for creating item label generators.
 */</comment>
<class><specifier>public</specifier> class <name>AbstractXYItemLabelGenerator</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5869744396278660636L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The item label format string. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>formatString</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A number formatter for the x value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>xFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A date formatter for the x value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>xDateFormat</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A formatter for the y value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>yFormat</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A date formatter for the y value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>yDateFormat</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The string used to represent 'null' for the y-value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>nullYString</name> =<init> <expr>"null"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates an item label generator using default number formatters.
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractXYItemLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>"{2}"</expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates an item label generator using the specified number formatters.
     *
     * @param formatString  the item label format string (&lt;code&gt;null&lt;/code&gt; 
     *                      not permitted).
     * @param xFormat  the format object for the x values (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     * @param yFormat  the format object for the y values (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractXYItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>formatString</name></decl></param>,
                                           <param><decl><type><name>NumberFormat</name></type> <name>xFormat</name></decl></param>, 
                                           <param><decl><type><name>NumberFormat</name></type> <name>yFormat</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>formatString</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'formatString' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>xFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'xFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>yFormat</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'yFormat' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>formatString</name></name> = <name>formatString</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xFormat</name></name> = <name>xFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yFormat</name></name> = <name>yFormat</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Creates an item label generator using the specified number formatters.
     *
     * @param formatString  the item label format string (&lt;code&gt;null&lt;/code&gt; 
     *                      not permitted).
     * @param xFormat  the format object for the x values (&lt;code&gt;null&lt;/code&gt; 
     *                 permitted).
     * @param yFormat  the format object for the y values (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractXYItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>formatString</name></decl></param>,
                                           <param><decl><type><name>DateFormat</name></type> <name>xFormat</name></decl></param>, 
                                           <param><decl><type><name>NumberFormat</name></type> <name>yFormat</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xDateFormat</name></name> = <name>xFormat</name></expr>;</expr_stmt>
    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates an item label generator using the specified formatters (a 
     * number formatter for the x-values and a date formatter for the 
     * y-values).
     *
     * @param formatString  the item label format string (&lt;code&gt;null&lt;/code&gt; 
     *                      not permitted).
     * @param xFormat  the format object for the x values (&lt;code&gt;null&lt;/code&gt; 
     *                 permitted).
     * @param yFormat  the format object for the y values (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     *                 
     * @since 1.0.4
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractXYItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>formatString</name></decl></param>,
            <param><decl><type><name>NumberFormat</name></type> <name>xFormat</name></decl></param>, <param><decl><type><name>DateFormat</name></type> <name>yFormat</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>, <argument><expr><name>xFormat</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yDateFormat</name></name> = <name>yFormat</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates an item label generator using the specified number formatters.
     *
     * @param formatString  the item label format string (&lt;code&gt;null&lt;/code&gt; 
     *                      not permitted).
     * @param xFormat  the format object for the x values (&lt;code&gt;null&lt;/code&gt; 
     *                 permitted).
     * @param yFormat  the format object for the y values (&lt;code&gt;null&lt;/code&gt; 
     *                 not permitted).
     */</comment>
    <constructor><specifier>protected</specifier> <name>AbstractXYItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>formatString</name></decl></param>,
                                           <param><decl><type><name>DateFormat</name></type> <name>xFormat</name></decl></param>, 
                                           <param><decl><type><name>DateFormat</name></type> <name>yFormat</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>formatString</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xDateFormat</name></name> = <name>xFormat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yDateFormat</name></name> = <name>yFormat</name></expr>;</expr_stmt>
    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the format string (this controls the overall structure of the 
     * label).
     * 
     * @return The format string (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getFormatString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>formatString</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number formatter for the x-values.
     *
     * @return The number formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getXFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>xFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the date formatter for the x-values.
     *
     * @return The date formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getXDateFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>xDateFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number formatter for the y-values.
     *
     * @return The number formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getYFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>yFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the date formatter for the y-values.
     *
     * @return The date formatter (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>DateFormat</name></type> <name>getYDateFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>yDateFormat</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a label string for an item in the dataset.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateLabelString</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>    
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>items</name> =<init> <expr><call><name>createItemArray</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>MessageFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>formatString</name></name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the array of items that can be passed to the 
     * {@link MessageFormat} class for creating labels.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return An array of three items from the dataset formatted as
     *         &lt;code&gt;String&lt;/code&gt; objects (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name><index>[]</index></type> <name>createItemArray</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, 
                                       <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Object</name><index>[<expr>3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call><name><name>dataset</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>dataset</name>.<name>getXValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>xDateFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <call><name><name>this</name>.<name>xDateFormat</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <call><name><name>this</name>.<name>xFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>dataset</name>.<name>getYValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name><name>dataset</name>.<name>getY</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <name><name>this</name>.<name>nullYString</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>yDateFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call><name><name>this</name>.<name>yDateFormat</name>.<name>format</name></name><argument_list>(<argument><expr>new <call><name>Date</name><argument_list>(<argument><expr>(<name>long</name>) <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call><name><name>this</name>.<name>yFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the other object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>AbstractXYItemLabelGenerator</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>AbstractXYItemLabelGenerator</name></type> <name>that</name> =<init> <expr>(<name>AbstractXYItemLabelGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>formatString</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>formatString</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xFormat</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>xFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>xDateFormat</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>xDateFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yFormat</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>yFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>yDateFormat</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>yDateFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a hash code for this instance.
     * 
     * @return A hash code.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>127</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>formatString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>xFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>xDateFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>yFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>HashUtilities</name>.<name>hashCode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name>.<name>yDateFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>AbstractXYItemLabelGenerator</name></type> <name>clone</name> 
                =<init> <expr>(<name>AbstractXYItemLabelGenerator</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>xFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>xFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>xFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>yFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>yFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>yFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>xDateFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>xDateFormat</name></name> = (<name>DateFormat</name>) <call><name><name>this</name>.<name>xDateFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>yDateFormat</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>yDateFormat</name></name> = (<name>DateFormat</name>) <call><name><name>this</name>.<name>yDateFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
