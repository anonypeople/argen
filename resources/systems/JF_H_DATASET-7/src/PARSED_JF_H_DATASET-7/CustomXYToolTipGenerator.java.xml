<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\CustomXYToolTipGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------------
 * CustomXYItemLabelGenerator.java
 * -------------------------------
 * (C) Copyright 2002-2007, by Richard Atkinson and Contributors.
 *
 * Original Author:  Richard Atkinson;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes:
 * --------
 * 05-Aug-2002 : Version 1, contributed by Richard Atkinson (RA);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 21-Mar-2003 : Implemented Serializable (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 17-Nov-2003 : Implemented PublicCloneable (DG);
 * 25-Feb-2004 : Renamed XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 02-Feb-2007 : Removed author tags all over JFreeChart sources (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A tool tip generator that stores custom tooltips. The dataset passed into 
 * the generateToolTip method is ignored.
 */</comment>
<class><specifier>public</specifier> class <name>CustomXYToolTipGenerator</name> <super><implements>implements <name>XYToolTipGenerator</name>, 
                                                 <name>Cloneable</name>, 
                                                 <name>PublicCloneable</name>,
                                                 <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8636030004670141362L</expr></init></decl>;</decl_stmt> 
    
    <comment type="javadoc">/** Storage for the tooltip lists. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>toolTipSeries</name> =<init> <expr>new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CustomXYToolTipGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the number of tool tip lists stored by the renderer.
     *
     * @return The list count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getListCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>toolTipSeries</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of tool tips in a given list.
     *
     * @param list  the list index (zero based).
     *
     * @return The tooltip count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getToolTipCount</name><parameter_list>(<param><decl><type><name>int</name></type> <name>list</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>tooltips</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>toolTipSeries</name>.<name>get</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>tooltips</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>tooltips</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tool tip text for an item.
     *
     * @param series  the series index.
     * @param item  the item index.
     *
     * @return The tool tip text.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getToolTipText</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>series</name> &lt; <call><name>getListCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>List</name></type> <name>tooltips</name> =<init> <expr>(<name>List</name>) <call><name><name>this</name>.<name>toolTipSeries</name>.<name>get</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tooltips</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>item</name> &lt; <call><name><name>tooltips</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = (<name>String</name>) <call><name><name>tooltips</name>.<name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a list of tooltips for a series.
     *
     * @param toolTips  the list of tool tips.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addToolTipSeries</name><parameter_list>(<param><decl><type><name>List</name></type> <name>toolTips</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>toolTipSeries</name>.<name>add</name></name><argument_list>(<argument><expr><name>toolTips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a tool tip text item for a particular item within a series.
     *
     * @param data  the dataset (ignored in this implementation).
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The tooltip text.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateToolTip</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{

        <return>return <expr><call><name>getToolTipText</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>CustomXYToolTipGenerator</name></type> <name>clone</name> 
            =<init> <expr>(<name>CustomXYToolTipGenerator</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>toolTipSeries</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>toolTipSeries</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>toolTipSeries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
        
    }</block></function>
    <comment type="javadoc">/**
     * Tests if this object is equal to another.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>CustomXYToolTipGenerator</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CustomXYToolTipGenerator</name></type> <name>generator</name> =<init> <expr>(<name>CustomXYToolTipGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <call><name>getListCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>item</name> &lt; <call><name>getToolTipCount</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>t1</name> =<init> <expr><call><name>getToolTipText</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>t2</name> =<init> <expr><call><name><name>generator</name>.<name>getToolTipText</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>t1</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>result</name> = <name>result</name> &amp;&amp; <call><name><name>t1</name>.<name>equals</name></name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>result</name> = <name>result</name> &amp;&amp; (<name>t2</name> == <name>null</name>)</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
            }</block></for>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>

        <return>return <expr>false</expr>;</return>

    }</block></function>

}</block></class>
</unit>
