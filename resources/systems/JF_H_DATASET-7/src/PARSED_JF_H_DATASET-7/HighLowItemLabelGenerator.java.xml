<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\HighLowItemLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------------
 * HighLowItemLabelGenerator.java
 * ------------------------------
 * (C) Copyright 2001-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   David Basten;
 *
 * Changes
 * -------
 * 13-Dec-2001 : Version 1 (DG);
 * 16-Jan-2002 : Completed Javadocs (DG);
 * 23-Apr-2002 : Added date to the tooltip string (DG);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 21-Mar-2003 : Implemented Serializable (DG);
 * 13-Aug-2003 : Implemented Cloneable (DG);
 * 17-Nov-2003 : Implemented PublicCloneable (DG);
 * 25-Feb-2004 : Renamed XYToolTipGenerator --&gt; XYItemLabelGenerator (DG);
 * 25-May-2004 : Added number formatter (see patch 890496) (DG);
 * 15-Jul-2004 : Switched getX() with getXValue() and getY() with 
 *               getYValue() (DG);
 * 20-Apr-2005 : Renamed XYLabelGenerator --&gt; XYItemLabelGenerator (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Date</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>OHLCDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A standard item label generator for plots that use data from a 
 * {@link OHLCDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>HighLowItemLabelGenerator</name> <super><implements>implements <name>XYItemLabelGenerator</name>, 
                                                  <name>XYToolTipGenerator</name>,
                                                  <name>Cloneable</name>, 
                                                  <name>PublicCloneable</name>,
                                                  <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5617111754832211830L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The date formatter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DateFormat</name></type> <name>dateFormatter</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The number formatter. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>numberFormatter</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an item label generator using the default date and number 
     * formats.
     */</comment>
    <constructor><specifier>public</specifier> <name>HighLowItemLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>DateFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a tool tip generator using the supplied date formatter.
     *
     * @param dateFormatter  the date formatter (&lt;code&gt;null&lt;/code&gt; not 
     *                       permitted).
     * @param numberFormatter  the number formatter (&lt;code&gt;null&lt;/code&gt; not 
     *                         permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>HighLowItemLabelGenerator</name><parameter_list>(<param><decl><type><name>DateFormat</name></type> <name>dateFormatter</name></decl></param>, 
                                     <param><decl><type><name>NumberFormat</name></type> <name>numberFormatter</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dateFormatter</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'dateFormatter' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <if>if <condition>(<expr><name>numberFormatter</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'numberFormatter' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dateFormatter</name></name> = <name>dateFormatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>numberFormatter</name></name> = <name>numberFormatter</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Generates a tooltip text item for a particular item within a series.
     *
     * @param dataset  the dataset.
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The tooltip text.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateToolTip</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>item</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>OHLCDataset</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>OHLCDataset</name></type> <name>d</name> =<init> <expr>(<name>OHLCDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>high</name> =<init> <expr><call><name><name>d</name>.<name>getHigh</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>low</name> =<init> <expr><call><name><name>d</name>.<name>getLow</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>open</name> =<init> <expr><call><name><name>d</name>.<name>getOpen</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>close</name> =<init> <expr><call><name><name>d</name>.<name>getClose</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>x</name> =<init> <expr><call><name><name>d</name>.<name>getX</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>result</name> = <call><name><name>d</name>.<name>getSeriesKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>x</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Date</name></type> <name>date</name> =<init> <expr>new <call><name>Date</name><argument_list>(<argument><expr><call><name><name>x</name>.<name>longValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <name>result</name> + "--&gt; Date=" + <call><name><name>this</name>.<name>dateFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>high</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <name>result</name> + " High=" 
                             + <call><name><name>this</name>.<name>numberFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>high</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>low</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <name>result</name> + " Low=" 
                             + <call><name><name>this</name>.<name>numberFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>low</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>open</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <name>result</name> + " Open=" 
                             + <call><name><name>this</name>.<name>numberFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>open</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>close</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <name>result</name> + " Close=" 
                             + <call><name><name>this</name>.<name>numberFormatter</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>close</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Generates a label for the specified item. The label is typically a 
     * formatted version of the data value, but any text can be used.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series index (zero-based).
     * @param category  the category index (zero-based).
     *
     * @return The label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateLabel</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>category</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>  <comment type="line">//TODO: implement this method properly</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>HighLowItemLabelGenerator</name></type> <name>clone</name> 
            =<init> <expr>(<name>HighLowItemLabelGenerator</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>dateFormatter</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>dateFormatter</name></name> = (<name>DateFormat</name>) <call><name><name>this</name>.<name>dateFormatter</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>numberFormatter</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>numberFormatter</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>numberFormatter</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <return>return <expr><name>clone</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests if this object is equal to another.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>HighLowItemLabelGenerator</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>HighLowItemLabelGenerator</name></type> <name>generator</name> =<init> <expr>(<name>HighLowItemLabelGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>dateFormatter</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>generator</name>.<name>dateFormatter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>numberFormatter</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>generator</name>.<name>numberFormatter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
