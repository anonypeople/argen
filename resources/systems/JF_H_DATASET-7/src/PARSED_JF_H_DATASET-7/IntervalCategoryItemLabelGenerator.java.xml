<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\IntervalCategoryItemLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------------------
 * IntervalCategoryItemLabelGenerator.java
 * ---------------------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 11-May-2004 : Version 1, split from IntervalCategoryItemLabelGenerator (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DateFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>IntervalCategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A label generator for plots that use data from an 
 * {@link IntervalCategoryDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>IntervalCategoryItemLabelGenerator</name> 
    <super><extends>extends <name>StandardCategoryItemLabelGenerator</name></extends>
    <implements>implements <name>CategoryItemLabelGenerator</name>, <name>PublicCloneable</name>, <name>Cloneable</name>,
               <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5056909225610630529L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default format string. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_LABEL_FORMAT_STRING</name> 
        =<init> <expr>"({0}, {1}) = {3} - {4}"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new generator with a default number formatter.
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalCategoryItemLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>DEFAULT_LABEL_FORMAT_STRING</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new generator with the specified number formatter.
     *
     * @param labelFormat  the label format string (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     * @param formatter  the number formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalCategoryItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>, 
                                              <param><decl><type><name>NumberFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>labelFormat</name></expr></argument>, <argument><expr><name>formatter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new generator with the specified date formatter.
     *
     * @param labelFormat  the label format string (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     * @param formatter  the date formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalCategoryItemLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>, 
                                              <param><decl><type><name>DateFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>labelFormat</name></expr></argument>, <argument><expr><name>formatter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates the array of items that can be passed to the 
     * &lt;code&gt;MessageFormat&lt;/code&gt; class for creating labels.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The items (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name><index>[]</index></type> <name>createItemArray</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, 
                                       <param><decl><type><name>int</name></type> <name>row</name></decl></param>, <param><decl><type><name>int</name></type> <name>column</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Object</name><index>[<expr>5</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = <call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getNumberFormat</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call><name>getNumberFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>getDateFormat</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = <call><name>getDateFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        
        <if>if <condition>(<expr><name>dataset</name> <name>instanceof</name> <name>IntervalCategoryDataset</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>IntervalCategoryDataset</name></type> <name>icd</name> =<init> <expr>(<name>IntervalCategoryDataset</name>) <name>dataset</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>start</name> =<init> <expr><call><name><name>icd</name>.<name>getStartValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>end</name> =<init> <expr><call><name><name>icd</name>.<name>getEndValue</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>getNumberFormat</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <call><name>getNumberFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
                <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = <call><name>getNumberFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>getDateFormat</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = <call><name>getDateFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = <call><name>getDateFormat</name><argument_list>()</argument_list></call>.<call><name>format</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
