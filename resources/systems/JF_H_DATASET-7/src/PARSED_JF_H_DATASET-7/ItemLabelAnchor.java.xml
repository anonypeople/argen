<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\ItemLabelAnchor.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * ItemLabelAnchor.java
 * --------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 29-Apr-2003 : Version 1 (DG);
 * 19-Feb-2004 : Moved to org.jfree.chart.labels package, added readResolve() 
 *               method (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>ObjectStreamException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<comment type="javadoc">/**
 * An enumeration of the positions that a value label can take, relative to an 
 * item in a {@link org.jfree.chart.plot.CategoryPlot}.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>ItemLabelAnchor</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-1233101616128695658L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** CENTER. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>CENTER</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.CENTER"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE1. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE1</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE2. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE2</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE3. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE3</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE3"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE4. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE4</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE4"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE5. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE5</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE5"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE6. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE6</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE6"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE7. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE7</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE7"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE8. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE8</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE8"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE9. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE9</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE9"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE10. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE10</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE10"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE11. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE11</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE11"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** INSIDE12. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>INSIDE12</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.INSIDE12"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE1. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE1</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE1"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE2. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE2</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE2"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE3. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE3</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE3"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE4. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE4</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE4"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE5. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE5</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE5"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE6. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE6</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE6"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE7. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE7</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE7"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE8. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE8</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE8"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE9. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE9</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE9"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE10. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE10</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE10"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE11. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE11</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE11"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** OUTSIDE12. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>ItemLabelAnchor</name></type> <name>OUTSIDE12</name> 
        =<init> <expr>new <call><name>ItemLabelAnchor</name><argument_list>(<argument><expr>"ItemLabelAnchor.OUTSIDE12"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The name. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Private constructor.
     *
     * @param name  the name.
     */</comment>
    <constructor><specifier>private</specifier> <name>ItemLabelAnchor</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a string representing the object.
     *
     * @return The string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>name</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if this object is equal to the specified 
     * object, and &lt;code&gt;false&lt;/code&gt; otherwise.
     *
     * @param o  the other object.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>o</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>this</name> == <name>o</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>o</name> <name>instanceof</name> <name>ItemLabelAnchor</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>ItemLabelAnchor</name></type> <name>order</name> =<init> <expr>(<name>ItemLabelAnchor</name>) <name>o</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>name</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>order</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * Ensures that serialization returns the unique instances.
     * 
     * @return The object.
     * 
     * @throws ObjectStreamException if there is a problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>Object</name></type> <name>readResolve</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ObjectStreamException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ItemLabelAnchor</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>CENTER</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE1</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE2</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE3</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE4</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE5</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE6</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE7</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE8</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE9</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE10</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE11</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>INSIDE12</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE1</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE1</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE2</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE3</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE3</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE4</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE4</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE5</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE5</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE6</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE6</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE7</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE7</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE8</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE8</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE9</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE9</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE10</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE10</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE11</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE11</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name><name>this</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE12</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>ItemLabelAnchor</name>.<name>OUTSIDE12</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
