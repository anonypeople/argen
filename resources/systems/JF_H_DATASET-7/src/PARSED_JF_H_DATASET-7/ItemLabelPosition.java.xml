<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\ItemLabelPosition.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * ItemLabelPosition.java
 * ----------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 27-Oct-2003 : Version 1 (DG);
 * 19-Feb-2004 : Moved to org.jfree.chart.labels, updated Javadocs and argument 
 *               checking (DG);
 * 26-Feb-2004 : Added new constructor (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>

<comment type="javadoc">/**
 * The attributes that control the position of the label for each data item on 
 * a chart.  Instances of this class are immutable.
 */</comment>
<class><specifier>public</specifier> class <name>ItemLabelPosition</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>5845390630157034499L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The item label anchor point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ItemLabelAnchor</name></type> <name>itemLabelAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The text anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>textAnchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The rotation anchor. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextAnchor</name></type> <name>rotationAnchor</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The rotation angle. */</comment>    
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>angle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new position record with default settings.
     */</comment>
    <constructor><specifier>public</specifier> <name>ItemLabelPosition</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name><name>ItemLabelAnchor</name>.<name>OUTSIDE12</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>BOTTOM_CENTER</name></name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new position record (with zero rotation).
     * 
     * @param itemLabelAnchor  the item label anchor (&lt;code&gt;null&lt;/code&gt; not 
     *                         permitted).
     * @param textAnchor  the text anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>ItemLabelPosition</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>itemLabelAnchor</name></decl></param>, 
                             <param><decl><type><name>TextAnchor</name></type> <name>textAnchor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>itemLabelAnchor</name></expr></argument>, <argument><expr><name>textAnchor</name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new position record.  The item label anchor is a point 
     * relative to the data item (dot, bar or other visual item) on a chart.  
     * The item label is aligned by aligning the text anchor with the 
     * item label anchor.
     * 
     * @param itemLabelAnchor  the item label anchor (&lt;code&gt;null&lt;/code&gt; not 
     *                         permitted).
     * @param textAnchor  the text anchor (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param rotationAnchor  the rotation anchor (&lt;code&gt;null&lt;/code&gt; not 
     *                        permitted).
     * @param angle  the rotation angle (in radians).
     */</comment>
    <constructor><specifier>public</specifier> <name>ItemLabelPosition</name><parameter_list>(<param><decl><type><name>ItemLabelAnchor</name></type> <name>itemLabelAnchor</name></decl></param>, 
                             <param><decl><type><name>TextAnchor</name></type> <name>textAnchor</name></decl></param>,
                             <param><decl><type><name>TextAnchor</name></type> <name>rotationAnchor</name></decl></param>,
                             <param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
              
        <if>if <condition>(<expr><name>itemLabelAnchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'itemLabelAnchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>textAnchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'textAnchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>rotationAnchor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'rotationAnchor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>this</name>.<name>itemLabelAnchor</name></name> = <name>itemLabelAnchor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>textAnchor</name></name> = <name>textAnchor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rotationAnchor</name></name> = <name>rotationAnchor</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angle</name></name> = <name>angle</name></expr>;</expr_stmt>
    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the item label anchor.
     * 
     * @return The item label anchor (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ItemLabelAnchor</name></type> <name>getItemLabelAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>itemLabelAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the text anchor.
     * 
     * @return The text anchor (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getTextAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>textAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the rotation anchor point.
     * 
     * @return The rotation anchor point (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>TextAnchor</name></type> <name>getRotationAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rotationAnchor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the angle of rotation for the label.
     * 
     * @return The angle (in radians).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angle</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{  
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>    
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ItemLabelPosition</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ItemLabelPosition</name></type> <name>that</name> =<init> <expr>(<name>ItemLabelPosition</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>itemLabelAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>itemLabelAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>textAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>textAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rotationAnchor</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rotationAnchor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>angle</name></name> != <name><name>that</name>.<name>angle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>     
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
