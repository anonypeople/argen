<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\StandardCategorySeriesLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------------------------------
 * StandardCategorySeriesLabelGenerator.java
 * -----------------------------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 20-Apr-2005 : Version 1 (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 03-May-2006 : Fixed equals() method (bug 1481102) (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>MessageFormat</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A standard series label generator for plots that use data from 
 * a {@link org.jfree.data.category.CategoryDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>StandardCategorySeriesLabelGenerator</name> <super><implements>implements 
    <name>CategorySeriesLabelGenerator</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4630760091523940820L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default item label format. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_LABEL_FORMAT</name> =<init> <expr>"{0}"</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The format pattern. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>formatPattern</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a default series label generator (uses 
     * {@link #DEFAULT_LABEL_FORMAT}).
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardCategorySeriesLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_LABEL_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new series label generator.
     * 
     * @param format  the format pattern (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardCategorySeriesLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>format</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>format</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'format' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>formatPattern</name></name> = <name>format</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Generates a label for the specified series.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series.
     * 
     * @return A series label.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateLabel</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'dataset' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>MessageFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>formatPattern</name></name></expr></argument>, 
                <argument><expr><call><name>createItemArray</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>label</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates the array of items that can be passed to the 
     * {@link MessageFormat} class for creating labels.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param series  the series (zero-based index).
     *
     * @return The items (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>protected</specifier> <name>Object</name><index>[]</index></type> <name>createItemArray</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Object</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = <call><name><name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{ 
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the other object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StandardCategorySeriesLabelGenerator</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StandardCategorySeriesLabelGenerator</name></type> <name>that</name> 
                =<init> <expr>(<name>StandardCategorySeriesLabelGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>formatPattern</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>formatPattern</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
