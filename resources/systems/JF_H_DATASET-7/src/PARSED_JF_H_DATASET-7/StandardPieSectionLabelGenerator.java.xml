<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-7\src\StandardPieSectionLabelGenerator.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------------------------
 * StandardPieSectionLabelGenerator.java
 * -------------------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 09-Nov-2004 : Version 1, derived from StandardPieItemLabelGenerator (DG);
 * 29-Jul-2005 : Removed unused generateToolTip() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 03-May-2006 : Modified DEFAULT_SECTION_LABEL_FORMAT (DG);
 * 10-Jan-2007 : Include attributedLabels in equals() test (DG);
 * 10-Jul-2007 : Added constructors with locale parameter (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>TextAttribute</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>AttributedString</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectList</name></name>;</import>

<comment type="javadoc">/**
 * A standard item label generator for plots that use data from a 
 * {@link PieDataset}.
 * &lt;p&gt;
 * For the label format, use {0} where the pie section key should be inserted,
 * {1} for the absolute section value and {2} for the percent amount of the pie
 * section, e.g. &lt;code&gt;"{0} = {1} ({2})"&lt;/code&gt; will display as  
 * &lt;code&gt;apple = 120 (5%)&lt;/code&gt;.
 */</comment>
<class><specifier>public</specifier> class <name>StandardPieSectionLabelGenerator</name> 
        <super><extends>extends <name>AbstractPieItemLabelGenerator</name></extends>
        <implements>implements <name>PieSectionLabelGenerator</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>3064190563760203668L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default section label format. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_SECTION_LABEL_FORMAT</name> =<init> <expr>"{0}"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * An optional list of attributed labels (instances of AttributedString). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>attributedLabels</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new section label generator using 
     * {@link #DEFAULT_SECTION_LABEL_FORMAT} as the label format string, and 
     * platform default number and percentage formatters.
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardPieSectionLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_SECTION_LABEL_FORMAT</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>NumberFormat</name>.<name>getPercentInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new instance for the specified locale.
     * 
     * @param locale  the local (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.7
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardPieSectionLabelGenerator</name><parameter_list>(<param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_SECTION_LABEL_FORMAT</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new section label generator using the specified label format
     * string, and platform default number and percentage formatters.
     * 
     * @param labelFormat  the label format (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardPieSectionLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>labelFormat</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>NumberFormat</name>.<name>getPercentInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new instance for the specified locale.
     * 
     * @param labelFormat  the label format (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param locale  the local (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.7
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardPieSectionLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>, <param><decl><type><name>Locale</name></type> <name>locale</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>labelFormat</name></expr></argument>, <argument><expr><call><name><name>NumberFormat</name>.<name>getNumberInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>NumberFormat</name>.<name>getPercentInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates an item label generator using the specified number formatters.
     *
     * @param labelFormat  the label format string (&lt;code&gt;null&lt;/code&gt; not 
     *                     permitted).
     * @param numberFormat  the format object for the values (&lt;code&gt;null&lt;/code&gt;
     *                      not permitted).
     * @param percentFormat  the format object for the percentages 
     *                       (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>StandardPieSectionLabelGenerator</name><parameter_list>(<param><decl><type><name>String</name></type> <name>labelFormat</name></decl></param>,
            <param><decl><type><name>NumberFormat</name></type> <name>numberFormat</name></decl></param>, <param><decl><type><name>NumberFormat</name></type> <name>percentFormat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>labelFormat</name></expr></argument>, <argument><expr><name>numberFormat</name></expr></argument>, <argument><expr><name>percentFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>attributedLabels</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the attributed label for a section, or &lt;code&gt;null&lt;/code&gt; if none
     * is defined.
     * 
     * @param section  the section index.
     * 
     * @return The attributed label.
     */</comment>
    <function><type><specifier>public</specifier> <name>AttributedString</name></type> <name>getAttributedLabel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>AttributedString</name>) <call><name><name>this</name>.<name>attributedLabels</name>.<name>get</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the attributed label for a section.
     * 
     * @param section  the section index.
     * @param label  the label (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAttributedLabel</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>AttributedString</name></type> <name>label</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>attributedLabels</name>.<name>set</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Generates a label for a pie section.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param key  the section key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>generateSectionLabel</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>generateSectionLabel</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates an attributed label for the specified series, or 
     * &lt;code&gt;null&lt;/code&gt; if no attributed label is available (in which case,
     * the string returned by 
     * {@link #generateSectionLabel(PieDataset, Comparable)} will 
     * provide the fallback).  Only certain attributes are recognised by the 
     * code that ultimately displays the labels: 
     * &lt;ul&gt;
     * &lt;li&gt;{@link TextAttribute#FONT}: will set the font;&lt;/li&gt;
     * &lt;li&gt;{@link TextAttribute#POSTURE}: a value of 
     *     {@link TextAttribute#POSTURE_OBLIQUE} will add {@link Font#ITALIC} to
     *     the current font;&lt;/li&gt;
     * &lt;li&gt;{@link TextAttribute#WEIGHT}: a value of 
     *     {@link TextAttribute#WEIGHT_BOLD} will add {@link Font#BOLD} to the 
     *     current font;&lt;/li&gt;
     * &lt;li&gt;{@link TextAttribute#FOREGROUND}: this will set the {@link Paint} 
     *     for the current&lt;/li&gt;
     * &lt;li&gt;{@link TextAttribute#SUPERSCRIPT}: the values 
     *     {@link TextAttribute#SUPERSCRIPT_SUB} and 
     *     {@link TextAttribute#SUPERSCRIPT_SUPER} are recognised.&lt;/li&gt; 
     * &lt;/ul&gt;
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param key  the key.
     * 
     * @return An attributed label (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AttributedString</name></type> <name>generateAttributedSectionLabel</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>, 
                                                           <param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getAttributedLabel</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getIndex</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the generator for equality with an arbitrary object.
     *
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>StandardPieSectionLabelGenerator</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StandardPieSectionLabelGenerator</name></type> <name>that</name> 
                =<init> <expr>(<name>StandardPieSectionLabelGenerator</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>attributedLabels</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>attributedLabels</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an independent copy of the generator.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  should not happen.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{      
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
