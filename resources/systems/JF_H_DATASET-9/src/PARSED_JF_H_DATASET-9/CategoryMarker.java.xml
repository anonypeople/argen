<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\CategoryMarker.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * CategoryMarker.java
 * -------------------
 * (C) Copyright 2005-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Nicolas Brodu;
 *
 * Changes
 * -------
 * 20-May-2005 : Version 1 (DG);
 * 19-Aug-2005 : Implemented equals(), fixed bug in constructor (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Sep-2006 : Added MarkerChangeListener support (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>MarkerChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>LengthAdjustmentType</name></name>;</import>

<comment type="javadoc">/**
 * A marker for a category.
 * &lt;br&gt;&lt;br&gt;
 * Note that for serialization to work correctly, the category key must be an
 * instance of a serializable class.
 * 
 * @see CategoryPlot#addDomainMarker(CategoryMarker)
 */</comment>
<class><specifier>public</specifier> class <name>CategoryMarker</name> <super><extends>extends <name>Marker</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** The category key. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>key</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A hint that the marker should be drawn as a line rather than a region. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawAsLine</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new category marker for the specified category.
     * 
     * @param key  the category key.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryMarker</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>gray</name></name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new category marker.
     * 
     * @param key  the key.
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryMarker</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new category marker.
     * 
     * @param key  the key.
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param alpha  the alpha transparency.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryMarker</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, 
                          <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>, 
                          <param><decl><type><name>float</name></type> <name>alpha</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLabelOffsetType</name><argument_list>(<argument><expr><name><name>LengthAdjustmentType</name>.<name>EXPAND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the key.
     * 
     * @return The key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>key</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the key and sends a {@link MarkerChangeEvent} to all registered
     * listeners.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setKey</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether the marker is drawn as a region 
     * or a line.
     * 
     * @return A line.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawAsLine</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawAsLine</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the marker is drawn as a region or
     * as a line, and sends a {@link MarkerChangeEvent} to all registered
     * listeners.
     * 
     * @param drawAsLine  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawAsLine</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>drawAsLine</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawAsLine</name></name> = <name>drawAsLine</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the marker for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryMarker</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CategoryMarker</name></type> <name>that</name> =<init> <expr>(<name>CategoryMarker</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawAsLine</name></name> != <name><name>that</name>.<name>drawAsLine</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
