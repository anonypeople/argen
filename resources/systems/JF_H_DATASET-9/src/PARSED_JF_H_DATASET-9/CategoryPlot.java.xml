<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\CategoryPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * CategoryPlot.java
 * -----------------
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Jeremy Bowman;
 *                   Arnaud Lelievre;
 *                   Richard West, Advanced Micro Devices, Inc.;
 *
 * Changes
 * -------
 * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG);
 * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG);
 * 18-Sep-2001 : Updated header (DG);
 * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG);
 * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);
 * 23-Oct-2001 : Changed intro and trail gaps on bar plots to use percentage of 
 *               available space rather than a fixed number of units (DG);
 * 12-Dec-2001 : Changed constructors to protected (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 16-Jan-2002 : Increased maximum intro and trail gap percents, plus added 
 *               some argument checking code.  Thanks to Taoufik Romdhane for 
 *               suggesting this (DG);
 * 05-Feb-2002 : Added accessor methods for the tooltip generator, incorporated
 *               alpha-transparency for Plot and subclasses (DG);
 * 06-Mar-2002 : Updated import statements (DG);
 * 14-Mar-2002 : Renamed BarPlot.java --&gt; CategoryPlot.java, and changed code 
 *               to use the CategoryItemRenderer interface (DG);
 * 22-Mar-2002 : Dropped the getCategories() method (DG);
 * 23-Apr-2002 : Moved the dataset from the JFreeChart class to the Plot 
 *               class (DG);
 * 29-Apr-2002 : New methods to support printing values at the end of bars, 
 *               contributed by Jeremy Bowman (DG);
 * 11-May-2002 : New methods for label visibility and overlaid plot support, 
 *               contributed by Jeremy Bowman (DG);
 * 06-Jun-2002 : Removed the tooltip generator, this is now stored with the 
 *               renderer.  Moved constants into the CategoryPlotConstants 
 *               interface.  Updated Javadoc comments (DG);
 * 10-Jun-2002 : Overridden datasetChanged() method to update the upper and 
 *               lower bound on the range axis (if necessary), updated 
 *               Javadocs (DG);
 * 25-Jun-2002 : Removed redundant imports (DG);
 * 20-Aug-2002 : Changed the constructor for Marker (DG);
 * 28-Aug-2002 : Added listener notification to setDomainAxis() and 
 *               setRangeAxis() (DG);
 * 23-Sep-2002 : Added getLegendItems() method and fixed errors reported by 
 *               Checkstyle (DG);
 * 28-Oct-2002 : Changes to the CategoryDataset interface (DG);
 * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG);
 * 07-Nov-2002 : Renamed labelXXX as valueLabelXXX (DG);
 * 18-Nov-2002 : Added grid settings for both domain and range axis (previously
 *               these were set in the axes) (DG);
 * 19-Nov-2002 : Added axis location parameters to constructor (DG);
 * 17-Jan-2003 : Moved to com.jrefinery.chart.plot package (DG);
 * 14-Feb-2003 : Fixed bug in auto-range calculation for secondary axis (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 02-May-2003 : Moved render() method up from subclasses. Added secondary 
 *               range markers. Added an attribute to control the dataset 
 *               rendering order.  Added a drawAnnotations() method.  Changed 
 *               the axis location from an int to an AxisLocation (DG);
 * 07-May-2003 : Merged HorizontalCategoryPlot and VerticalCategoryPlot into 
 *               this class (DG);
 * 02-Jun-2003 : Removed check for range axis compatibility (DG);
 * 04-Jul-2003 : Added a domain gridline position attribute (DG);
 * 21-Jul-2003 : Moved DrawingSupplier to Plot superclass (DG);
 * 19-Aug-2003 : Added equals() method and implemented Cloneable (DG);
 * 01-Sep-2003 : Fixed bug 797466 (no change event when secondary dataset 
 *               changes) (DG);
 * 02-Sep-2003 : Fixed bug 795209 (wrong dataset checked in render2 method) and
 *               790407 (initialise method) (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL); 
 * 08-Sep-2003 : Fixed bug (wrong secondary range axis being used).  Changed 
 *               ValueAxis API (DG);
 * 10-Sep-2003 : Fixed bug in setRangeAxis() method (DG);
 * 15-Sep-2003 : Fixed two bugs in serialization, implemented 
 *               PublicCloneable (DG);
 * 23-Oct-2003 : Added event notification for changes to renderer (DG);
 * 26-Nov-2003 : Fixed bug (849645) in clearRangeMarkers() method (DG);
 * 03-Dec-2003 : Modified draw method to accept anchor (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 10-Mar-2004 : Fixed bug in axis range calculation when secondary renderer is
 *               stacked (DG);
 * 12-May-2004 : Added fixed legend items (DG);
 * 19-May-2004 : Added check for null legend item from renderer (DG);
 * 02-Jun-2004 : Updated the DatasetRenderingOrder class (DG);
 * 05-Nov-2004 : Renamed getDatasetsMappedToRangeAxis() 
 *               --&gt; datasetsMappedToRangeAxis(), and ensured that returned 
 *               list doesn't contain null datasets (DG);
 * 12-Nov-2004 : Implemented new Zoomable interface (DG);
 * 07-Jan-2005 : Renamed getRangeExtent() --&gt; findRangeBounds() in 
 *               CategoryItemRenderer (DG);
 * 04-May-2005 : Fixed serialization of range markers (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per
 *               RFE 1183100 (DG);
 * 01-Jun-2005 : Upon deserialization, register plot as a listener with its
 *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG);
 * 02-Jun-2005 : Added support for domain markers (DG);
 * 06-Jun-2005 : Fixed equals() method for use with GradientPaint (DG);
 * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG);
 * 16-Jun-2005 : Added getDomainAxisCount() and getRangeAxisCount() methods, to
 *               match XYPlot (see RFE 1220495) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 11-Jan-2006 : Added configureRangeAxes() to rendererChanged(), since the
 *               renderer might influence the axis range (DG);
 * 27-Jan-2006 : Added various null argument checks (DG);
 * 18-Aug-2006 : Added getDatasetCount() method, plus a fix for bug drawing 
 *               category labels, thanks to Adriaan Joubert (1277726) (DG);
 * 05-Sep-2006 : Added MarkerChangeEvent support (DG);
 * 30-Oct-2006 : Added getDomainAxisIndex(), datasetsMappedToDomainAxis() and 
 *               getCategoriesForAxis() methods (DG);
 * 22-Nov-2006 : Fire PlotChangeEvent from setColumnRenderingOrder() and
 *               setRowRenderingOrder() (DG);
 * 29-Nov-2006 : Fix for bug 1605207 (IntervalMarker exceeds bounds of data 
 *               area) (DG);
 * 26-Feb-2007 : Fix for bug 1669218 (setDomainAxisLocation() notify argument
 *               ignored) (DG);
 * 13-Mar-2007 : Added null argument checks for setRangeCrosshairPaint() and
 *               setRangeCrosshairStroke(), fixed clipping for 
 *               annotations (DG);
 * 07-Jun-2007 : Override drawBackground() for new GradientPaint handling (DG);
 * 10-Jul-2007 : Added getRangeAxisIndex(ValueAxis) method (DG);
 * 24-Sep-2007 : Implemented new zoom methods (DG);
 * 25-Oct-2007 : Added some argument checks (DG);
 * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain
 *               and range markers (DG);
 * 14-Nov-2007 : Added missing event notifications (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name>.<name>CategoryAnnotation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>Axis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisLocation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisSpace</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>CategoryAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueTick</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeEventType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name>.<name>CategoryItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>category</name>.<name>CategoryItemRendererState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Dataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Layer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>SortOrder</name></name>;</import>

<comment type="javadoc">/**
 * A general plotting class that uses data from a {@link CategoryDataset} and 
 * renders each data item using a {@link CategoryItemRenderer}.
 */</comment>
<class><specifier>public</specifier> class <name>CategoryPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>ValueAxisPlot</name>, 
        <name>Zoomable</name>, <name>RendererChangeListener</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, 
        <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-3537691700434728188L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The default visibility of the grid lines plotted against the domain 
     * axis. 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_DOMAIN_GRIDLINES_VISIBLE</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default visibility of the grid lines plotted against the range 
     * axis. 
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_RANGE_GRIDLINES_VISIBLE</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default grid line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_GRIDLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>,
            <argument><expr><name><name>BasicStroke</name>.<name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <name><name>float</name><index>[]</index></name> 
            <block>{<expr>2.0f</expr>, <expr>2.0f</expr>}</block></expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default grid line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRIDLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_VALUE_LABEL_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, 
            <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default crosshair visibility. 
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_CROSSHAIR_VISIBLE</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default crosshair stroke. 
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_CROSSHAIR_STROKE</name>
            =<init> <expr><name>DEFAULT_GRIDLINE_STROKE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default crosshair paint. 
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_CROSSHAIR_PAINT</name> =<init> <expr><name><name>Color</name>.<name>blue</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> 
            =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(
            <argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The plot orientation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotOrientation</name></type> <name>orientation</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The offset between the data area and the axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>axisOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>domainAxes</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the domain axis locations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>domainAxisLocations</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag that controls whether or not the shared domain axis is drawn 
     * (only relevant when the plot is being used as a subplot).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawSharedDomainAxis</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>rangeAxes</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the range axis locations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>rangeAxisLocations</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the datasets. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>datasets</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for keys that map datasets to domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>datasetToDomainAxisMap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for keys that map datasets to range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>datasetToRangeAxisMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the renderers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>renderers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset rendering order. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DatasetRenderingOrder</name></type> <name>renderingOrder</name> 
            =<init> <expr><name><name>DatasetRenderingOrder</name>.<name>REVERSE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Controls the order in which the columns are traversed when rendering the 
     * data items. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SortOrder</name></type> <name>columnRenderingOrder</name> =<init> <expr><name><name>SortOrder</name>.<name>ASCENDING</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * Controls the order in which the rows are traversed when rendering the 
     * data items. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SortOrder</name></type> <name>rowRenderingOrder</name> =<init> <expr><name><name>SortOrder</name>.<name>ASCENDING</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether the grid-lines for the domain axis are 
     * visible. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The position of the domain gridlines relative to the category. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryAnchor</name></type> <name>domainGridlinePosition</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the domain grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>domainGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the domain  grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether the grid-lines for the range axis are 
     * visible. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the range axis grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the range axis grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The anchor value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>anchorValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not a range crosshair is drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeCrosshairVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range crosshair value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rangeCrosshairValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The pen/brush used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeCrosshairStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeCrosshairPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not the crosshair locks onto actual 
     * data points. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeCrosshairLockedOnData</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A map containing lists of markers for the domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>foregroundDomainMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map containing lists of markers for the domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>backgroundDomainMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map containing lists of markers for the range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>foregroundRangeMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map containing lists of markers for the range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>backgroundRangeMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A (possibly empty) list of annotations for the plot.  The list should
     * be initialised in the constructor and never allowed to be 
     * &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>annotations</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The weight for the plot (only relevant when the plot is used as a subplot
     * within a combined plot).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>weight</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fixed space for the domain axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AxisSpace</name></type> <name>fixedDomainAxisSpace</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fixed space for the range axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AxisSpace</name></type> <name>fixedRangeAxisSpace</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * An optional collection of legend items that can be returned by the 
     * getLegendItems() method. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LegendItemCollection</name></type> <name>fixedLegendItems</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new plot.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param domainAxis  the domain axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param rangeAxis  the range axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param renderer  the item renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     */</comment>
    <constructor><specifier>public</specifier> <name>CategoryPlot</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>,
                        <param><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name></decl></param>,
                        <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                        <param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>;</expr_stmt>

        <comment type="line">// allocate storage for dataset, axes and renderers</comment>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxisLocations</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxisLocations</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>datasetToDomainAxisMap</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>datasetToRangeAxisMap</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>renderers</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>datasets</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>datasets</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>axisOffset</name></name> = <name><name>RectangleInsets</name>.<name>ZERO_INSETS</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr><name><name>AxisLocation</name>.<name>BOTTOM_OR_LEFT</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr><name><name>AxisLocation</name>.<name>TOP_OR_LEFT</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name>.<name>renderers</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>mapDatasetToDomainAxis</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>domainAxis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>domainAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>domainAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>drawSharedDomainAxis</name></name> = false</expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>mapDatasetToRangeAxis</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name>configureDomainAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = <name>DEFAULT_DOMAIN_GRIDLINES_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePosition</name></name> = <name><name>CategoryAnchor</name>.<name>MIDDLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = <name>DEFAULT_RANGE_GRIDLINES_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Marker</name></type> <name>baseline</name> =<init> <expr>new <call><name>ValueMarker</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0.8f</expr></argument>, <argument><expr>0.8f</expr></argument>, <argument><expr>0.8f</expr></argument>, 
                <argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>Color</name><argument_list>(<argument><expr>0.85f</expr></argument>, <argument><expr>0.85f</expr></argument>, <argument><expr>0.95f</expr></argument>, 
                <argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0.6f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>addRangeMarker</name><argument_list>(<argument><expr><name>baseline</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>anchorValue</name></name> = 0.0</expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> = <name>DEFAULT_CROSSHAIR_VISIBLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <name>DEFAULT_CROSSHAIR_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <name>DEFAULT_CROSSHAIR_PAINT</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>annotations</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns a string describing the type of plot.
     *
     * @return The type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Category_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the orientation of the plot.
     *
     * @return The orientation of the plot (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setOrientation(PlotOrientation)
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotOrientation</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>orientation</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param orientation  the orientation (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getOrientation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrientation</name><parameter_list>(<param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>orientation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'orientation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <name>orientation</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the axis offset.
     *
     * @return The axis offset (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisOffset(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getAxisOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis offsets (gap between the data area and the axes) and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param offset  the offset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisOffset</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>offset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'offset' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis for the plot.  If the domain axis for this plot
     * is &lt;code&gt;null&lt;/code&gt;, then the method will return the parent plot's 
     * domain axis (if there is a parent plot).
     *
     * @return The domain axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #setDomainAxis(CategoryAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryAxis</name></type> <name>getDomainAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a domain axis.
     *
     * @param index  the axis index.
     *
     * @return The axis (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setDomainAxis(int, CategoryAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryAxis</name></type> <name>getDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>CategoryPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>cp</name> =<init> <expr>(<name>CategoryPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>cp</name>.<name>getDomainAxis</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainAxis()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a domain axis and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainAxis(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
 
    <comment type="javadoc">/**
     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>existing</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param axes  the axes (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setRangeAxes(ValueAxis[])
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxes</name><parameter_list>(<param><decl><type><name><name>CategoryAxis</name><index>[]</index></name></type> <name>axes</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>axes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>axes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the specified axis, or &lt;code&gt;-1&lt;/code&gt; if the axis
     * is not assigned to the plot.
     * 
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The axis index.
     * 
     * @see #getDomainAxis(int)
     * @see #getRangeAxisIndex(ValueAxis)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDomainAxisIndex</name><parameter_list>(<param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the domain axis location for the primary domain axis.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getRangeAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getDomainAxisLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for a domain axis.
     *
     * @param index  the axis index.
     *
     * @return The location.
     * 
     * @see #setDomainAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>AxisLocation</name>) <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>AxisLocation</name>.<name>getOpposite</name></name><argument_list>(<argument><expr><call><name>getDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the domain axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param location  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainAxisLocation()
     * @see #setDomainAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the domain axis and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the axis location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  a flag that controls whether listeners are notified.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param index  the axis index.
     * @param location  the location.
     * 
     * @see #getDomainAxisLocation(int)
     * @see #setRangeAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the location for a domain axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     * 
     * @param index  the axis index.
     * @param location  the location.
     * @param notify  notify listeners?
     * 
     * @since 1.0.5
     * 
     * @see #getDomainAxisLocation(int)
     * @see #setRangeAxisLocation(int, AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <name>location</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'location' for index 0 not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis edge.  This is derived from the axis location
     * and the plot orientation.
     *
     * @return The edge (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getDomainAxisEdge</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for a domain axis.
     *
     * @param index  the axis index.
     *
     * @return The edge (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getDomainAxisEdge</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>location</name> =<init> <expr><call><name>getDomainAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>location</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>RectangleEdge</name>.<name>opposite</name></name><argument_list>(<argument><expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of domain axes.
     *
     * @return The axis count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDomainAxisCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>axis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the domain axes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureDomainAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>axis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis for the plot.  If the range axis for this plot is
     * null, then the method will return the parent plot's range axis (if there
     * is a parent plot).
     *
     * @return The range axis (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRangeAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a range axis.
     *
     * @param index  the axis index.
     *
     * @return The axis (&lt;code&gt;null&lt;/code&gt; possible).
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>CategoryPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>cp</name> =<init> <expr>(<name>CategoryPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>cp</name>.<name>getRangeAxis</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeAxis</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered
     * listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
        
    <comment type="javadoc">/**
     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis.
     * @param notify  notify listeners?
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>existing</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param axes  the axes (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setDomainAxes(CategoryAxis[])
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxes</name><parameter_list>(<param><decl><type><name><name>ValueAxis</name><index>[]</index></name></type> <name>axes</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>axes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setRangeAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>axes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the specified axis, or &lt;code&gt;-1&lt;/code&gt; if the axis
     * is not assigned to the plot.
     *
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The axis index.
     * 
     * @see #getRangeAxis(int)
     * @see #getDomainAxisIndex(CategoryAxis)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRangeAxisIndex</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{ <comment type="line">// try the parent plot</comment>
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>CategoryPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>p</name> =<init> <expr>(<name>CategoryPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis location.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getRangeAxisLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRangeAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for a range axis.
     *
     * @param index  the axis index.
     *
     * @return The location.
     * 
     * @see #setRangeAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>AxisLocation</name>) <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>AxisLocation</name>.<name>getOpposite</name></name><argument_list>(<argument><expr><call><name>getRangeAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the range axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setRangeAxisLocation(AxisLocation, boolean)
     * @see #setDomainAxisLocation(AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the range axis and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  notify listeners?
     * 
     * @see #setDomainAxisLocation(AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for a range axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param index  the axis index.
     * @param location  the location.
     * 
     * @see #getRangeAxisLocation(int)
     * @see #setRangeAxisLocation(int, AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for a range axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param index  the axis index.
     * @param location  the location.
     * @param notify  notify listeners?
     * 
     * @see #getRangeAxisLocation(int)
     * @see #setDomainAxisLocation(int, AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, 
                                     <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <name>location</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'location' for index 0 not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge where the primary range axis is located.
     *
     * @return The edge (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getRangeAxisEdge</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for a range axis.
     *
     * @param index  the axis index.
     *
     * @return The edge.
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getRangeAxisEdge</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>location</name> =<init> <expr><call><name>getRangeAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>result</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>RectangleEdge</name>.<name>opposite</name></name><argument_list>(<argument><expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of range axes.
     *
     * @return The axis count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRangeAxisCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the range axes from the plot and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the range axes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureRangeAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the primary dataset for the plot.
     *
     * @return The primary dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(CategoryDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDataset</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dataset at the given index.
     *
     * @param index  the dataset index.
     *
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(int, CategoryDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>getDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>CategoryDataset</name>) <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the dataset for the plot, replacing the existing dataset, if there 
     * is one.  This method also calls the 
     * {@link #datasetChanged(DatasetChangeEvent)} method, which adjusts the 
     * axis ranges if necessary and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDataset</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a dataset for the plot.
     *
     * @param index  the dataset index.
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>existing</name> =<init> <expr>(<name>CategoryDataset</name>) <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>datasets</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// send a dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of datasets.
     *
     * @return The number of datasets.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDatasetCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Maps a dataset to a particular domain axis.
     * 
     * @param index  the dataset index (zero-based).
     * @param axisIndex  the axis index (zero-based).
     * 
     * @see #getDomainAxisForDataset(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapDatasetToDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>int</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <comment type="line">// fake a dataset change event to update axes...</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis for a dataset.  You can change the axis for a 
     * dataset using the {@link #mapDatasetToDomainAxis(int, int)} method.
     * 
     * @param index  the dataset index.
     * 
     * @return The domain axis.
     * 
     * @see #mapDatasetToDomainAxis(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryAxis</name></type> <name>getDomainAxisForDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>result</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>axisIndex</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axisIndex</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getDomainAxis</name><argument_list>(<argument><expr><call><name><name>axisIndex</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Maps a dataset to a particular range axis.
     * 
     * @param index  the dataset index (zero-based).
     * @param axisIndex  the axis index (zero-based).
     * 
     * @see #getRangeAxisForDataset(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapDatasetToRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>int</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// fake a dataset change event to update axes...</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis for a dataset.  You can change the axis for a 
     * dataset using the {@link #mapDatasetToRangeAxis(int, int)} method.
     * 
     * @param index  the dataset index.
     * 
     * @return The range axis.
     * 
     * @see #mapDatasetToRangeAxis(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxisForDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>result</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>axisIndex</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axisIndex</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>getRangeAxis</name><argument_list>(<argument><expr><call><name><name>axisIndex</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a reference to the renderer for the plot.
     *
     * @return The renderer.
     * 
     * @see #setRenderer(CategoryItemRenderer)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRenderer</name></type> <name>getRenderer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRenderer</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the renderer at the given index.
     *
     * @param index  the renderer index.
     *
     * @return The renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRenderer(int, CategoryItemRenderer)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRenderer</name></type> <name>getRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>CategoryItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the renderer at index 0 (sometimes referred to as the "primary" 
     * renderer) and sends a {@link PlotChangeEvent} to all registered 
     * listeners.
     *
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted.
     * 
     * @see #getRenderer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>renderer</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the renderer at index 0 (sometimes referred to as the "primary" 
     * renderer) and, if requested, sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * &lt;p&gt;
     * You can set the renderer to &lt;code&gt;null&lt;/code&gt;, but this is not 
     * recommended because:
     * &lt;ul&gt;
     *   &lt;li&gt;no data will be displayed;&lt;/li&gt;
     *   &lt;li&gt;the plot background will not be painted;&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getRenderer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>renderer</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the renderer at the specified index and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index  the index.
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRenderer(int)
     * @see #setRenderer(int, CategoryItemRenderer, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></function>

    <comment type="javadoc">/**
     * Sets a renderer.  A {@link PlotChangeEvent} is sent to all registered 
     * listeners.
     *
     * @param index  the index.
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getRenderer(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>, 
                            <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// stop listening to the existing renderer...</comment>
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>existing</name> 
            =<init> <expr>(<name>CategoryItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// register the new renderer...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>renderers</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><call><name>configureDomainAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param renderers  the renderers.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderers</name><parameter_list>(<param><decl><type><name><name>CategoryItemRenderer</name><index>[]</index></name></type> <name>renderers</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>renderers</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>renderers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the renderer for the specified dataset.  If the dataset doesn't
     * belong to the plot, this method will return &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemRenderer</name></type> <name>getRendererForDataset</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>dataset</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = (<name>CategoryItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the specified renderer, or &lt;code&gt;-1&lt;/code&gt; if the
     * renderer is not assigned to this plot.
     * 
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The renderer index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexOf</name><parameter_list>(<param><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>renderers</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dataset rendering order.
     *
     * @return The order (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>DatasetRenderingOrder</name></type> <name>getDatasetRenderingOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderingOrder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the rendering order and sends a {@link PlotChangeEvent} to all 
     * registered listeners.  By default, the plot renders the primary dataset 
     * last (so that the primary dataset overlays the secondary datasets).  You 
     * can reverse this if you want to.
     *
     * @param order  the rendering order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDatasetRenderingOrder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatasetRenderingOrder</name><parameter_list>(<param><decl><type><name>DatasetRenderingOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>renderingOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the order in which the columns are rendered.  The default value
     * is &lt;code&gt;SortOrder.ASCENDING&lt;/code&gt;.
     * 
     * @return The column rendering order (never &lt;code&gt;null&lt;/code).
     * 
     * @see #setColumnRenderingOrder(SortOrder)
     */</comment>    
    <function><type><specifier>public</specifier> <name>SortOrder</name></type> <name>getColumnRenderingOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>columnRenderingOrder</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the column order in which the items in each dataset should be 
     * rendered and sends a {@link PlotChangeEvent} to all registered 
     * listeners.  Note that this affects the order in which items are drawn, 
     * NOT their position in the chart.
     * 
     * @param order  the order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getColumnRenderingOrder()
     * @see #setRowRenderingOrder(SortOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColumnRenderingOrder</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>columnRenderingOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the order in which the rows should be rendered.  The default 
     * value is &lt;code&gt;SortOrder.ASCENDING&lt;/code&gt;.
     * 
     * @return The order (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRowRenderingOrder(SortOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>SortOrder</name></type> <name>getRowRenderingOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rowRenderingOrder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the row order in which the items in each dataset should be 
     * rendered and sends a {@link PlotChangeEvent} to all registered 
     * listeners.  Note that this affects the order in which items are drawn, 
     * NOT their position in the chart.
     * 
     * @param order  the order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRowRenderingOrder()
     * @see #setColumnRenderingOrder(SortOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRowRenderingOrder</name><parameter_list>(<param><decl><type><name>SortOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rowRenderingOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether the domain grid-lines are visible.
     *
     * @return The &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setDomainGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not grid-lines are drawn against 
     * the domain axis.
     * &lt;p&gt;
     * If the flag value changes, a {@link PlotChangeEvent} is sent to all 
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isDomainGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the position used for the domain gridlines.
     * 
     * @return The gridline position (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlinePosition(CategoryAnchor)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryAnchor</name></type> <name>getDomainGridlinePosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinePosition</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the position used for the domain gridlines and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param position  the position (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainGridlinePosition()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinePosition</name><parameter_list>(<param><decl><type><name>CategoryAnchor</name></type> <name>position</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>position</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'position' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePosition</name></name> = <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw grid-lines against the domain axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDomainGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw grid-lines against the domain axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw grid-lines against the domain axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the grid-lines (if any) against the domain 
     * axis and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether the range grid-lines are visible.
     *
     * @return The flag.
     * 
     * @see #setRangeGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not grid-lines are drawn against 
     * the range axis.  If the flag changes value, a {@link PlotChangeEvent} is 
     * sent to all registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isRangeGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw the grid-lines against the range axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw the grid-lines against the range axis and 
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the grid-lines against the range axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the grid lines against the range axis and 
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fixed legend items, if any.
     * 
     * @return The legend items (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedLegendItems(LegendItemCollection)
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getFixedLegendItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedLegendItems</name></name></expr>;</return>   
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed legend items for the plot.  Leave this set to 
     * &lt;code&gt;null&lt;/code&gt; if you prefer the legend items to be created 
     * automatically.
     * 
     * @param items  the legend items (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedLegendItems()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedLegendItems</name><parameter_list>(<param><decl><type><name>LegendItemCollection</name></type> <name>items</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedLegendItems</name></name> = <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the legend items for the plot.  By default, this method creates 
     * a legend item for each series in each of the datasets.  You can change 
     * this behaviour by overriding this method.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>fixedLegendItems</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// get the legend items for the datasets...</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>datasetIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>datasetIndex</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>datasetIndex</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                            <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr><call><name><name>renderer</name>.<name>getLegendItem</name></name><argument_list>(
                                    <argument><expr><name>datasetIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'click' on the plot by updating the anchor value.
     *
     * @param x  x-coordinate of the click (in Java2D space).
     * @param y  y-coordinate of the click (in Java2D space).
     * @param info  information about the plot's dimensions.
     *
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleClick</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// set the anchor value for the range axis...</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>java2D</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>java2D</name> = <name>x</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>java2D</name> = <name>y</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
                    <argument><expr><call><name>getRangeAxisLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call>.<call><name>java2DToValue</name><argument_list>(
                    <argument><expr><name>java2D</name></expr></argument>, <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setAnchorValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setRangeCrosshairValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Zooms (in or out) on the plot's value axis.
     * &lt;p&gt;
     * If the value 0.0 is passed in as the zoom percent, the auto-range
     * calculation for the axis is restored (which sets the range to include
     * the minimum and maximum data values, thus displaying all the data).
     *
     * @param percent  the zoom amount.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>percent</name> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>range</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call>.<call><name>getRange</name><argument_list>()</argument_list></call>.<call><name>getLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>scaledRange</name> =<init> <expr><name>range</name> * <name>percent</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call>.<call><name>setRange</name><argument_list>(<argument><expr><name><name>this</name>.<name>anchorValue</name></name> - <name>scaledRange</name> / 2.0</expr></argument>,
                    <argument><expr><name><name>this</name>.<name>anchorValue</name></name> + <name>scaledRange</name> / 2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call>.<call><name>setAutoRange</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of a change to the plot's dataset.
     * &lt;P&gt;
     * The range axis bounds will be recalculated if necessary.
     *
     * @param event  information about the event (not used here).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>datasetChanged</name><parameter_list>(<param><decl><type><name>DatasetChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>axisIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>axisIndex</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>axisIndex</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>yAxis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><call><name>getParent</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getParent</name><argument_list>()</argument_list></call>.<call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>PlotChangeEvent</name></type> <name>e</name> =<init> <expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>e</name>.<name>setType</name></name><argument_list>(<argument><expr><name><name>ChartChangeEventType</name>.<name>DATASET_UPDATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of a renderer change event.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rendererChanged</name><parameter_list>(<param><decl><type><name>RendererChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>parent</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>RendererChangeListener</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>RendererChangeListener</name></type> <name>rcl</name> =<init> <expr>(<name>RendererChangeListener</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>rcl</name>.<name>rendererChanged</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="line">// this should never happen with the existing code, but throw </comment>
                <comment type="line">// an exception in case future changes make it possible...</comment>
                <throw>throw <expr>new <call><name>RuntimeException</name><argument_list>(
                    <argument><expr>"The renderer has changed and I don't know what to do!"</expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>PlotChangeEvent</name></type> <name>e</name> =<init> <expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a marker for display (in the foreground) against the domain axis and
     * sends a {@link PlotChangeEvent} to all registered listeners. Typically a 
     * marker will be drawn by the renderer as a line perpendicular to the 
     * domain axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>CategoryMarker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addDomainMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
        
    <comment type="javadoc">/**
     * Adds a marker for display against the domain axis and sends a 
     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker 
     * will be drawn by the renderer as a line perpendicular to the domain 
     * axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer  the layer (foreground or background) (&lt;code&gt;null&lt;/code&gt; 
     *               not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>CategoryMarker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addDomainMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for display by a particular renderer.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to a domain axis, however this is entirely up to the renderer.
     *
     * @param index  the renderer index.
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer  the layer (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>CategoryMarker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>marker</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'marker' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>layer</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'layer' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>marker</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the domain markers for the plot and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @see #clearRangeMarkers()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainMarkers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearDomainMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearDomainMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of domain markers (read only) for the specified layer.
     *
     * @param layer  the layer (foreground or background).
     * 
     * @return The list of domain markers.
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getDomainMarkers</name><parameter_list>(<param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDomainMarkers</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of domain markers for a particular renderer and 
     * layer.
     * 
     * @param index  the renderer index.
     * @param layer  the layer.
     * 
     * @return A collection of markers (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getDomainMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>    
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Collections</name>.<name>unmodifiableCollection</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all the domain markers for the specified renderer.
     * 
     * @param index  the renderer index.
     * 
     * @see #clearRangeMarkers(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> 
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> 
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param marker  the marker.
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeDomainMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the domain axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param marker the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeDomainMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index the dataset/renderer index.
     * @param marker the marker.
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>markers</name>.<name>remove</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a marker for display (in the foreground) against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners. Typically a 
     * marker will be drawn by the renderer as a line perpendicular to the 
     * range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addRangeMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
        
    <comment type="javadoc">/**
     * Adds a marker for display against the range axis and sends a 
     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker 
     * will be drawn by the renderer as a line perpendicular to the range axis, 
     * however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer  the layer (foreground or background) (&lt;code&gt;null&lt;/code&gt; 
     *               not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addRangeMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for display by a particular renderer.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to a range axis, however this is entirely up to the renderer.
     *
     * @param index  the renderer index.
     * @param marker  the marker.
     * @param layer  the layer.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>marker</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the range markers for the plot and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @see #clearDomainMarkers()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeMarkers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearRangeMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearRangeMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of range markers (read only) for the specified layer.
     *
     * @param layer  the layer (foreground or background).
     * 
     * @return The list of range markers.
     * 
     * @see #getRangeMarkers(int, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getRangeMarkers</name><parameter_list>(<param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getRangeMarkers</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of range markers for a particular renderer and 
     * layer.
     * 
     * @param index  the renderer index.
     * @param layer  the layer.
     * 
     * @return A collection of markers (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getRangeMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>    
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Collections</name>.<name>unmodifiableCollection</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears all the range markers for the specified renderer.
     * 
     * @param index  the renderer index.
     * 
     * @see #clearDomainMarkers(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> 
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> 
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param marker the marker.
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeRangeMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the range axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param marker the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeRangeMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index the dataset/renderer index.
     * @param marker the marker.
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>marker</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'marker' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>markers</name>.<name>remove</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the range crosshair is visible.
     *
     * @return The flag.
     * 
     * @see #setRangeCrosshairVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeCrosshairVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the range crosshair is visible.
     *
     * @param flag  the new value of the flag.
     * 
     * @see #isRangeCrosshairVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the crosshair should "lock-on"
     * to actual data values.
     *
     * @return The flag.
     * 
     * @see #setRangeCrosshairLockedOnData(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeCrosshairLockedOnData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the range crosshair should 
     * "lock-on" to actual data values.
     *
     * @param flag  the flag.
     * 
     * @see #isRangeCrosshairLockedOnData()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairLockedOnData</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the range crosshair value.
     *
     * @return The value.
     * 
     * @see #setRangeCrosshairValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeCrosshairValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain crosshair value.
     * &lt;P&gt;
     * Registered listeners are notified that the plot has been modified, but
     * only if the crosshair is visible.
     *
     * @param value  the new value.
     * 
     * @see #getRangeCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeCrosshairValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range crosshair value and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners (but only if the 
     * crosshair is visible).
     *
     * @param value  the new value.
     * @param notify  a flag that controls whether or not listeners are 
     *                notified.
     *                
     * @see #getRangeCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isRangeCrosshairVisible</name><argument_list>()</argument_list></call> &amp;&amp; <name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the pen-style (&lt;code&gt;Stroke&lt;/code&gt;) used to draw the crosshair 
     * (if visible).
     *
     * @return The crosshair stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeCrosshairStroke(Stroke)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeCrosshairStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the pen-style (&lt;code&gt;Stroke&lt;/code&gt;) used to draw the range 
     * crosshair (if visible), and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param stroke  the new crosshair stroke (&lt;code&gt;null&lt;/code&gt; not 
     *         permitted).
     * 
     * @see #getRangeCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the range crosshair.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeCrosshairPaint(Paint)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeCrosshairPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the range crosshair (if visible) and 
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of annotations.
     *
     * @return The list of annotations.
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getAnnotations</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>annotations</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param annotation  the annotation (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeAnnotation(CategoryAnnotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnnotation</name><parameter_list>(<param><decl><type><name>CategoryAnnotation</name></type> <name>annotation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>annotation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'annotation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>annotations</name>.<name>add</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param annotation  the annotation (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A boolean (indicates whether or not the annotation was removed).
     * 
     * @see #addAnnotation(CategoryAnnotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeAnnotation</name><parameter_list>(<param><decl><type><name>CategoryAnnotation</name></type> <name>annotation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>annotation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'annotation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>this</name>.<name>annotations</name>.<name>remove</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the annotations and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearAnnotations</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>annotations</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the space required for the domain axis/axes.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param space  a carrier for the result (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The required space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateDomainAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                 <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                                 <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
                                                     
        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// reserve some space for the domain axis...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(
                    <argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">// reserve space for the primary domain axis...</comment>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(
                    <argument><expr><call><name>getDomainAxisLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>drawSharedDomainAxis</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name>getDomainAxis</name><argument_list>()</argument_list></call>.<call><name>reserveSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, 
                        <argument><expr><name>domainEdge</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <comment type="line">// reserve space for any domain axes...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Axis</name></type> <name>xAxis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>xAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>space</name> = <call><name><name>xAxis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>

        <return>return <expr><name>space</name></expr>;</return>
                                                     
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the space required for the range axis/axes.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param space  a carrier for the result (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return The required space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateRangeAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                                <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                                <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
                                                  
        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        }</block></then></if>
        
        <comment type="line">// reserve some space for the range axis...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">// reserve space for the range axes (if any)...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Axis</name></type> <name>yAxis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>space</name> = <call><name><name>yAxis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>
        <return>return <expr><name>space</name></expr>;</return>
                                                    
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the space required for the axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     *
     * @return The space required for the axes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr>new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>space</name> = <call><name>calculateRangeAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>space</name> = <call><name>calculateDomainAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>space</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     * &lt;P&gt;
     * At your option, you may supply an instance of {@link PlotRenderingInfo}.
     * If you do, it will be populated with information about the drawing,
     * including various plot dimensions and tooltip info.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot (including axes) should 
     *              be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param state  collects info as the chart is drawn (possibly 
     *               &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                     <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the plot area is too small, just return...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> =<init> <expr>(<call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_WIDTH_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> =<init> <expr>(<call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_HEIGHT_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b1</name> || <name>b2</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// record the plot area...</comment>
        <if>if <condition>(<expr><name>state</name> == <name>null</name></expr>)</condition><then> <block>{
            <comment type="line">// if the incoming state is null, no information will be passed</comment>
            <comment type="line">// back to the caller - but we create a temporary state to record</comment>
            <comment type="line">// the plot area, since that is used later by the axes</comment>
            <expr_stmt><expr><name>state</name> = new <call><name>PlotRenderingInfo</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// adjust the drawing area for the plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// calculate the data area...</comment>
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr><call><name>calculateAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>space</name>.<name>shrink</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axisOffset</name>.<name>trim</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>state</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if there is a renderer, it draws the background, otherwise use the </comment>
        <comment type="line">// default background...</comment>
        <if>if <condition>(<expr><call><name>getRenderer</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
       
        <decl_stmt><decl><type><name>Map</name></type> <name>axisStateMap</name> =<init> <expr><call><name>drawAxes</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// don't let anyone draw outside the data area</comment>
        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawDomainGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisState</name></type> <name>rangeAxisState</name> =<init> <expr>(<name>AxisState</name>) <call><name><name>axisStateMap</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rangeAxisState</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>parentState</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rangeAxisState</name> = (<name>AxisState</name>) <call><name><name>parentState</name>.<name>getSharedAxisStates</name></name><argument_list>()</argument_list></call>
                        .<call><name>get</name><argument_list>(<argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>rangeAxisState</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawRangeGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>rangeAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// draw the markers...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawDomainMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>        
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawRangeMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// now render data items...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundData</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <comment type="line">// set up the alpha-transparency...</comment>
        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(
                <argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DatasetRenderingOrder</name></type> <name>order</name> =<init> <expr><call><name>getDatasetRenderingOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>order</name> == <name><name>DatasetRenderingOrder</name>.<name>FORWARD</name></name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>foundData</name> = <call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> || <name>foundData</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block>{  <comment type="line">// DatasetRenderingOrder.REVERSE</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                <expr_stmt><expr><name>foundData</name> = <call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call> || <name>foundData</name></expr>;</expr_stmt>   
            }</block></for>
        }</block></else></if>
        <comment type="line">// draw the foreground markers...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawDomainMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawRangeMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// draw the annotations (if any)...</comment>
        <expr_stmt><expr><call><name>drawAnnotations</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name>foundData</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw range crosshair if required...</comment>
        <if>if <condition>(<expr><call><name>isRangeCrosshairVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// FIXME: this doesn't handle multiple range axes</comment>
            <expr_stmt><expr><call><name>drawRangeCrosshair</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name>getOrientation</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name>getRangeCrosshairValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name>getRangeCrosshairStroke</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeCrosshairPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw an outline around the plot area...</comment>
        <if>if <condition>(<expr><call><name>getRenderer</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot background (the background color and/or image).
     * &lt;P&gt;
     * This method will be called during the chart drawing process and is 
     * declared public so that it can be accessed by the renderers used by 
     * certain subclasses.  You shouldn't need to call this method directly.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawBackground</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fillBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBackgroundImage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A utility method for drawing the plot's axes.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param dataArea  the data area.
     * @param plotState  collects information about the plot (&lt;code&gt;null&lt;/code&gt;
     *                   permitted).
     * 
     * @return A map containing the axis states.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Map</name></type> <name>drawAxes</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>AxisCollection</name></type> <name>axisCollection</name> =<init> <expr>new <call><name>AxisCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// add domain axes to lists...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>xAxis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>xAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axisCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>xAxis</name></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <comment type="line">// add range axes to lists...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axisCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>yAxis</name></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>Map</name></type> <name>axisStateMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// draw the top axes</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>cursor</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateTopOutset</name></name><argument_list>(
                <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>axisCollection</name>.<name>getAxesAtTop</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cursor</name> = <call><name><name>axisState</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <comment type="line">// draw the bottom axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> 
                 + <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateBottomOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtBottom</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cursor</name> = <call><name><name>axisState</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <comment type="line">// draw the left axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> 
                 - <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateLeftOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtLeft</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cursor</name> = <call><name><name>axisState</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>

        <comment type="line">// draw the right axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> 
                 + <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateRightOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtRight</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cursor</name> = <call><name><name>axisState</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        
        <return>return <expr><name>axisStateMap</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws a representation of a dataset within the dataArea region using the
     * appropriate renderer.
     *
     * @param g2  the graphics device.
     * @param dataArea  the region in which the data is to be drawn.
     * @param index  the dataset and renderer index.
     * @param info  an optional object for collection dimension information.
     * 
     * @return A boolean that indicates whether or not real data was found.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>render</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>, 
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>foundData</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>currentDataset</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>hasData</name> =<init> <expr>!<call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name>currentDataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hasData</name> &amp;&amp; <name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            
            <expr_stmt><expr><name>foundData</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CategoryItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>renderer</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                    <argument><expr><name>this</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>currentDataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>rowCount</name> =<init> <expr><call><name><name>currentDataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>passCount</name> =<init> <expr><call><name><name>renderer</name>.<name>getPassCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>pass</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pass</name> &lt; <name>passCount</name></expr>;</condition> <incr><expr><name>pass</name>++</expr></incr>) <block>{            
                <if>if <condition>(<expr><name><name>this</name>.<name>columnRenderingOrder</name></name> == <name><name>SortOrder</name>.<name>ASCENDING</name></name></expr>)</condition><then> <block>{
                    <for>for (<init><decl><type><name>int</name></type> <name>column</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>column</name> &lt; <name>columnCount</name></expr>;</condition> <incr><expr><name>column</name>++</expr></incr>) <block>{
                        <if>if <condition>(<expr><name><name>this</name>.<name>rowRenderingOrder</name></name> == <name><name>SortOrder</name>.<name>ASCENDING</name></name></expr>)</condition><then> <block>{
                            <for>for (<init><decl><type><name>int</name></type> <name>row</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>row</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>row</name>++</expr></incr>) <block>{
                                <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                        <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>currentDataset</name></expr></argument>, 
                                        <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                        }</block></then>
                        <else>else <block>{
                            <for>for (<init><decl><type><name>int</name></type> <name>row</name> =<init> <expr><name>rowCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>row</name> &gt;= 0</expr>;</condition> <incr><expr><name>row</name>--</expr></incr>) <block>{
                                <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                        <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>currentDataset</name></expr></argument>, 
                                        <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>                        
                        }</block></else></if>
                    }</block></for>
                }</block></then>
                <else>else <block>{
                    <for>for (<init><decl><type><name>int</name></type> <name>column</name> =<init> <expr><name>columnCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>column</name> &gt;= 0</expr>;</condition> <incr><expr><name>column</name>--</expr></incr>) <block>{
                        <if>if <condition>(<expr><name><name>this</name>.<name>rowRenderingOrder</name></name> == <name><name>SortOrder</name>.<name>ASCENDING</name></name></expr>)</condition><then> <block>{
                            <for>for (<init><decl><type><name>int</name></type> <name>row</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>row</name> &lt; <name>rowCount</name></expr>;</condition> <incr><expr><name>row</name>++</expr></incr>) <block>{
                                <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                        <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>currentDataset</name></expr></argument>, 
                                        <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>
                        }</block></then>
                        <else>else <block>{
                            <for>for (<init><decl><type><name>int</name></type> <name>row</name> =<init> <expr><name>rowCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>row</name> &gt;= 0</expr>;</condition> <incr><expr><name>row</name>--</expr></incr>) <block>{
                                <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                        <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>, <argument><expr><name>currentDataset</name></expr></argument>, 
                                        <argument><expr><name>row</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></for>                        
                        }</block></else></if>
                    }</block></for>
                }</block></else></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>foundData</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws the gridlines for the plot.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * 
     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// draw the domain grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isDomainGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CategoryAnchor</name></type> <name>anchor</name> =<init> <expr><call><name>getDomainGridlinePosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>domainAxisEdge</name> =<init> <expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getDomainGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getDomainGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>gridStroke</name> != <name>null</name>) &amp;&amp; (<name>gridPaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
                <comment type="line">// iterate over the categories</comment>
                <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>data</name> =<init> <expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>axis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>columnCount</name> =<init> <expr><call><name><name>data</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name>columnCount</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>axis</name>.<name>getCategoryJava2DCoordinate</name></name><argument_list>(
                                    <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>columnCount</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                                    <argument><expr><name>domainAxisEdge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer1</name> =<init> <expr><call><name>getRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>renderer1</name> != <name>null</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>renderer1</name>.<name>drawDomainGridline</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></for>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
 
    <comment type="javadoc">/**
     * Draws the gridlines for the plot.
     *
     * @param g2  the graphics device.
     * @param dataArea  the area inside the axes.
     * @param ticks  the ticks.
     * 
     * @see #drawDomainGridlines(Graphics2D, Rectangle2D)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                      <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// draw the range grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isRangeGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getRangeGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getRangeGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>gridStroke</name> != <name>null</name>) &amp;&amp; (<name>gridPaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                        <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer1</name> =<init> <expr><call><name>getRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>renderer1</name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>renderer1</name>.<name>drawRangeGridline</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                                    <argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></while>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the annotations...
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawAnnotations</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name>getAnnotations</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name>getAnnotations</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>CategoryAnnotation</name></type> <name>annotation</name> 
                        =<init> <expr>(<name>CategoryAnnotation</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>annotation</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the domain markers (if any) for an axis and layer.  This method is 
     * typically called from within the draw() method.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param index  the renderer index.
     * @param layer  the layer (foreground or background).
     * 
     * @see #drawRangeMarkers(Graphics2D, Rectangle2D, int, Layer)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainMarkers</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                     <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
                                                 
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> =<init> <expr><call><name>getDomainMarkers</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>axis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>markers</name> != <name>null</name> &amp;&amp; <name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>CategoryMarker</name></type> <name>marker</name> =<init> <expr>(<name>CategoryMarker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>r</name>.<name>drawDomainMarker</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws the range markers (if any) for an axis and layer.  This method is 
     * typically called from within the draw() method.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param index  the renderer index.
     * @param layer  the layer (foreground or background).
     * 
     * @see #drawDomainMarkers(Graphics2D, Rectangle2D, int, Layer)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeMarkers</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                    <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
                                                 
        <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> =<init> <expr><call><name>getRangeMarkers</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>markers</name> != <name>null</name> &amp;&amp; <name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Marker</name></type> <name>marker</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>r</name>.<name>drawRangeMarker</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Utility method for drawing a line perpendicular to the range axis (used
     * for crosshairs).
     *
     * @param g2  the graphics device.
     * @param dataArea  the area defined by the axes.
     * @param value  the data value.
     * @param stroke  the line stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint  the line paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeLine</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
            <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>java2D</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call>.<call><name>valueToJava2D</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>java2D</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>java2D</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>java2D</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>java2D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a range crosshair.
     * 
     * @param g2  the graphics target.
     * @param dataArea  the data area.
     * @param orientation  the plot orientation.
     * @param value  the crosshair value.
     * @param axis  the axis against which the value is measured.
     * @param stroke  the stroke used to draw the crosshair line.
     * @param paint  the paint used to draw the crosshair line.
     * 
     * @since 1.0.5
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeCrosshair</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, 
            <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr>!<call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xx</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the range of data values that will be plotted against the range 
     * axis.  If the dataset is &lt;code&gt;null&lt;/code&gt;, this method returns 
     * &lt;code&gt;null&lt;/code&gt;.
     *
     * @param axis  the axis.
     *
     * @return The data range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>mappedDatasets</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>rangeIndex</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rangeIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mappedDatasets</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>datasetsMappedToRangeAxis</name><argument_list>(<argument><expr><name>rangeIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>axis</name> == <call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mappedDatasets</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>datasetsMappedToRangeAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="line">// iterate through the datasets that map to the axis and get the union </comment>
        <comment type="line">// of the ranges.</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>mappedDatasets</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>d</name> =<init> <expr>(<name>CategoryDataset</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRendererForDataset</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>r</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of the datasets that are mapped to the axis with the
     * specified index.
     * 
     * @param axisIndex  the axis index.
     * 
     * @return The list (possibly empty, but never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>private</specifier> <name>List</name></type> <name>datasetsMappedToDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>datasetIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>datasetIndex</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> 
                <incr><expr><name>datasetIndex</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>dataset</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>m</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>get</name></name><argument_list>(
                        <argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>m</name> == <name>null</name></expr>)</condition><then> <block>{  <comment type="line">// a dataset with no mapping is assigned to </comment>
                                  <comment type="line">// axis 0</comment>
                    <if>if <condition>(<expr><name>axisIndex</name> == 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><call><name><name>m</name>.<name>intValue</name></name><argument_list>()</argument_list></call> == <name>axisIndex</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * A utility method that returns a list of datasets that are mapped to a 
     * given range axis.
     * 
     * @param index  the axis index.
     * 
     * @return A list of datasets.
     */</comment>
    <function><type><specifier>private</specifier> <name>List</name></type> <name>datasetsMappedToRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Object</name></type> <name>dataset</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>m</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>m</name> == <name>null</name></expr>)</condition><then> <block>{  <comment type="line">// a dataset with no mapping is assigned to </comment>
                                  <comment type="line">// axis 0</comment>
                    <if>if <condition>(<expr><name>index</name> == 0</expr>)</condition><then> <block>{ 
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><call><name><name>m</name>.<name>intValue</name></name><argument_list>()</argument_list></call> == <name>index</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>    
    }</block></function>

    <comment type="javadoc">/**
     * Returns the weight for this plot when it is used as a subplot within a 
     * combined plot.
     *
     * @return The weight.
     * 
     * @see #setWeight(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getWeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>weight</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param weight  the weight.
     * 
     * @see #getWeight()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>weight</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>weight</name></name> = <name>weight</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the fixed domain axis space.
     *
     * @return The fixed domain axis space (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedDomainAxisSpace(AxisSpace)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>getFixedDomainAxisSpace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedDomainAxisSpace()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedDomainAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFixedDomainAxisSpace</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getFixedDomainAxisSpace()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedDomainAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> = <name>space</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed range axis space.
     *
     * @return The fixed range axis space (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedRangeAxisSpace(AxisSpace)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>getFixedRangeAxisSpace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedRangeAxisSpace()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedRangeAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFixedRangeAxisSpace</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getFixedRangeAxisSpace()
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedRangeAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> = <name>space</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of the categories in the plot's primary dataset.
     * 
     * @return A list of the categories in the plot's primary dataset.
     * 
     * @see #getCategoriesForAxis(CategoryAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getCategories</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getDataset</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call>.<call><name>getColumnKeys</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a list of the categories that should be displayed for the
     * specified axis.
     * 
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; not permitted)
     * 
     * @return The categories.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getCategoriesForAxis</name><parameter_list>(<param><decl><type><name>CategoryAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>axisIndex</name> =<init> <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>datasets</name> =<init> <expr><call><name>datasetsMappedToDomainAxis</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>datasets</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr>(<name>CategoryDataset</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// add the unique categories from this dataset</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>category</name> =<init> <expr><call><name><name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!<call><name><name>result</name>.<name>contains</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the shared domain axis is 
     * drawn for each subplot.
     * 
     * @return A boolean.
     * 
     * @see #setDrawSharedDomainAxis(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawSharedDomainAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawSharedDomainAxis</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether the shared domain axis is drawn when
     * this plot is being used as a subplot.
     * 
     * @param draw  a boolean.
     * 
     * @see #getDrawSharedDomainAxis()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawSharedDomainAxis</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawSharedDomainAxis</name></name> = <name>draw</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;false&lt;/code&gt; to indicate that the domain axes are not
     * zoomable.
     * 
     * @return A boolean.
     * 
     * @see #isRangeZoomable()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; to indicate that the range axes are zoomable.
     * 
     * @return A boolean.
     * 
     * @see #isDomainZoomable()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * This method does nothing, because &lt;code&gt;CategoryPlot&lt;/code&gt; doesn't 
     * support zooming on the domain.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point (in Java2D space) for the zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// can't zoom domain axis</comment>
    }</block></function>

    <comment type="javadoc">/**
     * This method does nothing, because &lt;code&gt;CategoryPlot&lt;/code&gt; doesn't 
     * support zooming on the domain.
     * 
     * @param lowerPercent  the lower bound.
     * @param upperPercent  the upper bound.
     * @param state  the plot state.
     * @param source  the source point (in Java2D space) for the zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// can't zoom domain axis</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * This method does nothing, because &lt;code&gt;CategoryPlot&lt;/code&gt; doesn't 
     * support zooming on the domain.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// can't zoom domain axis</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point (in Java2D space) for the zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate to other method</comment>
        <expr_stmt><expr><call><name>zoomRangeAxes</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point.
     * @param useAnchor  a flag that controls whether or not the source point
     *         is used for the zoom anchor.
     * 
     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <comment type="line">// perform the zoom on each range axis</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
                    <comment type="line">// get the relevant source coordinate given the plot </comment>
                    <comment type="line">// orientation</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>sourceY</name> =<init> <expr><call><name><name>source</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>sourceY</name> = <call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>double</name></type> <name>anchorY</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceY</name></expr></argument>, 
                            <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the range axes.
     * 
     * @param lowerPercent  the lower bound.
     * @param upperPercent  the upper bound.
     * @param state  the plot state.
     * @param source  the source point (in Java2D space) for the zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the anchor value.
     * 
     * @return The anchor value.
     * 
     * @see #setAnchorValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAnchorValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>anchorValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the anchor value and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param value  the anchor value.
     * 
     * @see #getAnchorValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnchorValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setAnchorValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the anchor value and, if requested, sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param value  the value.
     * @param notify  notify listeners?
     * 
     * @see #getAnchorValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnchorValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>anchorValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/** 
     * Tests the plot for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
    
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CategoryPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>that</name> =<init> <expr>(<name>CategoryPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            
        <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> != <name><name>that</name>.<name>orientation</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisOffset</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axisOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>domainAxes</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>domainAxes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>domainAxisLocations</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>domainAxisLocations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawSharedDomainAxis</name></name> != <name><name>that</name>.<name>drawSharedDomainAxis</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rangeAxes</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rangeAxes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rangeAxisLocations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToDomainAxisMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>datasetToDomainAxisMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToRangeAxisMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>datasetToRangeAxisMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderers</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>renderers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderingOrder</name></name> != <name><name>that</name>.<name>renderingOrder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>columnRenderingOrder</name></name> != <name><name>that</name>.<name>columnRenderingOrder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rowRenderingOrder</name></name> != <name><name>that</name>.<name>rowRenderingOrder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name><name>that</name>.<name>domainGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinePosition</name></name> != <name><name>that</name>.<name>domainGridlinePosition</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> != <name><name>that</name>.<name>rangeGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>anchorValue</name></name> != <name><name>that</name>.<name>anchorValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> != <name><name>that</name>.<name>rangeCrosshairVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> != <name><name>that</name>.<name>rangeCrosshairValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeCrosshairStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeCrosshairPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> 
                != <name><name>that</name>.<name>rangeCrosshairLockedOnData</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>      
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>foregroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>annotations</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>annotations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>weight</name></name> != <name><name>that</name>.<name>weight</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>fixedDomainAxisSpace</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>    
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>fixedRangeAxisSpace</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>    
        
        <return>return <expr>true</expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the plot.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  if the cloning is not supported.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>CategoryPlot</name></type> <name>clone</name> =<init> <expr>(<name>CategoryPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name><name>clone</name>.<name>domainAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>xAxis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>xAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>clonedAxis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>xAxis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clone</name>.<name>setDomainAxis</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>clonedAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>domainAxisLocations</name></name> 
            = (<name>ObjectList</name>) <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>clone</name>.<name>rangeAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ValueAxis</name></type> <name>clonedAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>yAxis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clone</name>.<name>setRangeAxis</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>clonedAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>rangeAxisLocations</name></name> = (<name>ObjectList</name>) <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>clone</name>.<name>datasets</name></name> = (<name>ObjectList</name>) <call><name><name>this</name>.<name>datasets</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>clone</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryDataset</name></type> <name>dataset</name> =<init> <expr><call><name><name>clone</name>.<name>getDataset</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>datasetToDomainAxisMap</name></name> 
            = (<name>ObjectList</name>) <call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>datasetToRangeAxisMap</name></name> 
            = (<name>ObjectList</name>) <call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>renderers</name></name> = (<name>ObjectList</name>) <call><name><name>this</name>.<name>renderers</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>fixedDomainAxisSpace</name></name> = (<name>AxisSpace</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>fixedRangeAxisSpace</name></name> = (<name>AxisSpace</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <return>return <expr><name>clone</name></expr>;</return>
            
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryAxis</name></type> <name>xAxis</name> =<init> <expr>(<name>CategoryAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>xAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>xAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>xAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for> 
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>yAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
                <expr_stmt><expr><call><name><name>yAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>datasetCount</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>datasetCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Dataset</name></type> <name>dataset</name> =<init> <expr>(<name>Dataset</name>) <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>rendererCount</name> =<init> <expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>rendererCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>CategoryItemRenderer</name></type> <name>renderer</name> 
                =<init> <expr>(<name>CategoryItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

    }</block></function>

}</block></class>
</unit>
