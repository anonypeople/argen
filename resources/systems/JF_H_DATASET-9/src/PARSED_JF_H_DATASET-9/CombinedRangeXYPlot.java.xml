<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\CombinedRangeXYPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * CombinedRangeXYPlot.java
 * ------------------------
 * (C) Copyright 2001-2007, by Bill Kelemen and Contributors.
 *
 * Original Author:  Bill Kelemen;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Anthony Boulestreau;
 *                   David Basten;
 *                   Kevin Frechette (for ISTI);
 *                   Arnaud Lelievre;
 *                   Nicolas Brodu;
 *                   Petr Kubanek (bug 1606205);
 *
 * Changes:
 * --------
 * 06-Dec-2001 : Version 1 (BK);
 * 12-Dec-2001 : Removed unnecessary 'throws' clause from constructor (DG);
 * 18-Dec-2001 : Added plotArea attribute and get/set methods (BK);
 * 22-Dec-2001 : Fixed bug in chartChanged with multiple combinations of 
 *               CombinedPlots (BK);
 * 08-Jan-2002 : Moved to new package com.jrefinery.chart.combination (DG);
 * 25-Feb-2002 : Updated import statements (DG);
 * 28-Feb-2002 : Readded "this.plotArea = plotArea" that was deleted from 
 *               draw() method (BK);
 * 26-Mar-2002 : Added an empty zoom method (this method needs to be written 
 *               so that combined plots will support zooming (DG);
 * 29-Mar-2002 : Changed the method createCombinedAxis adding the creation of 
 *               OverlaidSymbolicAxis and CombinedSymbolicAxis(AB);
 * 23-Apr-2002 : Renamed CombinedPlot--&gt;MultiXYPlot, and simplified the 
 *               structure (DG);
 * 23-May-2002 : Renamed (again) MultiXYPlot--&gt;CombinedXYPlot (DG);
 * 19-Jun-2002 : Added get/setGap() methods suggested by David Basten (DG);
 * 25-Jun-2002 : Removed redundant imports (DG);
 * 16-Jul-2002 : Draws shared axis after subplots (to fix missing gridlines),
 *               added overrides of 'setSeriesPaint()' and 'setXYItemRenderer()'
 *               that pass changes down to subplots (KF);
 * 09-Oct-2002 : Added add(XYPlot) method (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 16-May-2003 : Renamed CombinedXYPlot --&gt; CombinedRangeXYPlot (DG);
 * 26-Jun-2003 : Fixed bug 755547 (DG);
 * 16-Jul-2003 : Removed getSubPlots() method (duplicate of getSubplots()) (DG);
 * 08-Aug-2003 : Adjusted totalWeight in remove() method (DG);
 * 21-Aug-2003 : Implemented Cloneable (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL); 
 * 11-Sep-2003 : Fix cloning support (subplots) (NB);
 * 15-Sep-2003 : Fixed error in cloning (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 17-Sep-2003 : Updated handling of 'clicks' (DG);
 * 12-Nov-2004 : Implements the new Zoomable interface (DG);
 * 25-Nov-2004 : Small update to clone() implementation (DG);
 * 21-Feb-2005 : The getLegendItems() method now returns the fixed legend
 *               items if set (DG);
 * 05-May-2005 : Removed unused draw() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 13-Sep-2006 : Updated API docs (DG);
 * 06-Feb-2007 : Fixed bug 1606205, draw shared axis after subplots (DG);
 * 23-Mar-2007 : Reverted previous patch (DG);
 * 17-Apr-2007 : Added null argument checks to findSubplot() (DG);
 * 18-Jul-2007 : Fixed bug in removeSubplot (DG);
 * 27-Nov-2007 : Modified setFixedDomainAxisSpaceForSubplots() so as not to
 *               trigger change events in subplots (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisSpace</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>NumberAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>XYItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * An extension of {@link XYPlot} that contains multiple subplots that share a 
 * common range axis.
 */</comment>
<class><specifier>public</specifier> class <name>CombinedRangeXYPlot</name> <super><extends>extends <name>XYPlot</name></extends> 
                                 <implements>implements <name>Zoomable</name>,
                                            <name>Cloneable</name>, <name>PublicCloneable</name>, 
                                            <name>Serializable</name>,
                                            <name>PlotChangeListener</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5177814085082031168L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** Storage for the subplot references. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>subplots</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Total weight of all charts. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>totalWeight</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The gap between subplots. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>gap</name> =<init> <expr>5.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Temporary storage for the subplot areas. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name><index>[]</index></type> <name>subplotAreas</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CombinedRangeXYPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>NumberAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new plot.
     *
     * @param rangeAxis  the shared axis.
     */</comment>
    <constructor><specifier>public</specifier> <name>CombinedRangeXYPlot</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <comment type="line">// no data in the parent plot</comment>
              <argument><expr><name>null</name></expr></argument>,
              <argument><expr><name>rangeAxis</name></expr></argument>,
              <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>subplots</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a string describing the type of plot.
     *
     * @return The type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Combined_Range_XYPlot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the space between subplots.
     *
     * @return The gap
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gap</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the amount of space between subplots.
     *
     * @param gap  the gap between subplots
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>gap</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gap</name></name> = <name>gap</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a subplot, with a default 'weight' of 1.
     * &lt;br&gt;&lt;br&gt;
     * You must ensure that the subplot has a non-null domain axis.  The range
     * axis for the subplot will be set to &lt;code&gt;null&lt;/code&gt;.  
     *
     * @param subplot  the subplot.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>XYPlot</name></type> <name>subplot</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>subplot</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a subplot with a particular weight (greater than or equal to one).  
     * The weight determines how much space is allocated to the subplot 
     * relative to all the other subplots.
     * &lt;br&gt;&lt;br&gt;
     * You must ensure that the subplot has a non-null domain axis.  The range
     * axis for the subplot will be set to &lt;code&gt;null&lt;/code&gt;.  
     *
     * @param subplot  the subplot.
     * @param weight  the weight (must be 1 or greater).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>add</name><parameter_list>(<param><decl><type><name>XYPlot</name></type> <name>subplot</name></decl></param>, <param><decl><type><name>int</name></type> <name>weight</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// verify valid weight</comment>
        <if>if <condition>(<expr><name>weight</name> &lt;= 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>"The 'weight' must be positive."</expr></init></decl>;</decl_stmt>
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// store the plot and its weight</comment>
        <expr_stmt><expr><call><name><name>subplot</name>.<name>setParent</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subplot</name>.<name>setWeight</name></name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subplot</name>.<name>setInsets</name></name><argument_list>(<argument><expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subplot</name>.<name>setRangeAxis</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>subplot</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>subplots</name>.<name>add</name></name><argument_list>(<argument><expr><name>subplot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// keep track of total weights</comment>
        <expr_stmt><expr><name><name>this</name>.<name>totalWeight</name></name> += <name>weight</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Removes a subplot from the combined chart.
     *
     * @param subplot  the subplot (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>remove</name><parameter_list>(<param><decl><type><name>XYPlot</name></type> <name>subplot</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>subplot</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>" Null 'subplot' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>position</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>position</name> == -1 &amp;&amp; <name>i</name> &lt; <name>size</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>subplots</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>subplot</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>position</name> = <name>i</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>position</name> != -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>subplots</name>.<name>remove</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subplot</name>.<name>setParent</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>subplot</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>totalWeight</name></name> -= <call><name><name>subplot</name>.<name>getWeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a list of the subplots.
     *
     * @return The list (unmodifiable).
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getSubplots</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subplots</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the space required for the axes.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * 
     * @return The space required for the axes.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr>new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orientation</name> =<init> <expr><call><name>getOrientation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// work out the space required by the domain axis...</comment>
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>fixed</name> =<init> <expr><call><name>getFixedRangeAxisSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fixed</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>setLeft</name></name><argument_list>(<argument><expr><call><name><name>fixed</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>setRight</name></name><argument_list>(<argument><expr><call><name><name>fixed</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>setTop</name></name><argument_list>(<argument><expr><call><name><name>fixed</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>setBottom</name></name><argument_list>(<argument><expr><call><name><name>fixed</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></then></if></else></if>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>valueAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>valueEdge</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(
                <argument><expr><call><name>getRangeAxisLocation</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>orientation</name></expr></argument>
            )</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>valueAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>space</name> = <call><name><name>valueAxis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>valueEdge</name></expr></argument>, 
                        <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>adjustedPlotArea</name> =<init> <expr><call><name><name>space</name>.<name>shrink</name></name><argument_list>(<argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// work out the maximum height or width of the non-shared axes...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// calculate plotAreas of all sub-plots, maximum vertical/horizontal </comment>
        <comment type="line">// axis width/height</comment>
        <expr_stmt><expr><name><name>this</name>.<name>subplotAreas</name></name> = new <name><name>Rectangle2D</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>adjustedPlotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>adjustedPlotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>usableSize</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>usableSize</name> = <call><name><name>adjustedPlotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>gap</name></name> * (<name>n</name> - 1)</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>usableSize</name> = <call><name><name>adjustedPlotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name><name>this</name>.<name>gap</name></name> * (<name>n</name> - 1)</expr>;</expr_stmt>
        }</block></then></if></else></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>this</name>.<name>subplots</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// calculate sub-plot area</comment>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><name>usableSize</name> * <call><name><name>plot</name>.<name>getWeight</name></name><argument_list>()</argument_list></call> / <name><name>this</name>.<name>totalWeight</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>subplotAreas</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, 
                        <argument><expr><call><name><name>adjustedPlotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> = <name>x</name> + <name>w</name> + <name><name>this</name>.<name>gap</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><name>usableSize</name> * <call><name><name>plot</name>.<name>getWeight</name></name><argument_list>()</argument_list></call> / <name><name>this</name>.<name>totalWeight</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>subplotAreas</name><index>[<expr><name>i</name></expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                        <argument><expr><call><name><name>adjustedPlotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> = <name>y</name> + <name>h</name> + <name><name>this</name>.<name>gap</name></name></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <decl_stmt><decl><type><name>AxisSpace</name></type> <name>subSpace</name> =<init> <expr><call><name><name>plot</name>.<name>calculateDomainAxisSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>subplotAreas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><name>subSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></for>

        <return>return <expr><name>space</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the plot within the specified area on a graphics device.
     * 
     * @param g2  the graphics device.
     * @param area  the plot area (in Java2D space).
     * @param anchor  an anchor point in Java2D space (&lt;code&gt;null&lt;/code&gt; 
     *                permitted).
     * @param parentState  the state from the parent plot, if there is one 
     *                     (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param info  collects chart drawing information (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                     <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                     <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// set up info collection...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust the drawing area for plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr><call><name>calculateAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>space</name>.<name>shrink</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//this.axisOffset.trim(dataArea);</comment>

        <comment type="line">// set the width and height of non-shared axis of all sub-plots</comment>
        <expr_stmt><expr><call><name>setFixedDomainAxisSpaceForSubplots</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the shared axis</comment>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>cursor</name> =<init> <expr><call><name><name>RectangleEdge</name>.<name>coordinate</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>axisState</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>parentState</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parentState</name> = new <call><name>PlotState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>parentState</name>.<name>getSharedAxisStates</name></name><argument_list>()</argument_list></call>.<call><name>put</name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>axisState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// draw all the charts</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>subplots</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>this</name>.<name>subplots</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>subplotInfo</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subplotInfo</name> = new <call><name>PlotRenderingInfo</name><argument_list>(<argument><expr><call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>info</name>.<name>addSubplotInfo</name></name><argument_list>(<argument><expr><name>subplotInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>plot</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name><name>this</name>.<name>subplotAreas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>parentState</name></expr></argument>, 
                    <argument><expr><name>subplotInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of legend items for the plot.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr><call><name>getFixedLegendItems</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
            <if>if <condition>(<expr><name><name>this</name>.<name>subplots</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>more</name> =<init> <expr><call><name><name>plot</name>.<name>getLegendItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>addAll</name></name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param source  the source point (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate 'info' and 'source' argument checks...</comment>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>subplot</name> =<init> <expr><call><name>findSubplot</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>subplot</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>subplot</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// if the source point doesn't fall within a subplot, we do the</comment>
            <comment type="line">// zoom on all subplots...</comment>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name>getSubplots</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>subplot</name> = (<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>subplot</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the domain axes.
     *
     * @param lowerPercent  the lower bound.
     * @param upperPercent  the upper bound.
     * @param info  the plot rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param source  the source point (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate 'info' and 'source' argument checks...</comment>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>subplot</name> =<init> <expr><call><name>findSubplot</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>subplot</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>subplot</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// if the source point doesn't fall within a subplot, we do the</comment>
            <comment type="line">// zoom on all subplots...</comment>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name>getSubplots</name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>subplot</name> = (<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>subplot</name>.<name>zoomDomainAxes</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, 
                        <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the subplot (if any) that contains the (x, y) point (specified 
     * in Java2D space).
     * 
     * @param info  the chart rendering info (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param source  the source point (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return A subplot (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>XYPlot</name></type> <name>findSubplot</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>info</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'info' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'source' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>XYPlot</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>subplotIndex</name> =<init> <expr><call><name><name>info</name>.<name>getSubplotIndex</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>subplotIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> =  (<name>XYPlot</name>) <call><name><name>this</name>.<name>subplots</name>.<name>get</name></name><argument_list>(<argument><expr><name>subplotIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the item renderer FOR ALL SUBPLOTS.  Registered listeners are 
     * notified that the plot has been modified.
     * &lt;P&gt;
     * Note: usually you will want to set the renderer independently for each 
     * subplot, which is NOT what this method does.
     *
     * @param renderer the new renderer.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>super</name>.<name>setRenderer</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// not strictly necessary, since the </comment>
                                      <comment type="line">// renderer set for the</comment>
                                      <comment type="line">// parent plot is not used</comment>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>plot</name>.<name>setRenderer</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the orientation for the plot (and all its subplots).
     * 
     * @param orientation  the orientation.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrientation</name><parameter_list>(<param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>super</name>.<name>setOrientation</name></name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>plot</name>.<name>setOrientation</name></name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the range for the axis.  This is the combined range of all the 
     * subplots.
     *
     * @param axis  the axis.
     *
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>subplots</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>subplot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>subplot</name>.<name>getDataRange</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the space (width or height, depending on the orientation of the 
     * plot) for the domain axis of each subplot.
     *
     * @param space  the space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setFixedDomainAxisSpaceForSubplots</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYPlot</name></type> <name>plot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>plot</name>.<name>setFixedDomainAxisSpace</name></name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'click' on the plot by updating the anchor values...
     *
     * @param x  x-coordinate, where the click occured.
     * @param y  y-coordinate, where the click occured.
     * @param info  object containing information about the plot dimensions.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleClick</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>subplots</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>subplot</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>this</name>.<name>subplots</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>subplotInfo</name> =<init> <expr><call><name><name>info</name>.<name>getSubplotInfo</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>subplot</name>.<name>handleClick</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>subplotInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Receives a {@link PlotChangeEvent} and responds by notifying all 
     * listeners.
     * 
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>plotChanged</name><parameter_list>(<param><decl><type><name>PlotChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this plot for equality with another object.
     *
     * @param obj  the other object.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CombinedRangeXYPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CombinedRangeXYPlot</name></type> <name>that</name> =<init> <expr>(<name>CombinedRangeXYPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subplots</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>subplots</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>totalWeight</name></name> != <name><name>that</name>.<name>totalWeight</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gap</name></name> != <name><name>that</name>.<name>gap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the plot.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException  this class will not throw this 
     *         exception, but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>CombinedRangeXYPlot</name></type> <name>result</name> =<init> <expr>(<name>CombinedRangeXYPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><name><name>result</name>.<name>subplots</name></name> = (<name>List</name>) <call><name><name>ObjectUtilities</name>.<name>deepClone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subplots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>it</name> =<init> <expr><call><name><name>result</name>.<name>subplots</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>child</name> =<init> <expr>(<name>Plot</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>child</name>.<name>setParent</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
        <comment type="line">// after setting up all the subplots, the shared range axis may need </comment>
        <comment type="line">// reconfiguring</comment>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name><name>result</name>.<name>getRangeAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
