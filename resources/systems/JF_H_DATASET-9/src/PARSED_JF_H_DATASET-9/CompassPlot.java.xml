<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\CompassPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * CompassPlot.java
 * ----------------
 * (C) Copyright 2002-2007, by the Australian Antarctic Division and 
 * Contributors.
 *
 * Original Author:  Bryan Scott (for the Australian Antarctic Division);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Arnaud Lelievre;
 *
 * Changes:
 * --------
 * 25-Sep-2002 : Version 1, contributed by Bryan Scott (DG);
 * 23-Jan-2003 : Removed one constructor (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 27-Mar-2003 : Changed MeterDataset to ValueDataset (DG);
 * 21-Aug-2003 : Implemented Cloneable (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL);
 * 09-Sep-2003 : Changed Color --&gt; Paint (DG);
 * 15-Sep-2003 : Added null data value check (bug report 805009) (DG);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 16-Mar-2004 : Added support for revolutionDistance to enable support for
 *               other units than degrees.
 * 16-Mar-2004 : Enabled LongNeedle to rotate about center.
 * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);
 * 17-Apr-2005 : Fixed bug in clone() method (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 08-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);
 * 16-Jun-2005 : Renamed getData() --&gt; getDatasets() and 
 *               addData() --&gt; addDataset() (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Mar-2007 : Fixed serialization (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Area</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>ArrowNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>LineNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>LongNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>MeterNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>MiddlePinNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>PinNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>PlumNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>PointerNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>ShipNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>needle</name>.<name>WindNeedle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DefaultValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>ValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A specialised plot that draws a compass to indicate a direction based on the
 * value from a {@link ValueDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>CompassPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>6924382802125527395L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_LABEL_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, 
            <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the label type. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NO_LABELS</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the label type. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>VALUE_LABELS</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The label type (NO_LABELS, VALUE_LABELS). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>labelType</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The label font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>labelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not a border is drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawBorder</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The rose highlight paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>roseHighlightPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The rose paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rosePaint</name> =<init> <expr><name><name>Color</name>.<name>yellow</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The rose center paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>roseCenterPaint</name> =<init> <expr><name><name>Color</name>.<name>white</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The compass font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>compassFont</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"Arial"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A working shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Ellipse2D</name></type> <name>circle1</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A working shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Ellipse2D</name></type> <name>circle2</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A working area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Area</name></type> <name>a1</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A working area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Area</name></type> <name>a2</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A working shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>rect1</name></decl>;</decl_stmt>

    <comment type="javadoc">/** An array of value datasets. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueDataset</name><index>[]</index></type> <name>datasets</name> =<init> <expr>new <name><name>ValueDataset</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** An array of needles. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>MeterNeedle</name><index>[]</index></type> <name>seriesNeedle</name> =<init> <expr>new <name><name>MeterNeedle</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> 
            =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(
                    <argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The count to complete one revolution.  Can be arbitrarily set
     * For degrees (the default) it is 360, for radians this is 2*Pi, etc
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>revolutionDistance</name> =<init> <expr>360</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>CompassPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>DefaultValueDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new compass plot.
     *
     * @param dataset  the dataset for the plot (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>CompassPlot</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>datasets</name><index>[<expr>0</expr>]</index></name> = <name>dataset</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>circle1</name></name> = new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>circle2</name></name> = new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rect1</name></name>   = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the label type.  Defined by the constants: {@link #NO_LABELS}
     * and {@link #VALUE_LABELS}.
     *
     * @return The label type.
     * 
     * @see #setLabelType(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getLabelType</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// FIXME: this attribute is never used - deprecate?</comment>
        <return>return <expr><name><name>this</name>.<name>labelType</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the label type (either {@link #NO_LABELS} or {@link #VALUE_LABELS}.
     *
     * @param type  the type.
     * 
     * @see #getLabelType()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelType</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// FIXME: this attribute is never used - deprecate?</comment>
        <if>if <condition>(<expr>(<name>type</name> != <name>NO_LABELS</name>) &amp;&amp; (<name>type</name> != <name>VALUE_LABELS</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"MeterPlot.setLabelType(int): unrecognised type."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelType</name></name> != <name>type</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>labelType</name></name> = <name>type</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the label font.
     *
     * @return The label font.
     * 
     * @see #setLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getLabelFont</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// FIXME: this attribute is not used - deprecate?</comment>
        <return>return <expr><name><name>this</name>.<name>labelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the label font and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param font  the new label font.
     * 
     * @see #getLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// FIXME: this attribute is not used - deprecate?</comment>
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' not allowed."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to fill the outer circle of the compass.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRosePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRosePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rosePaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to fill the outer circle of the compass, 
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRosePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRosePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{   
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rosePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to fill the inner background area of the 
     * compass.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRoseCenterPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRoseCenterPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>roseCenterPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to fill the inner background area of the compass, 
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRoseCenterPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRoseCenterPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{   
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>roseCenterPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the circles, symbols and labels on the
     * compass.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRoseHighlightPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRoseHighlightPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>roseHighlightPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the circles, symbols and labels of the 
     * compass, and sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRoseHighlightPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRoseHighlightPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{   
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>roseHighlightPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not a border is drawn.
     *
     * @return The flag.
     * 
     * @see #setDrawBorder(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawBorder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawBorder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a flag that controls whether or not a border is drawn.
     *
     * @param status  the flag status.
     * 
     * @see #getDrawBorder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawBorder</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>drawBorder</name></name> = <name>status</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the series paint.
     *
     * @param series  the series index.
     * @param paint  the paint.
     * 
     * @see #setSeriesOutlinePaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
       <comment type="line">// super.setSeriesPaint(series, paint);</comment>
        <if>if <condition>(<expr>(<name>series</name> &gt;= 0) &amp;&amp; (<name>series</name> &lt; <name><name>this</name>.<name>seriesNeedle</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>series</name></expr>]</index></name>.<call><name>setFillPaint</name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the series outline paint.
     *
     * @param series  the series index.
     * @param p  the paint.
     * 
     * @see #setSeriesPaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlinePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>p</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>series</name> &gt;= 0) &amp;&amp; (<name>series</name> &lt; <name><name>this</name>.<name>seriesNeedle</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>series</name></expr>]</index></name>.<call><name>setOutlinePaint</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the series outline stroke.
     *
     * @param series  the series index.
     * @param stroke  the stroke.
     * 
     * @see #setSeriesOutlinePaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlineStroke</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>series</name> &gt;= 0) &amp;&amp; (<name>series</name> &lt; <name><name>this</name>.<name>seriesNeedle</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>series</name></expr>]</index></name>.<call><name>setOutlineStroke</name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the needle type.
     *
     * @param type  the type.
     * 
     * @see #setSeriesNeedle(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesNeedle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the needle for a series.  The needle type is one of the following:
     * &lt;ul&gt;
     * &lt;li&gt;0 = {@link ArrowNeedle};&lt;/li&gt;
     * &lt;li&gt;1 = {@link LineNeedle};&lt;/li&gt;
     * &lt;li&gt;2 = {@link LongNeedle};&lt;/li&gt;
     * &lt;li&gt;3 = {@link PinNeedle};&lt;/li&gt;
     * &lt;li&gt;4 = {@link PlumNeedle};&lt;/li&gt;
     * &lt;li&gt;5 = {@link PointerNeedle};&lt;/li&gt;
     * &lt;li&gt;6 = {@link ShipNeedle};&lt;/li&gt;
     * &lt;li&gt;7 = {@link WindNeedle};&lt;/li&gt;
     * &lt;li&gt;8 = {@link ArrowNeedle};&lt;/li&gt;
     * &lt;li&gt;9 = {@link MiddlePinNeedle};&lt;/li&gt;
     * &lt;/ul&gt;
     * @param index  the series index.
     * @param type  the needle type.
     * 
     * @see #setSeriesNeedle(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesNeedle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
            <case>case <expr>0</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>ArrowNeedle</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSeriesPaint</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>red</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>index</name></expr>]</index></name>.<call><name>setHighlightPaint</name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>1</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>LineNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>2</expr>:
                <decl_stmt><decl><type><name>MeterNeedle</name></type> <name>longNeedle</name> =<init> <expr>new <call><name>LongNeedle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>longNeedle</name>.<name>setRotateY</name></name><argument_list>(<argument><expr>0.5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>longNeedle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>3</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>PinNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>4</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>PlumNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>5</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>PointerNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>6</expr>:
                <expr_stmt><expr><call><name>setSeriesPaint</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSeriesOutlineStroke</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>ShipNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>7</expr>:
                <expr_stmt><expr><call><name>setSeriesPaint</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>WindNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>8</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>ArrowNeedle</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>9</expr>:
                <expr_stmt><expr><call><name>setSeriesNeedle</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr>new <call><name>MiddlePinNeedle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            </case><default>default:
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unrecognised type."</expr></argument>)</argument_list></call></expr>;</throw>
        </default>}</block></switch>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the needle for a series and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param index  the series index.
     * @param needle  the needle.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesNeedle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>MeterNeedle</name></type> <name>needle</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>needle</name> != <name>null</name>) &amp;&amp; (<name>index</name> &lt; <name><name>this</name>.<name>seriesNeedle</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>index</name></expr>]</index></name> = <name>needle</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns an array of dataset references for the plot.
     *
     * @return The dataset for the plot, cast as a ValueDataset.
     * 
     * @see #addDataset(ValueDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueDataset</name><index>[]</index></type> <name>getDatasets</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>datasets</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a dataset to the compass.
     *
     * @param dataset  the new dataset (&lt;code&gt;null&lt;/code&gt; ignored).
     * 
     * @see #addDataset(ValueDataset, MeterNeedle)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDataset</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addDataset</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a dataset to the compass.
     *
     * @param dataset  the new dataset (&lt;code&gt;null&lt;/code&gt; ignored).
     * @param needle  the needle (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDataset</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>MeterNeedle</name></type> <name>needle</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name><name>this</name>.<name>datasets</name>.<name>length</name></name> + 1</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueDataset</name><index>[]</index></type> <name>t</name> =<init> <expr>new <name><name>ValueDataset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MeterNeedle</name><index>[]</index></type> <name>p</name> =<init> <expr>new <name><name>MeterNeedle</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>i</name> = <name>i</name> - 2</expr>;</expr_stmt>
            <for>for (<init>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
                <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>this</name>.<name>datasets</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>i</name> = <name><name>this</name>.<name>datasets</name>.<name>length</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> = <name>dataset</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> = ((<name>needle</name> != <name>null</name>) ? <name>needle</name> : <name><name>p</name><index>[<expr><name>i</name> - 1</expr>]</index></name>)</expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ValueDataset</name><index>[]</index></type> <name>a</name> =<init> <expr><name><name>this</name>.<name>datasets</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MeterNeedle</name><index>[]</index></type> <name>b</name> =<init> <expr><name><name>this</name>.<name>seriesNeedle</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>datasets</name></name> = <name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name></name> = <name>p</name></expr>;</expr_stmt>

            <for>for (<init><expr>--<name>i</name></expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> = <name>null</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> = <name>null</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>outerRadius</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>innerRadius</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x1</name>, <name>y1</name>, <name>x2</name>, <name>y2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust for insets...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the background</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>midX</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>midY</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>radius</name> =<init> <expr><name>midX</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>midY</name> &lt; <name>midX</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>radius</name> = <name>midY</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>--<name>radius</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diameter</name> =<init> <expr>2 * <name>radius</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>midX</name> += (<name>int</name>) <call><name><name>area</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>midY</name> += (<name>int</name>) <call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name>.<name>circle1</name>.<name>setFrame</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name></expr></argument>, <argument><expr><name>midY</name> - <name>radius</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>circle2</name>.<name>setFrame</name></name><argument_list>(
            <argument><expr><name>midX</name> - <name>radius</name> + 15</expr></argument>, <argument><expr><name>midY</name> - <name>radius</name> + 15</expr></argument>, 
            <argument><expr><name>diameter</name> - 30</expr></argument>, <argument><expr><name>diameter</name> - 30</expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rosePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>a1</name></name> = new <call><name>Area</name><argument_list>(<argument><expr><name><name>this</name>.<name>circle1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>a2</name></name> = new <call><name>Area</name><argument_list>(<argument><expr><name><name>this</name>.<name>circle2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>a1</name>.<name>subtract</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>a2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>a1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseCenterPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name> = <name>diameter</name> - 30</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fillOval</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name> + 15</expr></argument>, <argument><expr><name>midY</name> - <name>radius</name> + 15</expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseHighlightPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawOval</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name></expr></argument>, <argument><expr><name>midY</name> - <name>radius</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name> = <name>diameter</name> - 20</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawOval</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name> + 10</expr></argument>, <argument><expr><name>midY</name> - <name>radius</name> + 10</expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name> = <name>diameter</name> - 30</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawOval</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name> + 15</expr></argument>, <argument><expr><name>midY</name> - <name>radius</name> + 15</expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name> = <name>diameter</name> - 80</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawOval</name></name><argument_list>(<argument><expr><name>midX</name> - <name>radius</name> + 40</expr></argument>, <argument><expr><name>midY</name> - <name>radius</name> + 40</expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>outerRadius</name> = <name>radius</name> - 20</expr>;</expr_stmt>
        <expr_stmt><expr><name>innerRadius</name> = <name>radius</name> - 32</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>w</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>w</name> &lt; 360</expr>;</condition> <incr><expr><name>w</name> += 15</expr></incr>) <block>{
            <expr_stmt><expr><name>a</name> = <call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> = <name>midX</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>x2</name> = <name>midX</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>outerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> = <name>midY</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>y2</name> = <name>midY</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>outerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawLine</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseHighlightPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>innerRadius</name> = <name>radius</name> - 26</expr>;</expr_stmt>
        <expr_stmt><expr><name>outerRadius</name> = 7</expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>w</name> =<init> <expr>45</expr></init></decl>;</init> <condition><expr><name>w</name> &lt; 360</expr>;</condition> <incr><expr><name>w</name> += 90</expr></incr>) <block>{
            <expr_stmt><expr><name>a</name> = <call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> = <name>midX</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> = <name>midY</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fillOval</name></name><argument_list>(<argument><expr><name>x1</name> - <name>outerRadius</name></expr></argument>, <argument><expr><name>y1</name> - <name>outerRadius</name></expr></argument>, <argument><expr>2 * <name>outerRadius</name></expr></argument>, 
                    <argument><expr>2 * <name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">/// Squares</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>w</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>w</name> &lt; 360</expr>;</condition> <incr><expr><name>w</name> += 90</expr></incr>) <block>{
            <expr_stmt><expr><name>a</name> = <call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x1</name> = <name>midX</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
            <expr_stmt><expr><name>y1</name> = <name>midY</name> - (<call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> * <name>innerRadius</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Polygon</name></type> <name>p</name> =<init> <expr>new <call><name>Polygon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>addPoint</name></name><argument_list>(<argument><expr><name>x1</name> - <name>outerRadius</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>addPoint</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name> + <name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>addPoint</name></name><argument_list>(<argument><expr><name>x1</name> + <name>outerRadius</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name>.<name>addPoint</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name> - <name>outerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fillPolygon</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">/// Draw N, S, E, W</comment>
        <expr_stmt><expr><name>innerRadius</name> = <name>radius</name> - 42</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> =<init> <expr><call><name>getCompassFont</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr>"N"</expr></argument>, <argument><expr><name>midX</name> - 5</expr></argument>, <argument><expr><name>midY</name> - <name>innerRadius</name> + <call><name><name>f</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr>"S"</expr></argument>, <argument><expr><name>midX</name> - 5</expr></argument>, <argument><expr><name>midY</name> + <name>innerRadius</name> - 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr>"W"</expr></argument>, <argument><expr><name>midX</name> - <name>innerRadius</name> + 5</expr></argument>, <argument><expr><name>midY</name> + 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr>"E"</expr></argument>, <argument><expr><name>midX</name> + <name>innerRadius</name> - <call><name><name>f</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>midY</name> + 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// plot the data (unless the dataset is null)...</comment>
        <expr_stmt><expr><name>y1</name> = <name>radius</name> / 2</expr>;</expr_stmt>
        <expr_stmt><expr><name>x1</name> = <name>radius</name> / 6</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>needleArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
            <argument><expr>(<name>midX</name> - <name>x1</name>)</expr></argument>, <argument><expr>(<name>midY</name> - <name>y1</name>)</expr></argument>, <argument><expr>(2 * <name>x1</name>)</expr></argument>, <argument><expr>(2 * <name>y1</name>)</expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr><name><name>this</name>.<name>seriesNeedle</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>current</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>(<name><name>this</name>.<name>datasets</name>.<name>length</name></name> - 1)</expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueDataset</name></type> <name>data</name> =<init> <expr><name><name>this</name>.<name>datasets</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>data</name> != <name>null</name> &amp;&amp; <call><name><name>data</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>value</name> = (<call><name><name>data</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call>) 
                    % <name><name>this</name>.<name>revolutionDistance</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>value</name> = <name>value</name> / <name><name>this</name>.<name>revolutionDistance</name></name> * 360</expr>;</expr_stmt>
                <expr_stmt><expr><name>current</name> = <name>i</name> % <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>seriesNeedle</name><index>[<expr><name>current</name></expr>]</index></name>.<call><name>draw</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>needleArea</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     *
     * @return A string describing the plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Compass_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the legend items for the plot.  For now, no legend is available 
     * - this method returns null.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * No zooming is implemented for compass plot, so this method is empty.
     *
     * @param percent  the zoom amount.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no zooming possible</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the font for the compass, adjusted for the size of the plot.
     *
     * @param radius the radius.
     *
     * @return The font.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Font</name></type> <name>getCompassFont</name><parameter_list>(<param><decl><type><name>int</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>fontSize</name> =<init> <expr><name>radius</name> / 10.0f</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>fontSize</name> &lt; 8</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fontSize</name> = 8</expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Font</name></type> <name>newFont</name> =<init> <expr><call><name><name>this</name>.<name>compassFont</name>.<name>deriveFont</name></name><argument_list>(<argument><expr><name>fontSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>newFont</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests an object for equality with this plot.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>CompassPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>CompassPlot</name></type> <name>that</name> =<init> <expr>(<name>CompassPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelType</name></name> != <name><name>that</name>.<name>labelType</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name> != <name><name>that</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseHighlightPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>roseHighlightPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rosePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>rosePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseCenterPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>roseCenterPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>compassFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>compassFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesNeedle</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>seriesNeedle</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getRevolutionDistance</name><argument_list>()</argument_list></call> != <call><name><name>that</name>.<name>getRevolutionDistance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the plot.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  this class will not throw this 
     *         exception, but subclasses (if any) might.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>CompassPlot</name></type> <name>clone</name> =<init> <expr>(<name>CompassPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>circle1</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>circle1</name></name> = (<name>Ellipse2D</name>) <call><name><name>this</name>.<name>circle1</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>circle2</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>circle2</name></name> = (<name>Ellipse2D</name>) <call><name><name>this</name>.<name>circle2</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>a1</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>a1</name></name> = (<name>Area</name>) <call><name><name>this</name>.<name>a1</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>a2</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>a2</name></name> = (<name>Area</name>) <call><name><name>this</name>.<name>a2</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rect1</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>rect1</name></name> = (<name>Rectangle2D</name>) <call><name><name>this</name>.<name>rect1</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>            
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>datasets</name></name> = (<name><name>ValueDataset</name><index>[]</index></name>) <call><name><name>this</name>.<name>datasets</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesNeedle</name></name> = (<name><name>MeterNeedle</name><index>[]</index></name>) <call><name><name>this</name>.<name>seriesNeedle</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// clone share data sets =&gt; add the clone as listener to the dataset</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>datasets</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>clone</name>.<name>datasets</name><index>[<expr><name>i</name></expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>clone</name>.<name>datasets</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>addChangeListener</name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>clone</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the count to complete one revolution.  Can be arbitrarily set
     * For degrees (the default) it is 360, for radians this is 2*Pi, etc
     *
     * @param size the count to complete one revolution.
     * 
     * @see #getRevolutionDistance()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRevolutionDistance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>size</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>revolutionDistance</name></name> = <name>size</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the count to complete one revolution.
     *
     * @return The count to complete one revolution.
     * 
     * @see #setRevolutionDistance(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRevolutionDistance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>revolutionDistance</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rosePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseCenterPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>roseHighlightPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rosePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>roseCenterPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>roseHighlightPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
