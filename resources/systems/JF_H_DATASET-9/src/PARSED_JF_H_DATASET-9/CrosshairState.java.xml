<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\CrosshairState.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * CrosshairState.java
 * -------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 24-Jan-2002 : Version 1 (DG);
 * 05-Mar-2002 : Added Javadoc comments (DG);
 * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG);
 * 19-Sep-2003 : Modified crosshair distance calculation (DG);
 * 04-Dec-2003 : Crosshair anchor point now stored outside chart since it is
 *               dependent on the display target (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo --&gt; CrosshairState (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 13-Oct-2006 : Fixed initialisation of CrosshairState - see bug report 
 *               1565168 (DG);
 * 06-Feb-2007 : Added new fields and methods to fix bug 1086307 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>

<comment type="javadoc">/**
 * Maintains state information about crosshairs on a plot between successive 
 * calls to the renderer's draw method.  This class is used internally by 
 * JFreeChart - it is not intended for external use.
 */</comment>
<class><specifier>public</specifier> class <name>CrosshairState</name> <block>{

    <comment type="javadoc">/** 
     * A flag that controls whether the distance is calculated in data space 
     * or Java2D space.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>calculateDistanceInDataSpace</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The x-value (in data space) for the anchor point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>anchorX</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The y-value (in data space) for the anchor point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>anchorY</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The anchor point in Java2D space - if null, don't update crosshair. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Point2D</name></type> <name>anchor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The x-value for the current crosshair point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>crosshairX</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The y-value for the current crosshair point. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>crosshairY</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The index of the domain axis that the crosshair x-value is measured
     * against.
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>domainAxisIndex</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The index of the range axis that the crosshair y-value is measured
     * against.
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>rangeAxisIndex</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The smallest distance (so far) between the anchor point and a data 
     * point. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>distance</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;CrosshairState&lt;/code&gt; instance that calculates
     * distance in Java2D space.
     */</comment>
    <constructor><specifier>public</specifier> <name>CrosshairState</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;CrosshairState&lt;/code&gt; instance.
     * 
     * @param calculateDistanceInDataSpace  a flag that controls whether the 
     *                                      distance is calculated in data 
     *                                      space or Java2D space.
     */</comment>
    <constructor><specifier>public</specifier> <name>CrosshairState</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>calculateDistanceInDataSpace</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>calculateDistanceInDataSpace</name></name> = <name>calculateDistanceInDataSpace</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the distance between the anchor point and the current crosshair
     * point.
     * 
     * @return The distance.
     * 
     * @see #setCrosshairDistance(double)
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrosshairDistance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>distance</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the distance between the anchor point and the current crosshair 
     * point.  As each data point is processed, its distance to the anchor 
     * point is compared with this value and, if it is closer, the data point 
     * becomes the new crosshair point.
     *
     * @param distance  the distance.
     * 
     * @see #getCrosshairDistance()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrosshairDistance</name><parameter_list>(<param><decl><type><name>double</name></type> <name>distance</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>distance</name></name> = <name>distance</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluates a data point and if it is the closest to the anchor point it
     * becomes the new crosshair point.
     * &lt;P&gt;
     * To understand this method, you need to know the context in which it will
     * be called.  An instance of this class is passed to an 
     * {@link org.jfree.chart.renderer.xy.XYItemRenderer} as
     * each data point is plotted.  As the point is plotted, it is passed to
     * this method to see if it should be the new crosshair point.
     *
     * @param x  x coordinate (measured against the domain axis).
     * @param y  y coordinate (measured against the range axis).
     * @param transX  x translated into Java2D space.
     * @param transY  y translated into Java2D space.
     * @param orientation  the plot orientation.
     * 
     * @deprecated Use {@link #updateCrosshairPoint(double, double, int, int, 
     *     double, double, PlotOrientation)}.  See bug report 1086307.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, 
                                     <param><decl><type><name>double</name></type> <name>transX</name></decl></param>, <param><decl><type><name>double</name></type> <name>transY</name></decl></param>, 
                                     <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateCrosshairPoint</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>transX</name></expr></argument>, <argument><expr><name>transY</name></expr></argument>, <argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Evaluates a data point and if it is the closest to the anchor point it
     * becomes the new crosshair point.
     * &lt;P&gt;
     * To understand this method, you need to know the context in which it will
     * be called.  An instance of this class is passed to an 
     * {@link org.jfree.chart.renderer.xy.XYItemRenderer} as
     * each data point is plotted.  As the point is plotted, it is passed to
     * this method to see if it should be the new crosshair point.
     *
     * @param x  x coordinate (measured against the domain axis).
     * @param y  y coordinate (measured against the range axis).
     * @param domainAxisIndex  the index of the domain axis for this point.
     * @param rangeAxisIndex  the index of the range axis for this point.
     * @param transX  x translated into Java2D space.
     * @param transY  y translated into Java2D space.
     * @param orientation  the plot orientation.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairPoint</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>, <param><decl><type><name>double</name></type> <name>y</name></decl></param>, <param><decl><type><name>int</name></type> <name>domainAxisIndex</name></decl></param>,
            <param><decl><type><name>int</name></type> <name>rangeAxisIndex</name></decl></param>, <param><decl><type><name>double</name></type> <name>transX</name></decl></param>, <param><decl><type><name>double</name></type> <name>transY</name></decl></param>, 
            <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>anchor</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>d</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>calculateDistanceInDataSpace</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>d</name> = (<name>x</name> - <name><name>this</name>.<name>anchorX</name></name>) * (<name>x</name> - <name><name>this</name>.<name>anchorX</name></name>)
                  + (<name>y</name> - <name><name>this</name>.<name>anchorY</name></name>) * (<name>y</name> - <name><name>this</name>.<name>anchorY</name></name>)</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>this</name>.<name>anchor</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>this</name>.<name>anchor</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>temp</name> =<init> <expr><name>yy</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>yy</name> = <name>xx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>xx</name> = <name>temp</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>d</name> = (<name>transX</name> - <name>xx</name>) * (<name>transX</name> - <name>xx</name>) 
                    + (<name>transY</name> - <name>yy</name>) * (<name>transY</name> - <name>yy</name>)</expr>;</expr_stmt>            
            }</block></else></if>

            <if>if <condition>(<expr><name>d</name> &lt; <name><name>this</name>.<name>distance</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>crosshairX</name></name> = <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>crosshairY</name></name> = <name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>domainAxisIndex</name></name> = <name>domainAxisIndex</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>rangeAxisIndex</name></name> = <name>rangeAxisIndex</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>distance</name></name> = <name>d</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Evaluates an x-value and if it is the closest to the anchor x-value it
     * becomes the new crosshair value.
     * &lt;P&gt;
     * Used in cases where only the x-axis is numerical.
     *
     * @param candidateX  x position of the candidate for the new crosshair 
     *                    point.
     *                    
     * @deprecated Use {@link #updateCrosshairX(double, int)}.  See bug report 
     *     1086307.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candidateX</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateCrosshairX</name><argument_list>(<argument><expr><name>candidateX</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Evaluates an x-value and if it is the closest to the anchor x-value it
     * becomes the new crosshair value.
     * &lt;P&gt;
     * Used in cases where only the x-axis is numerical.
     *
     * @param candidateX  x position of the candidate for the new crosshair 
     *                    point.
     * @param domainAxisIndex  the index of the domain axis for this x-value.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candidateX</name></decl></param>, <param><decl><type><name>int</name></type> <name>domainAxisIndex</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>d</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>candidateX</name> - <name><name>this</name>.<name>anchorX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>d</name> &lt; <name><name>this</name>.<name>distance</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>crosshairX</name></name> = <name>candidateX</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>domainAxisIndex</name></name> = <name>domainAxisIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>distance</name></name> = <name>d</name></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Evaluates a y-value and if it is the closest to the anchor y-value it
     * becomes the new crosshair value.
     * &lt;P&gt;
     * Used in cases where only the y-axis is numerical.
     *
     * @param candidateY  y position of the candidate for the new crosshair 
     *                    point.
     *                    
     * @deprecated Use {@link #updateCrosshairY(double, int)}.  See bug report 
     *     1086307.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candidateY</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateCrosshairY</name><argument_list>(<argument><expr><name>candidateY</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Evaluates a y-value and if it is the closest to the anchor y-value it
     * becomes the new crosshair value.
     * &lt;P&gt;
     * Used in cases where only the y-axis is numerical.
     *
     * @param candidateY  y position of the candidate for the new crosshair 
     *                    point.
     * @param rangeAxisIndex  the index of the range axis for this y-value.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>updateCrosshairY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>candidateY</name></decl></param>, <param><decl><type><name>int</name></type> <name>rangeAxisIndex</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>d</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>candidateY</name> - <name><name>this</name>.<name>anchorY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>d</name> &lt; <name><name>this</name>.<name>distance</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>crosshairY</name></name> = <name>candidateY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>rangeAxisIndex</name></name> = <name>rangeAxisIndex</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>distance</name></name> = <name>d</name></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the anchor point.
     * 
     * @return The anchor point.
     * 
     * @see #setAnchor(Point2D)
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Point2D</name></type> <name>getAnchor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>anchor</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/** 
     * Sets the anchor point.  This is usually the mouse click point in a chart
     * panel, and the crosshair point will often be the data item that is 
     * closest to the anchor point.
     * &lt;br&gt;&lt;br&gt;
     * Note that the x and y coordinates (in data space) are not updated by 
     * this method - the caller is responsible for ensuring that this happens
     * in sync.
     * 
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getAnchor()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnchor</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>anchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-coordinate (in data space) for the anchor point.
     * 
     * @return The x-coordinate of the anchor point.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAnchorX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>anchorX</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the x-coordinate (in data space) for the anchor point.  Note that
     * this does NOT update the anchor itself - the caller is responsible for
     * ensuring this is done in sync.
     * 
     * @param x  the x-coordinate.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnchorX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>anchorX</name></name> = <name>x</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-coordinate (in data space) for the anchor point.
     * 
     * @return The y-coordinate of teh anchor point.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAnchorY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>anchorY</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-coordinate (in data space) for the anchor point.  Note that
     * this does NOT update the anchor itself - the caller is responsible for
     * ensuring this is done in sync.
     * 
     * @param y  the y-coordinate.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAnchorY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>anchorY</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Get the x-value for the crosshair point.
     *
     * @return The x position of the crosshair point.
     * 
     * @see #setCrosshairX(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrosshairX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>crosshairX</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the x coordinate for the crosshair.  This is the coordinate in data
     * space measured against the domain axis.
     * 
     * @param x the coordinate.
     * 
     * @see #getCrosshairX()
     * @see #setCrosshairY(double)
     * @see #updateCrosshairPoint(double, double, double, double, 
     * PlotOrientation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrosshairX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>crosshairX</name></name> = <name>x</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Get the y-value for the crosshair point.  This is the coordinate in data
     * space measured against the range axis.
     *
     * @return The y position of the crosshair point.
     * 
     * @see #setCrosshairY(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getCrosshairY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>crosshairY</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the y coordinate for the crosshair.
     * 
     * @param y  the y coordinate.
     * 
     * @see #getCrosshairY()
     * @see #setCrosshairX(double)
     * @see #updateCrosshairPoint(double, double, double, double, 
     * PlotOrientation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCrosshairY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>crosshairY</name></name> = <name>y</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the domain axis index for the crosshair x-value.
     * 
     * @return The domain axis index.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDomainAxisIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainAxisIndex</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis index for the crosshair y-value.
     * 
     * @return The range axis index.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRangeAxisIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeAxisIndex</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
