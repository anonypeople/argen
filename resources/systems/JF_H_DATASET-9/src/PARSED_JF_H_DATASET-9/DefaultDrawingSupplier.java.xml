<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\DefaultDrawingSupplier.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ---------------------------
 * DefaultDrawingSupplier.java
 * ---------------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Jeremy Bowman;
 *
 * Changes
 * -------
 * 16-Jan-2003 : Version 1 (DG);
 * 17-Jan-2003 : Added stroke method, renamed DefaultPaintSupplier 
 *               --&gt; DefaultDrawingSupplier (DG)
 * 27-Jan-2003 : Incorporated code from SeriesShapeFactory, originally 
 *               contributed by Jeremy Bowman (DG);
 * 25-Mar-2003 : Implemented Serializable (DG);
 * 20-Aug-2003 : Implemented Cloneable and PublicCloneable (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 13-Jun-2007 : Added fillPaintSequence (DG);
 *
 */</comment>

 <package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>ChartColor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A default implementation of the {@link DrawingSupplier} interface.  All
 * {@link Plot} instances have a new instance of this class installed by 
 * default.
 */</comment>
<class><specifier>public</specifier> class <name>DefaultDrawingSupplier</name> <super><implements>implements <name>DrawingSupplier</name>, <name>Cloneable</name>, 
        <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-7339847061039422538L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default fill paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name><index>[]</index></type> <name>DEFAULT_PAINT_SEQUENCE</name> 
            =<init> <expr><call><name><name>ChartColor</name>.<name>createDefaultPaintArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default outline paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name><index>[]</index></type> <name>DEFAULT_OUTLINE_PAINT_SEQUENCE</name> =<init> <expr>new <name><name>Paint</name><index>[]</index></name> <block>{
            <expr><name><name>Color</name>.<name>lightGray</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default fill paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name><index>[]</index></type> <name>DEFAULT_FILL_PAINT_SEQUENCE</name> =<init> <expr>new <name><name>Paint</name><index>[]</index></name> <block>{
            <expr><name><name>Color</name>.<name>white</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default stroke sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name><index>[]</index></type> <name>DEFAULT_STROKE_SEQUENCE</name> =<init> <expr>new <name><name>Stroke</name><index>[]</index></name> <block>{
            <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>CAP_SQUARE</name></name></expr></argument>, 
                    <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default outline stroke sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name><index>[]</index></type> <name>DEFAULT_OUTLINE_STROKE_SEQUENCE</name> 
            =<init> <expr>new <name><name>Stroke</name><index>[]</index></name> <block>{<expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>CAP_SQUARE</name></name></expr></argument>, 
                    <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default shape sequence. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Shape</name><index>[]</index></type> <name>DEFAULT_SHAPE_SEQUENCE</name> 
            =<init> <expr><call><name>createStandardSeriesShapes</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name><index>[]</index></type> <name>paintSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current paint index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>paintIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The outline paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name><index>[]</index></type> <name>outlinePaintSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current outline paint index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>outlinePaintIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fill paint sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name><index>[]</index></type> <name>fillPaintSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current fill paint index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>fillPaintIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name><index>[]</index></type> <name>strokeSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current stroke index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>strokeIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The outline stroke sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name><index>[]</index></type> <name>outlineStrokeSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current outline stroke index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>outlineStrokeIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The shape sequence. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name><index>[]</index></type> <name>shapeSequence</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The current shape index. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>shapeIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new supplier, with default sequences for fill paint, outline 
     * paint, stroke and shapes.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultDrawingSupplier</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>DEFAULT_PAINT_SEQUENCE</name></expr></argument>, <argument><expr><name>DEFAULT_FILL_PAINT_SEQUENCE</name></expr></argument>,
             <argument><expr><name>DEFAULT_OUTLINE_PAINT_SEQUENCE</name></expr></argument>,
             <argument><expr><name>DEFAULT_STROKE_SEQUENCE</name></expr></argument>,
             <argument><expr><name>DEFAULT_OUTLINE_STROKE_SEQUENCE</name></expr></argument>,
             <argument><expr><name>DEFAULT_SHAPE_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new supplier.
     *
     * @param paintSequence  the fill paint sequence.
     * @param outlinePaintSequence  the outline paint sequence.
     * @param strokeSequence  the stroke sequence.
     * @param outlineStrokeSequence  the outline stroke sequence.
     * @param shapeSequence  the shape sequence.
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultDrawingSupplier</name><parameter_list>(<param><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>paintSequence</name></decl></param>,
                                  <param><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>outlinePaintSequence</name></decl></param>,
                                  <param><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>strokeSequence</name></decl></param>,
                                  <param><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>outlineStrokeSequence</name></decl></param>,
                                  <param><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapeSequence</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name>.<name>paintSequence</name></name> = <name>paintSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintSequence</name></name> = <name>DEFAULT_FILL_PAINT_SEQUENCE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaintSequence</name></name> = <name>outlinePaintSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strokeSequence</name></name> = <name>strokeSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStrokeSequence</name></name> = <name>outlineStrokeSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeSequence</name></name> = <name>shapeSequence</name></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new supplier.
     *
     * @param paintSequence  the paint sequence.
     * @param fillPaintSequence  the fill paint sequence.
     * @param outlinePaintSequence  the outline paint sequence.
     * @param strokeSequence  the stroke sequence.
     * @param outlineStrokeSequence  the outline stroke sequence.
     * @param shapeSequence  the shape sequence.
     * 
     * @since 1.0.6
     */</comment>
    <constructor><specifier>public</specifier> <name>DefaultDrawingSupplier</name><parameter_list>(<param><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>paintSequence</name></decl></param>, 
            <param><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>fillPaintSequence</name></decl></param>, <param><decl><type><name><name>Paint</name><index>[]</index></name></type> <name>outlinePaintSequence</name></decl></param>,
            <param><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>strokeSequence</name></decl></param>, <param><decl><type><name><name>Stroke</name><index>[]</index></name></type> <name>outlineStrokeSequence</name></decl></param>,
            <param><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>shapeSequence</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name>.<name>paintSequence</name></name> = <name>paintSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintSequence</name></name> = <name>fillPaintSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaintSequence</name></name> = <name>outlinePaintSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strokeSequence</name></name> = <name>strokeSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStrokeSequence</name></name> = <name>outlineStrokeSequence</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeSequence</name></name> = <name>shapeSequence</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the next paint in the sequence.
     *
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNextPaint</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> 
            =<init> <expr><name><name>this</name>.<name>paintSequence</name><index>[<expr><name><name>this</name>.<name>paintIndex</name></name> % <name><name>this</name>.<name>paintSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paintIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next outline paint in the sequence.
     *
     * @return The paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNextOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>outlinePaintSequence</name><index>[
                <expr><name><name>this</name>.<name>outlinePaintIndex</name></name> % <name><name>this</name>.<name>outlinePaintSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaintIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next fill paint in the sequence.
     *
     * @return The paint.
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNextFillPaint</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>fillPaintSequence</name><index>[<expr><name><name>this</name>.<name>fillPaintIndex</name></name> 
                % <name><name>this</name>.<name>fillPaintSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>fillPaintIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next stroke in the sequence.
     *
     * @return The stroke.
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getNextStroke</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Stroke</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>strokeSequence</name><index>[
                <expr><name><name>this</name>.<name>strokeIndex</name></name> % <name><name>this</name>.<name>strokeSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strokeIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next outline stroke in the sequence.
     *
     * @return The stroke.
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getNextOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Stroke</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>outlineStrokeSequence</name><index>[
                <expr><name><name>this</name>.<name>outlineStrokeIndex</name></name> % <name><name>this</name>.<name>outlineStrokeSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStrokeIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the next shape in the sequence.
     *
     * @return The shape.
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getNextShape</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Shape</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>shapeSequence</name><index>[
                <expr><name><name>this</name>.<name>shapeIndex</name></name> % <name><name>this</name>.<name>shapeSequence</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeIndex</name></name>++</expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Creates an array of standard shapes to display for the items in series 
     * on charts.
     *
     * @return The array of shapes.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Shape</name><index>[]</index></type> <name>createStandardSeriesShapes</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>Shape</name><index>[]</index></type> <name>result</name> =<init> <expr>new <name><name>Shape</name><index>[<expr>10</expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>size</name> =<init> <expr>6.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>delta</name> =<init> <expr><name>size</name> / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>xpoints</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>ypoints</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// square</comment>
        <expr_stmt><expr><name><name>result</name><index>[<expr>0</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// circle</comment>
        <expr_stmt><expr><name><name>result</name><index>[<expr>1</expr>]</index></name> = new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// up-pointing triangle</comment>
        <expr_stmt><expr><name>xpoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>-<name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ypoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>2</expr>]</index></name> = new <call><name>Polygon</name><argument_list>(<argument><expr><name>xpoints</name></expr></argument>, <argument><expr><name>ypoints</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// diamond</comment>
        <expr_stmt><expr><name>xpoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr>-<name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ypoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>3</expr>]</index></name> = new <call><name>Polygon</name><argument_list>(<argument><expr><name>xpoints</name></expr></argument>, <argument><expr><name>ypoints</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// horizontal rectangle</comment>
        <expr_stmt><expr><name><name>result</name><index>[<expr>4</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>-<name>delta</name> / 2</expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name> / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// down-pointing triangle</comment>
        <expr_stmt><expr><name>xpoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>+<name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ypoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>5</expr>]</index></name> = new <call><name>Polygon</name><argument_list>(<argument><expr><name>xpoints</name></expr></argument>, <argument><expr><name>ypoints</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// horizontal ellipse</comment>
        <expr_stmt><expr><name><name>result</name><index>[<expr>6</expr>]</index></name> = new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>-<name>delta</name> / 2</expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name> / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// right-pointing triangle</comment>
        <expr_stmt><expr><name>xpoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr>-<name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ypoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>7</expr>]</index></name> = new <call><name>Polygon</name><argument_list>(<argument><expr><name>xpoints</name></expr></argument>, <argument><expr><name>ypoints</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// vertical rectangle</comment>
        <expr_stmt><expr><name><name>result</name><index>[<expr>8</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-<name>delta</name> / 2</expr></argument>, <argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>size</name> / 2</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// left-pointing triangle</comment>
        <expr_stmt><expr><name>xpoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>-<name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ypoints</name> = <call><name>intArray</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>-<name>delta</name></expr></argument>, <argument><expr>+<name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><index>[<expr>9</expr>]</index></name> = new <call><name>Polygon</name><argument_list>(<argument><expr><name>xpoints</name></expr></argument>, <argument><expr><name>ypoints</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Tests this object for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>DefaultDrawingSupplier</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>DefaultDrawingSupplier</name></type> <name>that</name> =<init> <expr>(<name>DefaultDrawingSupplier</name>) <name>obj</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paintSequence</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paintSequence</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>paintIndex</name></name> != <name><name>that</name>.<name>paintIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaintSequence</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>outlinePaintSequence</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>outlinePaintIndex</name></name> != <name><name>that</name>.<name>outlinePaintIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>strokeSequence</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>strokeSequence</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>strokeIndex</name></name> != <name><name>that</name>.<name>strokeIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlineStrokeSequence</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>outlineStrokeSequence</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>outlineStrokeIndex</name></name> != <name><name>that</name>.<name>outlineStrokeIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>equalShapes</name><argument_list>(<argument><expr><name><name>this</name>.<name>shapeSequence</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shapeSequence</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shapeIndex</name></name> != <name><name>that</name>.<name>shapeIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>

    }</block></function>
    
    <comment type="javadoc">/**
     * A utility method for testing the equality of two arrays of shapes.
     * 
     * @param s1  the first array (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param s2  the second array (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>equalShapes</name><parameter_list>(<param><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>s1</name></decl></param>, <param><decl><type><name><name>Shape</name><index>[]</index></name></type> <name>s2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>s2</name> == <name>null</name></expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name>s2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>s1</name>.<name>length</name></name> != <name><name>s2</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>s1</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles serialization.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>paintCount</name> =<init> <expr><name><name>this</name>.<name>paintSequence</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stream</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>paintCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>paintCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paintSequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>outlinePaintCount</name> =<init> <expr><name><name>this</name>.<name>outlinePaintSequence</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stream</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>outlinePaintCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>outlinePaintCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlinePaintSequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>strokeCount</name> =<init> <expr><name><name>this</name>.<name>strokeSequence</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stream</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>strokeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>strokeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>strokeSequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>outlineStrokeCount</name> =<init> <expr><name><name>this</name>.<name>outlineStrokeSequence</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stream</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>outlineStrokeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>outlineStrokeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>outlineStrokeSequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>shapeCount</name> =<init> <expr><name><name>this</name>.<name>shapeSequence</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stream</name>.<name>writeInt</name></name><argument_list>(<argument><expr><name>shapeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>shapeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shapeSequence</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Restores a serialized object.
     *
     * @param stream  the input stream.
     *
     * @throws IOException if there is an I/O problem.
     * @throws ClassNotFoundException if there is a problem loading a class.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>paintCount</name> =<init> <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>paintSequence</name></name> = new <name><name>Paint</name><index>[<expr><name>paintCount</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>paintCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>paintSequence</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>outlinePaintCount</name> =<init> <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlinePaintSequence</name></name> = new <name><name>Paint</name><index>[<expr><name>outlinePaintCount</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>outlinePaintCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>outlinePaintSequence</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>strokeCount</name> =<init> <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>strokeSequence</name></name> = new <name><name>Stroke</name><index>[<expr><name>strokeCount</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>strokeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>strokeSequence</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>outlineStrokeCount</name> =<init> <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>outlineStrokeSequence</name></name> = new <name><name>Stroke</name><index>[<expr><name>outlineStrokeCount</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>outlineStrokeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>outlineStrokeSequence</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>shapeCount</name> =<init> <expr><call><name><name>stream</name>.<name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shapeSequence</name></name> = new <name><name>Shape</name><index>[<expr><name>shapeCount</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>shapeCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>shapeSequence</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Helper method to avoid lots of explicit casts in getShape().  Returns
     * an array containing the provided doubles cast to ints.
     *
     * @param a  x
     * @param b  y
     * @param c  z
     *
     * @return int[3] with converted params.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>intArray</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>, <param><decl><type><name>double</name></type> <name>b</name></decl></param>, <param><decl><type><name>double</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <name><name>int</name><index>[]</index></name> <block>{<expr>(<name>int</name>) <name>a</name></expr>, <expr>(<name>int</name>) <name>b</name></expr>, <expr>(<name>int</name>) <name>c</name></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Helper method to avoid lots of explicit casts in getShape().  Returns
     * an array containing the provided doubles cast to ints.
     *
     * @param a  x
     * @param b  y
     * @param c  z
     * @param d  t
     *
     * @return int[4] with converted params.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>intArray</name><parameter_list>(<param><decl><type><name>double</name></type> <name>a</name></decl></param>, <param><decl><type><name>double</name></type> <name>b</name></decl></param>, <param><decl><type><name>double</name></type> <name>c</name></decl></param>, <param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <name><name>int</name><index>[]</index></name> <block>{<expr>(<name>int</name>) <name>a</name></expr>, <expr>(<name>int</name>) <name>b</name></expr>, <expr>(<name>int</name>) <name>c</name></expr>, <expr>(<name>int</name>) <name>d</name></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if a component of the supplier does 
     *                                    not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>DefaultDrawingSupplier</name></type> <name>clone</name> =<init> <expr>(<name>DefaultDrawingSupplier</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
