<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\FastScatterPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * FastScatterPlot.java
 * --------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Arnaud Lelievre;
 *
 * Changes
 * -------
 * 29-Oct-2002 : Added standard header (DG);
 * 07-Nov-2002 : Fixed errors reported by Checkstyle (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 19-Aug-2003 : Implemented Cloneable (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL); 
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 12-Nov-2003 : Implemented zooming (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 26-Jan-2004 : Added domain and range grid lines (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 29-Sep-2004 : Removed hard-coded color (DG);
 * 04-Oct-2004 : Reworked equals() method and renamed ArrayUtils 
 *               --&gt; ArrayUtilities (DG);
 * 12-Nov-2004 : Implemented the new Zoomable interface (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 16-Jun-2005 : Added get/setData() methods (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 10-Nov-2006 : Fixed bug 1593150, by not allowing null axes, and added
 *               setDomainAxis() and setRangeAxis() methods (DG);
 * 24-Sep-2007 : Implemented new zooming methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisSpace</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>NumberAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueTick</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ArrayUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A fast scatter plot.
 */</comment>
<class><specifier>public</specifier> class <name>FastScatterPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>ValueAxisPlot</name>, 
        <name>Zoomable</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7871545897358563521L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default grid line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_GRIDLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>,
            <argument><expr><name><name>BasicStroke</name>.<name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>, <argument><expr>0.0f</expr></argument>, <argument><expr>new <name><name>float</name><index>[]</index></name> 
            <block>{<expr>2.0f</expr>, <expr>2.0f</expr>}</block></expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default grid line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRIDLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The data. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>float</name><index>[]</index><index>[]</index></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The x data range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>xDataRange</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The y data range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>yDataRange</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The domain axis (used for the x-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueAxis</name></type> <name>domainAxis</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range axis (used for the y-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueAxis</name></type> <name>rangeAxis</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to plot data points. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the domain grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the domain grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>domainGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the domain grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the range grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the range grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the range grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> =<init> 
            <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(
            <argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new instance of &lt;code&gt;FastScatterPlot&lt;/code&gt; with default 
     * axes.
     */</comment>
    <constructor><specifier>public</specifier> <name>FastScatterPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name>NumberAxis</name><argument_list>(<argument><expr>"X"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>new <call><name>NumberAxis</name><argument_list>(<argument><expr>"Y"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new fast scatter plot.
     * &lt;p&gt;
     * The data is an array of x, y values:  data[0][i] = x, data[1][i] = y.
     * 
     * @param data  the data (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param domainAxis  the domain (x) axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param rangeAxis  the range (y) axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>FastScatterPlot</name><parameter_list>(<param><decl><type><name><name>float</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>, 
                           <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>domainAxis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'domainAxis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>rangeAxis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'rangeAxis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>xDataRange</name></name> = <call><name>calculateXDataRange</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>yDataRange</name></name> = <call><name>calculateYDataRange</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxis</name></name> = <name>domainAxis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxis</name></name> = <name>rangeAxis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name><name>Color</name>.<name>red</name></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name><name>FastScatterPlot</name>.<name>DEFAULT_GRIDLINE_PAINT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name><name>FastScatterPlot</name>.<name>DEFAULT_GRIDLINE_STROKE</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name><name>FastScatterPlot</name>.<name>DEFAULT_GRIDLINE_PAINT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name><name>FastScatterPlot</name>.<name>DEFAULT_GRIDLINE_STROKE</name></name></expr>;</expr_stmt>
    
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a short string describing the plot type.
     *
     * @return A short string describing the plot type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Fast_Scatter_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data array used by the plot.
     * 
     * @return The data array (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setData(float[][])
     */</comment>
    <function><type><specifier>public</specifier> <name>float</name><index>[]</index><index>[]</index></type> <name>getData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>data</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the data array used by the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param data  the data array (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getData()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setData</name><parameter_list>(<param><decl><type><name><name>float</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the orientation of the plot.
     * 
     * @return The orientation (always {@link PlotOrientation#VERTICAL}).
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotOrientation</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the domain axis for the plot.
     *
     * @return The domain axis (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getDomainAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainAxis</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the domain axis and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     * 
     * @see #getDomainAxis()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis for the plot.
     *
     * @return The range axis (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeAxis</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axis and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.3
     * 
     * @see #getRangeAxis()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to plot data points.  The default is 
     * &lt;code&gt;Color.red&lt;/code&gt;.
     *
     * @return The paint.
     * 
     * @see #setPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>paint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the color for the data points and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the domain gridlines are visible, and 
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setDomainGridlinesVisible(boolean)
     * @see #setDomainGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the domain grid-lines are 
     * visible.  If the flag value is changed, a {@link PlotChangeEvent} is 
     * sent to all registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #getDomainGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke for the grid-lines (if any) plotted against the 
     * domain axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDomainGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the domain axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the domain
     * axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the domain axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the range axis grid is visible, and 
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setRangeGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the range axis grid lines are
     * visible.  If the flag value is changed, a {@link PlotChangeEvent} is 
     * sent to all registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isRangeGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke for the grid lines (if any) plotted against the range
     * axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the range axis and 
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the range 
     * axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the range axis and 
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the fast scatter plot on a Java 2D graphics device (such as the 
     * screen or a printer).
     *
     * @param g2  the graphics device.
     * @param area   the area within which the plot (including axis labels)
     *                   should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot (ignored).
     * @param info  collects chart drawing information (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// set up info collection...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust the drawing area for plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr>new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>space</name> = <call><name><name>this</name>.<name>domainAxis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, 
                <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>space</name> = <call><name><name>this</name>.<name>rangeAxis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, 
                <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>space</name>.<name>shrink</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw the plot background and axes...</comment>
        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisState</name></type> <name>domainAxisState</name> =<init> <expr><call><name><name>this</name>.<name>domainAxis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>rangeAxisState</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>area</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>drawDomainGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>domainAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawRangeGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>rangeAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>Shape</name></type> <name>originalClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>originalClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a representation of the data within the dataArea region.  The 
     * &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;crosshairState&lt;/code&gt; arguments may be 
     * &lt;code&gt;null&lt;/code&gt;.
     *
     * @param g2  the graphics device.
     * @param dataArea  the region in which the data is to be drawn.
     * @param info  an optional object for collection dimension information.
     * @param crosshairState  collects crosshair information (&lt;code&gt;null&lt;/code&gt;
     *                        permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>render</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                       <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>)</parameter_list> <block>{
    
 
        <comment type="line">//long start = System.currentTimeMillis();</comment>
        <comment type="line">//System.out.println("Start: " + start);</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if the axes use a linear scale, you can uncomment the code below and</comment>
        <comment type="line">// switch to the alternative transX/transY calculation inside the loop </comment>
        <comment type="line">// that follows - it is a little bit faster then.</comment>
        <comment type="line">//</comment> 
        <comment type="line">// int xx = (int) dataArea.getMinX();</comment>
        <comment type="line">// int ww = (int) dataArea.getWidth();</comment>
        <comment type="line">// int yy = (int) dataArea.getMaxY();</comment>
        <comment type="line">// int hh = (int) dataArea.getHeight();</comment>
        <comment type="line">// double domainMin = this.domainAxis.getLowerBound();</comment>
        <comment type="line">// double domainLength = this.domainAxis.getUpperBound() - domainMin;</comment>
        <comment type="line">// double rangeMin = this.rangeAxis.getLowerBound();</comment>
        <comment type="line">// double rangeLength = this.rangeAxis.getUpperBound() - rangeMin;</comment>

        <if>if <condition>(<expr><name><name>this</name>.<name>data</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>data</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr><name><name>this</name>.<name>data</name><index>[<expr>0</expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr><name><name>this</name>.<name>data</name><index>[<expr>1</expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                
                <comment type="line">//int transX = (int) (xx + ww * (x - domainMin) / domainLength);</comment>
                <comment type="line">//int transY = (int) (yy - hh * (y - rangeMin) / rangeLength); </comment>
                <decl_stmt><decl><type><name>int</name></type> <name>transX</name> =<init> <expr>(<name>int</name>) <call><name><name>this</name>.<name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>transY</name> =<init> <expr>(<name>int</name>) <call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fillRect</name></name><argument_list>(<argument><expr><name>transX</name></expr></argument>, <argument><expr><name>transY</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <comment type="line">//long finish = System.currentTimeMillis();</comment>
        <comment type="line">//System.out.println("Finish: " + finish);</comment>
        <comment type="line">//System.out.println("Time: " + (finish - start));</comment>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the gridlines for the plot, if they are visible.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param ticks  the ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                       <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// draw the domain grid lines, if the flag says they're visible...</comment>
        <if>if <condition>(<expr><call><name>isDomainGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>this</name>.<name>domainAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getDomainGridlinePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getDomainGridlineStroke</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></while>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the gridlines for the plot, if they are visible.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param ticks  the ticks.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                      <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// draw the range grid lines, if the flag says they're visible...</comment>
        <if>if <condition>(<expr><call><name>isRangeGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getRangeGridlinePaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getRangeGridlineStroke</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></while>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the range of data values to be plotted along the axis, or
     * &lt;code&gt;null&lt;/code&gt; if the specified axis isn't the domain axis or the
     * range axis for the plot.
     *
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The range (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axis</name> == <name><name>this</name>.<name>domainAxis</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>xDataRange</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>axis</name> == <name><name>this</name>.<name>rangeAxis</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>yDataRange</name></name></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the X data range.
     *
     * @param data  the data (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The range.
     */</comment>
    <function><type><specifier>private</specifier> <name>Range</name></type> <name>calculateXDataRange</name><parameter_list>(<param><decl><type><name><name>float</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>lowest</name> =<init> <expr><name><name>Float</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>highest</name> =<init> <expr><name><name>Float</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>v</name> =<init> <expr><name><name>data</name><index>[<expr>0</expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>v</name> &lt; <name>lowest</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lowest</name> = <name>v</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>v</name> &gt; <name>highest</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>highest</name> = <name>v</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>lowest</name> &lt;= <name>highest</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Range</name><argument_list>(<argument><expr><name>lowest</name></expr></argument>, <argument><expr><name>highest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the Y data range.
     *
     * @param data  the data (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The range.
     */</comment>
    <function><type><specifier>private</specifier> <name>Range</name></type> <name>calculateYDataRange</name><parameter_list>(<param><decl><type><name><name>float</name><index>[]</index><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>lowest</name> =<init> <expr><name><name>Float</name>.<name>POSITIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>highest</name> =<init> <expr><name><name>Float</name>.<name>NEGATIVE_INFINITY</name></name></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name><index>[<expr>0</expr>]</index></name>.<name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>v</name> =<init> <expr><name><name>data</name><index>[<expr>1</expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>v</name> &lt; <name>lowest</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>lowest</name> = <name>v</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>v</name> &gt; <name>highest</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>highest</name> = <name>v</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>lowest</name> &lt;= <name>highest</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = new <call><name>Range</name><argument_list>(<argument><expr><name>lowest</name></expr></argument>, <argument><expr><name>highest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Multiplies the range on the domain axis by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
            <comment type="line">// get the source coordinate - this plot has always a VERTICAL</comment>
            <comment type="line">// orientation</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>sourceX</name> =<init> <expr><call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>this</name>.<name>domainAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceX</name></expr></argument>, 
                    <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the domain axes.
     * 
     * @param lowerPercent  the new lower bound as a percentage of the current 
     *                      range.
     * @param upperPercent  the new upper bound as a percentage of the current
     *                      range.
     * @param info  the plot rendering info.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>,
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
            <comment type="line">// get the source coordinate - this plot has always a VERTICAL</comment>
            <comment type="line">// orientation</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>sourceX</name> =<init> <expr><call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceX</name></expr></argument>, 
                    <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Zooms in on the range axes.
     * 
     * @param lowerPercent  the new lower bound as a percentage of the current 
     *                      range.
     * @param upperPercent  the new upper bound as a percentage of the current 
     *                      range.
     * @param info  the plot rendering info.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>,
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt;.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt;.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests an object for equality with this instance.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>FastScatterPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>FastScatterPlot</name></type> <name>that</name> =<init> <expr>(<name>FastScatterPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ArrayUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainAxis</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>domainAxis</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeAxis</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>rangeAxis</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>paint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name><name>that</name>.<name>domainGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>  
        <if>if <condition>(<expr>!<name><name>this</name>.<name>rangeGridlinesVisible</name></name> == <name><name>that</name>.<name>rangeGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>              
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the plot.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if some component of the plot does 
     *                                    not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
    
        <decl_stmt><decl><type><name>FastScatterPlot</name></type> <name>clone</name> =<init> <expr>(<name>FastScatterPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>    
        
        <if>if <condition>(<expr><name><name>this</name>.<name>data</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>data</name></name> = <call><name><name>ArrayUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>domainAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>domainAxis</name></name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>domainAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>domainAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>rangeAxis</name></name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>rangeAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
            
        <return>return <expr><name>clone</name></expr>;</return>
        
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>paint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>paint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>domainAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>domainAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>rangeAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
}</block></class>
</unit>
