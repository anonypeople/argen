<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\IntervalMarker.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * IntervalMarker.java
 * -------------------
 * (C) Copyright 2002-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 20-Aug-2002 : Added stroke to constructor in Marker class (DG);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Sep-2006 : Added MarkerChangeEvent notification (DG);
 * 18-Dec-2007 : Added new constructor (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>MarkerChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>GradientPaintTransformer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>LengthAdjustmentType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Represents an interval to be highlighted in some way.
 */</comment>
<class><specifier>public</specifier> class <name>IntervalMarker</name> <super><extends>extends <name>Marker</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-1762344775267627916L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The start value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The end value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>endValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The gradient paint transformer (optional). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>GradientPaintTransformer</name></type> <name>gradientPaintTransformer</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Constructs an interval marker.
     *
     * @param start  the start of the interval.
     * @param end  the end of the interval.
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>start</name></decl></param>, <param><decl><type><name>double</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Color</name>.<name>gray</name></name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Color</name>.<name>gray</name></name></expr></argument>, 
                <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0.8f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new interval marker with the specified range and fill paint.
     * The outline paint and stroke default to &lt;code&gt;null&lt;/code&gt;.
     * 
     * @param start  the lower bound of the interval.
     * @param end  the upper bound of the interval.
     * @param paint  the fill paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.9
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>start</name></decl></param>, <param><decl><type><name>double</name></type> <name>end</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>0.8f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Constructs an interval marker.
     *
     * @param start  the start of the interval.
     * @param end  the end of the interval.
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param outlinePaint  the outline paint.
     * @param outlineStroke  the outline stroke.
     * @param alpha  the alpha transparency.
     */</comment>
    <constructor><specifier>public</specifier> <name>IntervalMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>start</name></decl></param>, <param><decl><type><name>double</name></type> <name>end</name></decl></param>, 
                          <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>,
                          <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>, 
                          <param><decl><type><name>float</name></type> <name>alpha</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startValue</name></name> = <name>start</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>endValue</name></name> = <name>end</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLabelOffsetType</name><argument_list>(<argument><expr><name><name>LengthAdjustmentType</name>.<name>CONTRACT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the start value for the interval.
     *
     * @return The start value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startValue</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the start value for the marker and sends a 
     * {@link MarkerChangeEvent} to all registered listeners.
     * 
     * @param value  the value.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the end value for the interval.
     *
     * @return The end value.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getEndValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>endValue</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the end value for the marker and sends a 
     * {@link MarkerChangeEvent} to all registered listeners.
     * 
     * @param value  the value.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setEndValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>endValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the gradient paint transformer.
     * 
     * @return The gradient paint transformer (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>GradientPaintTransformer</name></type> <name>getGradientPaintTransformer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the gradient paint transformer and sends a 
     * {@link MarkerChangeEvent} to all registered listeners.
     * 
     * @param transformer  the transformer (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGradientPaintTransformer</name><parameter_list>(
            <param><decl><type><name>GradientPaintTransformer</name></type> <name>transformer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name> = <name>transformer</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the marker for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>IntervalMarker</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>IntervalMarker</name></type> <name>that</name> =<init> <expr>(<name>IntervalMarker</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>startValue</name></name> != <name><name>that</name>.<name>startValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>endValue</name></name> != <name><name>that</name>.<name>endValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>gradientPaintTransformer</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>gradientPaintTransformer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of the marker.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException Not thrown by this class, but the 
     *         exception is declared for the use of subclasses.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{   
        <return>return <expr><call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>

}</block></class>
</unit>
