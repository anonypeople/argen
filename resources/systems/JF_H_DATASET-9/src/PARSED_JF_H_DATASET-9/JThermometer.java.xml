<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\JThermometer.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * JThermometer.java
 * -----------------
 * A plot that displays a single value in a thermometer type display.
 *
 * (C) Copyright 2000-2007, Australian Antarctic Division and Contributors.
 *
 * Original Author:  Bryan Scott.
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Irv Thomae;
 *
 * Changes (from 17-Sep-2002)
 * --------------------------
 * 17-Sep-2002 : Reviewed with Checkstyle utility (DG);
 * 18-Sep-2003 : Integrated new methods contributed by Irv Thomae (DG);
 * 08-Jan-2004 : Renamed AbstractTitle --&gt; Title and moved to new package (DG);
 * 31-May-2005 : Fixed typo in method name (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>CardLayout</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>

<import>import <name><name>javax</name>.<name>swing</name>.<name>JPanel</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>ChartPanel</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>JFreeChart</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>TextTitle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>Title</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DefaultValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>

<comment type="javadoc">/**
 * An initial quick and dirty.  The concept behind this class would be to
 * generate a gui bean that could be used within JBuilder, Netbeans etc...
 */</comment>
<class><specifier>public</specifier> class <name>JThermometer</name> <super><extends>extends <name>JPanel</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1079905665515589820L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DefaultValueDataset</name></type> <name>data</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JFreeChart</name></type> <name>chart</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The chart panel. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ChartPanel</name></type> <name>panel</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The thermometer plot. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ThermometerPlot</name></type> <name>plot</name> =<init> <expr>new <call><name>ThermometerPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>JThermometer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr>new <call><name>CardLayout</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setInsets</name></name><argument_list>(<argument><expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr>5.0</expr></argument>, <argument><expr>5.0</expr></argument>, <argument><expr>5.0</expr></argument>, <argument><expr>5.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <call><name>DefaultValueDataset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>chart</name></name> = new <call><name>JFreeChart</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>JFreeChart</name>.<name>DEFAULT_TITLE_FONT</name></name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>plot</name></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>panel</name></name> = new <call><name>ChartPanel</name><argument_list>(<argument><expr><name><name>this</name>.<name>chart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>this</name>.<name>panel</name></name></expr></argument>, <argument><expr>"Panel"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBackground</name><argument_list>(<argument><expr><call><name>getBackground</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Adds a subtitle to the chart.
     *
     * @param subtitle  the subtitle.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtitle</name><parameter_list>(<param><decl><type><name>Title</name></type> <name>subtitle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>addSubtitle</name></name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a subtitle to the chart.
     *
     * @param subtitle  the subtitle.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subtitle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>addSubtitle</name></name><argument_list>(<argument><expr>new <call><name>TextTitle</name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a subtitle to the chart.
     *
     * @param subtitle  the subtitle.
     * @param font  the subtitle font.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubtitle</name><parameter_list>(<param><decl><type><name>String</name></type> <name>subtitle</name></decl></param>, <param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>addSubtitle</name></name><argument_list>(<argument><expr>new <call><name>TextTitle</name><argument_list>(<argument><expr><name>subtitle</name></expr></argument>, <argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value format for the thermometer.
     *
     * @param df  the formatter.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFormat</name><parameter_list>(<param><decl><type><name>DecimalFormat</name></type> <name>df</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setValueFormat</name></name><argument_list>(<argument><expr><name>df</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the lower and upper bounds for the thermometer.
     *
     * @param lower  the lower bound.
     * @param upper  the upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>, <param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setRange</name></name><argument_list>(<argument><expr><name>lower</name></expr></argument>, <argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range.
     *
     * @param range  the range type.
     * @param displayLow  the low value.
     * @param displayHigh  the high value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrangeInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>, <param><decl><type><name>double</name></type> <name>displayLow</name></decl></param>, 
                                <param><decl><type><name>double</name></type> <name>displayHigh</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setSubrangeInfo</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>displayLow</name></expr></argument>, <argument><expr><name>displayHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range.
     *
     * @param range  the range type.
     * @param rangeLow  the low value for the range.
     * @param rangeHigh  the high value for the range.
     * @param displayLow  the low value for display.
     * @param displayHigh  the high value for display.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrangeInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>,
                             <param><decl><type><name>double</name></type> <name>rangeLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>rangeHigh</name></decl></param>,
                             <param><decl><type><name>double</name></type> <name>displayLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>displayHigh</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setSubrangeInfo</name></name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>rangeLow</name></expr></argument>, <argument><expr><name>rangeHigh</name></expr></argument>, <argument><expr><name>displayLow</name></expr></argument>, 
                <argument><expr><name>displayHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the location at which the temperature value is displayed.
     *
     * @param loc  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>loc</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setValueLocation</name></name><argument_list>(<argument><expr><name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>panel</name>.<name>repaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value paint.
     *
     * @param paint  the paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValuePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setValuePaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value of the thermometer.
     *
     * @return The value.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>data</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>this</name>.<name>data</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value of the thermometer.
     *
     * @param value  the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setValue</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value of the thermometer.
     *
     * @param value  the value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>Number</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>data</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>data</name>.<name>setValue</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the unit type.
     *
     * @param i  the unit type.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnits</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setUnits</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outline paint.
     *
     * @param p  the paint.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setOutlinePaint</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the foreground color.
     *
     * @param fg  the foreground color.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setForeground</name><parameter_list>(<param><decl><type><name>Color</name></type> <name>fg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setForeground</name></name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setThermometerPaint</name></name><argument_list>(<argument><expr><name>fg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the background color.
     *
     * @param bg  the background color.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBackground</name><parameter_list>(<param><decl><type><name>Color</name></type> <name>bg</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name>.<name>setBackground</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>chart</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>chart</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>panel</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>panel</name>.<name>setBackground</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the value font.
     *
     * @param f  the font.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>plot</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setValueFont</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick label font.
     *
     * @return The tick label font.
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getTickLabelFont</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name><name>this</name>.<name>plot</name>.<name>getRangeAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>axis</name>.<name>getTickLabelFont</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick label font.
     *
     * @param font  the font.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name><name>this</name>.<name>plot</name>.<name>getRangeAxis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>setTickLabelFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Increases or decreases the tick font size.
     *
     * @param delta  the change in size.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>changeTickFontSize</name><parameter_list>(<param><decl><type><name>int</name></type> <name>delta</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fName</name> =<init> <expr><call><name><name>f</name>.<name>getFontName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>newFont</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr><name>fName</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getStyle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<call><name><name>f</name>.<name>getSize</name></name><argument_list>()</argument_list></call> + <name>delta</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setTickLabelFont</name><argument_list>(<argument><expr><name>newFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick font style.
     *
     * @param style  the style.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickFontStyle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>style</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Font</name></type> <name>f</name> =<init> <expr><call><name>getTickLabelFont</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fName</name> =<init> <expr><call><name><name>f</name>.<name>getFontName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Font</name></type> <name>newFont</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr><name>fName</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><call><name><name>f</name>.<name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setTickLabelFont</name><argument_list>(<argument><expr><name>newFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the display range follows the
     * data value.
     *
     * @param flag  the new value of the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFollowDataInSubranges</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setFollowDataInSubranges</name></name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not value lines are displayed.
     *
     * @param b  the new flag value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowValueLines</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setShowValueLines</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for the axis.
     * 
     * @param location  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>plot</name>.<name>setAxisLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for the axis.
     * 
     * @return The location.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getShowAxisLocation</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name>.<name>plot</name>.<name>getAxisLocation</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
