<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\MeterPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * MeterPlot.java
 * --------------
 * (C) Copyright 2000-2007, by Hari and Contributors.
 *
 * Original Author:  Hari (ourhari@hotmail.com);
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Bob Orchard;
 *                   Arnaud Lelievre;
 *                   Nicolas Brodu;
 *                   David Bastend;
 *
 * Changes
 * -------
 * 01-Apr-2002 : Version 1, contributed by Hari (DG);
 * 23-Apr-2002 : Moved dataset from JFreeChart to Plot (DG);
 * 22-Aug-2002 : Added changes suggest by Bob Orchard, changed Color to Paint 
 *               for consistency, plus added Javadoc comments (DG);
 * 01-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 23-Jan-2003 : Removed one constructor (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 20-Aug-2003 : Changed dataset from MeterDataset --&gt; ValueDataset, added 
 *               equals() method,
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL); 
 *               implemented Cloneable, and various other changes (DG);
 * 08-Sep-2003 : Added serialization methods (NB);
 * 11-Sep-2003 : Added cloning support (NB);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 25-Sep-2003 : Fix useless cloning. Correct dataset listener registration in 
 *               constructor. (NB)
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 17-Jan-2004 : Changed to allow dialBackgroundPaint to be set to null - see 
 *               bug 823628 (DG);
 * 07-Apr-2004 : Changed string bounds calculation (DG);
 * 12-May-2004 : Added tickLabelFormat attribute - see RFE 949566.  Also 
 *               updated the equals() method (DG);
 * 02-Nov-2004 : Added sanity checks for range, and only draw the needle if the 
 *               value is contained within the overall range - see bug report 
 *               1056047 (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for the 1.0.0 
 *               release (DG);
 * 02-Feb-2005 : Added optional background paint for each region (DG);
 * 22-Mar-2005 : Removed 'normal', 'warning' and 'critical' regions and put in
 *               facility to define an arbitrary number of MeterIntervals,
 *               based on a contribution by David Bastend (DG);
 * 20-Apr-2005 : Small update for change to LegendItem constructors (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 08-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);
 * 10-Nov-2005 : Added tickPaint, tickSize and valuePaint attributes, and
 *               put value label drawing code into a separate method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Mar-2007 : Restore clip region correctly (see bug 1667750) (DG);
 * 18-May-2007 : Set dataset for LegendItem (DG);
 * 29-Nov-2007 : Fixed serialization bug with dialOutlinePaint (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>ValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>

<comment type="javadoc">/**
 * A plot that displays a single value in the form of a needle on a dial.  
 * Defined ranges (for example, 'normal', 'warning' and 'critical') can be
 * highlighted on the dial.
 */</comment>
<class><specifier>public</specifier> class <name>MeterPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>Serializable</name>, <name>Cloneable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>2987472457734470962L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default background paint. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_DIAL_BACKGROUND_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default needle paint. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_NEEDLE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>green</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value font. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_VALUE_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default value paint. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_VALUE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>yellow</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default meter angle. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_METER_ANGLE</name> =<init> <expr>270</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default border size. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_BORDER_SIZE</name> =<init> <expr>3f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default circle size. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>float</name></type> <name>DEFAULT_CIRCLE_SIZE</name> =<init> <expr>10f</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_LABEL_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, 
            <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset (contains a single value). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The dial shape (background shape). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DialShape</name></type> <name>shape</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The dial extent (measured in degrees). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>meterAngle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The overall range of data values on the dial. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Range</name></type> <name>range</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The tick size. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>tickSize</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to draw the ticks. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>tickPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The units displayed on the dial. */</comment>    
    <decl_stmt><decl><type><specifier>private</specifier> <name>String</name></type> <name>units</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The font for the value displayed in the center of the dial. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>valueFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint for the value displayed in the center of the dial. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>valuePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the border is drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>drawBorder</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The outline paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>dialOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint for the dial background. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>dialBackgroundPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint for the needle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>needlePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the tick labels are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>tickLabelsVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The tick label font. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>tickLabelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The tick label paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>tickLabelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The tick label format. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>tickLabelFormat</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> =<init> 
        <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A (possibly empty) list of the {@link MeterInterval}s to be highlighted 
     * on the dial. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>intervals</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new plot with a default range of &lt;code&gt;0&lt;/code&gt; to 
     * &lt;code&gt;100&lt;/code&gt; and no value to display.
     */</comment>
    <constructor><specifier>public</specifier> <name>MeterPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new plot that displays the value from the supplied dataset.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>MeterPlot</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shape</name></name> = <name><name>DialShape</name>.<name>CIRCLE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>meterAngle</name></name> = <name>DEFAULT_METER_ANGLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = new <call><name>Range</name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickSize</name></name> = 10.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickPaint</name></name> = <name><name>Color</name>.<name>white</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>units</name></name> = "Units"</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>needlePaint</name></name> = <name><name>MeterPlot</name>.<name>DEFAULT_NEEDLE_PAINT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = <name><name>MeterPlot</name>.<name>DEFAULT_LABEL_FONT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFormat</name></name> = <call><name><name>NumberFormat</name>.<name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>valueFont</name></name> = <name><name>MeterPlot</name>.<name>DEFAULT_VALUE_FONT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>valuePaint</name></name> = <name><name>MeterPlot</name>.<name>DEFAULT_VALUE_PAINT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name> = <name><name>MeterPlot</name>.<name>DEFAULT_DIAL_BACKGROUND_PAINT</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>intervals</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setDataset</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the dial shape.  The default is {@link DialShape#CIRCLE}).
     * 
     * @return The dial shape (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDialShape(DialShape)
     */</comment>
    <function><type><specifier>public</specifier> <name>DialShape</name></type> <name>getDialShape</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shape</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dial shape and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDialShape()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDialShape</name><parameter_list>(<param><decl><type><name>DialShape</name></type> <name>shape</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shape</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'shape' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>shape</name></name> = <name>shape</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the meter angle in degrees.  This defines, in part, the shape
     * of the dial.  The default is 270 degrees.
     *
     * @return The meter angle (in degrees).
     * 
     * @see #setMeterAngle(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMeterAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>meterAngle</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the angle (in degrees) for the whole range of the dial and sends 
     * a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param angle  the angle (in degrees, in the range 1-360).
     * 
     * @see #getMeterAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMeterAngle</name><parameter_list>(<param><decl><type><name>int</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>angle</name> &lt; 1 || <name>angle</name> &gt; 360</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid 'angle' (" + <name>angle</name> 
                    + ")"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>meterAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the overall range for the dial.
     * 
     * @return The overall range (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRange(Range)
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getRange</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>range</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the range for the dial and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param range  the range (&lt;code&gt;null&lt;/code&gt; not permitted and zero-length
     *               ranges not permitted).
     *             
     * @see #getRange()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>Range</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>range</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'range' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name><name>range</name>.<name>getLength</name></name><argument_list>()</argument_list></call> &gt; 0.0)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Range length must be positive."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>range</name></name> = <name>range</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tick size (the interval between ticks on the dial).
     * 
     * @return The tick size.
     * 
     * @see #setTickSize(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTickSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickSize</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tick size and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param size  the tick size (must be &gt; 0).
     * 
     * @see #getTickSize()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickSize</name><parameter_list>(<param><decl><type><name>double</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>size</name> &lt;= 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Requires 'size' &gt; 0."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickSize</name></name> = <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the ticks around the dial. 
     * 
     * @return The paint used to draw the ticks around the dial (never 
     *         &lt;code&gt;null&lt;/code&gt;).
     *         
     * @see #setTickPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the tick labels around the dial and sends
     * a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string describing the units for the dial.
     * 
     * @return The units (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setUnits(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getUnits</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>units</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the units for the dial and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param units  the units (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getUnits()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnits</name><parameter_list>(<param><decl><type><name>String</name></type> <name>units</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>units</name></name> = <name>units</name></expr>;</expr_stmt>    
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
        
    <comment type="javadoc">/**
     * Returns the paint for the needle.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setNeedlePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getNeedlePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>needlePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to display the needle and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getNeedlePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNeedlePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>needlePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that determines whether or not tick labels are visible.
     *
     * @return The flag.
     * 
     * @see #setTickLabelsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getTickLabelsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelsVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the tick labels are visible
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param visible  the flag.
     * 
     * @see #getTickLabelsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelsVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick label font.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getTickLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick label font and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickLabelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelFont</name></name> = <name>font</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick label paint.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getTickLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tick label paint and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>tickLabelPaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the tick label format.
     * 
     * @return The tick label format (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setTickLabelFormat(NumberFormat)
     */</comment>
    <function><type><specifier>public</specifier> <name>NumberFormat</name></type> <name>getTickLabelFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>tickLabelFormat</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the format for the tick labels and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     * 
     * @param format  the format (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getTickLabelFormat()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTickLabelFormat</name><parameter_list>(<param><decl><type><name>NumberFormat</name></type> <name>format</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>format</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'format' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelFormat</name></name> = <name>format</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font for the value label.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setValueFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getValueFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>valueFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font used to display the value label and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getValueFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>valueFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the value label.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setValuePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getValuePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>valuePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to display the value label and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getValuePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValuePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>valuePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the dial background.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDialBackgroundPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDialBackgroundPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dialBackgroundPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill the dial background.  Set this to 
     * &lt;code&gt;null&lt;/code&gt; for no background.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDialBackgroundPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDialBackgroundPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not a rectangular border is 
     * drawn around the plot area.
     *
     * @return A flag.
     * 
     * @see #setDrawBorder(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getDrawBorder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>drawBorder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not a rectangular border is drawn
     * around the plot area and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param draw  the flag.
     * 
     * @see #getDrawBorder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDrawBorder</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>draw</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// TODO: fix output when this flag is set to true</comment>
        <expr_stmt><expr><name><name>this</name>.<name>drawBorder</name></name> = <name>draw</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dial outline paint.
     *
     * @return The paint.
     * 
     * @see #setDialOutlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDialOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dialOutlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the dial outline paint and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param paint  the paint.
     * 
     * @see #getDialOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDialOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dialOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dataset for the plot.
     * 
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(ValueDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset for the plot, replacing the existing dataset if there 
     * is one, and triggers a {@link PlotChangeEvent}.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <decl_stmt><decl><type><name>ValueDataset</name></type> <name>existing</name> =<init> <expr><name><name>this</name>.<name>dataset</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Returns an unmodifiable list of the intervals for the plot.
     * 
     * @return A list.
     * 
     * @see #addInterval(MeterInterval)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getIntervals</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>intervals</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds an interval and sends a {@link PlotChangeEvent} to all registered
     * listeners.
     * 
     * @param interval  the interval (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getIntervals()
     * @see #clearIntervals()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addInterval</name><parameter_list>(<param><decl><type><name>MeterInterval</name></type> <name>interval</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>interval</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'interval' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>intervals</name>.<name>add</name></name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Clears the intervals for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     * 
     * @see #addInterval(MeterInterval)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearIntervals</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>intervals</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns an item for each interval.
     *
     * @return A collection of legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>intervals</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>MeterInterval</name></type> <name>mi</name> =<init> <expr>(<name>MeterInterval</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>color</name> =<init> <expr><call><name><name>mi</name>.<name>getBackgroundPaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>color</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>color</name> = <call><name><name>mi</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><call><name><name>mi</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mi</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr>-4.0</expr></argument>, <argument><expr>-4.0</expr></argument>, <argument><expr>8.0</expr></argument>, <argument><expr>8.0</expr></argument>)</argument_list></call></expr></argument>, 
                    <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>item</name>.<name>setDataset</name></name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust for insets...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>area</name>.<name>setRect</name></name><argument_list>(<argument><expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + 4</expr></argument>, <argument><expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> + 4</expr></argument>, <argument><expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - 8</expr></argument>, 
                <argument><expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw the background</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust the plot area by the interior spacing value</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>gapHorizontal</name> =<init> <expr>(2 * <name>DEFAULT_BORDER_SIZE</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>gapVertical</name> =<init> <expr>(2 * <name>DEFAULT_BORDER_SIZE</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterX</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>gapHorizontal</name> / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterY</name> =<init> <expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>gapVertical</name> / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterW</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name>gapHorizontal</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterH</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name>gapVertical</name>
                + ((<name><name>this</name>.<name>meterAngle</name></name> &lt;= 180) &amp;&amp; (<name><name>this</name>.<name>shape</name></name> != <name><name>DialShape</name>.<name>CIRCLE</name></name>)
                ? <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 1.25 : 0)</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>meterW</name></expr></argument>, <argument><expr><name>meterH</name></expr></argument>)</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>meterX</name> = (<name>meterX</name> + <name>meterX</name> + <name>meterW</name>) / 2 - <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>meterY</name> = (<name>meterY</name> + <name>meterY</name> + <name>meterH</name>) / 2 - <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>meterW</name> = 2 * <name>min</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>meterH</name> = 2 * <name>min</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>meterArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>meterX</name></expr></argument>, <argument><expr><name>meterY</name></expr></argument>, <argument><expr><name>meterW</name></expr></argument>, 
                <argument><expr><name>meterH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>Rectangle2D</name>.<name>Double</name></name></type> <name>originalArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                <argument><expr><call><name><name>meterArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> - 4</expr></argument>, <argument><expr><call><name><name>meterArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> - 4</expr></argument>, 
                <argument><expr><call><name><name>meterArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> + 8</expr></argument>, <argument><expr><call><name><name>meterArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> + 8</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>meterMiddleX</name> =<init> <expr><call><name><name>meterArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterMiddleY</name> =<init> <expr><call><name><name>meterArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// plot the data (unless the dataset is null)...</comment>
        <decl_stmt><decl><type><name>ValueDataset</name></type> <name>data</name> =<init> <expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>data</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>dataMin</name> =<init> <expr><call><name><name>this</name>.<name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>dataMax</name> =<init> <expr><call><name><name>this</name>.<name>range</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>originalArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>,
                    <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>dialBackgroundPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fillArc</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>originalArea</name></expr></argument>, <argument><expr><name>dataMin</name></expr></argument>, <argument><expr><name>dataMax</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>drawTicks</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>dataMin</name></expr></argument>, <argument><expr><name>dataMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawArcForInterval</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr>new <call><name>MeterInterval</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>this</name>.<name>range</name></name></expr></argument>,
                    <argument><expr><name><name>this</name>.<name>dialOutlinePaint</name></name></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>intervals</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>MeterInterval</name></type> <name>interval</name> =<init> <expr>(<name>MeterInterval</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>drawArcForInterval</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>data</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>drawValueLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
                <if>if <condition>(<expr><call><name><name>this</name>.<name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>needlePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>2.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>double</name></type> <name>radius</name> =<init> <expr>(<call><name><name>meterArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2) 
                                    + <name>DEFAULT_BORDER_SIZE</name> + 15</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>valueAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>valueP1</name> =<init> <expr><name>meterMiddleX</name> 
                            + (<name>radius</name> * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>valueP2</name> =<init> <expr><name>meterMiddleY</name> 
                            - (<name>radius</name> * <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>Polygon</name></type> <name>arrow</name> =<init> <expr>new <call><name>Polygon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>(<name>valueAngle</name> &gt; 135 &amp;&amp; <name>valueAngle</name> &lt; 225)
                        || (<name>valueAngle</name> &lt; 45 &amp;&amp; <name>valueAngle</name> &gt; -45)</expr>)</condition><then> <block>{

                        <decl_stmt><decl><type><name>double</name></type> <name>valueP3</name> =<init> <expr>(<name>meterMiddleY</name> 
                                - <name>DEFAULT_CIRCLE_SIZE</name> / 4)</expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>double</name></type> <name>valueP4</name> =<init> <expr>(<name>meterMiddleY</name> 
                                + <name>DEFAULT_CIRCLE_SIZE</name> / 4)</expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>arrow</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>meterMiddleX</name></expr></argument>, <argument><expr>(<name>int</name>) <name>valueP3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>arrow</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>meterMiddleX</name></expr></argument>, <argument><expr>(<name>int</name>) <name>valueP4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name><name>arrow</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>meterMiddleX</name> 
                                - <name>DEFAULT_CIRCLE_SIZE</name> / 4</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <name>meterMiddleY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>arrow</name>.<name>addPoint</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>meterMiddleX</name> 
                                + <name>DEFAULT_CIRCLE_SIZE</name> / 4</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <name>meterMiddleY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><call><name><name>arrow</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>valueP1</name></expr></argument>, <argument><expr>(<name>int</name>) <name>valueP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>arrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>circle</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>meterMiddleX</name> 
                            - <name>DEFAULT_CIRCLE_SIZE</name> / 2</expr></argument>, <argument><expr><name>meterMiddleY</name> 
                            - <name>DEFAULT_CIRCLE_SIZE</name> / 2</expr></argument>, <argument><expr><name>DEFAULT_CIRCLE_SIZE</name></expr></argument>, 
                            <argument><expr><name>DEFAULT_CIRCLE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>circle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
                
            <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the arc to represent an interval.
     *
     * @param g2  the graphics device.
     * @param meterArea  the drawing area.
     * @param interval  the interval.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawArcForInterval</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>meterArea</name></decl></param>, 
                                      <param><decl><type><name>MeterInterval</name></type> <name>interval</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>minValue</name> =<init> <expr><call><name><name>interval</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getLowerBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxValue</name> =<init> <expr><call><name><name>interval</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>getUpperBound</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name><name>interval</name>.<name>getOutlinePaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name><name>interval</name>.<name>getOutlineStroke</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Paint</name></type> <name>backgroundPaint</name> =<init> <expr><call><name><name>interval</name>.<name>getBackgroundPaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <if>if <condition>(<expr><name>backgroundPaint</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fillArc</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><name>backgroundPaint</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>outlinePaint</name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>outlineStroke</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawArc</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, 
                        <argument><expr><name>outlineStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>drawTick</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>minValue</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawTick</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>maxValue</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws an arc.
     *
     * @param g2  the graphics device.
     * @param area  the plot area.
     * @param minValue  the minimum value.
     * @param maxValue  the maximum value.
     * @param paint  the paint.
     * @param stroke  the stroke.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawArc</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>double</name></type> <name>minValue</name></decl></param>, 
                           <param><decl><type><name>double</name></type> <name>maxValue</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>startAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>endAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>extent</name> =<init> <expr><name>endAngle</name> - <name>startAngle</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>paint</name> != <name>null</name> &amp;&amp; <name>stroke</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, 
                    <argument><expr><name>extent</name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Fills an arc on the dial between the given values.
     *
     * @param g2  the graphics device.
     * @param area  the plot area.
     * @param minValue  the minimum data value.
     * @param maxValue  the maximum data value.
     * @param paint  the background paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dial  a flag that indicates whether the arc represents the whole 
     *              dial.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>fillArc</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                           <param><decl><type><name>double</name></type> <name>minValue</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxValue</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>,
                           <param><decl><type><name>boolean</name></type> <name>dial</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>startAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>maxValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>endAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>minValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>extent</name> =<init> <expr><name>endAngle</name> - <name>startAngle</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>w</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>joinType</name> =<init> <expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>shape</name></name> == <name><name>DialShape</name>.<name>PIE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>joinType</name> = <name><name>Arc2D</name>.<name>PIE</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>shape</name></name> == <name><name>DialShape</name>.<name>CHORD</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>dial</name> &amp;&amp; <name><name>this</name>.<name>meterAngle</name></name> &gt; 180</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>joinType</name> = <name><name>Arc2D</name>.<name>CHORD</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>joinType</name> = <name><name>Arc2D</name>.<name>PIE</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>shape</name></name> == <name><name>DialShape</name>.<name>CIRCLE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>joinType</name> = <name><name>Arc2D</name>.<name>PIE</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>dial</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>extent</name> = 360</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"DialShape not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if></else></if></else></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>extent</name></expr></argument>, 
                <argument><expr><name>joinType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Translates a data value to an angle on the dial.
     *
     * @param value  the value.
     *
     * @return The angle on the dial.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>valueToAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>value</name> = <name>value</name> - <call><name><name>this</name>.<name>range</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>baseAngle</name> =<init> <expr>180 + ((<name><name>this</name>.<name>meterAngle</name></name> - 180) / 2)</expr></init></decl>;</decl_stmt>
        <return>return <expr><name>baseAngle</name> - ((<name>value</name> / <call><name><name>this</name>.<name>range</name>.<name>getLength</name></name><argument_list>()</argument_list></call>) * <name><name>this</name>.<name>meterAngle</name></name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the ticks that subdivide the overall range.
     *
     * @param g2  the graphics device.
     * @param meterArea  the meter area.
     * @param minValue  the minimum value.
     * @param maxValue  the maximum value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTicks</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>meterArea</name></decl></param>, 
                             <param><decl><type><name>double</name></type> <name>minValue</name></decl></param>, <param><decl><type><name>double</name></type> <name>maxValue</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>double</name></type> <name>v</name> =<init> <expr><name>minValue</name></expr></init></decl>;</init> <condition><expr><name>v</name> &lt;= <name>maxValue</name></expr>;</condition> <incr><expr><name>v</name> += <name><name>this</name>.<name>tickSize</name></name></expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawTick</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a tick.
     *
     * @param g2  the graphics device.
     * @param meterArea  the meter area.
     * @param value  the value.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTick</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>meterArea</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>drawTick</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>meterArea</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a tick on the dial.
     *
     * @param g2  the graphics device.
     * @param meterArea  the meter area.
     * @param value  the tick value.
     * @param label  a flag that controls whether or not a value label is drawn.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawTick</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>meterArea</name></decl></param>,
                            <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>label</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>valueAngle</name> =<init> <expr><call><name>valueToAngle</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>meterMiddleX</name> =<init> <expr><call><name><name>meterArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>meterMiddleY</name> =<init> <expr><call><name><name>meterArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>2.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>valueP2X</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>valueP2Y</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>radius</name> =<init> <expr>(<call><name><name>meterArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2) + <name>DEFAULT_BORDER_SIZE</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>radius1</name> =<init> <expr><name>radius</name> - 15</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>valueP1X</name> =<init> <expr><name>meterMiddleX</name> 
                + (<name>radius</name> * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>valueP1Y</name> =<init> <expr><name>meterMiddleY</name> 
                - (<name>radius</name> * <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>valueP2X</name> = <name>meterMiddleX</name> 
                + (<name>radius1</name> * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>valueP2Y</name> = <name>meterMiddleY</name> 
                - (<name>radius1</name> * <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name><name>Math</name>.<name>PI</name></name> * (<name>valueAngle</name> / 180)</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Line2D</name>.<name>Double</name></name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>valueP1X</name></expr></argument>, <argument><expr><name>valueP1Y</name></expr></argument>, <argument><expr><name>valueP2X</name></expr></argument>, 
                <argument><expr><name>valueP2Y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name> &amp;&amp; <name>label</name></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>String</name></type> <name>tickLabel</name> =<init>  <expr><call><name><name>this</name>.<name>tickLabelFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>tickLabelBounds</name> 
                =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>tickLabel</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name>valueP2X</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><name>valueP2Y</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>valueAngle</name> == 90 || <name>valueAngle</name> == 270</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>x</name> = <name>x</name> - <call><name><name>tickLabelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>valueAngle</name> &lt; 90 || <name>valueAngle</name> &gt; 270</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>x</name> = <name>x</name> - <call><name><name>tickLabelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <if>if <condition>(<expr>(<name>valueAngle</name> &gt; 135 &amp;&amp; <name>valueAngle</name> &lt; 225) 
                    || <name>valueAngle</name> &gt; 315 || <name>valueAngle</name> &lt; 45</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>y</name> = <name>y</name> - <call><name><name>tickLabelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>y</name> = <name>y</name> + <call><name><name>tickLabelBounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2</expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>tickLabel</name></expr></argument>, <argument><expr>(<name>float</name>) <name>x</name></expr></argument>, <argument><expr>(<name>float</name>) <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the value label just below the center of the dial.
     * 
     * @param g2  the graphics device.
     * @param area  the plot area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawValueLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>valueStr</name> =<init> <expr>"No value"</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>valueStr</name> = <call><name><name>this</name>.<name>tickLabelFormat</name>.<name>format</name></name><argument_list>(<argument><expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> + " " 
                         + <name><name>this</name>.<name>units</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr>(<name>float</name>) <call><name><name>area</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr>(<name>float</name>) <call><name><name>area</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call> + <name>DEFAULT_CIRCLE_SIZE</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><name>valueStr</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>TOP_CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     *
     * @return A string describing the type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Meter_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A zoom method that does nothing.  Plots are required to support the 
     * zoom operation.  In the case of a meter plot, it doesn't make sense to 
     * zoom in or out, so the method is empty.
     *
     * @param percent   The zoom percentage.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// intentionally blank</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests the plot for equality with an arbitrary object.  Note that the 
     * dataset is ignored for the purposes of testing equality.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>   
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MeterPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>MeterPlot</name></type> <name>that</name> =<init> <expr>(<name>MeterPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>units</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>units</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>range</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>range</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>intervals</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>intervals</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dialOutlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>dialOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>shape</name></name> != <name><name>that</name>.<name>shape</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>dialBackgroundPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>needlePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>needlePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>valueFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>valuePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickSize</name></name> != <name><name>that</name>.<name>tickSize</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>tickLabelsVisible</name></name> != <name><name>that</name>.<name>tickLabelsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>tickLabelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelFormat</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>tickLabelFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>drawBorder</name></name> != <name><name>that</name>.<name>drawBorder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>meterAngle</name></name> != <name><name>that</name>.<name>meterAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>      
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dialOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>needlePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>tickLabelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dialBackgroundPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dialOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>needlePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>valuePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>tickLabelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/** 
     * Returns an independent copy (clone) of the plot.  The dataset is NOT 
     * cloned - both the original and the clone will have a reference to the
     * same dataset.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if some component of the plot cannot
     *         be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>MeterPlot</name></type> <name>clone</name> =<init> <expr>(<name>MeterPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>tickLabelFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>tickLabelFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// the following relies on the fact that the intervals are immutable</comment>
        <expr_stmt><expr><name><name>clone</name>.<name>intervals</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>intervals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>clone</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
