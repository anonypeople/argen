<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\MultiplePiePlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * MultiplePiePlot.java
 * --------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 29-Jan-2004 : Version 1 (DG);
 * 31-Mar-2004 : Added setPieIndex() call during drawing (DG);
 * 20-Apr-2005 : Small change for update to LegendItem constructors (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 16-Jun-2005 : Added get/setDataset() and equals() methods (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 06-Apr-2006 : Fixed bug 1190647 - legend and section colors not consistent
 *               when aggregation limit is specified (DG);
 * 27-Sep-2006 : Updated draw() method for deprecated code (DG);
 * 17-Jan-2007 : Updated prefetchSectionPaints() to check settings in
 *               underlying PiePlot (DG);
 * 17-May-2007 : Added argument check to setPieChart() (DG);
 * 18-May-2007 : Set dataset for LegendItem (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Rectangle</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>ChartRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>JFreeChart</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>title</name>.<name>TextTitle</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryToPieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>TableOrder</name></name>;</import>

<comment type="javadoc">/**
 * A plot that displays multiple pie plots using data from a 
 * {@link CategoryDataset}.
 */</comment>
<class><specifier>public</specifier> class <name>MultiplePiePlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-355377800470807389L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The chart object that draws the individual pie charts. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>JFreeChart</name></type> <name>pieChart</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryDataset</name></type> <name>dataset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The data extract order (by row or by column). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TableOrder</name></type> <name>dataExtractOrder</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The pie section limit percentage. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>limit</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The key for the aggregated items. 
     * @since 1.0.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>aggregatedItemsKey</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint for the aggregated items. 
     * @since 1.0.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>aggregatedItemsPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The colors to use for each section. 
     * @since 1.0.2
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Map</name></type> <name>sectionPaints</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new plot with no data.
     */</comment>
    <constructor><specifier>public</specifier> <name>MultiplePiePlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new plot.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>MultiplePiePlot</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PiePlot</name></type> <name>piePlot</name> =<init> <expr>new <call><name>PiePlot</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>pieChart</name></name> = new <call><name>JFreeChart</name><argument_list>(<argument><expr><name>piePlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>pieChart</name>.<name>removeLegend</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataExtractOrder</name></name> = <name><name>TableOrder</name>.<name>BY_COLUMN</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>pieChart</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextTitle</name></type> <name>seriesTitle</name> =<init> <expr>new <call><name>TextTitle</name><argument_list>(<argument><expr>"Series Title"</expr></argument>, 
                <argument><expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>seriesTitle</name>.<name>setPosition</name></name><argument_list>(<argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>pieChart</name>.<name>setTitle</name></name><argument_list>(<argument><expr><name>seriesTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>aggregatedItemsKey</name></name> = "Other"</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name> = <name><name>Color</name>.<name>lightGray</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionPaints</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the dataset used by the plot.
     * 
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self to trigger plot change event</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the pie chart that is used to draw the individual pie plots.
     * 
     * @return The pie chart (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPieChart(JFreeChart)
     */</comment>
    <function><type><specifier>public</specifier> <name>JFreeChart</name></type> <name>getPieChart</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieChart</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the chart that is used to draw the individual pie plots.  The
     * chart's plot must be an instance of {@link PiePlot}.
     * 
     * @param pieChart  the pie chart (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @see #getPieChart()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieChart</name><parameter_list>(<param><decl><type><name>JFreeChart</name></type> <name>pieChart</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>pieChart</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'pieChart' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!(<call><name><name>pieChart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call> <name>instanceof</name> <name>PiePlot</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The 'pieChart' argument must "
                    + "be a chart based on a PiePlot."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>pieChart</name></name> = <name>pieChart</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the data extract order (by row or by column).
     * 
     * @return The data extract order (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>TableOrder</name></type> <name>getDataExtractOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataExtractOrder</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the data extract order (by row or by column) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param order  the order (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataExtractOrder</name><parameter_list>(<param><decl><type><name>TableOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dataExtractOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the limit (as a percentage) below which small pie sections are 
     * aggregated.
     * 
     * @return The limit percentage.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLimit</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>limit</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the limit below which pie sections are aggregated.  
     * Set this to 0.0 if you don't want any aggregation to occur.
     * 
     * @param limit  the limit percent.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLimit</name><parameter_list>(<param><decl><type><name>double</name></type> <name>limit</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>limit</name></name> = <name>limit</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the key for aggregated items in the pie plots, if there are any.
     * The default value is "Other".
     * 
     * @return The aggregated items key.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getAggregatedItemsKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>aggregatedItemsKey</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the key for aggregated items in the pie plots.  You must ensure 
     * that this doesn't clash with any keys in the dataset.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAggregatedItemsKey</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>aggregatedItemsKey</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the pie section representing the 
     * aggregated items.  The default value is &lt;code&gt;Color.lightGray&lt;/code&gt;.
     * 
     * @return The paint.
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getAggregatedItemsPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the pie section representing the aggregated
     * items and sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAggregatedItemsPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     *
     * @return The plot type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>"Multiple Pie Plot"</expr>;</return>  
         <comment type="line">// TODO: need to fetch this from localised resources</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                     <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                     <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        
       
        <comment type="line">// adjust the drawing area for the plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// check that there is some data to display...</comment>
        <if>if <condition>(<expr><call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>pieCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pieCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>pieCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// the columns variable is always &gt;= rows</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>displayCols</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>sqrt</name></name><argument_list>(<argument><expr><name>pieCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>displayRows</name> 
            =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>ceil</name></name><argument_list>(<argument><expr>(<name>double</name>) <name>pieCount</name> / (<name>double</name>) <name>displayCols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// swap rows and columns to match plotArea shape</comment>
        <if>if <condition>(<expr><name>displayCols</name> &gt; <name>displayRows</name> &amp;&amp; <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name> =<init> <expr><name>displayCols</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>displayCols</name> = <name>displayRows</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>displayRows</name> = <name>temp</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>prefetchSectionPaints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr>(<name>int</name>) <call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr>(<name>int</name>) <call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>width</name> =<init> <expr>((<name>int</name>) <call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call>) / <name>displayCols</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>height</name> =<init> <expr>((<name>int</name>) <call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call>) / <name>displayRows</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>row</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>column</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>diff</name> =<init> <expr>(<name>displayRows</name> * <name>displayCols</name>) - <name>pieCount</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>xoffset</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle</name></type> <name>rect</name> =<init> <expr>new <call><name>Rectangle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>pieIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pieIndex</name> &lt; <name>pieCount</name></expr>;</condition> <incr><expr><name>pieIndex</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>rect</name>.<name>setBounds</name></name><argument_list>(<argument><expr><name>x</name> + <name>xoffset</name> + (<name>width</name> * <name>column</name>)</expr></argument>, <argument><expr><name>y</name> + (<name>height</name> * <name>row</name>)</expr></argument>, 
                    <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>title</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>title</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>pieIndex</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>title</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>pieIndex</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>this</name>.<name>pieChart</name>.<name>setTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>PieDataset</name></type> <name>piedataset</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PieDataset</name></type> <name>dd</name> =<init> <expr>new <call><name>CategoryToPieDataset</name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>dataExtractOrder</name></name></expr></argument>, <argument><expr><name>pieIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>limit</name></name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>piedataset</name> = <call><name><name>DatasetUtilities</name>.<name>createConsolidatedPieDataset</name></name><argument_list>(
                        <argument><expr><name>dd</name></expr></argument>, <argument><expr><name><name>this</name>.<name>aggregatedItemsKey</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>piedataset</name> = <name>dd</name></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>PiePlot</name></type> <name>piePlot</name> =<init> <expr>(<name>PiePlot</name>) <call><name><name>this</name>.<name>pieChart</name>.<name>getPlot</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>piePlot</name>.<name>setDataset</name></name><argument_list>(<argument><expr><name>piedataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>piePlot</name>.<name>setPieIndex</name></name><argument_list>(<argument><expr><name>pieIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line">// update the section colors to match the global colors...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>piedataset</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name><name>piedataset</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>p</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>aggregatedItemsKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>p</name> = <name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>p</name> = (<name>Paint</name>) <call><name><name>this</name>.<name>sectionPaints</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>piePlot</name>.<name>setSectionPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            
            <decl_stmt><decl><type><name>ChartRenderingInfo</name></type> <name>subinfo</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subinfo</name> = new <call><name>ChartRenderingInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>this</name>.<name>pieChart</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><name>subinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call>.<call><name>addAll</name><argument_list>(
                        <argument><expr><call><name><name>subinfo</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>info</name>.<name>addSubplotInfo</name></name><argument_list>(<argument><expr><call><name><name>subinfo</name>.<name>getPlotInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            
            <expr_stmt><expr>++<name>column</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>column</name> == <name>displayCols</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>column</name> = 0</expr>;</expr_stmt>
                <expr_stmt><expr>++<name>row</name></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>row</name> == <name>displayRows</name> - 1 &amp;&amp; <name>diff</name> != 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>xoffset</name> = (<name>diff</name> * <name>width</name>) / 2</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

    }</block></function>
    
    <comment type="javadoc">/**
     * For each key in the dataset, check the &lt;code&gt;sectionPaints&lt;/code&gt;
     * cache to see if a paint is associated with that key and, if not, 
     * fetch one from the drawing supplier.  These colors are cached so that
     * the legend and all the subplots use consistent colors.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>prefetchSectionPaints</name><parameter_list>()</parameter_list> <block>{
        
        <comment type="line">// pre-fetch the colors for each key...this is because the subplots</comment>
        <comment type="line">// may not display every key, but we need the coloring to be</comment>
        <comment type="line">// consistent...</comment>
        
        <decl_stmt><decl><type><name>PiePlot</name></type> <name>piePlot</name> =<init> <expr>(<name>PiePlot</name>) <call><name>getPieChart</name><argument_list>()</argument_list></call>.<call><name>getPlot</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
            <comment type="line">// column keys provide potential keys for individual pies</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>c</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <call><name><name>this</name>.<name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name><name>piePlot</name>.<name>getSectionPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>p</name> = (<name>Paint</name>) <call><name><name>this</name>.<name>sectionPaints</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>p</name> = <call><name>getDrawingSupplier</name><argument_list>()</argument_list></call>.<call><name>getNextPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>this</name>.<name>sectionPaints</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block>{
            <comment type="line">// row keys provide potential keys for individual pies            </comment>
            <for>for (<init><decl><type><name>int</name></type> <name>r</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>r</name> &lt; <call><name><name>this</name>.<name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>r</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name><name>piePlot</name>.<name>getSectionPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>p</name> = (<name>Paint</name>) <call><name><name>this</name>.<name>sectionPaints</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>p</name> == <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>p</name> = <call><name>getDrawingSupplier</name><argument_list>()</argument_list></call>.<call><name>getNextPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>this</name>.<name>sectionPaints</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a collection of legend items for the pie chart.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>List</name></type> <name>keys</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
      
            <expr_stmt><expr><call><name>prefetchSectionPaints</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>keys</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_COLUMN</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>keys</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

            <if>if <condition>(<expr><name>keys</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>section</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr>(<name>Paint</name>) <call><name><name>this</name>.<name>sectionPaints</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, 
                            <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name><name>Plot</name>.<name>DEFAULT_LEGEND_ITEM_CIRCLE</name></name></expr></argument>, 
                            <argument><expr><name>paint</name></expr></argument>, <argument><expr><name><name>Plot</name>.<name>DEFAULT_OUTLINE_STROKE</name></name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>item</name>.<name>setDataset</name></name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>section</name>++</expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>this</name>.<name>limit</name></name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>aggregatedItemsKey</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name><name>this</name>.<name>aggregatedItemsKey</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, 
                        <argument><expr><name><name>Plot</name>.<name>DEFAULT_LEGEND_ITEM_CIRCLE</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr></argument>,
                        <argument><expr><name><name>Plot</name>.<name>DEFAULT_OUTLINE_STROKE</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this plot for equality with an arbitrary object.  Note that the 
     * plot's dataset is not considered in the equality test.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return &lt;code&gt;true&lt;/code&gt; if this plot is equal to &lt;code&gt;obj&lt;/code&gt;, and
     *     &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>MultiplePiePlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>MultiplePiePlot</name></type> <name>that</name> =<init> <expr>(<name>MultiplePiePlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> != <name><name>that</name>.<name>dataExtractOrder</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>limit</name></name> != <name><name>that</name>.<name>limit</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>aggregatedItemsKey</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>aggregatedItemsKey</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>aggregatedItemsPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>pieChart</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>pieChart</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>aggregatedItemsPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionPaints</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    
}</block></class>
</unit>
