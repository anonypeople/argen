<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PieLabelDistributor.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------------------
 * PieLabelDistributor.java
 * ------------------------
 * (C) Copyright 2004-2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 08-Mar-2004 : Version 1 (DG);
 * 18-Apr-2005 : Use StringBuffer (DG);
 * 14-Jun-2007 : Now extends AbstractPieLabelDistributor (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>

<comment type="javadoc">/**
 * This class distributes the section labels for one side of a pie chart so 
 * that they do not overlap.
 */</comment>
<class><specifier>public</specifier> class <name>PieLabelDistributor</name> <super><extends>extends <name>AbstractPieLabelDistributor</name></extends></super> <block>{
        
    <comment type="javadoc">/** The minimum gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minGap</name> =<init> <expr>4.0</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new distributor.
     * 
     * @param labelCount  the number of labels (ignored).
     */</comment>
    <constructor><specifier>public</specifier> <name>PieLabelDistributor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>labelCount</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Distributes the labels.
     * 
     * @param minY  the minimum y-coordinate in Java2D-space.
     * @param height  the available height (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>distributeLabels</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minY</name></decl></param>, <param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// sorts the label records into ascending order by baseY</comment>
        <if>if <condition>(<expr><call><name>isOverlap</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>adjustInwards</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// if still overlapping, do something else...</comment>
        <if>if <condition>(<expr><call><name>isOverlap</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>adjustDownwards</name><argument_list>(<argument><expr><name>minY</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><call><name>isOverlap</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ 
            <expr_stmt><expr><call><name>adjustUpwards</name><argument_list>(<argument><expr><name>minY</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><call><name>isOverlap</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{  
            <expr_stmt><expr><call><name>spreadEvenly</name><argument_list>(<argument><expr><name>minY</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if there are overlapping labels in the list, 
     * and &lt;code&gt;false&lt;/code&gt; otherwise.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isOverlap</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>plr</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>y</name> &gt; <call><name><name>plr</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>y</name> = <call><name><name>plr</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adjusts the y-coordinate for the labels in towards the center in an 
     * attempt to fix overlapping.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>adjustInwards</name><parameter_list>()</parameter_list> <block>{   
        <decl_stmt><decl><type><name>int</name></type> <name>lower</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>upper</name> =<init> <expr><call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>upper</name> &gt; <name>lower</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>lower</name> &lt; <name>upper</name> - 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>r0</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>lower</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>r1</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>lower</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                <if>if <condition>(<expr><call><name><name>r1</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>r0</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>adjust</name> =<init> <expr><call><name><name>r0</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call> - <call><name><name>r1</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call> 
                                    + <name><name>this</name>.<name>minGap</name></name></expr></init></decl>;</decl_stmt>  
                    <expr_stmt><expr><call><name><name>r1</name>.<name>setAllocatedY</name></name><argument_list>(<argument><expr><call><name><name>r1</name>.<name>getAllocatedY</name></name><argument_list>()</argument_list></call> + <name>adjust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
                }</block></then></if>
            }</block></then></if>
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>r2</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>upper</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>r3</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>upper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
            <if>if <condition>(<expr><call><name><name>r2</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>r3</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>adjust</name> =<init> <expr>(<call><name><name>r2</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call> - <call><name><name>r3</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call>) + <name><name>this</name>.<name>minGap</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>r3</name>.<name>setAllocatedY</name></name><argument_list>(<argument><expr><call><name><name>r3</name>.<name>getAllocatedY</name></name><argument_list>()</argument_list></call> + <name>adjust</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>                
            <expr_stmt><expr><name>lower</name>++</expr>;</expr_stmt> 
            <expr_stmt><expr><name>upper</name>--</expr>;</expr_stmt>
        }</block></while>
    }</block></function>
    
    <comment type="javadoc">/**
     * Any labels that are overlapping are moved down in an attempt to 
     * eliminate the overlaps.
     * 
     * @param minY  the minimum y value (in Java2D coordinate space).
     * @param height  the height available for all labels.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>adjustDownwards</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minY</name></decl></param>, <param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>record0</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>record1</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>record1</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call> &lt; <call><name><name>record0</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>record1</name>.<name>setAllocatedY</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>minY</name> + <name>height</name></expr></argument>, 
                        <argument><expr><call><name><name>record0</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>minGap</name></name> 
                        + <call><name><name>record1</name>.<name>getLabelHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></for>        
    }</block></function>

    <comment type="javadoc">/**
     * Any labels that are overlapping are moved up in an attempt to eliminate 
     * the overlaps.
     * 
     * @param minY  the minimum y value (in Java2D coordinate space).
     * @param height  the height available for all labels.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>adjustUpwards</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minY</name></decl></param>, <param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>record0</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>record1</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>record1</name>.<name>getUpperY</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>record0</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>record1</name>.<name>setAllocatedY</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>minY</name></expr></argument>, <argument><expr><call><name><name>record0</name>.<name>getLowerY</name></name><argument_list>()</argument_list></call> 
                        - <name><name>this</name>.<name>minGap</name></name> - <call><name><name>record1</name>.<name>getLabelHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>        
    }</block></function>

    <comment type="javadoc">/**
     * Labels are spaced evenly in the available space in an attempt to 
     * eliminate the overlaps.
     * 
     * @param minY  the minimum y value (in Java2D coordinate space).
     * @param height  the height available for all labels.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>spreadEvenly</name><parameter_list>(<param><decl><type><name>double</name></type> <name>minY</name></decl></param>, <param><decl><type><name>double</name></type> <name>height</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><name>minY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>sumOfLabelHeights</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>sumOfLabelHeights</name> += <call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>getLabelHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>double</name></type> <name>gap</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>height</name> - <name>sumOfLabelHeights</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>gap</name> = <name>gap</name> / (<call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call> - 1)</expr>;</expr_stmt>   
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>record</name> =<init> <expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>y</name> = <name>y</name> + <call><name><name>record</name>.<name>getLabelHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>record</name>.<name>setAllocatedY</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name> = <name>y</name> + <call><name><name>record</name>.<name>getLabelHeight</name></name><argument_list>()</argument_list></call> / 2.0 + <name>gap</name></expr>;</expr_stmt>
        }</block></for>        
    }</block></function>
        
    <comment type="javadoc">/**
     * Sorts the label records into ascending order by y-value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>sort</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Collections</name>.<name>sort</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string containing a description of the object for 
     * debugging purposes.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuffer</name></type> <name>result</name> =<init> <expr>new <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labels</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr><call><name>getPieLabelRecord</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>append</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <return>return <expr><call><name><name>result</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
}</block></class>
</unit>
