<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PieLabelRecord.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------------
 * PieLabelRecord.java
 * -------------------
 * (C) Copyright 2004, 2007, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 08-Mar-2004 : Version 1 (DG);
 * 14-Jun-2007 : Implemented Serializable, updated API docs (DG);
 * 21-Nov-2007 : Implemented equals() to shut up FindBugs (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBox</name></name>;</import>

<comment type="javadoc">/**
 * A structure that retains information about the label for a section in a pie 
 * chart.
 */</comment>
<class><specifier>public</specifier> class <name>PieLabelRecord</name> <super><implements>implements <name>Comparable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** The section key. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Comparable</name></type> <name>key</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The angle of the centre of the section (in radians). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>angle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The base y-coordinate. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>baseY</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The allocated y-coordinate. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>allocatedY</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The label. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TextBox</name></type> <name>label</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label height. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>labelHeight</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The gap. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>gap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The link percent. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>linkPercent</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new record.
     * 
     * @param key  the section key.
     * @param angle  the angle to the middle of the section (in radians).
     * @param baseY  the base y-coordinate.
     * @param label  the section label.
     * @param labelHeight  the label height (in Java2D units).
     * @param gap  the offset to the left.
     * @param linkPercent  the link percent.
     */</comment>
    <constructor><specifier>public</specifier> <name>PieLabelRecord</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>double</name></type> <name>baseY</name></decl></param>, 
                          <param><decl><type><name>TextBox</name></type> <name>label</name></decl></param>, <param><decl><type><name>double</name></type> <name>labelHeight</name></decl></param>, <param><decl><type><name>double</name></type> <name>gap</name></decl></param>, 
                          <param><decl><type><name>double</name></type> <name>linkPercent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseY</name></name> = <name>baseY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>allocatedY</name></name> = <name>baseY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelHeight</name></name> = <name>labelHeight</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>gap</name></name> = <name>gap</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>linkPercent</name></name> = <name>linkPercent</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the base y-coordinate.  This is where the label will appear if 
     * there is no overlapping of labels.
     * 
     * @return The base y-coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getBaseY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseY</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base y-coordinate.
     * 
     * @param base  the base y-coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>base</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>baseY</name></name> = <name>base</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the lower bound of the label.
     * 
     * @return The lower bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>allocatedY</name></name> - <name><name>this</name>.<name>labelHeight</name></name> / 2.0</expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the upper bound of the label.
     * 
     * @return The upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>allocatedY</name></name> + <name><name>this</name>.<name>labelHeight</name></name> / 2.0</expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the angle of the middle of the section, in radians.
     * 
     * @return The angle, in radians.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angle</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the key for the section that the label applies to.
     * 
     * @return The key.
     */</comment>
    <function><type><specifier>public</specifier> <name>Comparable</name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>key</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label.
     * 
     * @return The label.
     */</comment>
    <function><type><specifier>public</specifier> <name>TextBox</name></type> <name>getLabel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>label</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label height (you could derive this from the label itself,
     * but we cache the value so it can be retrieved quickly).
     * 
     * @return The label height (in Java2D units).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLabelHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelHeight</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the allocated y-coordinate.
     * 
     * @return The allocated y-coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAllocatedY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>allocatedY</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the allocated y-coordinate.
     * 
     * @param y  the y-coordinate.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAllocatedY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>allocatedY</name></name> = <name>y</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the gap.
     * 
     * @return The gap.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gap</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the link percent.
     * 
     * @return The link percent.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLinkPercent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>linkPercent</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Compares this object to an arbitrary object.
     * 
     * @param obj  the object to compare against.
     * 
     * @return An integer that specifies the relative order of the two objects.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>compareTo</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>obj</name> <name>instanceof</name> <name>PieLabelRecord</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>plr</name> =<init> <expr>(<name>PieLabelRecord</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>this</name>.<name>baseY</name></name> &lt; <name><name>plr</name>.<name>baseY</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = -1</expr>;</expr_stmt>   
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>baseY</name></name> &gt; <name><name>plr</name>.<name>baseY</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = 1</expr>;</expr_stmt>   
            }</block></then></if></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this record for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PieLabelRecord</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PieLabelRecord</name></type> <name>that</name> =<init> <expr>(<name>PieLabelRecord</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>key</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>angle</name></name> != <name><name>that</name>.<name>angle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gap</name></name> != <name><name>that</name>.<name>gap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>allocatedY</name></name> != <name><name>that</name>.<name>allocatedY</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>baseY</name></name> != <name><name>that</name>.<name>baseY</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelHeight</name></name> != <name><name>that</name>.<name>labelHeight</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>linkPercent</name></name> != <name><name>that</name>.<name>linkPercent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>label</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>label</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a string describing the object.  This is used for debugging only.
     * 
     * @return A string.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseY</name></name> + ", " + <call><name><name>this</name>.<name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>   
    }</block></function>
}</block></class>
</unit>
