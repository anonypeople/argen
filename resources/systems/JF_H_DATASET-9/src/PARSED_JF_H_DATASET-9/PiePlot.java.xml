<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PiePlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ------------
 * PiePlot.java
 * ------------
 * (C) Copyright 2000-2007, by Andrzej Porebski and Contributors.
 *
 * Original Author:  Andrzej Porebski;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Martin Cordova (percentages in labels);
 *                   Richard Atkinson (URL support for image maps);
 *                   Christian W. Zuckschwerdt;
 *                   Arnaud Lelievre;
 *                   Andreas Schroeder (very minor);
 *
 * Changes
 * -------
 * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG);
 * 18-Sep-2001 : Updated header (DG);
 * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG);
 * 19-Oct-2001 : Moved series paint and stroke methods from JFreeChart.java to 
 *               Plot.java (DG);
 * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);
 * 13-Nov-2001 : Modified plot subclasses so that null axes are possible for 
 *               pie plot (DG);
 * 17-Nov-2001 : Added PieDataset interface and amended this class accordingly,
 *               and completed removal of BlankAxis class as it is no longer 
 *               required (DG);
 * 19-Nov-2001 : Changed 'drawCircle' property to 'circular' property (DG);
 * 21-Nov-2001 : Added options for exploding pie sections and filled out range 
 *               of properties (DG);
 *               Added option for percentages in chart labels, based on code
 *               by Martin Cordova (DG);
 * 30-Nov-2001 : Changed default font from "Arial" --&gt; "SansSerif" (DG);
 * 12-Dec-2001 : Removed unnecessary 'throws' clause in constructor (DG);
 * 13-Dec-2001 : Added tooltips (DG);
 * 16-Jan-2002 : Renamed tooltips class (DG);
 * 22-Jan-2002 : Fixed bug correlating legend labels with pie data (DG);
 * 05-Feb-2002 : Added alpha-transparency to plot class, and updated 
 *               constructors accordingly (DG);
 * 06-Feb-2002 : Added optional background image and alpha-transparency to Plot
 *               and subclasses.  Clipped drawing within plot area (DG);
 * 26-Mar-2002 : Added an empty zoom method (DG);
 * 18-Apr-2002 : PieDataset is no longer sorted (oldman);
 * 23-Apr-2002 : Moved dataset from JFreeChart to Plot.  Added 
 *               getLegendItemLabels() method (DG);
 * 19-Jun-2002 : Added attributes to control starting angle and direction 
 *               (default is now clockwise) (DG);
 * 25-Jun-2002 : Removed redundant imports (DG);
 * 02-Jul-2002 : Fixed sign of percentage bug introduced in 0.9.2 (DG);
 * 16-Jul-2002 : Added check for null dataset in getLegendItemLabels() (DG);
 * 30-Jul-2002 : Moved summation code to DatasetUtilities (DG);
 * 05-Aug-2002 : Added URL support for image maps - new member variable for
 *               urlGenerator, modified constructor and minor change to the 
 *               draw method (RA);
 * 18-Sep-2002 : Modified the percent label creation and added setters for the
 *               formatters (AS);
 * 24-Sep-2002 : Added getLegendItems() method (DG);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 09-Oct-2002 : Added check for null entity collection (DG);
 * 30-Oct-2002 : Changed PieDataset interface (DG);
 * 18-Nov-2002 : Changed CategoryDataset to TableDataset (DG);
 * 02-Jan-2003 : Fixed "no data" message (DG);
 * 23-Jan-2003 : Modified to extract data from rows OR columns in 
 *               CategoryDataset (DG);
 * 14-Feb-2003 : Fixed label drawing so that foreground alpha does not apply 
 *               (bug id 685536) (DG);
 * 07-Mar-2003 : Modified to pass pieIndex on to PieSectionEntity and tooltip 
 *               and URL generators (DG);
 * 21-Mar-2003 : Added a minimum angle for drawing arcs 
 *               (see bug id 620031) (DG);
 * 24-Apr-2003 : Switched around PieDataset and KeyedValuesDataset (DG);
 * 02-Jun-2003 : Fixed bug 721733 (DG);
 * 30-Jul-2003 : Modified entity constructor (CZ);
 * 19-Aug-2003 : Implemented Cloneable (DG);
 * 29-Aug-2003 : Fixed bug 796936 (null pointer on setOutlinePaint()) (DG);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 29-Oct-2003 : Added workaround for font alignment in PDF output (DG);
 * 05-Nov-2003 : Fixed missing legend bug (DG);
 * 10-Nov-2003 : Re-added the DatasetChangeListener to constructors (CZ);
 * 29-Jan-2004 : Fixed clipping bug in draw() method (DG);
 * 11-Mar-2004 : Major overhaul to improve labelling (DG);
 * 31-Mar-2004 : Made an adjustment for the plot area when the label generator 
 *               is null.  Fixed null pointer exception when the label 
 *               generator returns null for a label (DG);
 * 06-Apr-2004 : Added getter, setter, serialization and draw support for 
 *               labelBackgroundPaint (AS);
 * 08-Apr-2004 : Added flag to control whether null values are ignored or 
 *               not (DG);
 * 15-Apr-2004 : Fixed some minor warnings from Eclipse (DG);
 * 26-Apr-2004 : Added attributes for label outline and shadow (DG);
 * 04-Oct-2004 : Renamed ShapeUtils --&gt; ShapeUtilities (DG);
 * 04-Nov-2004 : Fixed null pointer exception with new LegendTitle class (DG);
 * 09-Nov-2004 : Added user definable legend item shape (DG);
 * 25-Nov-2004 : Added new legend label generator (DG);
 * 20-Apr-2005 : Added a tool tip generator for legend labels (DG);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 10-May-2005 : Added flag to control visibility of label linking lines, plus
 *               another flag to control the handling of zero values (DG);
 * 08-Jun-2005 : Fixed bug in getLegendItems() method (not respecting flags
 *               for ignoring null and zero values), and fixed equals() method 
 *               to handle GradientPaint (DG);
 * 15-Jul-2005 : Added sectionOutlinesVisible attribute (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 09-Jan-2006 : Fixed bug 1400442, inconsistent treatment of null and zero
 *               values in dataset (DG);
 * 28-Feb-2006 : Fixed bug 1440415, bad distribution of pie section 
 *               labels (DG);
 * 27-Sep-2006 : Initialised baseSectionPaint correctly, added lookup methods
 *               for section paint, outline paint and outline stroke (DG);
 * 27-Sep-2006 : Refactored paint and stroke methods to use keys rather than
 *               section indices (DG);
 * 03-Oct-2006 : Replaced call to JRE 1.5 method (DG);
 * 23-Nov-2006 : Added support for URLs for the legend items (DG);
 * 24-Nov-2006 : Cloning fixes (DG);
 * 17-Apr-2007 : Check for null label in legend items (DG);
 * 19-Apr-2007 : Deprecated override settings (DG);
 * 18-May-2007 : Set dataset for LegendItem (DG);
 * 14-Jun-2007 : Added label distributor attribute (DG);
 * 18-Jul-2007 : Added simple label option (DG);
 * 21-Nov-2007 : Fixed labelling bugs, added debug code, restored default
 *               white background (DG); 
 *    
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>PaintMap</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>StrokeMap</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>PieSectionEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>PieSectionLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>PieToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>StandardPieSectionLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>PieURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>DefaultKeyedValues</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>KeyedValues</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>G2TextMeasurer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBlock</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextBox</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>Rotation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>UnitType</name></name>;</import>

<comment type="javadoc">/**
 * A plot that displays data in the form of a pie chart, using data from any 
 * class that implements the {@link PieDataset} interface.
 * &lt;P&gt;
 * Special notes:
 * &lt;ol&gt;
 * &lt;li&gt;the default starting point is 12 o'clock and the pie sections proceed
 * in a clockwise direction, but these settings can be changed;&lt;/li&gt;
 * &lt;li&gt;negative values in the dataset are ignored;&lt;/li&gt;
 * &lt;li&gt;there are utility methods for creating a {@link PieDataset} from a
 * {@link org.jfree.data.category.CategoryDataset};&lt;/li&gt;
 * &lt;/ol&gt;
 *
 * @see Plot
 * @see PieDataset
 */</comment>
<class><specifier>public</specifier> class <name>PiePlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-795612466005590431L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default interior gap. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_INTERIOR_GAP</name> =<init> <expr>0.08</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum interior gap (currently 40%). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MAX_INTERIOR_GAP</name> =<init> <expr>0.40</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default starting angle for the pie chart. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_START_ANGLE</name> =<init> <expr>90.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default section label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_LABEL_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, 
            <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default section label paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_LABEL_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default section label background paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_LABEL_BACKGROUND_PAINT</name> =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>255</expr></argument>, 
            <argument><expr>255</expr></argument>, <argument><expr>192</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default section label outline paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_LABEL_OUTLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default section label outline stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_LABEL_OUTLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(
            <argument><expr>0.5f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default section label shadow paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_LABEL_SHADOW_PAINT</name> =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>151</expr></argument>, <argument><expr>151</expr></argument>, 
            <argument><expr>151</expr></argument>, <argument><expr>128</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default minimum arc angle to draw. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW</name> =<init> <expr>0.00001</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset for the pie chart. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The pie index (used by the {@link MultiplePiePlot} class). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>pieIndex</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The amount of space left around the outside of the pie plot, expressed 
     * as a percentage of the plot area width and height. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>interiorGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Flag determining whether to draw an ellipse or a perfect circle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>circular</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The starting angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startAngle</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The direction for the pie segments. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rotation</name></type> <name>direction</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint for ALL sections (overrides list).
     * 
     * @deprecated This field is redundant, it is sufficient to use 
     *     sectionPaintMap and baseSectionPaint.  Deprecated as of version 
     *     1.0.6.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>sectionPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The section paint map. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PaintMap</name></type> <name>sectionPaintMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base section paint (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>baseSectionPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not an outline is drawn for each
     * section in the plot.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>sectionOutlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The outline paint for ALL sections (overrides list). 
     * 
     * @deprecated This field is redundant, it is sufficient to use 
     *     sectionOutlinePaintMap and baseSectionOutlinePaint.  Deprecated as 
     *     of version 1.0.6.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>sectionOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The section outline paint map. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PaintMap</name></type> <name>sectionOutlinePaintMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base section outline paint (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>baseSectionOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The outline stroke for ALL sections (overrides list). 
     * 
     * @deprecated This field is redundant, it is sufficient to use 
     *     sectionOutlineStrokeMap and baseSectionOutlineStroke.  Deprecated as 
     *     of version 1.0.6.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>sectionOutlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The section outline stroke map. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StrokeMap</name></type> <name>sectionOutlineStrokeMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base section outline stroke (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>baseSectionOutlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The shadow paint. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>shadowPaint</name> =<init> <expr><name><name>Color</name>.<name>gray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The x-offset for the shadow effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>shadowXOffset</name> =<init> <expr>4.0f</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The y-offset for the shadow effect. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>shadowYOffset</name> =<init> <expr>4.0f</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The percentage amount to explode each pie section. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>explodePercentages</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The section label generator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieSectionLabelGenerator</name></type> <name>labelGenerator</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font used to display the section labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>labelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to draw the section labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The color used to draw the background of the section labels.  If this
     * is &lt;code&gt;null&lt;/code&gt;, the background is not filled.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelBackgroundPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint used to draw the outline of the section labels 
     * (&lt;code&gt;null&lt;/code&gt; permitted). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelOutlinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The stroke used to draw the outline of the section labels 
     * (&lt;code&gt;null&lt;/code&gt; permitted). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>labelOutlineStroke</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The paint used to draw the shadow for the section labels 
     * (&lt;code&gt;null&lt;/code&gt; permitted). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelShadowPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that controls whether simple or extended labels are used.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>simpleLabels</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The padding between the labels and the label outlines.  This is not
     * allowed to be &lt;code&gt;null&lt;/code&gt;.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>labelPadding</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The simple label offset.
     * 
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>simpleLabelOffset</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The maximum label width as a percentage of the plot width. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maximumLabelWidth</name> =<init> <expr>0.14</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The gap between the labels and the link corner, as a percentage of the 
     * plot width. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>labelGap</name> =<init> <expr>0.025</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not the label links are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>labelLinksVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The link margin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>labelLinkMargin</name> =<init> <expr>0.025</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used for the label linking lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelLinkPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The stroke used for the label linking lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>labelLinkStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The pie section label distributor.
     * 
     * @since 1.0.6
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AbstractPieLabelDistributor</name></type> <name>labelDistributor</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The tooltip generator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieToolTipGenerator</name></type> <name>toolTipGenerator</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The URL generator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieURLGenerator</name></type> <name>urlGenerator</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The legend label generator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieSectionLabelGenerator</name></type> <name>legendLabelGenerator</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A tool tip generator for the legend. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieSectionLabelGenerator</name></type> <name>legendLabelToolTipGenerator</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A URL generator for the legend items (optional).  
     *
     * @since 1.0.4. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PieURLGenerator</name></type> <name>legendLabelURLGenerator</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether &lt;code&gt;null&lt;/code&gt; values are ignored.  
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreNullValues</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * A flag that controls whether zero values are ignored.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>ignoreZeroValues</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The legend item shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendItemShape</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The smallest arc angle that will get drawn (this is to avoid a bug in 
     * various Java implementations that causes the JVM to crash).  See this 
     * link for details:
     *
     * http://www.jfree.org/phpBB2/viewtopic.php?t=2707
     *
     * ...and this bug report in the Java Bug Parade:
     *
     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>minimumArcAngleToDraw</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> =<init>
            <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * This debug flag controls whether or not an outline is drawn showing the 
     * interior of the plot region.  This is drawn as a lightGray rectangle 
     * showing the padding provided by the 'interiorGap' setting.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG_DRAW_INTERIOR</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * This debug flag controls whether or not an outline is drawn showing the 
     * link area (in blue) and link ellipse (in yellow).  This controls where 
     * the label links have 'elbow' points.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG_DRAW_LINK_AREA</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * This debug flag controls whether or not an outline is drawn showing
     * the pie area (in green).
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEBUG_DRAW_PIE_AREA</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Creates a new plot.  The dataset is initially set to &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <constructor><specifier>public</specifier> <name>PiePlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a plot that will draw a pie chart for the specified dataset.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PiePlot</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>pieIndex</name></name> = 0</expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>interiorGap</name></name> = <name>DEFAULT_INTERIOR_GAP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>circular</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>DEFAULT_START_ANGLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>direction</name></name> = <name><name>Rotation</name>.<name>CLOCKWISE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>minimumArcAngleToDraw</name></name> = <name>DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>sectionPaint</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionPaintMap</name></name> = new <call><name>PaintMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionPaint</name></name> = <name><name>Color</name>.<name>gray</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinePaint</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinePaintMap</name></name> = new <call><name>PaintMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name> = <name>DEFAULT_OUTLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlineStroke</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlineStrokeMap</name></name> = new <call><name>StrokeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name> = <name>DEFAULT_OUTLINE_STROKE</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>explodePercentages</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>labelGenerator</name></name> = new <call><name>StandardPieSectionLabelGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>DEFAULT_LABEL_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>DEFAULT_LABEL_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name> = <name>DEFAULT_LABEL_BACKGROUND_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlinePaint</name></name> = <name>DEFAULT_LABEL_OUTLINE_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlineStroke</name></name> = <name>DEFAULT_LABEL_OUTLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelShadowPaint</name></name> = <name>DEFAULT_LABEL_SHADOW_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelLinksVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelDistributor</name></name> = new <call><name>PieLabelDistributor</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>simpleLabels</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>simpleLabelOffset</name></name> = new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name><name>UnitType</name>.<name>RELATIVE</name></name></expr></argument>, <argument><expr>0.18</expr></argument>, 
                <argument><expr>0.18</expr></argument>, <argument><expr>0.18</expr></argument>, <argument><expr>0.18</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPadding</name></name> = new <call><name>RectangleInsets</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>toolTipGenerator</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>urlGenerator</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelGenerator</name></name> = new <call><name>StandardPieSectionLabelGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <name><name>Plot</name>.<name>DEFAULT_LEGEND_ITEM_CIRCLE</name></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>ignoreNullValues</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>ignoreZeroValues</name></name> = false</expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the dataset.
     *
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(PieDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the dataset and sends a {@link DatasetChangeEvent} to 'this'.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <decl_stmt><decl><type><name>PieDataset</name></type> <name>existing</name> =<init> <expr><name><name>this</name>.<name>dataset</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the pie index (this is used by the {@link MultiplePiePlot} class
     * to track subplots).
     * 
     * @return The pie index.
     * 
     * @see #setPieIndex(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPieIndex</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieIndex</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the pie index (this is used by the {@link MultiplePiePlot} class to 
     * track subplots).
     * 
     * @param index  the index.
     * 
     * @see #getPieIndex()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieIndex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pieIndex</name></name> = <name>index</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the start angle for the first pie section.  This is measured in 
     * degrees starting from 3 o'clock and measuring anti-clockwise.
     *
     * @return The start angle.
     * 
     * @see #setStartAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startAngle</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the starting angle and sends a {@link PlotChangeEvent} to all 
     * registered listeners.  The initial default value is 90 degrees, which 
     * corresponds to 12 o'clock.  A value of zero corresponds to 3 o'clock...
     * this is the encoding used by Java's Arc2D class.
     *
     * @param angle  the angle (in degrees).
     * 
     * @see #getStartAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the direction in which the pie sections are drawn (clockwise or 
     * anti-clockwise).
     *
     * @return The direction (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDirection(Rotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rotation</name></type> <name>getDirection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>direction</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the direction in which the pie sections are drawn and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param direction  the direction (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDirection()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirection</name><parameter_list>(<param><decl><type><name>Rotation</name></type> <name>direction</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>direction</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'direction' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>direction</name></name> = <name>direction</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the interior gap, measured as a percentage of the available 
     * drawing space.
     *
     * @return The gap (as a percentage of the available drawing space).
     * 
     * @see #setInteriorGap(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getInteriorGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>interiorGap</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the interior gap and sends a {@link PlotChangeEvent} to all 
     * registered listeners.  This controls the space between the edges of the 
     * pie plot and the plot area itself (the region where the section labels 
     * appear).
     *
     * @param percent  the gap (as a percentage of the available drawing space).
     * 
     * @see #getInteriorGap()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInteriorGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>percent</name> &lt; 0.0) || (<name>percent</name> &gt; <name>MAX_INTERIOR_GAP</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                <argument><expr>"Invalid 'percent' (" + <name>percent</name> + ") argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>this</name>.<name>interiorGap</name></name> != <name>percent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>interiorGap</name></name> = <name>percent</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether the pie chart is circular, or
     * stretched into an elliptical shape.
     *
     * @return A flag indicating whether the pie chart is circular.
     * 
     * @see #setCircular(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isCircular</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>circular</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A flag indicating whether the pie chart is circular, or stretched into
     * an elliptical shape.
     *
     * @param flag  the new value.
     * 
     * @see #isCircular()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCircular</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setCircular</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the circular attribute and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param circular  the new value of the flag.
     * @param notify  notify listeners?
     * 
     * @see #isCircular()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setCircular</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>circular</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>circular</name></name> = <name>circular</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether &lt;code&gt;null&lt;/code&gt; values in the 
     * dataset are ignored.  
     * 
     * @return A boolean.
     * 
     * @see #setIgnoreNullValues(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIgnoreNullValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ignoreNullValues</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that controls whether &lt;code&gt;null&lt;/code&gt; values are ignored, 
     * and sends a {@link PlotChangeEvent} to all registered listeners.  At 
     * present, this only affects whether or not the key is presented in the 
     * legend.
     * 
     * @param flag  the flag.
     * 
     * @see #getIgnoreNullValues()
     * @see #setIgnoreZeroValues(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreNullValues</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreNullValues</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether zero values in the 
     * dataset are ignored.  
     * 
     * @return A boolean.
     * 
     * @see #setIgnoreZeroValues(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getIgnoreZeroValues</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>ignoreZeroValues</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a flag that controls whether zero values are ignored, 
     * and sends a {@link PlotChangeEvent} to all registered listeners.  This 
     * only affects whether or not a label appears for the non-visible
     * pie section.
     * 
     * @param flag  the flag.
     * 
     * @see #getIgnoreZeroValues()
     * @see #setIgnoreNullValues(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setIgnoreZeroValues</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>ignoreZeroValues</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//// SECTION PAINT ////////////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the paint for the specified section.  This is equivalent to
     * &lt;code&gt;lookupSectionPaint(section, false)&lt;/code&gt;.
     * 
     * @param key  the section key.
     * 
     * @return The paint for the specified section.
     * 
     * @since 1.0.3
     * 
     * @see #lookupSectionPaint(Comparable, boolean)
     */</comment>
    <function><type><specifier>protected</specifier> <name>Paint</name></type> <name>lookupSectionPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>lookupSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the specified section.  The lookup involves these
     * steps:
     * &lt;ul&gt;
     * &lt;li&gt;if {@link #getSectionPaint()} is non-&lt;code&gt;null&lt;/code&gt;, return 
     *         it;&lt;/li&gt;
     * &lt;li&gt;if {@link #getSectionPaint(int)} is non-&lt;code&gt;null&lt;/code&gt; return 
     *         it;&lt;/li&gt;
     * &lt;li&gt;if {@link #getSectionPaint(int)} is &lt;code&gt;null&lt;/code&gt; but 
     *         &lt;code&gt;autoPopulate&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, attempt to fetch
     *         a new paint from the drawing supplier 
     *         ({@link #getDrawingSupplier()});
     * &lt;li&gt;if all else fails, return {@link #getBaseSectionPaint()}.
     * &lt;/ul&gt; 
     * 
     * @param key  the section key.
     * @param autoPopulate  a flag that controls whether the drawing supplier 
     *     is used to auto-populate the section paint settings.
     *     
     * @return The paint.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>Paint</name></type> <name>lookupSectionPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>autoPopulate</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// is there an override?</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><call><name>getSectionPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// if not, check if there is a paint defined for the specified key</comment>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>sectionPaintMap</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// nothing defined - do we autoPopulate?</comment>
        <if>if <condition>(<expr><name>autoPopulate</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>ds</name> =<init> <expr><call><name>getDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ds</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>ds</name>.<name>getNextPaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>sectionPaintMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionPaint</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionPaint</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for ALL sections in the plot.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSectionPaint(Paint)
     * 
     * @deprecated Use {@link #getSectionPaint(Comparable)} and 
     *     {@link #getBaseSectionPaint()}.  Deprecated as of version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sectionPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for ALL sections in the plot.  If this is set to
     * &lt;/code&gt;null&lt;/code&gt;, then a list of paints is used instead (to allow
     * different colors to be used for each section).
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSectionPaint()
     * 
     * @deprecated Use {@link #setSectionPaint(Comparable, Paint)} and 
     *     {@link #setBaseSectionPaint(Paint)}.  Deprecated as of version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sectionPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a key for the specified section.  If there is no such section 
     * in the dataset, we generate a key.  This is to provide some backward
     * compatibility for the (now deprecated) methods that get/set attributes 
     * based on section indices.  The preferred way of doing this now is to
     * link the attributes directly to the section key (there are new methods
     * for this, starting from version 1.0.3).  
     * 
     * @param section  the section index.
     * 
     * @return The key.
     *
     * @since 1.0.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>Comparable</name></type> <name>getSectionKey</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>section</name> &gt;= 0 &amp;&amp; <name>section</name> &lt; <call><name><name>this</name>.<name>dataset</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>key</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>key</name> = new <call><name>Integer</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>key</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint associated with the specified key, or 
     * &lt;code&gt;null&lt;/code&gt; if there is no paint associated with the key.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The paint associated with the specified key, or 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * 
     * @see #setSectionPaint(Comparable, Paint)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <return>return <expr><call><name><name>this</name>.<name>sectionPaintMap</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint associated with the specified key, and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint  the paint.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @see #getSectionPaint(Comparable)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionPaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>sectionPaintMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the base section paint.  This is used when no other paint is 
     * defined, which is rare.  The default value is &lt;code&gt;Color.gray&lt;/code&gt;.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBaseSectionPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBaseSectionPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseSectionPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base section paint and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBaseSectionPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSectionPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//// SECTION OUTLINE PAINT ////////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the flag that controls whether or not the outline is drawn for
     * each pie section.
     * 
     * @return The flag that controls whether or not the outline is drawn for
     *         each pie section.
     *         
     * @see #setSectionOutlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSectionOutlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sectionOutlinesVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the outline is drawn for 
     * each pie section, and sends a {@link PlotChangeEvent} to all registered
     * listeners.
     * 
     * @param visible  the flag.
     * 
     * @see #getSectionOutlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the outline paint for the specified section.  This is equivalent 
     * to &lt;code&gt;lookupSectionPaint(section, false)&lt;/code&gt;.
     * 
     * @param key  the section key.
     * 
     * @return The paint for the specified section.
     * 
     * @since 1.0.3
     * 
     * @see #lookupSectionOutlinePaint(Comparable, boolean)
     */</comment>
    <function><type><specifier>protected</specifier> <name>Paint</name></type> <name>lookupSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>lookupSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline paint for the specified section.  The lookup 
     * involves these steps:
     * &lt;ul&gt;
     * &lt;li&gt;if {@link #getSectionOutlinePaint()} is non-&lt;code&gt;null&lt;/code&gt;, 
     *         return it;&lt;/li&gt;
     * &lt;li&gt;otherwise, if {@link #getSectionOutlinePaint(int)} is 
     *         non-&lt;code&gt;null&lt;/code&gt; return it;&lt;/li&gt;
     * &lt;li&gt;if {@link #getSectionOutlinePaint(int)} is &lt;code&gt;null&lt;/code&gt; but 
     *         &lt;code&gt;autoPopulate&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, attempt to fetch
     *         a new outline paint from the drawing supplier 
     *         ({@link #getDrawingSupplier()});
     * &lt;li&gt;if all else fails, return {@link #getBaseSectionOutlinePaint()}.
     * &lt;/ul&gt; 
     * 
     * @param key  the section key.
     * @param autoPopulate  a flag that controls whether the drawing supplier 
     *     is used to auto-populate the section outline paint settings.
     *     
     * @return The paint.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>Paint</name></type> <name>lookupSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>autoPopulate</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// is there an override?</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><call><name>getSectionOutlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// if not, check if there is a paint defined for the specified key</comment>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>sectionOutlinePaintMap</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// nothing defined - do we autoPopulate?</comment>
        <if>if <condition>(<expr><name>autoPopulate</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>ds</name> =<init> <expr><call><name>getDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ds</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>ds</name>.<name>getNextOutlinePaint</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>sectionOutlinePaintMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionOutlinePaint</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionOutlinePaint</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline paint for ALL sections in the plot.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSectionOutlinePaint(Paint)
     * 
     * @deprecated Use {@link #getSectionOutlinePaint(Comparable)} and 
     *     {@link #getBaseSectionOutlinePaint()}.  Deprecated as of version 
     *     1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sectionOutlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outline paint for ALL sections in the plot.  If this is set to
     * &lt;/code&gt;null&lt;/code&gt;, then a list of paints is used instead (to allow
     * different colors to be used for each section).
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSectionOutlinePaint()
     * 
     * @deprecated Use {@link #setSectionOutlinePaint(Comparable, Paint)} and 
     *     {@link #setBaseSectionOutlinePaint(Paint)}.  Deprecated as of 
     *     version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the outline paint associated with the specified key, or 
     * &lt;code&gt;null&lt;/code&gt; if there is no paint associated with the key.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The paint associated with the specified key, or 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * 
     * @see #setSectionOutlinePaint(Comparable, Paint)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <return>return <expr><call><name><name>this</name>.<name>sectionOutlinePaintMap</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the outline paint associated with the specified key, and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param paint  the paint.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @see #getSectionOutlinePaint(Comparable)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>sectionOutlinePaintMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the base section paint.  This is used when no other paint is 
     * available.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBaseSectionOutlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBaseSectionOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base section paint.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBaseSectionOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//// SECTION OUTLINE STROKE ///////////////////////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the outline stroke for the specified section.  This is 
     * equivalent to &lt;code&gt;lookupSectionOutlineStroke(section, false)&lt;/code&gt;.
     * 
     * @param key  the section key.
     * 
     * @return The stroke for the specified section.
     * 
     * @since 1.0.3
     * 
     * @see #lookupSectionOutlineStroke(Comparable, boolean)
     */</comment>
    <function><type><specifier>protected</specifier> <name>Stroke</name></type> <name>lookupSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>lookupSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline stroke for the specified section.  The lookup 
     * involves these steps:
     * &lt;ul&gt;
     * &lt;li&gt;if {@link #getSectionOutlineStroke()} is non-&lt;code&gt;null&lt;/code&gt;, 
     *         return it;&lt;/li&gt;
     * &lt;li&gt;otherwise, if {@link #getSectionOutlineStroke(int)} is 
     *         non-&lt;code&gt;null&lt;/code&gt; return it;&lt;/li&gt;
     * &lt;li&gt;if {@link #getSectionOutlineStroke(int)} is &lt;code&gt;null&lt;/code&gt; but 
     *         &lt;code&gt;autoPopulate&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, attempt to fetch
     *         a new outline stroke from the drawing supplier 
     *         ({@link #getDrawingSupplier()});
     * &lt;li&gt;if all else fails, return {@link #getBaseSectionOutlineStroke()}.
     * &lt;/ul&gt; 
     * 
     * @param key  the section key.
     * @param autoPopulate  a flag that controls whether the drawing supplier 
     *     is used to auto-populate the section outline stroke settings.
     *     
     * @return The stroke.
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>protected</specifier> <name>Stroke</name></type> <name>lookupSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>autoPopulate</name></decl></param>)</parameter_list> <block>{
        
        <comment type="line">// is there an override?</comment>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>result</name> =<init> <expr><call><name>getSectionOutlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// if not, check if there is a stroke defined for the specified key</comment>
        <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>sectionOutlineStrokeMap</name>.<name>getStroke</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        
        <comment type="line">// nothing defined - do we autoPopulate?</comment>
        <if>if <condition>(<expr><name>autoPopulate</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>ds</name> =<init> <expr><call><name>getDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ds</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>ds</name>.<name>getNextOutlineStroke</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>sectionOutlineStrokeMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionOutlineStroke</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSectionOutlineStroke</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the outline stroke for ALL sections in the plot.
     *
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSectionOutlineStroke(Stroke)
     * 
     * @deprecated Use {@link #getSectionOutlineStroke(Comparable)} and 
     *     {@link #getBaseSectionOutlineStroke()}.  Deprecated as of version 
     *     1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSectionOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sectionOutlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outline stroke for ALL sections in the plot.  If this is set to
     * &lt;/code&gt;null&lt;/code&gt;, then a list of paints is used instead (to allow
     * different colors to be used for each section).
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSectionOutlineStroke()
     * 
     * @deprecated Use {@link #setSectionOutlineStroke(Comparable, Stroke)} and 
     *     {@link #setBaseSectionOutlineStroke(Stroke)}.  Deprecated as of 
     *     version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the outline stroke associated with the specified key, or 
     * &lt;code&gt;null&lt;/code&gt; if there is no stroke associated with the key.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The stroke associated with the specified key, or 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * 
     * @see #setSectionOutlineStroke(Comparable, Stroke)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <return>return <expr><call><name><name>this</name>.<name>sectionOutlineStrokeMap</name>.<name>getStroke</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the outline stroke associated with the specified key, and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @see #getSectionOutlineStroke(Comparable)
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// null argument check delegated...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>sectionOutlineStrokeMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the base section stroke.  This is used when no other stroke is 
     * available.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBaseSectionOutlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getBaseSectionOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the base section stroke.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBaseSectionOutlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the shadow paint.
     * 
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setShadowPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getShadowPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shadowPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the shadow paint and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getShadowPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShadowPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shadowPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-offset for the shadow effect.
     * 
     * @return The offset (in Java2D units).
     * 
     * @see #setShadowXOffset(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getShadowXOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shadowXOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the x-offset for the shadow effect and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param offset  the offset (in Java2D units).
     * 
     * @see #getShadowXOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShadowXOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shadowXOffset</name></name> = <name>offset</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-offset for the shadow effect.
     * 
     * @return The offset (in Java2D units).
     * 
     * @see #setShadowYOffset(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getShadowYOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>shadowYOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-offset for the shadow effect and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param offset  the offset (in Java2D units).
     * 
     * @see #getShadowYOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShadowYOffset</name><parameter_list>(<param><decl><type><name>double</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>shadowYOffset</name></name> = <name>offset</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the amount that the section with the specified key should be
     * exploded.
     * 
     * @param key  the key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @return The amount that the section with the specified key should be
     *     exploded.
     * 
     * @throws IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *
     * @since 1.0.3
     * 
     * @see #setExplodePercent(Comparable, double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getExplodePercent</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>explodePercentages</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>percent</name> =<init> <expr>(<name>Number</name>) <call><name><name>this</name>.<name>explodePercentages</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>percent</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>percent</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the amount that a pie section should be exploded and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param key  the section key (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param percent  the explode percentage (0.30 = 30 percent).
     * 
     * @since 1.0.3
     * 
     * @see #getExplodePercent(Comparable)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExplodePercent</name><parameter_list>(<param><decl><type><name>Comparable</name></type> <name>key</name></decl></param>, <param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'key' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>explodePercentages</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>explodePercentages</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>explodePercentages</name>.<name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum explode percent.
     * 
     * @return The percent.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaximumExplodePercent</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getKeys</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>explode</name> =<init> <expr>(<name>Number</name>) <call><name><name>this</name>.<name>explodePercentages</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>explode</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>explode</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the section label generator. 
     * 
     * @return The generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelGenerator(PieSectionLabelGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieSectionLabelGenerator</name></type> <name>getLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelGenerator</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the section label generator and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabelGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelGenerator</name><parameter_list>(<param><decl><type><name>PieSectionLabelGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the gap between the edge of the pie and the labels, expressed as 
     * a percentage of the plot width.
     * 
     * @return The gap (a percentage, where 0.05 = five percent).
     * 
     * @see #setLabelGap(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLabelGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelGap</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the gap between the edge of the pie and the labels (expressed as a 
     * percentage of the plot width) and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param gap  the gap (a percentage, where 0.05 = five percent).
     * 
     * @see #getLabelGap()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>gap</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelGap</name></name> = <name>gap</name></expr>;</expr_stmt>   
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the maximum label width as a percentage of the plot width.
     * 
     * @return The width (a percentage, where 0.20 = 20 percent).
     * 
     * @see #setMaximumLabelWidth(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaximumLabelWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maximumLabelWidth</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the maximum label width as a percentage of the plot width and sends
     * a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param width  the width (a percentage, where 0.20 = 20 percent).
     * 
     * @see #getMaximumLabelWidth()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaximumLabelWidth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>width</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maximumLabelWidth</name></name> = <name>width</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the flag that controls whether or not label linking lines are
     * visible.
     * 
     * @return A boolean.
     * 
     * @see #setLabelLinksVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getLabelLinksVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelLinksVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not label linking lines are 
     * visible and sends a {@link PlotChangeEvent} to all registered listeners.
     * Please take care when hiding the linking lines - depending on the data 
     * values, the labels can be displayed some distance away from the
     * corresponding pie section.
     * 
     * @param visible  the flag.
     * 
     * @see #getLabelLinksVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelLinksVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelLinksVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the margin (expressed as a percentage of the width or height) 
     * between the edge of the pie and the link point.
     * 
     * @return The link margin (as a percentage, where 0.05 is five percent).
     * 
     * @see #setLabelLinkMargin(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLabelLinkMargin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelLinkMargin</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the link margin and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param margin  the margin.
     * 
     * @see #getLabelLinkMargin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelLinkMargin</name><parameter_list>(<param><decl><type><name>double</name></type> <name>margin</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelLinkMargin</name></name> = <name>margin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used for the lines that connect pie sections to their 
     * corresponding labels.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelLinkPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelLinkPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelLinkPaint</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used for the lines that connect pie sections to their 
     * corresponding labels, and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelLinkPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelLinkPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelLinkPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used for the label linking lines.
     * 
     * @return The stroke.
     * 
     * @see #setLabelLinkStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getLabelLinkStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelLinkStroke</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the link stroke and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param stroke  the stroke.
     * 
     * @see #getLabelLinkStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelLinkStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelLinkStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the section label font.
     *
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label font and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the section label paint.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label paint and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the section label background paint.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelBackgroundPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelBackgroundPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label background paint and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabelBackgroundPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelBackgroundPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the section label outline paint.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelOutlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label outline paint and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabelOutlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the section label outline stroke.
     *
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelOutlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getLabelOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label outline stroke and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabelOutlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelOutlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the section label shadow paint.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelShadowPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelShadowPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the section label shadow paint and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLabelShadowPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelShadowPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>labelShadowPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the label padding.
     * 
     * @return The label padding (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.7
     * 
     * @see #setLabelPadding(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getLabelPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelPadding</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the padding between each label and its outline and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param padding  the padding (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.7
     * 
     * @see #getLabelPadding()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelPadding</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>padding</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>padding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'padding' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelPadding</name></name> = <name>padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether simple or extended labels are
     * displayed on the plot.
     * 
     * @return A boolean.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSimpleLabels</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>simpleLabels</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether simple or extended labels are 
     * displayed on the plot, and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param simple  the new flag value.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSimpleLabels</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>simple</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>simpleLabels</name></name> = <name>simple</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the offset used for the simple labels, if they are displayed.
     * 
     * @return The offset (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.7
     * 
     * @see #setSimpleLabelOffset(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getSimpleLabelOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>simpleLabelOffset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the offset for the simple labels and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param offset  the offset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.7
     * 
     * @see #getSimpleLabelOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSimpleLabelOffset</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>offset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'offset' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>simpleLabelOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the object responsible for the vertical layout of the pie 
     * section labels.
     * 
     * @return The label distributor (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>AbstractPieLabelDistributor</name></type> <name>getLabelDistributor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelDistributor</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the label distributor and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param distributor  the distributor (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @since 1.0.6
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelDistributor</name><parameter_list>(<param><decl><type><name>AbstractPieLabelDistributor</name></type> <name>distributor</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>distributor</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'distributor' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelDistributor</name></name> = <name>distributor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tool tip generator, an object that is responsible for 
     * generating the text items used for tool tips by the plot.  If the 
     * generator is &lt;code&gt;null&lt;/code&gt;, no tool tips will be created.
     *
     * @return The generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setToolTipGenerator(PieToolTipGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieToolTipGenerator</name></type> <name>getToolTipGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>toolTipGenerator</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the tool tip generator and sends a {@link PlotChangeEvent} to all 
     * registered listeners.  Set the generator to &lt;code&gt;null&lt;/code&gt; if you 
     * don't want any tool tips.
     *
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getToolTipGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToolTipGenerator</name><parameter_list>(<param><decl><type><name>PieToolTipGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toolTipGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the URL generator.
     *
     * @return The generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setURLGenerator(PieURLGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieURLGenerator</name></type> <name>getURLGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>urlGenerator</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the URL generator and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getURLGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURLGenerator</name><parameter_list>(<param><decl><type><name>PieURLGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>urlGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum arc angle that will be drawn.  Pie sections for an 
     * angle smaller than this are not drawn, to avoid a JDK bug.
     *
     * @return The minimum angle.
     * 
     * @see #setMinimumArcAngleToDraw(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMinimumArcAngleToDraw</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>minimumArcAngleToDraw</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the minimum arc angle that will be drawn.  Pie sections for an 
     * angle smaller than this are not drawn, to avoid a JDK bug.  See this 
     * link for details:
     * &lt;br&gt;&lt;br&gt;
     * &lt;a href="http://www.jfree.org/phpBB2/viewtopic.php?t=2707"&gt;
     * http://www.jfree.org/phpBB2/viewtopic.php?t=2707&lt;/a&gt;
     * &lt;br&gt;&lt;br&gt;
     * ...and this bug report in the Java Bug Parade:
     * &lt;br&gt;&lt;br&gt;
     * &lt;a href=
     * "http://developer.java.sun.com/developer/bugParade/bugs/4836495.html"&gt;
     * http://developer.java.sun.com/developer/bugParade/bugs/4836495.html&lt;/a&gt;
     *
     * @param angle  the minimum angle.
     * 
     * @see #getMinimumArcAngleToDraw()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMinimumArcAngleToDraw</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>minimumArcAngleToDraw</name></name> = <name>angle</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the shape used for legend items.
     * 
     * @return The shape (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendItemShape(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendItemShape</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendItemShape</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the shape used for legend items and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendItemShape()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendItemShape</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shape</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'shape' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <name>shape</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the legend label generator.
     * 
     * @return The legend label generator (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLabelGenerator(PieSectionLabelGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieSectionLabelGenerator</name></type> <name>getLegendLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLabelGenerator</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the legend label generator and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendLabelGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLabelGenerator</name><parameter_list>(<param><decl><type><name>PieSectionLabelGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>generator</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'generator' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the legend label tool tip generator.
     * 
     * @return The legend label tool tip generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLabelToolTipGenerator(PieSectionLabelGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>PieSectionLabelGenerator</name></type> <name>getLegendLabelToolTipGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the legend label tool tip generator and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLegendLabelToolTipGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLabelToolTipGenerator</name><parameter_list>(
            <param><decl><type><name>PieSectionLabelGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the legend label URL generator.
     * 
     * @return The legend label URL generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendLabelURLGenerator(PieURLGenerator)
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>PieURLGenerator</name></type> <name>getLegendLabelURLGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the legend label URL generator and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getLegendLabelURLGenerator()
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendLabelURLGenerator</name><parameter_list>(<param><decl><type><name>PieURLGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Initialises the drawing procedure.  This method will be called before 
     * the first item is rendered, giving the plot an opportunity to initialise
     * any state information it wants to maintain.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plot  the plot.
     * @param index  the secondary index (&lt;code&gt;null&lt;/code&gt; for primary 
     *               renderer).
     * @param info  collects chart rendering information for return to caller.
     * 
     * @return A state object (maintains state information relevant to one 
     *         chart drawing).
     */</comment>
    <function><type><specifier>public</specifier> <name>PiePlotState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
            <param><decl><type><name>PiePlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>index</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
     
        <decl_stmt><decl><type><name>PiePlotState</name></type> <name>state</name> =<init> <expr>new <call><name>PiePlotState</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPassesRequired</name></name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setTotal</name></name><argument_list>(<argument><expr><call><name><name>DatasetUtilities</name>.<name>calculatePieDatasetTotal</name></name><argument_list>(
                <argument><expr><call><name><name>plot</name>.<name>getDataset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setLatestAngle</name></name><argument_list>(<argument><expr><call><name><name>plot</name>.<name>getStartAngle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing 
     *              (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// adjust for insets...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawPie</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the pie.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param info  chart rendering info.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawPie</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PiePlotState</name></type> <name>state</name> =<init> <expr><call><name>initialise</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// adjust the plot area for interior spacing and labels...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>labelReserve</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelGenerator</name></name> != <name>null</name> &amp;&amp; !<name><name>this</name>.<name>simpleLabels</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelReserve</name> = <name><name>this</name>.<name>labelGap</name></name> + <name><name>this</name>.<name>maximumLabelWidth</name></name></expr>;</expr_stmt>    
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>gapHorizontal</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * (<name><name>this</name>.<name>interiorGap</name></name> 
                + <name>labelReserve</name>) * 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>gapVertical</name> =<init> <expr><call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>interiorGap</name></name> * 2.0</expr></init></decl>;</decl_stmt>

        
        <if>if <condition>(<expr><name>DEBUG_DRAW_INTERIOR</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>hGap</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>interiorGap</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>vGap</name> =<init> <expr><call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>interiorGap</name></name></expr></init></decl>;</decl_stmt>
        
            <decl_stmt><decl><type><name>double</name></type> <name>igx1</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>hGap</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>igx2</name> =<init> <expr><call><name><name>plotArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>hGap</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>igy1</name> =<init> <expr><call><name><name>plotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>vGap</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>igy2</name> =<init> <expr><call><name><name>plotArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>vGap</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>gray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>igx1</name></expr></argument>, <argument><expr><name>igy1</name></expr></argument>, <argument><expr><name>igx2</name> - <name>igx1</name></expr></argument>, 
                    <argument><expr><name>igy2</name> - <name>igy1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>linkX</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>gapHorizontal</name> / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>linkY</name> =<init> <expr><call><name><name>plotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>gapVertical</name> / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>linkW</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name>gapHorizontal</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>linkH</name> =<init> <expr><call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name>gapVertical</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// make the link area a square if the pie chart is to be circular...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>circular</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>linkW</name></expr></argument>, <argument><expr><name>linkH</name></expr></argument>)</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>linkX</name> = (<name>linkX</name> + <name>linkX</name> + <name>linkW</name>) / 2 - <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>linkY</name> = (<name>linkY</name> + <name>linkY</name> + <name>linkH</name>) / 2 - <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>linkW</name> = 2 * <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>linkH</name> = 2 * <name>min</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// the link area defines the dog leg points for the linking lines to </comment>
        <comment type="line">// the labels</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>linkArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>linkX</name></expr></argument>, <argument><expr><name>linkY</name></expr></argument>, <argument><expr><name>linkW</name></expr></argument>, 
                <argument><expr><name>linkH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setLinkArea</name></name><argument_list>(<argument><expr><name>linkArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>DEBUG_DRAW_LINK_AREA</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>blue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>linkArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>yellow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>linkArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>linkArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>linkArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>linkArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="line">// the explode area defines the max circle/ellipse for the exploded </comment>
        <comment type="line">// pie sections.  it is defined by shrinking the linkArea by the </comment>
        <comment type="line">// linkMargin factor.</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>lm</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name><name>this</name>.<name>simpleLabels</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lm</name> = <name><name>this</name>.<name>labelLinkMargin</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>hh</name> =<init> <expr><call><name><name>linkArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name>lm</name> * 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>vv</name> =<init> <expr><call><name><name>linkArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name>lm</name> * 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>explodeArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>linkX</name> + <name>hh</name> / 2.0</expr></argument>, 
                <argument><expr><name>linkY</name> + <name>vv</name> / 2.0</expr></argument>, <argument><expr><name>linkW</name> - <name>hh</name></expr></argument>, <argument><expr><name>linkH</name> - <name>vv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
       
        <expr_stmt><expr><call><name><name>state</name>.<name>setExplodedPieArea</name></name><argument_list>(<argument><expr><name>explodeArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// the pie area defines the circle/ellipse for regular pie sections.</comment>
        <comment type="line">// it is defined by shrinking the explodeArea by the explodeMargin </comment>
        <comment type="line">// factor. </comment>
        <decl_stmt><decl><type><name>double</name></type> <name>maximumExplodePercent</name> =<init> <expr><call><name>getMaximumExplodePercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>percent</name> =<init> <expr><name>maximumExplodePercent</name> / (1.0 + <name>maximumExplodePercent</name>)</expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>double</name></type> <name>h1</name> =<init> <expr><call><name><name>explodeArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name>percent</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>v1</name> =<init> <expr><call><name><name>explodeArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name>percent</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>pieArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>explodeArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                + <name>h1</name> / 2.0</expr></argument>, <argument><expr><call><name><name>explodeArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>v1</name> / 2.0</expr></argument>, 
                <argument><expr><call><name><name>explodeArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name>h1</name></expr></argument>, <argument><expr><call><name><name>explodeArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>DEBUG_DRAW_PIE_AREA</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>green</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>pieArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPieArea</name></name><argument_list>(<argument><expr><name>pieArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPieCenterX</name></name><argument_list>(<argument><expr><call><name><name>pieArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPieCenterY</name></name><argument_list>(<argument><expr><call><name><name>pieArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPieWRadius</name></name><argument_list>(<argument><expr><call><name><name>pieArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPieHRadius</name></name><argument_list>(<argument><expr><call><name><name>pieArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// plot the data (unless the dataset is null)...</comment>
        <if>if <condition>(<expr>(<name><name>this</name>.<name>dataset</name></name> != <name>null</name>) &amp;&amp; (<call><name><name>this</name>.<name>dataset</name>.<name>getKeys</name></name><argument_list>()</argument_list></call>.<call><name>size</name><argument_list>()</argument_list></call> &gt; 0)</expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>List</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>totalValue</name> =<init> <expr><call><name><name>DatasetUtilities</name>.<name>calculatePieDatasetTotal</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>passesRequired</name> =<init> <expr><call><name><name>state</name>.<name>getPassesRequired</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>pass</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pass</name> &lt; <name>passesRequired</name></expr>;</condition> <incr><expr><name>pass</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>runningTotal</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>section</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>section</name> &lt; <call><name><name>keys</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>section</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>n</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>value</name> &gt; 0.0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>runningTotal</name> += <name>value</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>drawItem</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>explodeArea</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if> 
                }</block></for>
            }</block></for>
            <if>if <condition>(<expr><name><name>this</name>.<name>simpleLabels</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>drawSimpleLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>totalValue</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>linkArea</name></expr></argument>, 
                        <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>drawLabels</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>totalValue</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>linkArea</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a single data item.
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param section  the section index.
     * @param dataArea  the data plot area.
     * @param state  state information for one chart.
     * @param currentPass  the current pass index.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                            <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>, <param><decl><type><name>int</name></type> <name>currentPass</name></decl></param>)</parameter_list> <block>{
    
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>angle1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>angle2</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>direction</name></name> == <name><name>Rotation</name>.<name>CLOCKWISE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>angle1</name> = <call><name><name>state</name>.<name>getLatestAngle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>angle2</name> = <name>angle1</name> - <name>value</name> / <call><name><name>state</name>.<name>getTotal</name></name><argument_list>()</argument_list></call> * 360.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>direction</name></name> == <name><name>Rotation</name>.<name>ANTICLOCKWISE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>angle1</name> = <call><name><name>state</name>.<name>getLatestAngle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>angle2</name> = <name>angle1</name> + <name>value</name> / <call><name><name>state</name>.<name>getTotal</name></name><argument_list>()</argument_list></call> * 360.0</expr>;</expr_stmt>         
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Rotation type not recognised."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></else></if></else></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>(<name>angle2</name> - <name>angle1</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> &gt; <call><name>getMinimumArcAngleToDraw</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>ep</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>mep</name> =<init> <expr><call><name>getMaximumExplodePercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mep</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ep</name> = <call><name>getExplodePercent</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call> / <name>mep</name></expr>;</expr_stmt>                
            }</block></then></if>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcBounds</name> =<init> <expr><call><name>getArcBounds</name><argument_list>(<argument><expr><call><name><name>state</name>.<name>getPieArea</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>state</name>.<name>getExplodedPieArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>angle1</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>arcBounds</name></expr></argument>, <argument><expr><name>angle1</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, 
                    <argument><expr><name><name>Arc2D</name>.<name>PIE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><name>currentPass</name> == 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>shadowPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Shape</name></type> <name>shadowArc</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(
                            <argument><expr><name>arc</name></expr></argument>, <argument><expr>(<name>float</name>) <name><name>this</name>.<name>shadowXOffset</name></name></expr></argument>, 
                            <argument><expr>(<name>float</name>) <name><name>this</name>.<name>shadowYOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shadowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shadowArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>currentPass</name> == 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>sectionOutlinesVisible</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>outlineStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>arc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <comment type="line">// update the linking line target for later</comment>
                <comment type="line">// add an entity for the pie section</comment>
                <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>this</name>.<name>toolTipGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>tip</name> = <call><name><name>this</name>.<name>toolTipGenerator</name>.<name>generateToolTip</name></name><argument_list>(
                                    <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>this</name>.<name>urlGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>url</name> = <call><name><name>this</name>.<name>urlGenerator</name>.<name>generateURL</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, 
                                    <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>this</name>.<name>pieIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><name>PieSectionEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>PieSectionEntity</name><argument_list>(
                                <argument><expr><name>arc</name></expr></argument>, <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>pieIndex</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                                <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if></else></if>
        }</block></then></if>    
        <expr_stmt><expr><call><name><name>state</name>.<name>setLatestAngle</name></name><argument_list>(<argument><expr><name>angle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the pie section labels in the simple form.
     * 
     * @param g2  the graphics device.
     * @param keys  the section keys.
     * @param totalValue  the total value for all sections in the pie.
     * @param plotArea  the plot area.
     * @param pieArea  the area containing the pie.
     * @param state  the plot state.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawSimpleLabels</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>List</name></type> <name>keys</name></decl></param>, 
            <param><decl><type><name>double</name></type> <name>totalValue</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>pieArea</name></decl></param>, 
            <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>labelInsets</name> =<init> <expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name><name>UnitType</name>.<name>RELATIVE</name></name></expr></argument>, 
                <argument><expr>0.18</expr></argument>, <argument><expr>0.18</expr></argument>, <argument><expr>0.18</expr></argument>, <argument><expr>0.18</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>labelsArea</name> =<init> <expr><call><name><name>labelInsets</name>.<name>createInsetRectangle</name></name><argument_list>(<argument><expr><name>pieArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>runningTotal</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>include</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name>getDataset</name><argument_list>()</argument_list></call>.<call><name>getValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>include</name> = !<call><name>getIgnoreNullValues</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>v</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>include</name> = <call><name>getIgnoreZeroValues</name><argument_list>()</argument_list></call> ? <name>v</name> &gt; 0.0 : <name>v</name> &gt;= 0.0</expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>include</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>runningTotal</name> = <name>runningTotal</name> + <name>v</name></expr>;</expr_stmt>
                <comment type="line">// work out the mid angle (0 - 90 and 270 - 360) = right, </comment>
                <comment type="line">// otherwise left</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>mid</name> =<init> <expr><call><name>getStartAngle</name><argument_list>()</argument_list></call> + (<call><name>getDirection</name><argument_list>()</argument_list></call>.<call><name>getFactor</name><argument_list>()</argument_list></call>
                        * ((<name>runningTotal</name> - <name>v</name> / 2.0) * 360) / <name>totalValue</name>)</expr></init></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name>Arc2D</name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>labelsArea</name></expr></argument>, <argument><expr><call><name>getStartAngle</name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name>mid</name> - <call><name>getStartAngle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> =<init> <expr>(<name>int</name>) <call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call>.<call><name>getX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y</name> =<init> <expr>(<name>int</name>) <call><name><name>arc</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call>.<call><name>getY</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name>PieSectionLabelGenerator</name></type> <name>labelGenerator</name> =<init> <expr><call><name>getLabelGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>labelGenerator</name> == <name>null</name></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>labelGenerator</name>.<name>generateSectionLabel</name></name><argument_list>(
                        <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>label</name> == <name>null</name></expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>out</name> =<init> <expr><call><name><name>this</name>.<name>labelPadding</name>.<name>createOutsetRectangle</name></name><argument_list>(
                        <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Shape</name></type> <name>bg</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, 
                        <argument><expr><name>x</name> - <call><name><name>bounds</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>y</name> - <call><name><name>bounds</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>labelShadowPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Shape</name></type> <name>shadow</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>, 
                            <argument><expr><name><name>this</name>.<name>shadowXOffset</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>shadowYOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shadow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>this</name>.<name>labelBackgroundPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>this</name>.<name>labelOutlinePaint</name></name> != <name>null</name> 
                        &amp;&amp; <name><name>this</name>.<name>labelOutlineStroke</name></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>bg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>TextUtilities</name>.<name>drawAlignedString</name></name><argument_list>(<argument><expr><call><name>getLabelGenerator</name><argument_list>()</argument_list></call>
                        .<call><name>generateSectionLabel</name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, 
                        <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
            }</block></then></if>
        }</block></while>
       
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the labels for the pie sections.
     * 
     * @param g2  the graphics device.
     * @param keys  the keys.
     * @param totalValue  the total value.
     * @param plotArea  the plot area.
     * @param linkArea  the link area.
     * @param state  the state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLabels</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>List</name></type> <name>keys</name></decl></param>, <param><decl><type><name>double</name></type> <name>totalValue</name></decl></param>, 
                              <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>linkArea</name></decl></param>, 
                              <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{   

        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// classify the keys according to which side the label will appear...</comment>
        <decl_stmt><decl><type><name>DefaultKeyedValues</name></type> <name>leftKeys</name> =<init> <expr>new <call><name>DefaultKeyedValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DefaultKeyedValues</name></type> <name>rightKeys</name> =<init> <expr>new <call><name>DefaultKeyedValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       
        <decl_stmt><decl><type><name>double</name></type> <name>runningTotal</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>include</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>include</name> = !<name><name>this</name>.<name>ignoreNullValues</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>v</name> = <call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>include</name> = <name><name>this</name>.<name>ignoreZeroValues</name></name> ? <name>v</name> &gt; 0.0 : <name>v</name> &gt;= 0.0</expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>include</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>runningTotal</name> = <name>runningTotal</name> + <name>v</name></expr>;</expr_stmt>
                <comment type="line">// work out the mid angle (0 - 90 and 270 - 360) = right, </comment>
                <comment type="line">// otherwise left</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>mid</name> =<init> <expr><name><name>this</name>.<name>startAngle</name></name> + (<call><name><name>this</name>.<name>direction</name>.<name>getFactor</name></name><argument_list>()</argument_list></call>
                        * ((<name>runningTotal</name> - <name>v</name> / 2.0) * 360) / <name>totalValue</name>)</expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt; 0.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>leftKeys</name>.<name>addValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>rightKeys</name>.<name>addValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>new <call><name>Double</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></while>
       
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// calculate the max label width from the plot dimensions, because</comment>
        <comment type="line">// a circular pie can leave a lot more room for labels...</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>marginX</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name><name>this</name>.<name>interiorGap</name></name> * <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>gap</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>labelGap</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ww</name> =<init> <expr><call><name><name>linkArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>gap</name> - <name>marginX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>labelWidth</name> =<init> <expr>(<name>float</name>) <call><name><name>this</name>.<name>labelPadding</name>.<name>trimWidth</name></name><argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// draw the labels...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawLeftLabels</name><argument_list>(<argument><expr><name>leftKeys</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>linkArea</name></expr></argument>, <argument><expr><name>labelWidth</name></expr></argument>, 
                    <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawRightLabels</name><argument_list>(<argument><expr><name>rightKeys</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>linkArea</name></expr></argument>, <argument><expr><name>labelWidth</name></expr></argument>, 
                    <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the left labels.
     * 
     * @param leftKeys  a collection of keys and angles (to the middle of the
     *         section, in degrees) for the sections on the left side of the 
     *         plot.
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param linkArea  the link area.
     * @param maxLabelWidth  the maximum label width.
     * @param state  the state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLeftLabels</name><parameter_list>(<param><decl><type><name>KeyedValues</name></type> <name>leftKeys</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                  <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>linkArea</name></decl></param>, 
                                  <param><decl><type><name>float</name></type> <name>maxLabelWidth</name></decl></param>, <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
        
        <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lGap</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>labelGap</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>verticalLinkRadius</name> =<init> <expr><call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>leftKeys</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{   
            <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>this</name>.<name>labelGenerator</name>.<name>generateSectionLabel</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><call><name><name>leftKeys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextBlock</name></type> <name>block</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>maxLabelWidth</name></expr></argument>, 
                        <argument><expr>new <call><name>G2TextMeasurer</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextBox</name></type> <name>labelBox</name> =<init> <expr>new <call><name>TextBox</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setOutlinePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setOutlineStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setShadowPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setInteriorGap</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPadding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>theta</name> =<init> <expr><call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(
                        <argument><expr><call><name><name>leftKeys</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>baseY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                               * <name>verticalLinkRadius</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>hh</name> =<init> <expr><call><name><name>labelBox</name>.<name>getHeight</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>addPieLabelRecord</name></name><argument_list>(<argument><expr>new <call><name>PieLabelRecord</name><argument_list>(
                        <argument><expr><call><name><name>leftKeys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>theta</name></expr></argument>, <argument><expr><name>baseY</name></expr></argument>, <argument><expr><name>labelBox</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>,
                        <argument><expr><name>lGap</name> / 2.0 + <name>lGap</name> / 2.0 * -<call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0.9 
                        + <call><name>getExplodePercent</name><argument_list>(<argument><expr><call><name><name>leftKeys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>distributeLabels</name></name><argument_list>(<argument><expr><call><name><name>plotArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labelDistributor</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawLeftLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>getPieLabelRecord</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the right labels.
     * 
     * @param keys  the keys.
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param linkArea  the link area.
     * @param maxLabelWidth  the maximum label width.
     * @param state  the state.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRightLabels</name><parameter_list>(<param><decl><type><name>KeyedValues</name></type> <name>keys</name></decl></param>, <param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                   <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>linkArea</name></decl></param>, 
                                   <param><decl><type><name>float</name></type> <name>maxLabelWidth</name></decl></param>, <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// draw the right labels...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lGap</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>labelGap</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>verticalLinkRadius</name> =<init> <expr><call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>keys</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>this</name>.<name>labelGenerator</name>.<name>generateSectionLabel</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><call><name><name>keys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextBlock</name></type> <name>block</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>createTextBlock</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>maxLabelWidth</name></expr></argument>, 
                        <argument><expr>new <call><name>G2TextMeasurer</name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>TextBox</name></type> <name>labelBox</name> =<init> <expr>new <call><name>TextBox</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setBackgroundPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setOutlinePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setOutlineStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setShadowPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>labelBox</name>.<name>setInteriorGap</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPadding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>theta</name> =<init> <expr><call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><call><name><name>keys</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>baseY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> 
                              - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> * <name>verticalLinkRadius</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>hh</name> =<init> <expr><call><name><name>labelBox</name>.<name>getHeight</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>addPieLabelRecord</name></name><argument_list>(<argument><expr>new <call><name>PieLabelRecord</name><argument_list>(
                        <argument><expr><call><name><name>keys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>theta</name></expr></argument>, <argument><expr><name>baseY</name></expr></argument>, <argument><expr><name>labelBox</name></expr></argument>, <argument><expr><name>hh</name></expr></argument>,
                        <argument><expr><name>lGap</name> / 2.0 + <name>lGap</name> / 2.0 * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>, 
                        <argument><expr>0.9 + <call><name>getExplodePercent</name><argument_list>(<argument><expr><call><name><name>keys</name>.<name>getKey</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>distributeLabels</name></name><argument_list>(<argument><expr><call><name><name>plotArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>labelDistributor</name>.<name>getItemCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawRightLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, 
                    <argument><expr><call><name><name>this</name>.<name>labelDistributor</name>.<name>getPieLabelRecord</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a collection of legend items for the pie chart.
     *
     * @return The legend items (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>result</name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>List</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getKeys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>section</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>getLegendItemShape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr>(<name>Comparable</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>include</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>include</name> = !<name><name>this</name>.<name>ignoreNullValues</name></name></expr>;</expr_stmt>   
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>v</name> == 0.0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>include</name> = !<name><name>this</name>.<name>ignoreZeroValues</name></name></expr>;</expr_stmt>   
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>include</name> = <name>v</name> &gt; 0.0</expr>;</expr_stmt>   
                }</block></else></if>
            }</block></else></if>
            <if>if <condition>(<expr><name>include</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>this</name>.<name>legendLabelGenerator</name>.<name>generateSectionLabel</name></name><argument_list>(
                        <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>label</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>toolTipText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>toolTipText</name> = <call><name><name>this</name>.<name>legendLabelToolTipGenerator</name>
                                .<name>generateSectionLabel</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>urlText</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>urlText</name> = <call><name><name>this</name>.<name>legendLabelURLGenerator</name>.<name>generateURL</name></name><argument_list>(
                                <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>this</name>.<name>pieIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, 
                            <argument><expr><name>toolTipText</name></expr></argument>, <argument><expr><name>urlText</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>paint</name></expr></argument>, 
                            <argument><expr>true</expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, 
                            <argument><expr>false</expr></argument>,          <comment type="line">// line not visible</comment>
                            <argument><expr>new <call><name><name>Line2D</name>.<name>Float</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>new <call><name>BasicStroke</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>item</name>.<name>setDataset</name></name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>section</name>++</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>section</name>++</expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     *
     * @return The plot type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Pie_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a rectangle that can be used to create a pie section (taking
     * into account the amount by which the pie section is 'exploded').
     *
     * @param unexploded  the area inside which the unexploded pie sections are
     *                    drawn.
     * @param exploded  the area inside which the exploded pie sections are 
     *                  drawn.
     * @param angle  the start angle.
     * @param extent  the extent of the arc.
     * @param explodePercent  the amount by which the pie section is exploded.
     *
     * @return A rectangle that can be used to create a pie section.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Rectangle2D</name></type> <name>getArcBounds</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>unexploded</name></decl></param>, 
                                       <param><decl><type><name>Rectangle2D</name></type> <name>exploded</name></decl></param>,
                                       <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>double</name></type> <name>extent</name></decl></param>, 
                                       <param><decl><type><name>double</name></type> <name>explodePercent</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>explodePercent</name> == 0.0</expr>)</condition><then> <block>{
            <return>return <expr><name>unexploded</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>Arc2D</name></type> <name>arc1</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>unexploded</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>extent</name> / 2</expr></argument>, 
                    <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>point1</name> =<init> <expr><call><name><name>arc1</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc2</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>exploded</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>extent</name> / 2</expr></argument>, 
                    <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Point2D</name></type> <name>point2</name> =<init> <expr><call><name><name>arc2</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>deltaX</name> =<init> <expr>(<call><name><name>point1</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <call><name><name>point2</name>.<name>getX</name></name><argument_list>()</argument_list></call>) * <name>explodePercent</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>deltaY</name> =<init> <expr>(<call><name><name>point1</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name><name>point2</name>.<name>getY</name></name><argument_list>()</argument_list></call>) * <name>explodePercent</name></expr></init></decl>;</decl_stmt>
            <return>return <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>unexploded</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>deltaX</name></expr></argument>, 
                    <argument><expr><call><name><name>unexploded</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name>deltaY</name></expr></argument>, <argument><expr><call><name><name>unexploded</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>unexploded</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a section label on the left side of the pie chart.
     * 
     * @param g2  the graphics device.
     * @param state  the state.
     * @param record  the label record.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLeftLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>, 
                                 <param><decl><type><name>PieLabelRecord</name></type> <name>record</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getMinX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>targetX</name> =<init> <expr><name>anchorX</name> - <call><name><name>record</name>.<name>getGap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>targetY</name> =<init> <expr><call><name><name>record</name>.<name>getAllocatedY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>labelLinksVisible</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>theta</name> =<init> <expr><call><name><name>record</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>linkX</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterX</name></name><argument_list>()</argument_list></call> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getPieWRadius</name></name><argument_list>()</argument_list></call> * <call><name><name>record</name>.<name>getLinkPercent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>linkY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getPieHRadius</name></name><argument_list>()</argument_list></call> * <call><name><name>record</name>.<name>getLinkPercent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>elbowX</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterX</name></name><argument_list>()</argument_list></call> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getWidth</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>elbowY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>anchorY</name> =<init> <expr><name>elbowY</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>linkX</name></expr></argument>, <argument><expr><name>linkY</name></expr></argument>, <argument><expr><name>elbowX</name></expr></argument>, <argument><expr><name>elbowY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>, <argument><expr><name>elbowX</name></expr></argument>, <argument><expr><name>elbowY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>, <argument><expr><name>targetX</name></expr></argument>, <argument><expr><name>targetY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>TextBox</name></type> <name>tb</name> =<init> <expr><call><name><name>record</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tb</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>targetX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>targetY</name></expr></argument>, <argument><expr><name><name>RectangleAnchor</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Draws a section label on the right side of the pie chart.
     * 
     * @param g2  the graphics device.
     * @param state  the state.
     * @param record  the label record.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRightLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>, 
                                  <param><decl><type><name>PieLabelRecord</name></type> <name>record</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getMaxX</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>targetX</name> =<init> <expr><name>anchorX</name> + <call><name><name>record</name>.<name>getGap</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>targetY</name> =<init> <expr><call><name><name>record</name>.<name>getAllocatedY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><name><name>this</name>.<name>labelLinksVisible</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>theta</name> =<init> <expr><call><name><name>record</name>.<name>getAngle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>linkX</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterX</name></name><argument_list>()</argument_list></call> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getPieWRadius</name></name><argument_list>()</argument_list></call> * <call><name><name>record</name>.<name>getLinkPercent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>linkY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getPieHRadius</name></name><argument_list>()</argument_list></call> * <call><name><name>record</name>.<name>getLinkPercent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>elbowX</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterX</name></name><argument_list>()</argument_list></call> + <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getWidth</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>elbowY</name> =<init> <expr><call><name><name>state</name>.<name>getPieCenterY</name></name><argument_list>()</argument_list></call> - <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call> 
                    * <call><name><name>state</name>.<name>getLinkArea</name></name><argument_list>()</argument_list></call>.<call><name>getHeight</name><argument_list>()</argument_list></call> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>anchorY</name> =<init> <expr><name>elbowY</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>linkX</name></expr></argument>, <argument><expr><name>linkY</name></expr></argument>, <argument><expr><name>elbowX</name></expr></argument>, <argument><expr><name>elbowY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>, <argument><expr><name>elbowX</name></expr></argument>, <argument><expr><name>elbowY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>anchorX</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>, <argument><expr><name>targetX</name></expr></argument>, <argument><expr><name>targetY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>TextBox</name></type> <name>tb</name> =<init> <expr><call><name><name>record</name>.<name>getLabel</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tb</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr>(<name>float</name>) <name>targetX</name></expr></argument>, <argument><expr>(<name>float</name>) <name>targetY</name></expr></argument>, <argument><expr><name><name>RectangleAnchor</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    }</block></function>

    <comment type="javadoc">/**
     * Tests this plot for equality with an arbitrary object.  Note that the 
     * plot's dataset is NOT included in the test for equality.
     *
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PiePlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PiePlot</name></type> <name>that</name> =<init> <expr>(<name>PiePlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>pieIndex</name></name> != <name><name>that</name>.<name>pieIndex</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>interiorGap</name></name> != <name><name>that</name>.<name>interiorGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>circular</name></name> != <name><name>that</name>.<name>circular</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>startAngle</name></name> != <name><name>that</name>.<name>startAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>direction</name></name> != <name><name>that</name>.<name>direction</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>ignoreZeroValues</name></name> != <name><name>that</name>.<name>ignoreZeroValues</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>ignoreNullValues</name></name> != <name><name>that</name>.<name>ignoreNullValues</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>sectionPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionPaintMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>sectionPaintMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSectionPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>baseSectionPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>sectionOutlinesVisible</name></name> != <name><name>that</name>.<name>sectionOutlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>sectionOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlinePaintMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>sectionOutlinePaintMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>baseSectionOutlinePaint</name></name></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>sectionOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlineStrokeMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>sectionOutlineStrokeMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>baseSectionOutlineStroke</name></name></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shadowPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>shadowPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>shadowXOffset</name></name> == <name><name>that</name>.<name>shadowXOffset</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>shadowYOffset</name></name> == <name><name>that</name>.<name>shadowYOffset</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>explodePercentages</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>explodePercentages</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelGenerator</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelBackgroundPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelShadowPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>simpleLabels</name></name> != <name><name>that</name>.<name>simpleLabels</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>simpleLabelOffset</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>simpleLabelOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>labelPadding</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>labelPadding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>maximumLabelWidth</name></name> == <name><name>that</name>.<name>maximumLabelWidth</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>labelGap</name></name> == <name><name>that</name>.<name>labelGap</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>labelLinkMargin</name></name> == <name><name>that</name>.<name>labelLinkMargin</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>labelLinksVisible</name></name> != <name><name>that</name>.<name>labelLinksVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelLinkPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>labelLinkStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>toolTipGenerator</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>toolTipGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>urlGenerator</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>urlGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name><name>this</name>.<name>minimumArcAngleToDraw</name></name> == <name><name>that</name>.<name>minimumArcAngleToDraw</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendItemShape</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelGenerator</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>legendLabelGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name></expr></argument>,
                <argument><expr><name><name>that</name>.<name>legendLabelToolTipGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name></expr></argument>,
                <argument><expr><name><name>that</name>.<name>legendLabelURLGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <comment type="line">// can't find any difference...</comment>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the plot.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if some component of the plot does 
     *         not support cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PiePlot</name></type> <name>clone</name> =<init> <expr>(<name>PiePlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>clone</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>urlGenerator</name></name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>urlGenerator</name></name> = (<name>PieURLGenerator</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>urlGenerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>legendItemShape</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>legendLabelGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>legendLabelGenerator</name></name> = (<name>PieSectionLabelGenerator</name>) 
                    <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelGenerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>legendLabelToolTipGenerator</name></name> = (<name>PieSectionLabelGenerator</name>) 
                    <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelToolTipGenerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>legendLabelURLGenerator</name></name> = (<name>PieURLGenerator</name>) 
                    <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendLabelURLGenerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSectionPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>sectionOutlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>shadowPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelOutlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelShadowPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelLinkStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>sectionOutlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSectionOutlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>shadowPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelBackgroundPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelOutlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelShadowPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelLinkPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelLinkStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">// DEPRECATED METHODS...</comment>
    
    <comment type="javadoc">/**
     * Returns the paint for the specified section.
     * 
     * @param section  the section index (zero-based).
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @deprecated Use {@link #getSectionPaint(Comparable)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>       
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to fill a section of the pie and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param section  the section index (zero-based).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @deprecated Use {@link #setSectionPaint(Comparable, Paint)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the specified section.
     * 
     * @param section  the section index (zero-based).
     * 
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @deprecated Use {@link #getSectionOutlinePaint(Comparable)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to fill a section of the pie and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param section  the section index (zero-based).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @deprecated Use {@link #setSectionOutlinePaint(Comparable, Paint)} 
     *     instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlinePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke for the specified section.
     * 
     * @param section  the section index (zero-based).
     * 
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     *
     * @deprecated Use {@link #getSectionOutlineStroke(Comparable)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to fill a section of the pie and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param section  the section index (zero-based).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @deprecated Use {@link #setSectionOutlineStroke(Comparable, Stroke)} 
     *     instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionOutlineStroke</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the amount that a section should be 'exploded'.
     *
     * @param section  the section number.
     *
     * @return The amount that a section should be 'exploded'.
     * 
     * @deprecated Use {@link #getExplodePercent(Comparable)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getExplodePercent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>getExplodePercent</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the amount that a pie section should be exploded and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param section  the section index.
     * @param percent  the explode percentage (0.30 = 30 percent).
     * 
     * @deprecated Use {@link #setExplodePercent(Comparable, double)} instead.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExplodePercent</name><parameter_list>(<param><decl><type><name>int</name></type> <name>section</name></decl></param>, <param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setExplodePercent</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
