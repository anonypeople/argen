<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PiePlotState.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * PiePlotState.java
 * -----------------
 * (C) Copyright 2004, 2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 06-Mar-2004 : Version 1 (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>RendererState</name></name>;</import>

<comment type="javadoc">/**
 * A renderer state.
 */</comment>
<class><specifier>public</specifier> class <name>PiePlotState</name> <super><extends>extends <name>RendererState</name></extends></super> <block>{

    <comment type="javadoc">/** The number of passes required by the renderer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>passesRequired</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The total of the values in the dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>total</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The latest angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>latestAngle</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The exploded pie area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rectangle2D</name></type> <name>explodedPieArea</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The pie area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rectangle2D</name></type> <name>pieArea</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The center of the pie in Java 2D coordinates. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>pieCenterX</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The center of the pie in Java 2D coordinates. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>pieCenterY</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The vertical pie radius. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>pieHRadius</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The horizontal pie radius. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>pieWRadius</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The link area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rectangle2D</name></type> <name>linkArea</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new object for recording temporary state information for a 
     * renderer.
     * 
     * @param info  the plot rendering info.
     */</comment>
    <constructor><specifier>public</specifier> <name>PiePlotState</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>passesRequired</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>total</name></name> = 0.0</expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the number of passes required by the renderer.
     * 
     * @return The number of passes.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getPassesRequired</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>passesRequired</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the number of passes required by the renderer.
     * 
     * @param passes  the passes.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPassesRequired</name><parameter_list>(<param><decl><type><name>int</name></type> <name>passes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>passesRequired</name></name> = <name>passes</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the total of the values in the dataset.
     * 
     * @return The total.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getTotal</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>total</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the total.
     * 
     * @param total  the total.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setTotal</name><parameter_list>(<param><decl><type><name>double</name></type> <name>total</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>total</name></name> = <name>total</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the latest angle.
     * 
     * @return The latest angle.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLatestAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>latestAngle</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the latest angle.
     * 
     * @param angle  the angle.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLatestAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>latestAngle</name></name> = <name>angle</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the pie area.
     * 
     * @return The pie area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getPieArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieArea</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the pie area.
     * 
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
       <expr_stmt><expr><name><name>this</name>.<name>pieArea</name></name> = <name>area</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the exploded pie area.
     * 
     * @return The exploded pie area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getExplodedPieArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>explodedPieArea</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the exploded pie area.
     * 
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setExplodedPieArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>explodedPieArea</name></name> = <name>area</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the x-coordinate of the center of the pie chart.
     * 
     * @return The x-coordinate (in Java2D space).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getPieCenterX</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieCenterX</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the x-coordinate of the center of the pie chart.
     * 
     * @param x  the x-coordinate (in Java2D space).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieCenterX</name><parameter_list>(<param><decl><type><name>double</name></type> <name>x</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pieCenterX</name></name> = <name>x</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the y-coordinate (in Java2D space) of the center of the pie 
     * chart.  For the {@link PiePlot3D} class, we derive this from the top of
     * the pie.
     * 
     * @return The y-coordinate (in Java2D space).
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getPieCenterY</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieCenterY</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the y-coordinate of the center of the pie chart.  This method is 
     * used by the plot and typically is not called directly by applications.
     * 
     * @param y  the y-coordinate (in Java2D space).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieCenterY</name><parameter_list>(<param><decl><type><name>double</name></type> <name>y</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pieCenterY</name></name> = <name>y</name></expr>;</expr_stmt>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the link area.  This defines the "dog-leg" point for the label 
     * linking lines.
     * 
     * @return The link area.
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getLinkArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>linkArea</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the label link area.  This defines the "dog-leg" point for the 
     * label linking lines.
     * 
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLinkArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>linkArea</name></name> = <name>area</name></expr>;</expr_stmt>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the vertical pie radius.
     * 
     * @return The radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getPieHRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieHRadius</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the vertical pie radius.
     * 
     * @param radius  the radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieHRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pieHRadius</name></name> = <name>radius</name></expr>;</expr_stmt>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the horizontal pie radius.
     * 
     * @return The radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getPieWRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>pieWRadius</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the horizontal pie radius.
     * 
     * @param radius  the radius.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPieWRadius</name><parameter_list>(<param><decl><type><name>double</name></type> <name>radius</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>pieWRadius</name></name> = <name>radius</name></expr>;</expr_stmt>   
    }</block></function>
   
}</block></class>
</unit>
