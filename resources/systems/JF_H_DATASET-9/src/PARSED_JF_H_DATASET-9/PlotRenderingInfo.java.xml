<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PlotRenderingInfo.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------------
 * PlotRenderingInfo.java
 * ----------------------
 * (C) Copyright 2003-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 16-Sep-2003 : Version 1 (DG);
 * 23-Sep-2003 : Added Javadocs (DG);
 * 12-Nov-2004 : Added getSubplotCount() and findSubplot() methods (DG);
 * 01-Nov-2005 : Made 'owner' non-transient to fix bug 1344048 (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 01-Dec-2006 : Implemented clone() method properly (DG);
 * 17-Apr-2007 : Fixed bug 1698965 (NPE in CombinedDomainXYPlot) (DG);
 * 
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>ChartRenderingInfo</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>

<comment type="javadoc">/**
 * Stores information about the dimensions of a plot and its subplots.
 */</comment>
<class><specifier>public</specifier> class <name>PlotRenderingInfo</name> <super><implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>8446720134379617220L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The owner of this info. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ChartRenderingInfo</name></type> <name>owner</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The plot area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>plotArea</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The data area. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Rectangle2D</name></type> <name>dataArea</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * Storage for the plot rendering info objects belonging to the subplots. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>subplotInfo</name></decl>;</decl_stmt>
      
    <comment type="javadoc">/**
     * Creates a new instance.
     * 
     * @param owner  the owner (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PlotRenderingInfo</name><parameter_list>(<param><decl><type><name>ChartRenderingInfo</name></type> <name>owner</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>owner</name></name> = <name>owner</name></expr>;</expr_stmt>        
        <expr_stmt><expr><name><name>this</name>.<name>dataArea</name></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>subplotInfo</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the owner (as specified in the constructor).
     * 
     * @return The owner (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>ChartRenderingInfo</name></type> <name>getOwner</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>owner</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the plot area (in Java2D space).
     * 
     * @return The plot area (possibly &lt;code&gt;null&lt;/code&gt;).
     *
     * @see #setPlotArea(Rectangle2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getPlotArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>plotArea</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the plot area.
     * 
     * @param area  the plot area (in Java2D space, &lt;code&gt;null&lt;/code&gt; 
     *     permitted but discouraged)
     * 
     * @see #getPlotArea()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPlotArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = <name>area</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the plot's data area (in Java2D space).
     * 
     * @return The data area (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataArea(Rectangle2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rectangle2D</name></type> <name>getDataArea</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataArea</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the data area.
     * 
     * @param area  the data area (in Java2D space, &lt;code&gt;null&lt;/code&gt; permitted
     *     but discouraged).
     * 
     * @see #getDataArea()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataArea</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>dataArea</name></name> = <name>area</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of subplots (possibly zero).
     * 
     * @return The subplot count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSubplotCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>subplotInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds the info for a subplot.
     * 
     * @param info  the subplot info.
     * 
     * @see #getSubplotInfo(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addSubplotInfo</name><parameter_list>(<param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>subplotInfo</name>.<name>add</name></name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the info for a subplot.
     * 
     * @param index  the subplot index.
     * 
     * @return The info.
     * 
     * @see #addSubplotInfo(PlotRenderingInfo)
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotRenderingInfo</name></type> <name>getSubplotInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>PlotRenderingInfo</name>) <call><name><name>this</name>.<name>subplotInfo</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the index of the subplot that contains the specified
     * (x, y) point (the "source" point).  The source point will usually
     * come from a mouse click on a {@link org.jfree.chart.ChartPanel},
     * and this method is then used to determine the subplot that 
     * contains the source point.
     * 
     * @param source  the source point (in Java2D space, &lt;code&gt;null&lt;/code&gt; not
     * permitted).
     * 
     * @return The subplot index (or -1 if no subplot contains 
     *         &lt;code&gt;source&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSubplotIndex</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'source' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>subplotCount</name> =<init> <expr><call><name>getSubplotCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>subplotCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>info</name> =<init> <expr><call><name>getSubplotInfo</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>area</name> =<init> <expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>area</name>.<name>contains</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>i</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>-1</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this instance for equality against an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PlotRenderingInfo</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>that</name> =<init> <expr>(<name>PlotRenderingInfo</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataArea</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>dataArea</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>plotArea</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>plotArea</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subplotInfo</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>subplotInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <return>return <expr>true</expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this object.
     * 
     * @return A clone.
     * 
     * @throws CloneNotSupportedException if there is a problem cloning.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>clone</name> =<init> <expr>(<name>PlotRenderingInfo</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>plotArea</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>plotArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>this</name>.<name>plotArea</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataArea</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>dataArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>this</name>.<name>dataArea</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>subplotInfo</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>subplotInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>subplotInfo</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>PlotRenderingInfo</name></type> <name>info</name> 
                    =<init> <expr>(<name>PlotRenderingInfo</name>) <call><name><name>this</name>.<name>subplotInfo</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>subplotInfo</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>info</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataArea</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>plotArea</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
            <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>plotArea</name></name> = (<name>Rectangle2D</name>) <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
