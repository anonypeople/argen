<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\PolarPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------
 * PolarPlot.java
 * --------------
 * (C) Copyright 2004-2007, by Solution Engineering, Inc. and Contributors.
 *
 * Original Author:  Daniel Bridenbecker, Solution Engineering, Inc.;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 19-Jan-2004 : Version 1, contributed by DB with minor changes by DG (DG);
 * 07-Apr-2004 : Changed text bounds calculation (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 09-Jun-2005 : Fixed getDataRange() and equals() methods (DG);
 * 25-Oct-2005 : Implemented Zoomable (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 07-Feb-2007 : Fixed bug 1599761, data value less than axis minimum (DG);
 * 21-Mar-2007 : Fixed serialization bug (DG);
 * 24-Sep-2007 : Implemented new zooming methods (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>


<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Point</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>NumberTick</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>PolarItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>text</name>.<name>TextUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>TextAnchor</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>


<comment type="javadoc">/**
 * Plots data that is in (theta, radius) pairs where
 * theta equal to zero is due north and increases clockwise.
 */</comment>
<class><specifier>public</specifier> class <name>PolarPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>ValueAxisPlot</name>, <name>Zoomable</name>,
        <name>RendererChangeListener</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
   
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>3794383185924179525L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default margin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>MARGIN</name> =<init> <expr>20</expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The annotation margin. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>ANNOTATION_MARGIN</name> =<init> <expr>7.0</expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The default grid line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_GRIDLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(
            <argument><expr>0.5f</expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>, 
            <argument><expr>0.0f</expr></argument>, <argument><expr>new <name><name>float</name><index>[]</index></name><block>{<expr>2.0f</expr>, <expr>2.0f</expr>}</block></expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The default grid line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRIDLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>gray</name></name></expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> 
        =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The angles that are marked with gridlines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>angleTicks</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The axis (used for the y-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueAxis</name></type> <name>axis</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>XYDataset</name></type> <name>dataset</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** 
     * Object responsible for drawing the visual representation of each point 
     * on the plot. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PolarItemRenderer</name></type> <name>renderer</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** A flag that controls whether or not the angle labels are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>angleLabelsVisible</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The font used to display the angle labels - never null. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>angleLabelFont</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to display the angle labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>angleLabelPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A flag that controls whether the angular grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>angleGridlinesVisible</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The stroke used to draw the angular grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>angleGridlineStroke</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The paint used to draw the angular grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>angleGridlinePaint</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** A flag that controls whether the radius grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>radiusGridlinesVisible</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The stroke used to draw the radius grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>radiusGridlineStroke</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The paint used to draw the radius grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>radiusGridlinePaint</name></decl>;</decl_stmt>
   
    <comment type="javadoc">/** The annotations for the plot. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>cornerTextItems</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
   
    <comment type="javadoc">/**
     * Default constructor.
     */</comment>
    <constructor><specifier>public</specifier> <name>PolarPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
   
   <comment type="javadoc">/**
     * Creates a new plot.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param radiusAxis  the radius axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>PolarPlot</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>, 
                     <param><decl><type><name>ValueAxis</name></type> <name>radiusAxis</name></decl></param>,
                     <param><decl><type><name>PolarItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
      
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <expr_stmt><expr><name><name>this</name>.<name>angleTicks</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"0"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>45.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"45"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>90.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"90"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>135.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"135"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>180.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"180"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>225.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"225"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>270.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"270"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>angleTicks</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>NumberTick</name><argument_list>(<argument><expr>new <call><name>Double</name><argument_list>(<argument><expr>315.0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"315"</expr></argument>, 
                <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr><name><name>TextAnchor</name>.<name>CENTER</name></name></expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>axis</name></name> = <name>radiusAxis</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <expr_stmt><expr><name><name>this</name>.<name>renderer</name></name> = <name>renderer</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>
      
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>      
    }</block></constructor>
   
    <comment type="javadoc">/**
     * Add text to be displayed in the lower right hand corner and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param text  the text to display (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #removeCornerTextItem(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addCornerTextItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'text' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>add</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Remove the given text from the list of corner text items and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param text  the text to remove (&lt;code&gt;null&lt;/code&gt; ignored).
     * 
     * @see #addCornerTextItem(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>removeCornerTextItem</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>remove</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Clear the list of corner text items and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @see #addCornerTextItem(String)
     * @see #removeCornerTextItem(String)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearCornerTextItems</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the plot type as a string.
     *
     * @return A short string describing the type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
       <return>return <expr><call><name><name>PolarPlot</name>.<name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Polar_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the axis for the plot.
     *
     * @return The radius axis (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axis</name></name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Sets the axis for the plot and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param axis  the new axis (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <comment type="line">// plot is likely registered as a listener with the existing axis...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <expr_stmt><expr><name><name>this</name>.<name>axis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the primary dataset for the plot.
     *
     * @return The primary dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>XYDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset for the plot, replacing the existing dataset if there 
     * is one.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>existing</name> =<init> <expr><name><name>this</name>.<name>dataset</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <comment type="line">// set the new m_Dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <comment type="line">// send a m_Dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the item renderer.
     *
     * @return The renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRenderer(PolarItemRenderer)
     */</comment>
    <function><type><specifier>public</specifier> <name>PolarItemRenderer</name></type> <name>getRenderer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>renderer</name></name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Sets the item renderer, and notifies all listeners of a change to the 
     * plot.
     * &lt;P&gt;
     * If the renderer is set to &lt;code&gt;null&lt;/code&gt;, no chart will be drawn.
     *
     * @param renderer  the new renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRenderer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>PolarItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <expr_stmt><expr><name><name>this</name>.<name>renderer</name></name> = <name>renderer</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the angle labels are visible.
     * 
     * @return A boolean.
     * 
     * @see #setAngleLabelsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAngleLabelsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleLabelsVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the angle labels are visible,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param visible  the flag.
     * 
     * @see #isAngleLabelsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleLabelsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>angleLabelsVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>angleLabelsVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the font used to display the angle labels.
     * 
     * @return A font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAngleLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getAngleLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleLabelFont</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the font used to display the angle labels and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAngleLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>angleLabelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to display the angle labels.
     * 
     * @return A paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAngleLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getAngleLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleLabelPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to display the angle labels and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>angleLabelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the angular gridlines are visible, and 
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setAngleGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isAngleGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleGridlinesVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the angular grid-lines are 
     * visible.
     * &lt;p&gt;
     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all 
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isAngleGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>angleGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>angleGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the stroke for the grid-lines (if any) plotted against the 
     * angular axis.
     *
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAngleGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getAngleGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleGridlineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the angular axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     * &lt;p&gt;
     * If you set this to &lt;code&gt;null&lt;/code&gt;, no grid lines will be drawn.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getAngleGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the 
     * angular axis.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAngleGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getAngleGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>angleGridlinePaint</name></name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the angular axis.
     * &lt;p&gt;
     * If you set this to &lt;code&gt;null&lt;/code&gt;, no grid lines will be drawn.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getAngleGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAngleGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the radius axis grid is visible, and 
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setRadiusGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRadiusGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>radiusGridlinesVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the radius axis grid lines 
     * are visible.
     * &lt;p&gt;
     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all 
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isRadiusGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRadiusGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>radiusGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>radiusGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the stroke for the grid lines (if any) plotted against the 
     * radius axis.
     *
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRadiusGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRadiusGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>radiusGridlineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the radius axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     * &lt;p&gt;
     * If you set this to &lt;code&gt;null&lt;/code&gt;, no grid lines will be drawn.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRadiusGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRadiusGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the radius
     * axis.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRadiusGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRadiusGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>radiusGridlinePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the radius axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     * &lt;p&gt;
     * If you set this to &lt;code&gt;null&lt;/code&gt;, no grid lines will be drawn.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRadiusGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRadiusGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     * &lt;P&gt;
     * This plot relies on a {@link PolarItemRenderer} to draw each 
     * item in the plot.  This allows the visual representation of the data to 
     * be changed easily.
     * &lt;P&gt;
     * The optional info argument collects information about the rendering of
     * the plot (dimensions, tooltip information etc).  Just pass in 
     * &lt;code&gt;null&lt;/code&gt; if you do not need this information.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot (including axes and 
     *              labels) should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  ignored.
     * @param info  collects chart drawing information (&lt;code&gt;null&lt;/code&gt; 
     *              permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                     <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, 
                     <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
       
        <comment type="line">// if the plot area is too small, just return...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> =<init> <expr>(<call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_WIDTH_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> =<init> <expr>(<call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_HEIGHT_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b1</name> || <name>b2</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
       
        <comment type="line">// record the plot area...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <comment type="line">// adjust the drawing area for the plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><name>area</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <comment type="line">// draw the plot background and axes...</comment>
        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>h</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2.0</expr></argument>)</argument_list></call> - <name>MARGIN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>quadrant</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>dataArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>AxisState</name></type> <name>state</name> =<init> <expr><call><name>drawAxis</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>quadrant</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Shape</name></type> <name>originalClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          
            <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(
                    <argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <expr_stmt><expr><call><name>drawGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>this</name>.<name>angleTicks</name></name></expr></argument>, <argument><expr><call><name><name>state</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <comment type="line">// draw...</comment>
            <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>originalClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawCornerTextItems</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Draws the corner text items.
     * 
     * @param g2  the drawing surface.
     * @param area  the area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawCornerTextItems</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
       
        <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>width</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>height</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>it</name> =<init> <expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>(<name>String</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FontMetrics</name></type> <name>fm</name> =<init> <expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>width</name> = <call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>height</name> += <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        
        <decl_stmt><decl><type><name>double</name></type> <name>xadj</name> =<init> <expr><name>ANNOTATION_MARGIN</name> * 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yadj</name> =<init> <expr><name>ANNOTATION_MARGIN</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>width</name> += <name>xadj</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>height</name> += <name>yadj</name></expr>;</expr_stmt>
       
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>area</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>width</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>area</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>height</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawRect</name></name><argument_list>(<argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>, <argument><expr>(<name>int</name>) <name>width</name></expr></argument>, <argument><expr>(<name>int</name>) <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> += <name>ANNOTATION_MARGIN</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>Iterator</name></type> <name>it</name> =<init> <expr><call><name><name>this</name>.<name>cornerTextItems</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>it</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> =<init> <expr>(<name>String</name>) <call><name><name>it</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>bounds</name> =<init> <expr><call><name><name>TextUtilities</name>.<name>getTextBounds</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>g2</name></expr></argument>, 
                    <argument><expr><call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>y</name> += <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>int</name>) <name>x</name></expr></argument>, <argument><expr>(<name>int</name>) <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
   
    <comment type="javadoc">/**
     * A utility method for drawing the axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param dataArea  the data area.
     * 
     * @return A map containing the axis states.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisState</name></type> <name>drawAxis</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Draws a representation of the data within the dataArea region, using the
     * current m_Renderer.
     *
     * @param g2  the graphics device.
     * @param dataArea  the region in which the data is to be drawn.
     * @param info  an optional object for collection dimension 
     *              information (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>render</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                       <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                       <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{
      
        <comment type="line">// now get the data and plot it (the visual representation will depend</comment>
        <comment type="line">// on the m_Renderer that has been set)...</comment>
        <if>if <condition>(<expr>!<call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>drawSeries</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Draws the gridlines for the plot, if they are visible.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param angularTicks  the ticks for the angular axis.
     * @param radialTicks  the ticks for the radial axis.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
                                 <param><decl><type><name>List</name></type> <name>angularTicks</name></decl></param>, <param><decl><type><name>List</name></type> <name>radialTicks</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// no renderer, no gridlines...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
       
        <comment type="line">// draw the domain grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isAngleGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getAngleGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getAngleGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>gridStroke</name> != <name>null</name>) &amp;&amp; (<name>gridPaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>drawAngularGridLines</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>angularTicks</name></expr></argument>, 
                        <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
       
        <comment type="line">// draw the radius grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isRadiusGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getRadiusGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getRadiusGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>gridStroke</name> != <name>null</name>) &amp;&amp; (<name>gridPaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>drawRadialGridLines</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name>.<name>axis</name></name></expr></argument>, 
                        <argument><expr><name>radialTicks</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>      
    }</block></function>
   
    <comment type="javadoc">/**
     * Zooms the axis ranges by the specified percentage about the anchor point.
     *
     * @param percent  the amount of the zoom.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>percent</name> &gt; 0.0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>radius</name> =<init> <expr><call><name>getMaxRadius</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>scaledRadius</name> =<init> <expr><name>radius</name> * <name>percent</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setUpperBound</name></name><argument_list>(<argument><expr><name>scaledRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getAxis</name><argument_list>()</argument_list></call>.<call><name>setAutoRange</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> 
        <else>else <block>{
            <expr_stmt><expr><call><name>getAxis</name><argument_list>()</argument_list></call>.<call><name>setAutoRange</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the range for the specified axis.
     *
     * @param axis  the axis.
     *
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                    <argument><expr><call><name><name>DatasetUtilities</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Receives notification of a change to the plot's m_Dataset.
     * &lt;P&gt;
     * The axis ranges are updated if necessary.
     *
     * @param event  information about the event (not used here).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>datasetChanged</name><parameter_list>(<param><decl><type><name>DatasetChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
       
        <if>if <condition>(<expr><call><name>getParent</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getParent</name><argument_list>()</argument_list></call>.<call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name>.<name>datasetChanged</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * Notifies all registered listeners of a property change.
     * &lt;P&gt;
     * One source of property change events is the plot's m_Renderer.
     *
     * @param event  information about the property change.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rendererChanged</name><parameter_list>(<param><decl><type><name>RendererChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the number of series in the dataset for this plot.  If the 
     * dataset is &lt;code&gt;null&lt;/code&gt;, the method returns 0.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
       
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns the legend items for the plot.  Each legend item is generated by
     * the plot's m_Renderer, since the m_Renderer is responsible for the visual
     * representation of the data.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
       
        <comment type="line">// get the legend items for the main m_Dataset...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr><call><name><name>this</name>.<name>renderer</name>.<name>getLegendItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></then></if>      
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Tests this plot for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>PolarPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>PolarPlot</name></type> <name>that</name> =<init> <expr>(<name>PolarPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axis</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axis</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderer</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>renderer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>angleGridlinesVisible</name></name> != <name><name>that</name>.<name>angleGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>angleLabelsVisible</name></name> != <name><name>that</name>.<name>angleLabelsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>angleLabelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>angleLabelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angleLabelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>angleLabelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angleGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>angleGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(
            <argument><expr><name><name>this</name>.<name>angleGridlinePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>angleGridlinePaint</name></name></expr></argument>
        )</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>radiusGridlinesVisible</name></name> != <name><name>that</name>.<name>radiusGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>radiusGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>radiusGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>radiusGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>radiusGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>cornerTextItems</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>cornerTextItems</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Returns a clone of the plot.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  this can occur if some component of 
     *         the plot cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
      
        <decl_stmt><decl><type><name>PolarPlot</name></type> <name>clone</name> =<init> <expr>(<name>PolarPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>axis</name></name> = (<name>ValueAxis</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <if>if <condition>(<expr><name><name>clone</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>renderer</name></name> 
                = (<name>PolarItemRenderer</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>clone</name>.<name>cornerTextItems</name></name> = new <call><name>ArrayList</name><argument_list>(<argument><expr><name><name>this</name>.<name>cornerTextItems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
   
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angleGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angleGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>radiusGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>radiusGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>angleLabelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
      
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angleGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>radiusGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>angleLabelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <if>if <condition>(<expr><name><name>this</name>.<name>axis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
   
    <comment type="javadoc">/**
     * This method is required by the {@link Zoomable} interface, but since
     * the plot does not have any domain axes, it does nothing.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point (in Java2D coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// do nothing</comment>
    }</block></function>
   
    <comment type="javadoc">/**
     * This method is required by the {@link Zoomable} interface, but since
     * the plot does not have any domain axes, it does nothing.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point (in Java2D coordinates).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// do nothing</comment>
    }</block></function>
   
    <comment type="javadoc">/**
     * This method is required by the {@link Zoomable} interface, but since
     * the plot does not have any domain axes, it does nothing.
     * 
     * @param lowerPercent  the new lower bound.
     * @param upperPercent  the new upper bound.
     * @param state  the plot state.
     * @param source  the source point (in Java2D coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// do nothing</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point (in Java2D coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>zoom</name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
   
    <comment type="javadoc">/**
     * Multiplies the range on the range axis by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
            <comment type="line">// get the source coordinate - this plot has always a VERTICAL</comment>
            <comment type="line">// orientation</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>sourceX</name> =<init> <expr><call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceX</name></expr></argument>, 
                    <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>axis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></function>
    
    <comment type="javadoc">/**
     * Zooms in on the range axes.
     * 
     * @param lowerPercent  the new lower bound.
     * @param upperPercent  the new upper bound.
     * @param state  the plot state.
     * @param source  the source point (in Java2D coordinates).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>zoom</name><argument_list>(<argument><expr>(<name>upperPercent</name> + <name>lowerPercent</name>) / 2.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>   

    <comment type="javadoc">/**
     * Returns &lt;code&gt;false&lt;/code&gt; always.
     * 
     * @return &lt;code&gt;false&lt;/code&gt; always.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; to indicate that the range axis is zoomable.
     * 
     * @return &lt;code&gt;true&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the orientation of the plot.
     * 
     * @return The orientation.
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotOrientation</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper bound of the radius axis.
     * 
     * @return The upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaxRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>axis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Translates a (theta, radius) pair into Java2D coordinates.  If 
     * &lt;code&gt;radius&lt;/code&gt; is less than the lower bound of the axis, then
     * this method returns the centre point.
     * 
     * @param angleDegrees  the angle in degrees.
     * @param radius  the radius.
     * @param dataArea  the data area.
     * 
     * @return A point in Java2D space.
     */</comment>   
    <function><type><specifier>public</specifier> <name>Point</name></type> <name>translateValueThetaRadiusToJava2D</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angleDegrees</name></decl></param>, 
                                                   <param><decl><type><name>double</name></type> <name>radius</name></decl></param>,
                                                   <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>)</parameter_list> <block>{
       
        <decl_stmt><decl><type><name>double</name></type> <name>radians</name> =<init> <expr><call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>angleDegrees</name> - 90.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>double</name></type> <name>minx</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call> + <name>MARGIN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxx</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call> - <name>MARGIN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>miny</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <name>MARGIN</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>maxy</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <name>MARGIN</name></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>double</name></type> <name>lengthX</name> =<init> <expr><name>maxx</name> - <name>minx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>lengthY</name> =<init> <expr><name>maxy</name> - <name>miny</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>length</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>lengthX</name></expr></argument>, <argument><expr><name>lengthY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>double</name></type> <name>midX</name> =<init> <expr><name>minx</name> + <name>lengthX</name> / 2.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>midY</name> =<init> <expr><name>miny</name> + <name>lengthY</name> / 2.0</expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>double</name></type> <name>axisMin</name> =<init> <expr><call><name><name>this</name>.<name>axis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>axisMax</name> =<init>  <expr><call><name>getMaxRadius</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>adjustedRadius</name> =<init> <expr><call><name><name>Math</name>.<name>max</name></name><argument_list>(<argument><expr><name>radius</name></expr></argument>, <argument><expr><name>axisMin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xv</name> =<init> <expr><name>length</name> / 2.0 * <call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yv</name> =<init> <expr><name>length</name> / 2.0 * <call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>radians</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>x</name> =<init> <expr><call>(<name>float</name>) <argument_list>(<argument><expr><name>midX</name> + (<name>xv</name> * (<name>adjustedRadius</name> - <name>axisMin</name>) 
                / (<name>axisMax</name> - <name>axisMin</name>))</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> =<init> <expr><call>(<name>float</name>) <argument_list>(<argument><expr><name>midY</name> + (<name>yv</name> * (<name>adjustedRadius</name> - <name>axisMin</name>) 
                / (<name>axisMax</name> - <name>axisMin</name>))</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>int</name></type> <name>ix</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iy</name> =<init> <expr><call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      
        <decl_stmt><decl><type><name>Point</name></type> <name>p</name> =<init> <expr>new <call><name>Point</name><argument_list>(<argument><expr><name>ix</name></expr></argument>, <argument><expr><name>iy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>p</name></expr>;</return>
        
    }</block></function>
    
}</block></class>
</unit>
