<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\RingPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -------------
 * RingPlot.java
 * -------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limtied);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 08-Nov-2004 : Version 1 (DG);
 * 22-Feb-2005 : Renamed DonutPlot --&gt; RingPlot (DG);
 * 06-Jun-2005 : Added default constructor and fixed equals() method to handle
 *               GradientPaint (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 20-Dec-2005 : Fixed problem with entity shape (bug 1386328) (DG);
 * 27-Sep-2006 : Updated drawItem() method for new lookup methods (DG);
 * 12-Oct-2006 : Added configurable section depth (DG);
 * 14-Feb-2007 : Added notification in setSectionDepth() method (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>GeneralPath</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>PieSectionEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>PieToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>PieURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>PieDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>Rotation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>UnitType</name></name>;</import>

<comment type="javadoc">/**
 * A customised pie plot that leaves a hole in the middle.
 */</comment>
<class><specifier>public</specifier> class <name>RingPlot</name> <super><extends>extends <name>PiePlot</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1556064784129676620L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * A flag that controls whether or not separators are drawn between the
     * sections of the chart.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>separatorsVisible</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The stroke used to draw separators. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>separatorStroke</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The paint used to draw separators. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>separatorPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The length of the inner separator extension (as a percentage of the
     * depth of the sections). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>innerSeparatorExtension</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** 
     * The length of the outer separator extension (as a percentage of the
     * depth of the sections). 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>outerSeparatorExtension</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The depth of the section as a percentage of the diameter.  
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>sectionDepth</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new plot with a &lt;code&gt;null&lt;/code&gt; dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>RingPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new plot for the specified dataset.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>RingPlot</name><parameter_list>(<param><decl><type><name>PieDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separatorsVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separatorStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separatorPaint</name></name> = <name><name>Color</name>.<name>gray</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>innerSeparatorExtension</name></name> = 0.20</expr>;</expr_stmt>  <comment type="line">// twenty percent</comment>
        <expr_stmt><expr><name><name>this</name>.<name>outerSeparatorExtension</name></name> = 0.20</expr>;</expr_stmt>  <comment type="line">// twenty percent</comment>
        <expr_stmt><expr><name><name>this</name>.<name>sectionDepth</name></name> = 0.20</expr>;</expr_stmt> <comment type="line">// 20%</comment>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns a flag that indicates whether or not separators are drawn between
     * the sections in the chart.
     * 
     * @return A boolean.
     *
     * @see #setSeparatorsVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getSeparatorsVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>separatorsVisible</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the flag that controls whether or not separators are drawn between 
     * the sections in the chart, and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param visible  the flag.
     * 
     * @see #getSeparatorsVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeparatorsVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>separatorsVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the separator stroke.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeparatorStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSeparatorStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>separatorStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the separator between sections and sends 
     * a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSeparatorStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeparatorStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>separatorStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the separator paint.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeparatorPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSeparatorPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>separatorPaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the separator between sections and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSeparatorPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeparatorPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>separatorPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length of the inner extension of the separator line that
     * is drawn between sections, expressed as a percentage of the depth of
     * the section.
     * 
     * @return The inner separator extension (as a percentage).
     * 
     * @see #setInnerSeparatorExtension(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getInnerSeparatorExtension</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>innerSeparatorExtension</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the length of the inner extension of the separator line that is
     * drawn between sections, as a percentage of the depth of the 
     * sections, and sends a {@link PlotChangeEvent} to all registered 
     * listeners.
     * 
     * @param percent  the percentage.
     * 
     * @see #getInnerSeparatorExtension()
     * @see #setOuterSeparatorExtension(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInnerSeparatorExtension</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>innerSeparatorExtension</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the length of the outer extension of the separator line that
     * is drawn between sections, expressed as a percentage of the depth of
     * the section.
     * 
     * @return The outer separator extension (as a percentage).
     * 
     * @see #setOuterSeparatorExtension(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getOuterSeparatorExtension</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>outerSeparatorExtension</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the length of the outer extension of the separator line that is
     * drawn between sections, as a percentage of the depth of the 
     * sections, and sends a {@link PlotChangeEvent} to all registered 
     * listeners.
     * 
     * @param percent  the percentage.
     * 
     * @see #getOuterSeparatorExtension()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOuterSeparatorExtension</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>outerSeparatorExtension</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the depth of each section, expressed as a percentage of the
     * plot radius.
     * 
     * @return The depth of each section.
     * 
     * @see #setSectionDepth(double)
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getSectionDepth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>sectionDepth</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * The section depth is given as percentage of the plot radius.
     * Specifying 1.0 results in a straightforward pie chart.
     * 
     * @param sectionDepth  the section depth.
     *
     * @see #getSectionDepth()
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSectionDepth</name><parameter_list>(<param><decl><type><name>double</name></type> <name>sectionDepth</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>sectionDepth</name></name> = <name>sectionDepth</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initialises the plot state (which will store the total of all dataset
     * values, among other things).  This method is called once at the 
     * beginning of each drawing.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plot  the plot.
     * @param index  the secondary index (&lt;code&gt;null&lt;/code&gt; for primary 
     *               renderer).
     * @param info  collects chart rendering information for return to caller.
     * 
     * @return A state object (maintains state information relevant to one 
     *         chart drawing).
     */</comment>
    <function><type><specifier>public</specifier> <name>PiePlotState</name></type> <name>initialise</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
            <param><decl><type><name>PiePlot</name></type> <name>plot</name></decl></param>, <param><decl><type><name>Integer</name></type> <name>index</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PiePlotState</name></type> <name>state</name> =<init> <expr><call><name><name>super</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>plot</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>state</name>.<name>setPassesRequired</name></name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>state</name></expr>;</return>   

    }</block></function>

    <comment type="javadoc">/**
     * Draws a single data item.
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param section  the section index.
     * @param dataArea  the data plot area.
     * @param state  state information for one chart.
     * @param currentPass  the current pass index.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawItem</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>section</name></decl></param>,
                            <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                            <param><decl><type><name>PiePlotState</name></type> <name>state</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>currentPass</name></decl></param>)</parameter_list> <block>{
    
        <decl_stmt><decl><type><name>PieDataset</name></type> <name>dataset</name> =<init> <expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>n</name> =<init> <expr><call><name><name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>n</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>angle1</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>angle2</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>Rotation</name></type> <name>direction</name> =<init> <expr><call><name>getDirection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>direction</name> == <name><name>Rotation</name>.<name>CLOCKWISE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>angle1</name> = <call><name><name>state</name>.<name>getLatestAngle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>angle2</name> = <name>angle1</name> - <name>value</name> / <call><name><name>state</name>.<name>getTotal</name></name><argument_list>()</argument_list></call> * 360.0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>direction</name> == <name><name>Rotation</name>.<name>ANTICLOCKWISE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>angle1</name> = <call><name><name>state</name>.<name>getLatestAngle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>angle2</name> = <name>angle1</name> + <name>value</name> / <call><name><name>state</name>.<name>getTotal</name></name><argument_list>()</argument_list></call> * 360.0</expr>;</expr_stmt>         
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Rotation type not recognised."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></else></if></else></if>
        
        <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr>(<name>angle2</name> - <name>angle1</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call> &gt; <call><name>getMinimumArcAngleToDraw</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Comparable</name></type> <name>key</name> =<init> <expr><call><name>getSectionKey</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ep</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>mep</name> =<init> <expr><call><name>getMaximumExplodePercent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mep</name> &gt; 0.0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ep</name> = <call><name>getExplodePercent</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> / <name>mep</name></expr>;</expr_stmt>                
            }</block></then></if>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>arcBounds</name> =<init> <expr><call><name>getArcBounds</name><argument_list>(<argument><expr><call><name><name>state</name>.<name>getPieArea</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>state</name>.<name>getExplodedPieArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>angle1</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>            
            <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>arcBounds</name></expr></argument>, <argument><expr><name>angle1</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, 
                    <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// create the bounds for the inner arc</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>depth</name> =<init> <expr><name><name>this</name>.<name>sectionDepth</name></name> / 2.0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>s</name> =<init> <expr>new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name><name>UnitType</name>.<name>RELATIVE</name></name></expr></argument>, 
                <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>innerArcBounds</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>innerArcBounds</name>.<name>setRect</name></name><argument_list>(<argument><expr><name>arcBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name>.<name>trim</name></name><argument_list>(<argument><expr><name>innerArcBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// calculate inner arc in reverse direction, for later </comment>
            <comment type="line">// GeneralPath construction</comment>
            <decl_stmt><decl><type><name><name>Arc2D</name>.<name>Double</name></name></type> <name>arc2</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>innerArcBounds</name></expr></argument>, <argument><expr><name>angle1</name> 
                    + <name>angle</name></expr></argument>, <argument><expr>-<name>angle</name></expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>GeneralPath</name></type> <name>path</name> =<init> <expr>new <call><name>GeneralPath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>path</name>.<name>moveTo</name></name><argument_list>(<argument><expr>(<name>float</name>) <call><name><name>arc</name>.<name>getStartPoint</name></name><argument_list>()</argument_list></call>.<call><name>getX</name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr>(<name>float</name>) <call><name><name>arc</name>.<name>getStartPoint</name></name><argument_list>()</argument_list></call>.<call><name>getY</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>arc</name>.<name>getPathIterator</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>arc2</name>.<name>getPathIterator</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>path</name>.<name>closePath</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>Line2D</name></type> <name>separator</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>arc2</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></argument>, 
                    <argument><expr><call><name><name>arc</name>.<name>getStartPoint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            
            <if>if <condition>(<expr><name>currentPass</name> == 0</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Paint</name></type> <name>shadowPaint</name> =<init> <expr><call><name>getShadowPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>shadowXOffset</name> =<init> <expr><call><name>getShadowXOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>shadowYOffset</name> =<init> <expr><call><name>getShadowYOffset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>shadowPaint</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Shape</name></type> <name>shadowArc</name> =<init> <expr><call><name><name>ShapeUtilities</name>.<name>createTranslatedShape</name></name><argument_list>(
                            <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>float</name>) <name>shadowXOffset</name></expr></argument>, <argument><expr>(<name>float</name>) <name>shadowYOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>shadowPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>shadowArc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>currentPass</name> == 1</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>lookupSectionPaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>lookupSectionOutlinePaint</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>lookupSectionOutlineStroke</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>outlinePaint</name> != <name>null</name> &amp;&amp; <name>outlineStroke</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>outlineStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                
                <comment type="line">// add an entity for the pie section</comment>
                <if>if <condition>(<expr><call><name><name>state</name>.<name>getInfo</name></name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><call><name><name>state</name>.<name>getEntityCollection</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PieToolTipGenerator</name></type> <name>toolTipGenerator</name> 
                                =<init> <expr><call><name>getToolTipGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>toolTipGenerator</name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>tip</name> = <call><name><name>toolTipGenerator</name>.<name>generateToolTip</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, 
                                    <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>PieURLGenerator</name></type> <name>urlGenerator</name> =<init> <expr><call><name>getURLGenerator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>urlGenerator</name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>url</name> = <call><name><name>urlGenerator</name>.<name>generateURL</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, 
                                    <argument><expr><call><name>getPieIndex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <decl_stmt><decl><type><name>PieSectionEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>PieSectionEntity</name><argument_list>(<argument><expr><name>path</name></expr></argument>, 
                                <argument><expr><name>dataset</name></expr></argument>, <argument><expr><call><name>getPieIndex</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, 
                                <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name>currentPass</name> == 2</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>separatorsVisible</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Line2D</name></type> <name>extendedSeparator</name> =<init> <expr><call><name>extendLine</name><argument_list>(<argument><expr><name>separator</name></expr></argument>,
                        <argument><expr><name><name>this</name>.<name>innerSeparatorExtension</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>outerSeparatorExtension</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>extendedSeparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></else></if></else></if>
        }</block></then></if>    
        <expr_stmt><expr><call><name><name>state</name>.<name>setLatestAngle</name></name><argument_list>(<argument><expr><name>angle2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this plot for equality with an arbitrary object.
     * 
     * @param obj  the object to test against (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> == <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>RingPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>RingPlot</name></type> <name>that</name> =<init> <expr>(<name>RingPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>separatorsVisible</name></name> != <name><name>that</name>.<name>separatorsVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>separatorStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>separatorPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>innerSeparatorExtension</name></name> != <name><name>that</name>.<name>innerSeparatorExtension</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>outerSeparatorExtension</name></name> != <name><name>that</name>.<name>outerSeparatorExtension</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>sectionDepth</name></name> != <name><name>that</name>.<name>sectionDepth</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Creates a new line by extending an existing line.
     * 
     * @param line  the line (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param startPercent  the amount to extend the line at the start point 
     *                      end.
     * @param endPercent  the amount to extend the line at the end point end.
     * 
     * @return A new line.
     */</comment>
    <function><type><specifier>private</specifier> <name>Line2D</name></type> <name>extendLine</name><parameter_list>(<param><decl><type><name>Line2D</name></type> <name>line</name></decl></param>, <param><decl><type><name>double</name></type> <name>startPercent</name></decl></param>, 
                              <param><decl><type><name>double</name></type> <name>endPercent</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>line</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'line' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> =<init> <expr><call><name><name>line</name>.<name>getX1</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> =<init> <expr><call><name><name>line</name>.<name>getX2</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>deltaX</name> =<init> <expr><name>x2</name> - <name>x1</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> =<init> <expr><call><name><name>line</name>.<name>getY1</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> =<init> <expr><call><name><name>line</name>.<name>getY2</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>deltaY</name> =<init> <expr><name>y2</name> - <name>y1</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x1</name> = <name>x1</name> - (<name>startPercent</name> * <name>deltaX</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>y1</name> = <name>y1</name> - (<name>startPercent</name> * <name>deltaY</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>x2</name> = <name>x2</name> + (<name>endPercent</name> * <name>deltaX</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>y2</name> = <name>y2</name> + (<name>endPercent</name> * <name>deltaY</name>)</expr>;</expr_stmt>
        <return>return <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>separatorPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> 
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separatorStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>separatorPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
}</block></class>
</unit>
