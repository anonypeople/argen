<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\SpiderWebPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 * 
 * ------------------
 * SpiderWebPlot.java
 * ------------------
 * (C) Copyright 2005-2007, by Heaps of Flavour Pty Ltd and Contributors.
 *
 * Company Info:  http://www.i4-talent.com
 *
 * Original Author:  Don Elliott;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *                   Nina Jeliazkova;
 *
 * Changes
 * -------
 * 28-Jan-2005 : First cut - missing a few features - still to do:
 *                           - needs tooltips/URL/label generator functions
 *                           - ticks on axes / background grid?
 * 31-Jan-2005 : Renamed SpiderWebPlot, added label generator support, and 
 *               reformatted for consistency with other source files in 
 *               JFreeChart (DG);
 * 20-Apr-2005 : Renamed CategoryLabelGenerator 
 *               --&gt; CategoryItemLabelGenerator (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 10-Jun-2005 : Added equals() method and fixed serialization (DG);
 * 16-Jun-2005 : Added default constructor and get/setDataset() 
 *               methods (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Apr-2006 : Fixed bug preventing the display of zero values - see patch
 *               1462727 (DG);
 * 05-Apr-2006 : Added support for mouse clicks, tool tips and URLs - see patch
 *               1463455 (DG);
 * 01-Jun-2006 : Fix bug 1493199, NullPointerException when drawing with null
 *               info (DG);
 * 05-Feb-2007 : Added attributes for axis stroke and paint, while fixing
 *               bug 1651277, and implemented clone() properly (DG);
 * 06-Feb-2007 : Changed getPlotValue() to protected, as suggested in bug 
 *               1605202 (DG);
 * 05-Mar-2007 : Restore clip region correctly (see bug 1667750) (DG);
 * 18-May-2007 : Set dataset for LegendItem (DG);
 *
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Polygon</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Rectangle</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>FontRenderContext</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>font</name>.<name>LineMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>CategoryItemEntity</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>entity</name>.<name>EntityCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>CategoryToolTipGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>labels</name>.<name>StandardCategoryItemLabelGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>urls</name>.<name>CategoryURLGenerator</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>category</name>.<name>CategoryDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>Rotation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ShapeUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>StrokeList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>TableOrder</name></name>;</import>

<comment type="javadoc">/**
 * A plot that displays data from a {@link CategoryDataset} in the form of a 
 * "spider web".  Multiple series can be plotted on the same axis to allow 
 * easy comparison.  This plot doesn't support negative values at present.
 */</comment>
<class><specifier>public</specifier> class <name>SpiderWebPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{
    
    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>-5376340422031599463L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default head radius percent (currently 1%). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_HEAD</name> =<init> <expr>0.01</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default axis label gap (currently 10%). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_AXIS_LABEL_GAP</name> =<init> <expr>0.10</expr></init></decl>;</decl_stmt>
 
    <comment type="javadoc">/** The default interior gap. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_INTERIOR_GAP</name> =<init> <expr>0.25</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum interior gap (currently 40%). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>MAX_INTERIOR_GAP</name> =<init> <expr>0.40</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default starting angle for the radar chart axes. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_START_ANGLE</name> =<init> <expr>90.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default series label font. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Font</name></type> <name>DEFAULT_LABEL_FONT</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, 
            <argument><expr><name><name>Font</name>.<name>PLAIN</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default series label paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type>  <name>DEFAULT_LABEL_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default series label background paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type>  <name>DEFAULT_LABEL_BACKGROUND_PAINT</name> 
            =<init> <expr>new <call><name>Color</name><argument_list>(<argument><expr>255</expr></argument>, <argument><expr>255</expr></argument>, <argument><expr>192</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default series label outline paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type>  <name>DEFAULT_LABEL_OUTLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default series label outline stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_LABEL_OUTLINE_STROKE</name> 
            =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default series label shadow paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type>  <name>DEFAULT_LABEL_SHADOW_PAINT</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default maximum value plotted - forces the plot to evaluate
     *  the maximum from the data passed in
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_MAX_VALUE</name> =<init> <expr>-1.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The head radius as a percentage of the available drawing area. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <name>double</name></type> <name>headPercent</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The space left around the outside of the plot as a percentage. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>interiorGap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The gap between the labels and the axes as a %age of the radius. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>axisLabelGap</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The paint used to draw the axis lines.
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>axisLinePaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/**
     * The stroke used to draw the axis lines.
     * 
     * @since 1.0.4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>axisLineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The maximum value we are plotting against on each category axis */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>maxValue</name></decl>;</decl_stmt>
  
    <comment type="javadoc">/** 
     * The data extract order (BY_ROW or BY_COLUMN). This denotes whether
     * the data series are stored in rows (in which case the category names are
     * derived from the column keys) or in columns (in which case the category
     * names are derived from the row keys).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>TableOrder</name></type> <name>dataExtractOrder</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The starting angle. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>startAngle</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The direction for drawing the radar axis &amp; plots. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Rotation</name></type> <name>direction</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The legend item shape. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Shape</name></type> <name>legendItemShape</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint for ALL series (overrides list). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>seriesPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The series paint list. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PaintList</name></type> <name>seriesPaintList</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base series paint (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>baseSeriesPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The outline paint for ALL series (overrides list). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>seriesOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The series outline paint list. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PaintList</name></type> <name>seriesOutlinePaintList</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base series outline paint (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>baseSeriesOutlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The outline stroke for ALL series (overrides list). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>seriesOutlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The series outline stroke list. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>StrokeList</name></type> <name>seriesOutlineStrokeList</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The base series outline stroke (fallback). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>baseSeriesOutlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The font used to display the category labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>labelFont</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to draw the category labels. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>labelPaint</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The label generator. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryItemLabelGenerator</name></type> <name>labelGenerator</name></decl>;</decl_stmt>

    <comment type="javadoc">/** controls if the web polygons are filled or not */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>webFilled</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A tooltip generator for the plot (&lt;code&gt;null&lt;/code&gt; permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryToolTipGenerator</name></type> <name>toolTipGenerator</name></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A URL generator for the plot (&lt;code&gt;null&lt;/code&gt; permitted). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>CategoryURLGenerator</name></type> <name>urlGenerator</name></decl>;</decl_stmt>
  
    <comment type="javadoc">/**
     * Creates a default plot with no dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>SpiderWebPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new spider web plot with the given dataset, with each row
     * representing a series.  
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>SpiderWebPlot</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name><name>TableOrder</name>.<name>BY_ROW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new spider web plot with the given dataset.
     * 
     * @param dataset  the dataset.
     * @param extract  controls how data is extracted ({@link TableOrder#BY_ROW}
     *                 or {@link TableOrder#BY_COLUMN}).
     */</comment>
    <constructor><specifier>public</specifier> <name>SpiderWebPlot</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>TableOrder</name></type> <name>extract</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>extract</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'extract' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>dataExtractOrder</name></name> = <name>extract</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>headPercent</name></name> = <name>DEFAULT_HEAD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLabelGap</name></name> = <name>DEFAULT_AXIS_LABEL_GAP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>interiorGap</name></name> = <name>DEFAULT_INTERIOR_GAP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>DEFAULT_START_ANGLE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>direction</name></name> = <name><name>Rotation</name>.<name>CLOCKWISE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>maxValue</name></name> = <name>DEFAULT_MAX_VALUE</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>seriesPaint</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesPaintList</name></name> = new <call><name>PaintList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesPaint</name></name> = <name>null</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlinePaint</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlinePaintList</name></name> = new <call><name>PaintList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name> = <name>DEFAULT_OUTLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlineStroke</name></name> = <name>null</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlineStrokeList</name></name> = new <call><name>StrokeList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlineStroke</name></name> = <name>DEFAULT_OUTLINE_STROKE</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>DEFAULT_LABEL_FONT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>DEFAULT_LABEL_PAINT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelGenerator</name></name> = new <call><name>StandardCategoryItemLabelGenerator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <name>DEFAULT_LEGEND_ITEM_CIRCLE</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     * 
     * @return The plot type.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// return localizationResources.getString("Radar_Plot");</comment>
        <return>return <expr>("Spider Web Plot")</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the dataset.
     * 
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(CategoryDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>CategoryDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self to trigger plot change event</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Method to determine if the web chart is to be filled.
     * 
     * @return A boolean.
     * 
     * @see #setWebFilled(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isWebFilled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>webFilled</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the webFilled flag and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param flag  the flag.
     * 
     * @see #isWebFilled()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWebFilled</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>webFilled</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  
    <comment type="javadoc">/**
     * Returns the data extract order (by row or by column).
     * 
     * @return The data extract order (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataExtractOrder(TableOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>TableOrder</name></type> <name>getDataExtractOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataExtractOrder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the data extract order (by row or by column) and sends a
     * {@link PlotChangeEvent}to all registered listeners.
     * 
     * @param order the order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;order&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *     
     * @see #getDataExtractOrder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataExtractOrder</name><parameter_list>(<param><decl><type><name>TableOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>dataExtractOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the head percent.
     * 
     * @return The head percent.
     * 
     * @see #setHeadPercent(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getHeadPercent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>headPercent</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the head percent and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param percent  the percent.
     * 
     * @see #getHeadPercent()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setHeadPercent</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>headPercent</name></name> = <name>percent</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the start angle for the first radar axis.
     * &lt;BR&gt;
     * This is measured in degrees starting from 3 o'clock (Java Arc2D default)
     * and measuring anti-clockwise.
     * 
     * @return The start angle.
     * 
     * @see #setStartAngle(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getStartAngle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>startAngle</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the starting angle and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * &lt;P&gt;
     * The initial default value is 90 degrees, which corresponds to 12 o'clock.
     * A value of zero corresponds to 3 o'clock... this is the encoding used by
     * Java's Arc2D class.
     * 
     * @param angle  the angle (in degrees).
     * 
     * @see #getStartAngle()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setStartAngle</name><parameter_list>(<param><decl><type><name>double</name></type> <name>angle</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>startAngle</name></name> = <name>angle</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum value any category axis can take.
     * 
     * @return The maximum value.
     * 
     * @see #setMaxValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getMaxValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maximum value any category axis can take and sends 
     * a {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param value  the maximum value.
     * 
     * @see #getMaxValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the direction in which the radar axes are drawn
     * (clockwise or anti-clockwise).
     * 
     * @return The direction (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDirection(Rotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>Rotation</name></type> <name>getDirection</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>direction</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the direction in which the radar axes are drawn and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param direction  the direction (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDirection()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDirection</name><parameter_list>(<param><decl><type><name>Rotation</name></type> <name>direction</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>direction</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'direction' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>direction</name></name> = <name>direction</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the interior gap, measured as a percentage of the available 
     * drawing space.
     * 
     * @return The gap (as a percentage of the available drawing space).
     * 
     * @see #setInteriorGap(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getInteriorGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>interiorGap</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the interior gap and sends a {@link PlotChangeEvent} to all 
     * registered listeners. This controls the space between the edges of the 
     * plot and the plot area itself (the region where the axis labels appear).
     * 
     * @param percent  the gap (as a percentage of the available drawing space).
     * 
     * @see #getInteriorGap()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setInteriorGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>percent</name> &lt; 0.0) || (<name>percent</name> &gt; <name>MAX_INTERIOR_GAP</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Percentage outside valid range."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>interiorGap</name></name> != <name>percent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>interiorGap</name></name> = <name>percent</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the axis label gap.
     * 
     * @return The axis label gap.
     * 
     * @see #setAxisLabelGap(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getAxisLabelGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLabelGap</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the axis label gap and sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     * 
     * @param gap  the gap.
     * 
     * @see #getAxisLabelGap()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLabelGap</name><parameter_list>(<param><decl><type><name>double</name></type> <name>gap</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>axisLabelGap</name></name> = <name>gap</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the paint used to draw the axis lines.
     * 
     * @return The paint used to draw the axis lines (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisLinePaint(Paint)
     * @see #getAxisLineStroke()
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getAxisLinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLinePaint</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the paint used to draw the axis lines and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisLinePaint()
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the stroke used to draw the axis lines.
     * 
     * @return The stroke used to draw the axis lines (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisLineStroke(Stroke)
     * @see #getAxisLinePaint()
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getAxisLineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLineStroke</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the stroke used to draw the axis lines and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisLineStroke()
     * @since 1.0.4
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">//// SERIES PAINT /////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the paint for ALL series in the plot.
     * 
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeriesPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSeriesPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for ALL series in the plot. If this is set to&lt;/code&gt; null
     * &lt;/code&gt;, then a list of paints is used instead (to allow different colors
     * to be used for each series of the radar group).
     * 
     * @param paint the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSeriesPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the specified series.
     * 
     * @param series  the series index (zero-based).
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeriesPaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSeriesPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// return the override, if there is one...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>seriesPaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>seriesPaint</name></name></expr>;</return>
        }</block></then></if>

        <comment type="line">// otherwise look up the paint list</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>seriesPaintList</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>DrawingSupplier</name></type> <name>supplier</name> =<init> <expr><call><name>getDrawingSupplier</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>supplier</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Paint</name></type> <name>p</name> =<init> <expr><call><name><name>supplier</name>.<name>getNextPaint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>seriesPaintList</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> = <name>p</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSeriesPaint</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill a series of the radar and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getSeriesPaint(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesPaintList</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base series paint. This is used when no other paint is
     * available.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setBaseSeriesPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBaseSeriesPaint</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name>.<name>baseSeriesPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base series paint.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getBaseSeriesPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSeriesPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//// SERIES OUTLINE PAINT ////////////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the outline paint for ALL series in the plot.
     * 
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSeriesOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesOutlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outline paint for ALL series in the plot. If this is set to
     * &lt;/code&gt; null&lt;/code&gt;, then a list of paints is used instead (to allow
     * different colors to be used for each series).
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the specified series.
     * 
     * @param series  the series index (zero-based).
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSeriesOutlinePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// return the override, if there is one...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>seriesOutlinePaint</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>seriesOutlinePaint</name></name></expr>;</return>
        }</block></then></if>
        <comment type="line">// otherwise look up the paint list</comment>
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>seriesOutlinePaintList</name>.<name>getPaint</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSeriesOutlinePaint</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to fill a series of the radar and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlinePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesOutlinePaintList</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base series paint. This is used when no other paint is
     * available.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getBaseSeriesOutlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base series paint.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSeriesOutlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//// SERIES OUTLINE STROKE /////////////////////</comment>

    <comment type="javadoc">/**
     * Returns the outline stroke for ALL series in the plot.
     * 
     * @return The stroke (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSeriesOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesOutlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the outline stroke for ALL series in the plot. If this is set to
     * &lt;/code&gt; null&lt;/code&gt;, then a list of paints is used instead (to allow
     * different colors to be used for each series).
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke for the specified series.
     * 
     * @param series  the series index (zero-based).
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getSeriesOutlineStroke</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// return the override, if there is one...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>seriesOutlineStroke</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>seriesOutlineStroke</name></name></expr>;</return>
        }</block></then></if>

        <comment type="line">// otherwise look up the paint list</comment>
        <decl_stmt><decl><type><name>Stroke</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>seriesOutlineStrokeList</name>.<name>getStroke</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>baseSeriesOutlineStroke</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to fill a series of the radar and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesOutlineStroke</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>seriesOutlineStrokeList</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the base series stroke. This is used when no other stroke is
     * available.
     * 
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getBaseSeriesOutlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>baseSeriesOutlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the base series stroke.
     * 
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBaseSeriesOutlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the shape used for legend items.
     * 
     * @return The shape (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLegendItemShape(Shape)
     */</comment>
    <function><type><specifier>public</specifier> <name>Shape</name></type> <name>getLegendItemShape</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>legendItemShape</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the shape used for legend items and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     * 
     * @param shape  the shape (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLegendItemShape()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLegendItemShape</name><parameter_list>(<param><decl><type><name>Shape</name></type> <name>shape</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>shape</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'shape' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <name>shape</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the series label font.
     * 
     * @return The font (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getLabelFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the series label font and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param font  the font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>font</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>font</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelFont</name></name> = <name>font</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the series label paint.
     * 
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getLabelPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the series label paint and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the label generator.
     * 
     * @return The label generator (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setLabelGenerator(CategoryItemLabelGenerator)
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryItemLabelGenerator</name></type> <name>getLabelGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>labelGenerator</name></name></expr>;</return>   
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the label generator and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getLabelGenerator()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLabelGenerator</name><parameter_list>(<param><decl><type><name>CategoryItemLabelGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>generator</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'generator' argument."</expr></argument>)</argument_list></call></expr>;</throw>   
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>labelGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the tool tip generator for the plot.
     * 
     * @return The tool tip generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setToolTipGenerator(CategoryToolTipGenerator)
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryToolTipGenerator</name></type> <name>getToolTipGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>toolTipGenerator</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the tool tip generator for the plot and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getToolTipGenerator()
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setToolTipGenerator</name><parameter_list>(<param><decl><type><name>CategoryToolTipGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>toolTipGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the URL generator for the plot.
     * 
     * @return The URL generator (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setURLGenerator(CategoryURLGenerator)
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>CategoryURLGenerator</name></type> <name>getURLGenerator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>urlGenerator</name></name></expr>;</return>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the URL generator for the plot and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param generator  the generator (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getURLGenerator()
     * 
     * @since 1.0.2
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setURLGenerator</name><parameter_list>(<param><decl><type><name>CategoryURLGenerator</name></type> <name>generator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>urlGenerator</name></name> = <name>generator</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>notifyListeners</name></name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a collection of legend items for the radar chart.
     * 
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>List</name></type> <name>keys</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>keys</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_COLUMN</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>keys</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnKeys</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name>keys</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Shape</name></type> <name>shape</name> =<init> <expr><call><name>getLegendItemShape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> =<init> <expr><name>label</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>getSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr>new <call><name>LegendItem</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, 
                        <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>shape</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>item</name>.<name>setDataset</name></name><argument_list>(<argument><expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>series</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a cartesian point from a polar angle, length and bounding box
     * 
     * @param bounds  the area inside which the point needs to be.
     * @param angle  the polar angle, in degrees.
     * @param length  the relative length. Given in percent of maximum extend.
     * 
     * @return The cartesian point.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Point2D</name></type> <name>getWebPoint</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>bounds</name></decl></param>, 
                                  <param><decl><type><name>double</name></type> <name>angle</name></decl></param>, <param><decl><type><name>double</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>angrad</name> =<init> <expr><call><name><name>Math</name>.<name>toRadians</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>Math</name>.<name>cos</name></name><argument_list>(<argument><expr><name>angrad</name></expr></argument>)</argument_list></call> * <name>length</name> * <call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr>-<call><name><name>Math</name>.<name>sin</name></name><argument_list>(<argument><expr><name>angrad</name></expr></argument>)</argument_list></call> * <name>length</name> * <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2</expr></init></decl>;</decl_stmt>

        <return>return <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>bounds</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>x</name> + <call><name><name>bounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2</expr></argument>, 
                <argument><expr><call><name><name>bounds</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>y</name> + <call><name><name>bounds</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a
     * printer).
     * 
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list>
    <block>{
        <comment type="line">// adjust for insets...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr>0</expr></init>, <name>catCount</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>seriesCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>catCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>seriesCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>catCount</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getRowCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// ensure we have a maximum value to use on the axes</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>maxValue</name></name> == <name>DEFAULT_MAX_VALUE</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>calculateMaxValue</name><argument_list>(<argument><expr><name>seriesCount</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <comment type="line">// Next, setup the plot area </comment>
      
            <comment type="line">// adjust the plot area by the interior spacing value</comment>

            <decl_stmt><decl><type><name>double</name></type> <name>gapHorizontal</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <call><name>getInteriorGap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>gapVertical</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <call><name>getInteriorGap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>X</name> =<init> <expr><call><name><name>area</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <name>gapHorizontal</name> / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>Y</name> =<init> <expr><call><name><name>area</name>.<name>getY</name></name><argument_list>()</argument_list></call> + <name>gapVertical</name> / 2</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>W</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - <name>gapHorizontal</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>H</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - <name>gapVertical</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>double</name></type> <name>headW</name> =<init> <expr><call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>headPercent</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>headH</name> =<init> <expr><call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> * <name><name>this</name>.<name>headPercent</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// make the chart area a square</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>min</name> =<init> <expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call> / 2</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>X</name> = (<name>X</name> + <name>X</name> + <name>W</name>) / 2 - <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>Y</name> = (<name>Y</name> + <name>Y</name> + <name>H</name>) / 2 - <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>W</name> = 2 * <name>min</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>H</name> = 2 * <name>min</name></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Point2D</name></type>  <name>centre</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>X</name> + <name>W</name> / 2</expr></argument>, <argument><expr><name>Y</name> + <name>H</name> / 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>radarArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// draw the axis and category label</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>cat</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>cat</name> &lt; <name>catCount</name></expr>;</condition> <incr><expr><name>cat</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><call><name>getStartAngle</name><argument_list>()</argument_list></call>
                        + (<call><name>getDirection</name><argument_list>()</argument_list></call>.<call><name>getFactor</name><argument_list>()</argument_list></call> * <name>cat</name> * 360 / <name>catCount</name>)</expr></init></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name>Point2D</name></type> <name>endPoint</name> =<init> <expr><call><name>getWebPoint</name><argument_list>(<argument><expr><name>radarArea</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                                                     <comment type="line">// 1 = end of axis</comment>
                <decl_stmt><decl><type><name>Line2D</name></type>  <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>centre</name></expr></argument>, <argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>drawLabel</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>radarArea</name></expr></argument>, <argument><expr>0.0</expr></argument>, <argument><expr><name>cat</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, <argument><expr>360.0 / <name>catCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            
            <comment type="line">// Now actually plot each of the series polygons..</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name>drawRadarPoly</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>radarArea</name></expr></argument>, <argument><expr><name>centre</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>catCount</name></expr></argument>, 
                        <argument><expr><name>headH</name></expr></argument>, <argument><expr><name>headW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block>{ 
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * loop through each of the series to get the maximum value
     * on each category axis
     *
     * @param seriesCount  the number of series
     * @param catCount  the number of categories
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>calculateMaxValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>seriesCount</name></decl></param>, <param><decl><type><name>int</name></type> <name>catCount</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>v</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Number</name></type> <name>nV</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>seriesIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>seriesIndex</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>seriesIndex</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>catIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>catIndex</name> &lt; <name>catCount</name></expr>;</condition> <incr><expr><name>catIndex</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>nV</name> = <call><name>getPlotValue</name><argument_list>(<argument><expr><name>seriesIndex</name></expr></argument>, <argument><expr><name>catIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>nV</name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>v</name> = <call><name><name>nV</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>v</name> &gt; <name><name>this</name>.<name>maxValue</name></name></expr>)</condition><then> <block>{ 
                        <expr_stmt><expr><name><name>this</name>.<name>maxValue</name></name> = <name>v</name></expr>;</expr_stmt>
                    }</block></then></if>   
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a radar plot polygon.
     * 
     * @param g2 the graphics device.
     * @param plotArea the area we are plotting in (already adjusted).
     * @param centre the centre point of the radar axes
     * @param info chart rendering info.
     * @param series the series within the dataset we are plotting
     * @param catCount the number of categories per radar plot
     * @param headH the data point height
     * @param headW the data point width
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRadarPoly</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, 
                                 <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                 <param><decl><type><name>Point2D</name></type> <name>centre</name></decl></param>,
                                 <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>catCount</name></decl></param>,
                                 <param><decl><type><name>double</name></type> <name>headH</name></decl></param>, <param><decl><type><name>double</name></type> <name>headW</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Polygon</name></type> <name>polygon</name> =<init> <expr>new <call><name>Polygon</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>EntityCollection</name></type> <name>entities</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>entities</name> = <call><name><name>info</name>.<name>getOwner</name></name><argument_list>()</argument_list></call>.<call><name>getEntityCollection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// plot the data...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>cat</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>cat</name> &lt; <name>catCount</name></expr>;</condition> <incr><expr><name>cat</name>++</expr></incr>) <block>{

            <decl_stmt><decl><type><name>Number</name></type> <name>dataValue</name> =<init> <expr><call><name>getPlotValue</name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>dataValue</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>dataValue</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  
                <if>if <condition>(<expr><name>value</name> &gt;= 0</expr>)</condition><then> <block>{ <comment type="line">// draw the polygon series...</comment>
              
                    <comment type="line">// Finds our starting angle from the centre for this axis</comment>

                    <decl_stmt><decl><type><name>double</name></type> <name>angle</name> =<init> <expr><call><name>getStartAngle</name><argument_list>()</argument_list></call>
                        + (<call><name>getDirection</name><argument_list>()</argument_list></call>.<call><name>getFactor</name><argument_list>()</argument_list></call> * <name>cat</name> * 360 / <name>catCount</name>)</expr></init></decl>;</decl_stmt>

                    <comment type="line">// The following angle calc will ensure there isn't a top </comment>
                    <comment type="line">// vertical axis - this may be useful if you don't want any </comment>
                    <comment type="line">// given criteria to 'appear' move important than the </comment>
                    <comment type="line">// others..</comment>
                    <comment type="line">//  + (getDirection().getFactor() </comment>
                    <comment type="line">//        * (cat + 0.5) * 360 / catCount);</comment>

                    <comment type="line">// find the point at the appropriate distance end point </comment>
                    <comment type="line">// along the axis/angle identified above and add it to the</comment>
                    <comment type="line">// polygon</comment>

                    <decl_stmt><decl><type><name>Point2D</name></type> <name>point</name> =<init> <expr><call><name>getWebPoint</name><argument_list>(<argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>angle</name></expr></argument>, 
                            <argument><expr><name>value</name> / <name><name>this</name>.<name>maxValue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>polygon</name>.<name>addPoint</name></name><argument_list>(<argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>int</name>) <call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// put an elipse at the point being plotted..</comment>

                    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Paint</name></type> <name>outlinePaint</name> =<init> <expr><call><name>getSeriesOutlinePaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Stroke</name></type> <name>outlineStroke</name> =<init> <expr><call><name>getSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>head</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> 
                            - <name>headW</name> / 2</expr></argument>, <argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name>headH</name> / 2</expr></argument>, <argument><expr><name>headW</name></expr></argument>, 
                            <argument><expr><name>headH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>outlineStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><name>entities</name> != <name>null</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>tip</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>this</name>.<name>toolTipGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>tip</name> = <call><name><name>this</name>.<name>toolTipGenerator</name>.<name>generateToolTip</name></name><argument_list>(
                                    <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <decl_stmt><decl><type><name>String</name></type> <name>url</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>this</name>.<name>urlGenerator</name></name> != <name>null</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>url</name> = <call><name><name>this</name>.<name>urlGenerator</name>.<name>generateURL</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, 
                                   <argument><expr><name>series</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if> 
                   
                        <decl_stmt><decl><type><name>Shape</name></type> <name>area</name> =<init> <expr>new <call><name>Rectangle</name><argument_list>(
                                <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>point</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>headW</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>point</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name>headH</name></expr></argument>)</argument_list></call></expr></argument>, 
                                <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>headW</name> * 2</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>headH</name> * 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>CategoryItemEntity</name></type> <name>entity</name> =<init> <expr>new <call><name>CategoryItemEntity</name><argument_list>(
                                <argument><expr><name>area</name></expr></argument>, <argument><expr><name>tip</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, 
                                <argument><expr><call><name><name>this</name>.<name>dataset</name>.<name>getRowKey</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>this</name>.<name>dataset</name>.<name>getColumnKey</name></name><argument_list>(<argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
                        <expr_stmt><expr><call><name><name>entities</name>.<name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                
                    }</block></then></if>

                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <comment type="line">// Plot the polygon</comment>
    
        <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getSeriesPaint</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><call><name>getSeriesOutlineStroke</name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>polygon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Lastly, fill the web polygon if this is required</comment>
    
        <if>if <condition>(<expr><name><name>this</name>.<name>webFilled</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                    <argument><expr>0.1f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>polygon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                    <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the value to be plotted at the interseries of the 
     * series and the category.  This allows us to plot
     * &lt;code&gt;BY_ROW&lt;/code&gt; or &lt;code&gt;BY_COLUMN&lt;/code&gt; which basically is just 
     * reversing the definition of the categories and data series being 
     * plotted.
     * 
     * @param series the series to be plotted.
     * @param cat the category within the series to be plotted.
     * 
     * @return The value to be plotted (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDataExtractOrder()
     */</comment>
    <function><type><specifier>protected</specifier> <name>Number</name></type> <name>getPlotValue</name><parameter_list>(<param><decl><type><name>int</name></type> <name>series</name></decl></param>, <param><decl><type><name>int</name></type> <name>cat</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Number</name></type> <name>value</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_COLUMN</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>(<argument><expr><name>cat</name></expr></argument>, <argument><expr><name>series</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the label for one axis.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area
     * @param value  the value of the label (ignored).
     * @param cat  the category (zero-based index).
     * @param startAngle  the starting angle.
     * @param extent  the extent of the arc.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawLabel</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, 
                             <param><decl><type><name>int</name></type> <name>cat</name></decl></param>, <param><decl><type><name>double</name></type> <name>startAngle</name></decl></param>, <param><decl><type><name>double</name></type> <name>extent</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FontRenderContext</name></type> <name>frc</name> =<init> <expr><call><name><name>g2</name>.<name>getFontRenderContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
        <decl_stmt><decl><type><name>String</name></type> <name>label</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataExtractOrder</name></name> == <name><name>TableOrder</name>.<name>BY_ROW</name></name></expr>)</condition><then> <block>{
            <comment type="line">// if series are in rows, then the categories are the column keys</comment>
            <expr_stmt><expr><name>label</name> = <call><name><name>this</name>.<name>labelGenerator</name>.<name>generateColumnLabel</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="line">// if series are in columns, then the categories are the row keys</comment>
            <expr_stmt><expr><name>label</name> = <call><name><name>this</name>.<name>labelGenerator</name>.<name>generateRowLabel</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>dataset</name></name></expr></argument>, <argument><expr><name>cat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
 
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>labelBounds</name> =<init> <expr><call><name>getLabelFont</name><argument_list>()</argument_list></call>.<call><name>getStringBounds</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LineMetrics</name></type> <name>lm</name> =<init> <expr><call><name>getLabelFont</name><argument_list>()</argument_list></call>.<call><name>getLineMetrics</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>frc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ascent</name> =<init> <expr><call><name><name>lm</name>.<name>getAscent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Point2D</name></type> <name>labelLocation</name> =<init> <expr><call><name>calculateLabelLocation</name><argument_list>(<argument><expr><name>labelBounds</name></expr></argument>, <argument><expr><name>ascent</name></expr></argument>, 
                <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Composite</name></type> <name>saveComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr>1.0f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getLabelPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><call><name>getLabelFont</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr>(<name>float</name>) <call><name><name>labelLocation</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr>(<name>float</name>) <call><name><name>labelLocation</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>saveComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for a label
     * 
     * @param labelBounds the label bounds.
     * @param ascent the ascent (height of font).
     * @param plotArea the plot area
     * @param startAngle the start angle for the pie series.
     * 
     * @return The location for a label.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Point2D</name></type> <name>calculateLabelLocation</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>labelBounds</name></decl></param>, 
                                             <param><decl><type><name>double</name></type> <name>ascent</name></decl></param>,
                                             <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>, 
                                             <param><decl><type><name>double</name></type> <name>startAngle</name></decl></param>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>arc1</name> =<init> <expr>new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Point2D</name></type> <name>point1</name> =<init> <expr><call><name><name>arc1</name>.<name>getEndPoint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>deltaX</name> =<init> <expr>-(<call><name><name>point1</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <call><name><name>plotArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call>) 
                        * <name><name>this</name>.<name>axisLabelGap</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>deltaY</name> =<init> <expr>-(<call><name><name>point1</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <call><name><name>plotArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call>) 
                        * <name><name>this</name>.<name>axisLabelGap</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>labelX</name> =<init> <expr><call><name><name>point1</name>.<name>getX</name></name><argument_list>()</argument_list></call> - <name>deltaX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>labelY</name> =<init> <expr><call><name><name>point1</name>.<name>getY</name></name><argument_list>()</argument_list></call> - <name>deltaY</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>labelX</name> &lt; <call><name><name>plotArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelX</name> -= <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    
        <if>if <condition>(<expr><name>labelX</name> == <call><name><name>plotArea</name>.<name>getCenterX</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelX</name> -= <call><name><name>labelBounds</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2</expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>labelY</name> &gt; <call><name><name>plotArea</name>.<name>getCenterY</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labelY</name> += <name>ascent</name></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>labelX</name></expr></argument>, <argument><expr><name>labelY</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Tests this plot for equality with an arbitrary object.
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>SpiderWebPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <decl_stmt><decl><type><name>SpiderWebPlot</name></type> <name>that</name> =<init> <expr>(<name>SpiderWebPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>dataExtractOrder</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>dataExtractOrder</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>headPercent</name></name> != <name><name>that</name>.<name>headPercent</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>interiorGap</name></name> != <name><name>that</name>.<name>interiorGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>startAngle</name></name> != <name><name>that</name>.<name>startAngle</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>direction</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>direction</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>maxValue</name></name> != <name><name>that</name>.<name>maxValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>webFilled</name></name> != <name><name>that</name>.<name>webFilled</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>axisLabelGap</name></name> != <name><name>that</name>.<name>axisLabelGap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axisLinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>axisLineStroke</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>axisLineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ShapeUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>legendItemShape</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>seriesPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesPaintList</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesPaintList</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSeriesPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>baseSeriesPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesOutlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>seriesOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesOutlinePaintList</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>seriesOutlinePaintList</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>baseSeriesOutlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesOutlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>seriesOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>seriesOutlineStrokeList</name>.<name>equals</name></name><argument_list>(
                <argument><expr><name><name>that</name>.<name>seriesOutlineStrokeList</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>baseSeriesOutlineStroke</name>.<name>equals</name></name><argument_list>(
                <argument><expr><name><name>that</name>.<name>baseSeriesOutlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>labelFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>labelFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>labelPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>labelGenerator</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>labelGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>toolTipGenerator</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>toolTipGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>urlGenerator</name></name></expr></argument>,
                <argument><expr><name><name>that</name>.<name>urlGenerator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a clone of this plot.
     * 
     * @return A clone of this plot.
     * 
     * @throws CloneNotSupportedException if the plot cannot be cloned for 
     *         any reason.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>SpiderWebPlot</name></type> <name>clone</name> =<init> <expr>(<name>SpiderWebPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>legendItemShape</name></name> = <call><name><name>ShapeUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesPaintList</name></name> = (<name>PaintList</name>) <call><name><name>this</name>.<name>seriesPaintList</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesOutlinePaintList</name></name> 
                = (<name>PaintList</name>) <call><name><name>this</name>.<name>seriesOutlinePaintList</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>seriesOutlineStrokeList</name></name> 
                = (<name>StrokeList</name>) <call><name><name>this</name>.<name>seriesOutlineStrokeList</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeShape</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>legendItemShape</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSeriesPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>seriesOutlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>baseSeriesOutlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>labelPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisLineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
            <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>legendItemShape</name></name> = <call><name><name>SerialUtilities</name>.<name>readShape</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>seriesOutlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseSeriesOutlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>labelPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>axisLineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function> 

}</block></class>
</unit>
