<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\ThermometerPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * --------------------
 * ThermometerPlot.java
 * --------------------
 *
 * (C) Copyright 2000-2007, by Bryan Scott and Contributors.
 *
 * Original Author:  Bryan Scott (based on MeterPlot by Hari).
 * Contributor(s):   David Gilbert (for Object Refinery Limited).
 *                   Arnaud Lelievre;
 *                   Julien Henry (see patch 1769088) (DG);
 *
 * Changes
 * -------
 * 11-Apr-2002 : Version 1, contributed by Bryan Scott;
 * 15-Apr-2002 : Changed to implement VerticalValuePlot;
 * 29-Apr-2002 : Added getVerticalValueAxis() method (DG);
 * 25-Jun-2002 : Removed redundant imports (DG);
 * 17-Sep-2002 : Reviewed with Checkstyle utility (DG);
 * 18-Sep-2002 : Extensive changes made to API, to iron out bugs and 
 *               inconsistencies (DG);
 * 13-Oct-2002 : Corrected error datasetChanged which would generate exceptions
 *               when value set to null (BRS).
 * 23-Jan-2003 : Removed one constructor (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 02-Jun-2003 : Removed test for compatible range axis (DG);
 * 01-Jul-2003 : Added additional check in draw method to ensure value not 
 *               null (BRS);
 * 08-Sep-2003 : Added internationalization via use of properties 
 *               resourceBundle (RFE 690236) (AL);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 29-Sep-2003 : Updated draw to set value of cursor to non-zero and allow 
 *               painting of axis.  An incomplete fix and needs to be set for 
 *               left or right drawing (BRS);
 * 19-Nov-2003 : Added support for value labels to be displayed left of the 
 *               thermometer
 * 19-Nov-2003 : Improved axis drawing (now default axis does not draw axis line
 *               and is closer to the bulb).  Added support for the positioning
 *               of the axis to the left or right of the bulb. (BRS);
 * 03-Dec-2003 : Directly mapped deprecated setData()/getData() method to 
 *               get/setDataset() (TM);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 07-Apr-2004 : Changed string width calculation (DG);
 * 12-Nov-2004 : Implemented the new Zoomable interface (DG);
 * 06-Jan-2004 : Added getOrientation() method (DG);
 * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG);
 * 29-Mar-2005 : Fixed equals() method (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 09-Jun-2005 : Fixed more bugs in equals() method (DG);
 * 10-Jun-2005 : Fixed minor bug in setDisplayRange() method (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 14-Nov-2006 : Fixed margin when drawing (DG);
 * 03-May-2007 : Fixed datasetChanged() to handle null dataset, added null 
 *               argument check and event notification to setRangeAxis(), 
 *               added null argument check to setPadding(), setValueFont(),
 *               setValuePaint(), setValueFormat() and setMercuryPaint(), 
 *               deprecated get/setShowValueLines(), deprecated 
 *               getMinimum/MaximumVerticalDataValue(), and fixed serialization 
 *               bug (DG);
 * 24-Sep-2007 : Implemented new methods in Zoomable interface (DG);
 * 08-Oct-2007 : Added attributes for thermometer dimensions - see patch 1769088
 *               by Julien Henry (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Font</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Area</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>RoundRectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>text</name>.<name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>NumberAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DefaultValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>ValueDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>UnitType</name></name>;</import>

<comment type="javadoc">/**
 * A plot that displays a single value (from a {@link ValueDataset}) in a 
 * thermometer type display.
 * &lt;p&gt;
 * This plot supports a number of options:
 * &lt;ol&gt;
 * &lt;li&gt;three sub-ranges which could be viewed as 'Normal', 'Warning' 
 *   and 'Critical' ranges.&lt;/li&gt;
 * &lt;li&gt;the thermometer can be run in two modes:
 *      &lt;ul&gt;
 *      &lt;li&gt;fixed range, or&lt;/li&gt;
 *      &lt;li&gt;range adjusts to current sub-range.&lt;/li&gt;
 *      &lt;/ul&gt;
 * &lt;/li&gt;
 * &lt;li&gt;settable units to be displayed.&lt;/li&gt;
 * &lt;li&gt;settable display location for the value text.&lt;/li&gt;
 * &lt;/ol&gt;
 */</comment>
<class><specifier>public</specifier> class <name>ThermometerPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>ValueAxisPlot</name>,
        <name>Zoomable</name>, <name>Cloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4087093313147984390L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** A constant for unit type 'None'. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNITS_NONE</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for unit type 'Fahrenheit'. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNITS_FAHRENHEIT</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for unit type 'Celcius'. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNITS_CELCIUS</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for unit type 'Kelvin'. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>UNITS_KELVIN</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the value label position (no label). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NONE</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the value label position (right of the thermometer). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RIGHT</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the value label position (left of the thermometer). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>LEFT</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the value label position (in the thermometer bulb). */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BULB</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the 'normal' range. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>NORMAL</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the 'warning' range. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>WARNING</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A constant for the 'critical' range. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>CRITICAL</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The bulb radius. 
     * 
     * @deprecated As of 1.0.7, use {@link #getBulbRadius()}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BULB_RADIUS</name> =<init> <expr>40</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The bulb diameter. 
     * 
     * @deprecated As of 1.0.7, use {@link #getBulbDiameter()}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BULB_DIAMETER</name> =<init> <expr><name>BULB_RADIUS</name> * 2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The column radius. 
     * 
     * @deprecated As of 1.0.7, use {@link #getColumnRadius()}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMN_RADIUS</name> =<init> <expr>20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The column diameter.
     * 
     * @deprecated As of 1.0.7, use {@link #getColumnDiameter()}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>COLUMN_DIAMETER</name> =<init> <expr><name>COLUMN_RADIUS</name> * 2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The gap radius. 
     *
     * @deprecated As of 1.0.7, use {@link #getGap()}.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GAP_RADIUS</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The gap diameter. 
     *
     * @deprecated As of 1.0.7, use {@link #getGap()} times two.
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>GAP_DIAMETER</name> =<init> <expr><name>GAP_RADIUS</name> * 2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The axis gap. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>AXIS_GAP</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The unit strings. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>UNITS</name> =<init> <expr><block>{<expr>""</expr>, <expr>"\u00B0F"</expr>, <expr>"\u00B0C"</expr>, 
            <expr>"\u00B0K"</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index for low value in subrangeInfo matrix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RANGE_LOW</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index for high value in subrangeInfo matrix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>RANGE_HIGH</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index for display low value in subrangeInfo matrix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISPLAY_LOW</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Index for display high value in subrangeInfo matrix. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DISPLAY_HIGH</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default lower bound. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_LOWER_BOUND</name> =<init> <expr>0.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default upper bound. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>double</name></type> <name>DEFAULT_UPPER_BOUND</name> =<init> <expr>100.0</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default bulb radius.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BULB_RADIUS</name> =<init> <expr>40</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default column radius.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_COLUMN_RADIUS</name> =<init> <expr>20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The default gap between the outlines representing the thermometer.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>DEFAULT_GAP</name> =<init> <expr>5</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset for the plot. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ValueAxis</name></type> <name>rangeAxis</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The lower bound for the thermometer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>lowerBound</name> =<init> <expr><name>DEFAULT_LOWER_BOUND</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The upper bound for the thermometer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>upperBound</name> =<init> <expr><name>DEFAULT_UPPER_BOUND</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The value label position.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>bulbRadius</name> =<init> <expr><name>DEFAULT_BULB_RADIUS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The column radius.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>columnRadius</name> =<init> <expr><name>DEFAULT_COLUMN_RADIUS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The gap between the two outlines the represent the thermometer.
     *
     * @since 1.0.7
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>gap</name> =<init> <expr><name>DEFAULT_GAP</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Blank space inside the plot area around the outside of the thermometer. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>padding</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Stroke for drawing the thermometer */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>thermometerStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>1.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Paint for drawing the thermometer */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>thermometerPaint</name> =<init> <expr><name><name>Color</name>.<name>black</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The display units */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>units</name> =<init> <expr><name>UNITS_CELCIUS</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The value label position. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>valueLocation</name> =<init> <expr><name>BULB</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The position of the axis **/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>axisLocation</name> =<init> <expr><name>LEFT</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The font to write the value in */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Font</name></type> <name>valueFont</name> =<init> <expr>new <call><name>Font</name><argument_list>(<argument><expr>"SansSerif"</expr></argument>, <argument><expr><name><name>Font</name>.<name>BOLD</name></name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Colour that the value is written in */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>valuePaint</name> =<init> <expr><name><name>Color</name>.<name>white</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Number format for the value */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>NumberFormat</name></type> <name>valueFormat</name> =<init> <expr>new <call><name>DecimalFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default paint for the mercury in the thermometer. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>mercuryPaint</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether value lines are drawn. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>showValueLines</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The display sub-range. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>subrange</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The start and end values for the subranges. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name><index>[]</index><index>[]</index></type> <name>subrangeInfo</name> =<init> <expr><block>{
        <expr><block>{<expr>0.0</expr>, <expr>50.0</expr>, <expr>0.0</expr>, <expr>50.0</expr>}</block></expr>, 
        <expr><block>{<expr>50.0</expr>, <expr>75.0</expr>, <expr>50.0</expr>, <expr>75.0</expr>}</block></expr>, 
        <expr><block>{<expr>75.0</expr>, <expr>100.0</expr>, <expr>75.0</expr>, <expr>100.0</expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not the axis range adjusts to the 
     * sub-ranges. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>followDataInSubranges</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not the mercury paint changes with 
     * the subranges. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>useSubrangePaint</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Paint for each range */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name><index>[]</index></type> <name>subrangePaint</name> =<init> <expr><block>{<expr><name><name>Color</name>.<name>green</name></name></expr>, <expr><name><name>Color</name>.<name>orange</name></name></expr>, 
            <expr><name><name>Color</name>.<name>red</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the sub-range indicators are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>subrangeIndicatorsVisible</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke for the sub-range indicators. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>subrangeIndicatorStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>2.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The range indicator stroke. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeIndicatorStroke</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>3.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> =<init>
        <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new thermometer plot.
     */</comment>
    <constructor><specifier>public</specifier> <name>ThermometerPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>new <call><name>DefaultValueDataset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new thermometer plot, using default attributes where necessary.
     *
     * @param dataset  the data set.
     */</comment>
    <constructor><specifier>public</specifier> <name>ThermometerPlot</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = new <call><name>RectangleInsets</name><argument_list>(<argument><expr><name><name>UnitType</name>.<name>RELATIVE</name></name></expr></argument>, <argument><expr>0.05</expr></argument>, <argument><expr>0.05</expr></argument>, <argument><expr>0.05</expr></argument>, 
                <argument><expr>0.05</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>NumberAxis</name></type> <name>axis</name> =<init> <expr>new <call><name>NumberAxis</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>setStandardTickUnits</name></name><argument_list>(<argument><expr><call><name><name>NumberAxis</name>.<name>createIntegerTickUnits</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>setAxisLineVisible</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the dataset for the plot.
     *
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(ValueDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the dataset for the plot, replacing the existing dataset if there 
     * is one, and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>ValueDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if there is an existing dataset, remove the plot from the list </comment>
        <comment type="line">// of change listeners...</comment>
        <decl_stmt><decl><type><name>ValueDataset</name></type> <name>existing</name> =<init> <expr><name><name>this</name>.<name>dataset</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis.
     *
     * @return The range axis (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeAxis</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param axis  the new axis (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeAxis()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axis</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axis' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <comment type="line">// plot is registered as a listener with the existing axis...</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxis</name></name> = <name>axis</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the lower bound for the thermometer.  The data value can be set 
     * lower than this, but it will not be shown in the thermometer.
     *
     * @return The lower bound.
     * 
     * @see #setLowerBound(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getLowerBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>lowerBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the lower bound for the thermometer.
     *
     * @param lower the lower bound.
     * 
     * @see #getLowerBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setLowerBound</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the upper bound for the thermometer.  The data value can be set 
     * higher than this, but it will not be shown in the thermometer.
     *
     * @return The upper bound.
     * 
     * @see #setUpperBound(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getUpperBound</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>upperBound</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the upper bound for the thermometer.
     *
     * @param upper the upper bound.
     * 
     * @see #getUpperBound()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUpperBound</name><parameter_list>(<param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upper</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the lower and upper bounds for the thermometer.
     *
     * @param lower  the lower bound.
     * @param upper  the upper bound.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRange</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lower</name></decl></param>, <param><decl><type><name>double</name></type> <name>upper</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>lowerBound</name></name> = <name>lower</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>upperBound</name></name> = <name>upper</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the padding for the thermometer.  This is the space inside the 
     * plot area.
     *
     * @return The padding (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setPadding(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>padding</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the padding for the thermometer and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param padding  the padding (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getPadding()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setPadding</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>padding</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>padding</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'padding' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>padding</name></name> = <name>padding</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw the thermometer outline.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setThermometerStroke(Stroke)
     * @see #getThermometerPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getThermometerStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>thermometerStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw the thermometer outline and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param s  the new stroke (&lt;code&gt;null&lt;/code&gt; ignored).
     * 
     * @see #getThermometerStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setThermometerStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>s</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>thermometerStroke</name></name> = <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used to draw the thermometer outline.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setThermometerPaint(Paint)
     * @see #getThermometerStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getThermometerPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>thermometerPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the thermometer outline and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the new paint (&lt;code&gt;null&lt;/code&gt; ignored).
     * 
     * @see #getThermometerPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setThermometerPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>thermometerPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a code indicating the unit display type.  This is one of
     * {@link #UNITS_NONE}, {@link #UNITS_FAHRENHEIT}, {@link #UNITS_CELCIUS} 
     * and {@link #UNITS_KELVIN}.
     *
     * @return The units type.
     * 
     * @see #setUnits(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getUnits</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>units</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the units to be displayed in the thermometer. Use one of the 
     * following constants:
     *
     * &lt;ul&gt;
     * &lt;li&gt;UNITS_NONE : no units displayed.&lt;/li&gt;
     * &lt;li&gt;UNITS_FAHRENHEIT : units displayed in Fahrenheit.&lt;/li&gt;
     * &lt;li&gt;UNITS_CELCIUS : units displayed in Celcius.&lt;/li&gt;
     * &lt;li&gt;UNITS_KELVIN : units displayed in Kelvin.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param u  the new unit type.
     * 
     * @see #getUnits()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnits</name><parameter_list>(<param><decl><type><name>int</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>u</name> &gt;= 0) &amp;&amp; (<name>u</name> &lt; <name><name>UNITS</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>units</name></name> != <name>u</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>units</name></name> = <name>u</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the unit type.
     *
     * @param u  the unit type (&lt;code&gt;null&lt;/code&gt; ignored).
     * 
     * @deprecated Use setUnits(int) instead.  Deprecated as of version 1.0.6,
     *     because this method is a little obscure and redundant anyway.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUnits</name><parameter_list>(<param><decl><type><name>String</name></type> <name>u</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>u</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name>u</name> = <call><name><name>u</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>UNITS</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>u</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>UNITS</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>toUpperCase</name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setUnits</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name> = <name><name>UNITS</name>.<name>length</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a code indicating the location at which the value label is
     * displayed.
     *
     * @return The location (one of {@link #NONE}, {@link #RIGHT}, 
     *         {@link #LEFT} and {@link #BULB}.).
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getValueLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>valueLocation</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location at which the current value is displayed and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * The location can be one of the constants:
     * &lt;code&gt;NONE&lt;/code&gt;,
     * &lt;code&gt;RIGHT&lt;/code&gt;
     * &lt;code&gt;LEFT&lt;/code&gt; and
     * &lt;code&gt;BULB&lt;/code&gt;.
     *
     * @param location  the location.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>location</name> &gt;= 0) &amp;&amp; (<name>location</name> &lt; 4)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>valueLocation</name></name> = <name>location</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Location not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the axis location.
     *
     * @return The location (one of {@link #NONE}, {@link #LEFT} and 
     *         {@link #RIGHT}).
     *         
     * @see #setAxisLocation(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getAxisLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisLocation</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location at which the axis is displayed relative to the 
     * thermometer, and sends a {@link PlotChangeEvent} to all registered
     * listeners.
     *
     * @param location  the location (one of {@link #NONE}, {@link #LEFT} and 
     *         {@link #RIGHT}).
     * 
     * @see #getAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>location</name> &gt;= 0) &amp;&amp; (<name>location</name> &lt; 3)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>axisLocation</name></name> = <name>location</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Location not recognised."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the font used to display the current value.
     *
     * @return The font.
     * 
     * @see #setValueFont(Font)
     */</comment>
    <function><type><specifier>public</specifier> <name>Font</name></type> <name>getValueFont</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>valueFont</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the font used to display the current value.
     *
     * @param f  the new font (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getValueFont()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFont</name><parameter_list>(<param><decl><type><name>Font</name></type> <name>f</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>f</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'font' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>valueFont</name>.<name>equals</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>valueFont</name></name> = <name>f</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the paint used to display the current value.
    *
     * @return The paint.
     * 
     * @see #setValuePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getValuePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>valuePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to display the current value and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the new paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getValuePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValuePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>valuePaint</name>.<name>equals</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>valuePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="line">// FIXME: No getValueFormat() method?</comment>
    
    <comment type="javadoc">/**
     * Sets the formatter for the value label and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param formatter  the new formatter (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValueFormat</name><parameter_list>(<param><decl><type><name>NumberFormat</name></type> <name>formatter</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>formatter</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'formatter' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>valueFormat</name></name> = <name>formatter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the default mercury paint.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setMercuryPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getMercuryPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>mercuryPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the default mercury paint and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param paint  the new paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getMercuryPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMercuryPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>mercuryPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the flag that controls whether not value lines are displayed.
     *
     * @return The flag.
     * 
     * @see #setShowValueLines(boolean)
     * 
     * @deprecated This flag doesn't do anything useful/visible.  Deprecated 
     *     as of version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getShowValueLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>showValueLines</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the display as to whether to show value lines in the output.
     *
     * @param b Whether to show value lines in the thermometer
     * 
     * @see #getShowValueLines()
     * 
     * @deprecated This flag doesn't do anything useful/visible.  Deprecated 
     *     as of version 1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setShowValueLines</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>showValueLines</name></name> = <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets information for a particular range.
     *
     * @param range  the range to specify information about.
     * @param low  the low value for the range
     * @param hi  the high value for the range
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrangeInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>, <param><decl><type><name>double</name></type> <name>low</name></decl></param>, <param><decl><type><name>double</name></type> <name>hi</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setSubrangeInfo</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the subrangeInfo attribute of the ThermometerPlot object
     *
     * @param range  the new rangeInfo value.
     * @param rangeLow  the new rangeInfo value
     * @param rangeHigh  the new rangeInfo value
     * @param displayLow  the new rangeInfo value
     * @param displayHigh  the new rangeInfo value
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrangeInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>,
                                <param><decl><type><name>double</name></type> <name>rangeLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>rangeHigh</name></decl></param>,
                                <param><decl><type><name>double</name></type> <name>displayLow</name></decl></param>, <param><decl><type><name>double</name></type> <name>displayHigh</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>range</name> &gt;= 0) &amp;&amp; (<name>range</name> &lt; 3)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setSubrange</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>rangeLow</name></expr></argument>, <argument><expr><name>rangeHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setDisplayRange</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>displayLow</name></expr></argument>, <argument><expr><name>displayHigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the bounds for a subrange.
     *
     * @param range  the range type.
     * @param low  the low value.
     * @param high  the high value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrange</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>, <param><decl><type><name>double</name></type> <name>low</name></decl></param>, <param><decl><type><name>double</name></type> <name>high</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>range</name> &gt;= 0) &amp;&amp; (<name>range</name> &lt; 3)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>RANGE_HIGH</name></expr>]</index></name> = <name>high</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>RANGE_LOW</name></expr>]</index></name> = <name>low</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the displayed bounds for a sub range.
     *
     * @param range  the range type.
     * @param low  the low value.
     * @param high  the high value.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDisplayRange</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>, <param><decl><type><name>double</name></type> <name>low</name></decl></param>, <param><decl><type><name>double</name></type> <name>high</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr>(<name>range</name> &gt;= 0) &amp;&amp; (<name>range</name> &lt; <name><name>this</name>.<name>subrangeInfo</name>.<name>length</name></name>)
            &amp;&amp; <call><name>isValidNumber</name><argument_list>(<argument><expr><name>high</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>isValidNumber</name><argument_list>(<argument><expr><name>low</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
 
            <if>if <condition>(<expr><name>high</name> &gt; <name>low</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>DISPLAY_HIGH</name></expr>]</index></name> = <name>high</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>DISPLAY_LOW</name></expr>]</index></name> = <name>low</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>DISPLAY_HIGH</name></expr>]</index></name> = <name>low</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>range</name></expr>]</index><index>[<expr><name>DISPLAY_LOW</name></expr>]</index></name> = <name>high</name></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Gets the paint used for a particular subrange.
     *
     * @param range  the range (.
     *
     * @return The paint.
     * 
     * @see #setSubrangePaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getSubrangePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>range</name> &gt;= 0) &amp;&amp; (<name>range</name> &lt; <name><name>this</name>.<name>subrangePaint</name>.<name>length</name></name>)</expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>range</name></expr>]</index></name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <return>return <expr><name><name>this</name>.<name>mercuryPaint</name></name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint to be used for a subrange and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param range  the range (0, 1 or 2).
     * @param paint  the paint to be applied (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSubrangePaint(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSubrangePaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>range</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr>(<name>range</name> &gt;= 0) 
                &amp;&amp; (<name>range</name> &lt; <name><name>this</name>.<name>subrangePaint</name>.<name>length</name></name>) &amp;&amp; (<name>paint</name> != <name>null</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>range</name></expr>]</index></name> = <name>paint</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the thermometer axis zooms 
     * to display the subrange within which the data value falls.
     *
     * @return The flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getFollowDataInSubranges</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>followDataInSubranges</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the thermometer axis zooms 
     * to display the subrange within which the data value falls.
     *
     * @param flag  the flag.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFollowDataInSubranges</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>followDataInSubranges</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not the mercury color changes 
     * for each subrange.
     *
     * @return The flag.
     * 
     * @see #setUseSubrangePaint(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>getUseSubrangePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>useSubrangePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range colour change option.
     *
     * @param flag the new range colour change option
     * 
     * @see #getUseSubrangePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setUseSubrangePaint</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>useSubrangePaint</name></name> = <name>flag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the bulb radius, in Java2D units.

     * @return The bulb radius.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBulbRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>bulbRadius</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the bulb radius (in Java2D units) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param r  the new radius (in Java2D units).
     * 
     * @see #getBulbRadius()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setBulbRadius</name><parameter_list>(<param><decl><type><name>int</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>bulbRadius</name></name> = <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the bulb diameter, which is always twice the value returned
     * by {@link #getBulbRadius()}.
     * 
     * @return The bulb diameter.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getBulbDiameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getBulbRadius</name><argument_list>()</argument_list></call> * 2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column radius, in Java2D units.
     * 
     * @return The column radius.
     * 
     * @see #setColumnRadius(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnRadius</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>columnRadius</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the column radius (in Java2D units) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param r  the new radius.
     * 
     * @see #getColumnRadius()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setColumnRadius</name><parameter_list>(<param><decl><type><name>int</name></type> <name>r</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>columnRadius</name></name> = <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the column diameter, which is always twice the value returned
     * by {@link #getColumnRadius()}.
     * 
     * @return The column diameter.
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getColumnDiameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getColumnRadius</name><argument_list>()</argument_list></call> * 2</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the gap, in Java2D units, between the two outlines that 
     * represent the thermometer.
     * 
     * @return The gap.
     * 
     * @see #setGap(int)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getGap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>gap</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the gap (in Java2D units) between the two outlines that represent
     * the thermometer, and sends a {@link PlotChangeEvent} to all registered 
     * listeners.
     * 
     * @param gap  the new gap.
     * 
     * @see #getGap()
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setGap</name><parameter_list>(<param><decl><type><name>int</name></type> <name>gap</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>gap</name></name> = <name>gap</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot on a Java 2D graphics device (such as the screen or a 
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>RoundRectangle2D</name></type> <name>outerStem</name> =<init> <expr>new <call><name><name>RoundRectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RoundRectangle2D</name></type> <name>innerStem</name> =<init> <expr>new <call><name><name>RoundRectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RoundRectangle2D</name></type> <name>mercuryStem</name> =<init> <expr>new <call><name><name>RoundRectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>outerBulb</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>innerBulb</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>temp</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FontMetrics</name></type> <name>metrics</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust for insets...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// adjust for padding...</comment>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>interior</name> =<init> <expr>(<name>Rectangle2D</name>) <call><name><name>area</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>padding</name>.<name>trim</name></name><argument_list>(<argument><expr><name>interior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>midX</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>interior</name>.<name>getX</name></name><argument_list>()</argument_list></call> + (<call><name><name>interior</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>midY</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>interior</name>.<name>getY</name></name><argument_list>()</argument_list></call> + (<call><name><name>interior</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>stemTop</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>interior</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <call><name>getBulbRadius</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>stemBottom</name> =<init> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>interior</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call> - <call><name>getBulbDiameter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name>stemTop</name></expr></argument>, <argument><expr><call><name>getColumnRadius</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stemBottom</name> - <name>stemTop</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>outerBulb</name>.<name>setFrame</name></name><argument_list>(<argument><expr><name>midX</name> - <call><name>getBulbRadius</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stemBottom</name></expr></argument>, 
                <argument><expr><call><name>getBulbDiameter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getBulbDiameter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outerStem</name>.<name>setRoundRect</name></name><argument_list>(<argument><expr><name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>interior</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stemBottom</name> + <call><name>getBulbDiameter</name><argument_list>()</argument_list></call> - <name>stemTop</name></expr></argument>,
                <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Area</name></type> <name>outerThermometer</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>outerBulb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Area</name></type> <name>tempArea</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>outerStem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outerThermometer</name>.<name>add</name></name><argument_list>(<argument><expr><name>tempArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>innerBulb</name>.<name>setFrame</name></name><argument_list>(<argument><expr><name>midX</name> - <call><name>getBulbRadius</name><argument_list>()</argument_list></call> + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stemBottom</name> 
                + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getBulbDiameter</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></argument>, <argument><expr><call><name>getBulbDiameter</name><argument_list>()</argument_list></call>
                - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>innerStem</name>.<name>setRoundRect</name></name><argument_list>(<argument><expr><name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call> + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>interior</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call> 
                - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></argument>, <argument><expr><name>stemBottom</name> + <call><name>getBulbDiameter</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2 
                - <name>stemTop</name></expr></argument>, <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></argument>, 
                <argument><expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Area</name></type> <name>innerThermometer</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>innerBulb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tempArea</name> = new <call><name>Area</name><argument_list>(<argument><expr><name>innerStem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>innerThermometer</name>.<name>add</name></name><argument_list>(<argument><expr><name>tempArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
        <if>if <condition>(<expr>(<name><name>this</name>.<name>dataset</name></name> != <name>null</name>) &amp;&amp; (<call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != <name>null</name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>ds</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name>getColumnDiameter</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2</expr></init></decl>;</decl_stmt> <comment type="line">// already calculated</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name> =<init> <expr><call><name>getColumnRadius</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// already calculated</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> =<init> <expr>(<name>i</name> / 2)</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>round</name></name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> &lt; (<call><name>getGap</name><argument_list>()</argument_list></call> + <call><name><name>interior</name>.<name>getMinY</name></name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> = <call>(<name>int</name>) <argument_list>(<argument><expr><call><name>getGap</name><argument_list>()</argument_list></call> + <call><name><name>interior</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name> = <call><name>getBulbRadius</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <decl_stmt><decl><type><name>Area</name></type> <name>mercury</name> =<init> <expr>new <call><name>Area</name><argument_list>(<argument><expr><name>innerBulb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>k</name> &lt; (<name>stemBottom</name> + <call><name>getBulbRadius</name><argument_list>()</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mercuryStem</name>.<name>setRoundRect</name></name><argument_list>(<argument><expr><name>midX</name> - <name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, 
                        <argument><expr>(<name>stemBottom</name> + <call><name>getBulbRadius</name><argument_list>()</argument_list></call>) - <name>k</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>tempArea</name> = new <call><name>Area</name><argument_list>(<argument><expr><name>mercuryStem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mercury</name>.<name>add</name></name><argument_list>(<argument><expr><name>tempArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><call><name>getCurrentPaint</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>mercury</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// draw range indicators...</comment>
            <if>if <condition>(<expr><name><name>this</name>.<name>subrangeIndicatorsVisible</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangeIndicatorStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Range</name></type> <name>range</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// draw start of normal range</comment>
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>NORMAL</name></expr>]</index><index>[<expr><name>RANGE_LOW</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name>midX</name> + <call><name>getColumnRadius</name><argument_list>()</argument_list></call> + 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> + 10</expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>NORMAL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// draw start of warning range</comment>
                <expr_stmt><expr><name>value</name> = <name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>WARNING</name></expr>]</index><index>[<expr><name>RANGE_LOW</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name>midX</name> + <call><name>getColumnRadius</name><argument_list>()</argument_list></call> + 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> + 10</expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>WARNING</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <comment type="line">// draw start of critical range</comment>
                <expr_stmt><expr><name>value</name> = <name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>CRITICAL</name></expr>]</index><index>[<expr><name>RANGE_LOW</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>range</name>.<name>contains</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><name>midX</name> + <call><name>getColumnRadius</name><argument_list>()</argument_list></call> + 2</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> + 10</expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>CRITICAL</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// draw the axis...</comment>
            <if>if <condition>(<expr>(<name><name>this</name>.<name>rangeAxis</name></name> != <name>null</name>) &amp;&amp; (<name><name>this</name>.<name>axisLocation</name></name> != <name>NONE</name>)</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>drawWidth</name> =<init> <expr><name>AXIS_GAP</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>this</name>.<name>showValueLines</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>drawWidth</name> += <call><name>getColumnDiameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>drawArea</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>cursor</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

                <switch>switch <condition>(<expr><name><name>this</name>.<name>axisLocation</name></name></expr>)</condition> <block>{
                    <case>case <expr><name>RIGHT</name></expr>:
                        <expr_stmt><expr><name>cursor</name> = <name>midX</name> + <call><name>getColumnRadius</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>drawArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>,
                                <argument><expr><name>stemTop</name></expr></argument>, <argument><expr><name>drawWidth</name></expr></argument>, <argument><expr>(<name>stemBottom</name> - <name>stemTop</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>drawArea</name></expr></argument>, 
                                <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    </case><case>case <expr><name>LEFT</name></expr>:
                    </case><default>default:
                        <comment type="line">//cursor = midX - COLUMN_RADIUS - AXIS_GAP;</comment>
                        <expr_stmt><expr><name>cursor</name> = <name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>drawArea</name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>stemTop</name></expr></argument>,
                                <argument><expr><name>drawWidth</name></expr></argument>, <argument><expr>(<name>stemBottom</name> - <name>stemTop</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>drawArea</name></expr></argument>, 
                                <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </default>}</block></switch>
                   
            }</block></then></if>

            <comment type="line">// draw text value on screen</comment>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>metrics</name> = <call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name><name>this</name>.<name>valueLocation</name></name></expr>)</condition> <block>{
                <case>case <expr><name>RIGHT</name></expr>:
                    <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>valueFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><name>midX</name> + <call><name>getColumnRadius</name><argument_list>()</argument_list></call> + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>midY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>LEFT</name></expr>:
                    <decl_stmt><decl><type><name>String</name></type> <name>valueString</name> =<init> <expr><call><name><name>this</name>.<name>valueFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>stringWidth</name> =<init> <expr><call><name><name>metrics</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>valueString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>valueString</name></expr></argument>, <argument><expr><name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call> 
                            - <call><name>getGap</name><argument_list>()</argument_list></call> - <name>stringWidth</name></expr></argument>, <argument><expr><name>midY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><case>case <expr><name>BULB</name></expr>:
                    <expr_stmt><expr><name>temp</name> = <call><name><name>this</name>.<name>valueFormat</name>.<name>format</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name> = <call><name><name>metrics</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> / 2</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>midX</name> - <name>i</name></expr></argument>, 
                            <argument><expr><name>stemBottom</name> + <call><name>getBulbRadius</name><argument_list>()</argument_list></call> + <call><name>getGap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </case><default>default:
            </default>}</block></switch>
            <comment type="javadoc">/***/</comment>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setFont</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//  draw units indicator</comment>
        <expr_stmt><expr><name>metrics</name> = <call><name><name>g2</name>.<name>getFontMetrics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tickX1</name> =<init> <expr><name>midX</name> - <call><name>getColumnRadius</name><argument_list>()</argument_list></call> - <call><name>getGap</name><argument_list>()</argument_list></call> * 2
                     - <call><name><name>metrics</name>.<name>stringWidth</name></name><argument_list>(<argument><expr><name><name>UNITS</name><index>[<expr><name><name>this</name>.<name>units</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>tickX1</name> &gt; <call><name><name>area</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>g2</name>.<name>drawString</name></name><argument_list>(<argument><expr><name><name>UNITS</name><index>[<expr><name><name>this</name>.<name>units</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>tickX1</name></expr></argument>, 
                    <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>area</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> + 20</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw thermometer outline</comment>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>outerThermometer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>innerThermometer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * A zoom method that does nothing.  Plots are required to support the 
     * zoom operation.  In the case of a thermometer chart, it doesn't make 
     * sense to zoom in or out, so the method is empty.
     *
     * @param percent  the zoom percentage.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoom</name><parameter_list>(<param><decl><type><name>double</name></type> <name>percent</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// intentionally blank</comment>
   }</block></function>

    <comment type="javadoc">/**
     * Returns a short string describing the type of plot.
     *
     * @return A short string describing the type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"Thermometer_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Checks to see if a new value means the axis range needs adjusting.
     *
     * @param event  the dataset change event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>datasetChanged</name><parameter_list>(<param><decl><type><name>DatasetChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Number</name></type> <name>vn</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>vn</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>vn</name>.<name>doubleValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>subrange</name></name> = <name>NORMAL</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                   <expr_stmt><expr><name><name>this</name>.<name>subrange</name></name> = <name>WARNING</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>CRITICAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>subrange</name></name> = <name>CRITICAL</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name><name>this</name>.<name>subrange</name></name> = -1</expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
                <expr_stmt><expr><call><name>setAxisRange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name>.<name>datasetChanged</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the minimum value in either the domain or the range, whichever
     * is displayed against the vertical axis for the particular type of plot
     * implementing this interface.
     *
     * @return The minimum value in either the domain or the range.
     * 
     * @deprecated This method is not used.  Officially deprecated in version 
     *         1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMinimumVerticalDataValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name><name>this</name>.<name>lowerBound</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maximum value in either the domain or the range, whichever
     * is displayed against the vertical axis for the particular type of plot
     * implementing this interface.
     *
     * @return The maximum value in either the domain or the range
     * 
     * @deprecated This method is not used.  Officially deprecated in version 
     *         1.0.6.
     */</comment>
    <function><type><specifier>public</specifier> <name>Number</name></type> <name>getMaximumVerticalDataValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Double</name><argument_list>(<argument><expr><name><name>this</name>.<name>upperBound</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the data range.
     *
     * @param axis  the axis.
     *
     * @return The range of data displayed.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
       <return>return <expr>new <call><name>Range</name><argument_list>(<argument><expr><name><name>this</name>.<name>lowerBound</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>upperBound</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis range to the current values in the rangeInfo array.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setAxisRange</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr>(<name><name>this</name>.<name>subrange</name></name> &gt;= 0) &amp;&amp; (<name><name>this</name>.<name>followDataInSubranges</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>setRange</name></name><argument_list>(
                    <argument><expr>new <call><name>Range</name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name><name>this</name>.<name>subrange</name></name></expr>]</index><index>[<expr><name>DISPLAY_LOW</name></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name><name>this</name>.<name>subrange</name></name></expr>]</index><index>[<expr><name>DISPLAY_HIGH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>setRange</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>lowerBound</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>upperBound</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the legend items for the plot.
     *
     * @return &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>null</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the orientation of the plot.
     * 
     * @return The orientation (always {@link PlotOrientation#VERTICAL}).
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotOrientation</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>;</return>    
    }</block></function>

    <comment type="javadoc">/**
     * Determine whether a number is valid and finite.
     *
     * @param d  the number to be tested.
     *
     * @return &lt;code&gt;true&lt;/code&gt; if the number is valid and finite, and 
     *         &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isValidNumber</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(!(<call><name><name>Double</name>.<name>isNaN</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> || <call><name><name>Double</name>.<name>isInfinite</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns true if the value is in the specified range, and false otherwise.
     *
     * @param subrange  the subrange.
     * @param value  the value to check.
     *
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>inSubrange</name><parameter_list>(<param><decl><type><name>int</name></type> <name>subrange</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>(<name>value</name> &gt; <name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>subrange</name></expr>]</index><index>[<expr><name>RANGE_LOW</name></expr>]</index></name>
            &amp;&amp; <name>value</name> &lt;= <name><name>this</name>.<name>subrangeInfo</name><index>[<expr><name>subrange</name></expr>]</index><index>[<expr><name>RANGE_HIGH</name></expr>]</index></name>)</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the mercury paint corresponding to the current data value.
     * Called from the {@link #draw(Graphics2D, Rectangle2D, Point2D, 
     * PlotState, PlotRenderingInfo)} method.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>private</specifier> <name>Paint</name></type> <name>getCurrentPaint</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>result</name> =<init> <expr><name><name>this</name>.<name>mercuryPaint</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>useSubrangePaint</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>value</name> =<init> <expr><call><name><name>this</name>.<name>dataset</name>.<name>getValue</name></name><argument_list>()</argument_list></call>.<call><name>doubleValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>NORMAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>NORMAL</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>WARNING</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>inSubrange</name><argument_list>(<argument><expr><name>CRITICAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>CRITICAL</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this plot for equality with another object.  The plot's dataset
     * is not considered in the test.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ThermometerPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ThermometerPlot</name></type> <name>that</name> =<init> <expr>(<name>ThermometerPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeAxis</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>rangeAxis</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>axisLocation</name></name> != <name><name>that</name>.<name>axisLocation</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>lowerBound</name></name> != <name><name>that</name>.<name>lowerBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>upperBound</name></name> != <name><name>that</name>.<name>upperBound</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>padding</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>padding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>thermometerStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>thermometerPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>units</name></name> != <name><name>that</name>.<name>units</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>valueLocation</name></name> != <name><name>that</name>.<name>valueLocation</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFont</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>valueFont</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>valuePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valueFormat</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>valueFormat</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>mercuryPaint</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>mercuryPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>showValueLines</name></name> != <name><name>that</name>.<name>showValueLines</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>subrange</name></name> != <name><name>that</name>.<name>subrange</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>followDataInSubranges</name></name> != <name><name>that</name>.<name>followDataInSubranges</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name>equal</name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangeInfo</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>subrangeInfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>   
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>useSubrangePaint</name></name> != <name><name>that</name>.<name>useSubrangePaint</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>bulbRadius</name></name> != <name><name>that</name>.<name>bulbRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>columnRadius</name></name> != <name><name>that</name>.<name>columnRadius</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>gap</name></name> != <name><name>that</name>.<name>gap</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>this</name>.<name>subrangePaint</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, 
                    <argument><expr><name><name>that</name>.<name>subrangePaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>   
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests two double[][] arrays for equality.
     * 
     * @param array1  the first array (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param array2  the second arrray (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>equal</name><parameter_list>(<param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>array1</name></decl></param>, <param><decl><type><name><name>double</name><index>[]</index><index>[]</index></name></type> <name>array2</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>array1</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>array2</name> == <name>null</name>)</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>array2</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>array1</name>.<name>length</name></name> != <name><name>array2</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>array1</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>array1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>array2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the plot.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the plot cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>ThermometerPlot</name></type> <name>clone</name> =<init> <expr>(<name>ThermometerPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>clone</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>rangeAxis</name></name> = (<name>ValueAxis</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeAxis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>clone</name>.<name>rangeAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>clone</name>.<name>rangeAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>clone</name>.<name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>clone</name>.<name>valueFormat</name></name> = (<name>NumberFormat</name>) <call><name><name>this</name>.<name>valueFormat</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>subrangePaint</name></name> = (<name><name>Paint</name><index>[]</index></name>) <call><name><name>this</name>.<name>subrangePaint</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>clone</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{ 
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>thermometerPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>valuePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>mercuryPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangeIndicatorStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeIndicatorStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 3</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>,
            <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>thermometerStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>thermometerPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>valuePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>mercuryPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>subrangeIndicatorStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeIndicatorStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>subrangePaint</name></name> = new <name><name>Paint</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 3</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>subrangePaint</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeAxis</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no domain axis to zoom</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point.
     * @param useAnchor  a flag that controls whether or not the source point
     *         is used for the zoom anchor.
     *         
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no domain axis to zoom</comment>
    }</block></function>
    
    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param state  the plot state.
     * @param source  the source point.
     * @param useAnchor  a flag that controls whether or not the source point
     *         is used for the zoom anchor.
     *         
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, 
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>anchorY</name> =<init> <expr><call><name><name>this</name>.<name>getRangeAxis</name></name><argument_list>()</argument_list></call>.<call><name>java2DToValue</name><argument_list>(<argument><expr><call><name><name>source</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><call><name><name>state</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * This method does nothing.
     *
     * @param lowerPercent  the lower percent.
     * @param upperPercent  the upper percent.
     * @param state  the plot state.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// no domain axis to zoom</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms the range axes.
     *
     * @param lowerPercent  the lower percent.
     * @param upperPercent  the upper percent.
     * @param state  the plot state.
     * @param source  the source point.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>, 
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>state</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  
    <comment type="javadoc">/**
     * Returns &lt;code&gt;false&lt;/code&gt;.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt;.
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

}</block></class>
</unit>
