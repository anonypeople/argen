<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\ValueMarker.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2007, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * ----------------
 * ValueMarker.java
 * ----------------
 * (C) Copyright 2004-2007, by Object Refinery Limited.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   -;
 *
 * Changes
 * -------
 * 09-Feb-2004 : Version 1 (DG);
 * 16-Feb-2005 : Added new constructor (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 05-Sep-2006 : Added setValue() method (DG);
 * 08-Oct-2007 : Fixed bug 1808376, constructor calling super with incorrect
 *               values (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>MarkerChangeEvent</name></name>;</import>

<comment type="javadoc">/**
 * A marker that represents a single value.  Markers can be added to plots to
 * highlight specific values.
 */</comment>
<class><specifier>public</specifier> class <name>ValueMarker</name> <super><extends>extends <name>Marker</name></extends></super> <block>{
    
    <comment type="javadoc">/** The value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>value</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new marker.
     * 
     * @param value  the value.
     */</comment>
    <constructor><specifier>public</specifier> <name>ValueMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new marker.
     * 
     * @param value  the value.
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>ValueMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr>1.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new value marker.
     * 
     * @param value  the value.
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param outlinePaint  the outline paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param outlineStroke  the outline stroke (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).
     */</comment>
    <constructor><specifier>public</specifier> <name>ValueMarker</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, 
                       <param><decl><type><name>Paint</name></type> <name>outlinePaint</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>outlineStroke</name></decl></param>, <param><decl><type><name>float</name></type> <name>alpha</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>paint</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>, <argument><expr><name>outlineStroke</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Returns the value.
     *
     * @return The value.
     * 
     * @see #setValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>value</name></name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the value for the marker and sends a {@link MarkerChangeEvent} to 
     * all registered listeners.
     * 
     * @param value  the value.
     * 
     * @see #getValue()
     * 
     * @since 1.0.3
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{ 
        <expr_stmt><expr><name><name>this</name>.<name>value</name></name> = <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>MarkerChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this marker for equality with an arbitrary object.  This method
     * returns &lt;code&gt;true&lt;/code&gt; if:
     * 
     * &lt;ul&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;ValueMarker&lt;/code&gt;;&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; has the same value as this marker;&lt;/li&gt;
     * &lt;li&gt;&lt;code&gt;super.equals(obj)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
     * &lt;/ul&gt;
     * 
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @return A boolean.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>ValueMarker</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ValueMarker</name></type> <name>that</name> =<init> <expr>(<name>ValueMarker</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>value</name></name> != <name><name>that</name>.<name>value</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <return>return <expr>true</expr>;</return>
    }</block></function>
}</block></class>
</unit>
