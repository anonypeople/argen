<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\WaferMapPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation; either version 2.1 of the License, or 
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public 
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc. 
 * in the United States and other countries.]
 *
 * -----------------
 * WaferMapPlot.java
 * -----------------
 *
 * (C) Copyright 2003, 2004, by Robert Redburn and Contributors.
 *
 * Original Author:  Robert Redburn;
 * Contributor(s):   David Gilbert (for Object Refinery Limited);
 *
 * Changes
 * -------
 * 25-Nov-2003 : Version 1 contributed by Robert Redburn (DG);
 * 05-May-2005 : Updated draw() method parameters (DG);
 * 10-Jun-2005 : Changed private --&gt; protected for drawChipGrid(), 
 *               drawWaferEdge() and getWafterEdge() (DG);
 * 16-Jun-2005 : Added default constructor and setDataset() method (DG);
 *
 */</comment>
 
<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Arc2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Ellipse2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>WaferMapRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>WaferMapDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>

<comment type="javadoc">/**
 * A wafer map plot.
 */</comment>
<class><specifier>public</specifier> class <name>WaferMapPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>RendererChangeListener</name>,
                                                  <name>Cloneable</name>,
                                                  <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>4668320403707308155L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default grid line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_GRIDLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>,
        <argument><expr><name><name>BasicStroke</name>.<name>CAP_BUTT</name></name></expr></argument>,
        <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>,
        <argument><expr>0.0f</expr></argument>,
        <argument><expr>new <name><name>float</name><index>[]</index></name> <block>{<expr>2.0f</expr>, <expr>2.0f</expr>}</block></expr></argument>,
        <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default grid line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRIDLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair visibility. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_CROSSHAIR_VISIBLE</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_CROSSHAIR_STROKE</name> 
        =<init> <expr><name>DEFAULT_GRIDLINE_STROKE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_CROSSHAIR_PAINT</name> =<init> <expr><name><name>Color</name>.<name>blue</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> =<init> 
        <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(<argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The plot orientation. 
     *  vertical = notch down
     *  horizontal = notch right
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotOrientation</name></type> <name>orientation</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The dataset. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>WaferMapDataset</name></type> <name>dataset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * Object responsible for drawing the visual representation of each point 
     * on the plot. 
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>WaferMapRenderer</name></type> <name>renderer</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new plot with no dataset.
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    }</block></constructor>
    
    <comment type="javadoc">/**
     * Creates a new plot.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapPlot</name><parameter_list>(<param><decl><type><name>WaferMapDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new plot.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>WaferMapPlot</name><parameter_list>(<param><decl><type><name>WaferMapDataset</name></type> <name>dataset</name></decl></param>, <param><decl><type><name>WaferMapRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>renderer</name></name> = <name>renderer</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the plot type as a string.
     *
     * @return A short string describing the type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>("WMAP_Plot")</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the dataset
     * 
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>WaferMapDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>dataset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the dataset used by the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>WaferMapDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// if there is an existing dataset, remove the plot from the list of </comment>
        <comment type="line">// change listeners...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>dataset</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// set the new dataset, and register the chart as a change listener...</comment>
        <expr_stmt><expr><name><name>this</name>.<name>dataset</name></name> = <name>dataset</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDatasetGroup</name><argument_list>(<argument><expr><call><name><name>dataset</name>.<name>getGroup</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self to trigger plot change event</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the item renderer, and notifies all listeners of a change to the 
     * plot.  If the renderer is set to &lt;code&gt;null&lt;/code&gt;, no chart will be 
     * drawn.
     *
     * @param renderer  the new renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>WaferMapRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name><name>this</name>.<name>renderer</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>renderer</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name>.<name>renderer</name></name> = <name>renderer</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    
    <comment type="javadoc">/**
     * Draws the wafermap view.
     * 
     * @param g2  the graphics device.
     * @param area  the plot area.
     * @param anchor  the anchor point (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param state  the plot state.
     * @param info  the plot rendering info.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>state</name></decl></param>, 
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the plot area is too small, just return...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> =<init> <expr>(<call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_WIDTH_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> =<init> <expr>(<call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_HEIGHT_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b1</name> || <name>b2</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// record the plot area...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust the drawing area for the plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawChipGrid</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
        <expr_stmt><expr><call><name>drawWaferEdge</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Calculates and draws the chip locations on the wafer.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawChipGrid</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        
        <decl_stmt><decl><type><name>Shape</name></type> <name>savedClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><call><name>getWaferEdge</name><argument_list>(<argument><expr><name>plotArea</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>chip</name> =<init> <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>xchips</name> =<init> <expr>35</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ychips</name> =<init> <expr>20</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>space</name> =<init> <expr>1d</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>dataset</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xchips</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getMaxChipX</name></name><argument_list>()</argument_list></call> + 2</expr>;</expr_stmt>
            <expr_stmt><expr><name>ychips</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getMaxChipY</name></name><argument_list>()</argument_list></call> + 2</expr>;</expr_stmt>
            <expr_stmt><expr><name>space</name> = <call><name><name>this</name>.<name>dataset</name>.<name>getChipSpace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>double</name></type> <name>startX</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>startY</name> =<init> <expr><call><name><name>plotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>chipWidth</name> =<init> <expr>1d</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>chipHeight</name> =<init> <expr>1d</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> != <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>major</name> =<init> <expr>0d</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>minor</name> =<init> <expr>0d</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>major</name> = <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minor</name> = <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><name>major</name> = <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minor</name> = <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if> 
            <comment type="line">//set upperLeft point</comment>
            <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> == <name>minor</name></expr>)</condition><then> <block>{ <comment type="line">// x is minor</comment>
                <expr_stmt><expr><name>startY</name> += (<name>major</name> - <name>minor</name>) / 2</expr>;</expr_stmt>
                <expr_stmt><expr><name>chipWidth</name> = (<call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - (<name>space</name> * <name>xchips</name> - 1)) 
                    / <name>xchips</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>chipHeight</name> = (<call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> - (<name>space</name> * <name>ychips</name> - 1)) 
                    / <name>ychips</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{ <comment type="line">// y is minor</comment>
                <expr_stmt><expr><name>startX</name> += (<name>major</name> - <name>minor</name>) / 2</expr>;</expr_stmt>
                <expr_stmt><expr><name>chipWidth</name> = (<call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - (<name>space</name> * <name>xchips</name> - 1)) 
                    / <name>xchips</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>chipHeight</name> = (<call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - (<name>space</name> * <name>ychips</name> - 1)) 
                    / <name>ychips</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        
        <for>for (<init><decl><type><name>int</name></type> <name>x</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>x</name> &lt;= <name>xchips</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>upperLeftX</name> =<init> <expr>(<name>startX</name> - <name>chipWidth</name>) + (<name>chipWidth</name> * <name>x</name>) 
                + (<name>space</name> * (<name>x</name> - 1))</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>y</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>y</name> &lt;= <name>ychips</name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>upperLeftY</name> =<init> <expr>(<name>startY</name> - <name>chipHeight</name>) + (<name>chipHeight</name> * <name>y</name>) 
                    + (<name>space</name> * (<name>y</name> - 1))</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>chip</name>.<name>setFrame</name></name><argument_list>(<argument><expr><name>upperLeftX</name></expr></argument>, <argument><expr><name>upperLeftY</name></expr></argument>, <argument><expr><name>chipWidth</name></expr></argument>, <argument><expr><name>chipHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>this</name>.<name>dataset</name>.<name>getChipValue</name></name><argument_list>(<argument><expr><name>x</name> - 1</expr></argument>, <argument><expr><name>ychips</name> - <name>y</name> - 1</expr></argument>)</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(
                        <argument><expr><call><name><name>this</name>.<name>renderer</name>.<name>getChipColor</name></name><argument_list>(
                            <argument><expr><call><name><name>this</name>.<name>dataset</name>.<name>getChipValue</name></name><argument_list>(<argument><expr><name>x</name> - 1</expr></argument>, <argument><expr><name>ychips</name> - <name>y</name> - 1</expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                }</block></then></if> 
                <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>chip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>lightGray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>chip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>savedClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the location of the waferedge.
     * 
     * @param plotArea  the plot area.
     * 
     * @return The wafer edge.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Ellipse2D</name></type> <name>getWaferEdge</name><parameter_list>(<param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>edge</name> =<init> <expr>new <call><name><name>Ellipse2D</name>.<name>Double</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>diameter</name> =<init> <expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upperLeftX</name> =<init> <expr><call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>upperLeftY</name> =<init> <expr><call><name><name>plotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//get major dimension</comment>
        <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> != <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>major</name> =<init> <expr>0d</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>minor</name> =<init> <expr>0d</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>major</name> = <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minor</name> = <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><name>major</name> = <call><name><name>plotArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>minor</name> = <call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if> 
            <comment type="line">//ellipse diameter is the minor dimension</comment>
            <expr_stmt><expr><name>diameter</name> = <name>minor</name></expr>;</expr_stmt>
            <comment type="line">//set upperLeft point</comment>
            <if>if <condition>(<expr><call><name><name>plotArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> == <name>minor</name></expr>)</condition><then> <block>{ <comment type="line">// x is minor</comment>
                <expr_stmt><expr><name>upperLeftY</name> = <call><name><name>plotArea</name>.<name>getY</name></name><argument_list>()</argument_list></call> + (<name>major</name> - <name>minor</name>) / 2</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{ <comment type="line">// y is minor</comment>
                <expr_stmt><expr><name>upperLeftX</name> = <call><name><name>plotArea</name>.<name>getX</name></name><argument_list>()</argument_list></call> + (<name>major</name> - <name>minor</name>) / 2</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>edge</name>.<name>setFrame</name></name><argument_list>(<argument><expr><name>upperLeftX</name></expr></argument>, <argument><expr><name>upperLeftY</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>, <argument><expr><name>diameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>edge</name></expr>;</return>        
    }</block></function>

    <comment type="javadoc">/**
     * Draws the waferedge, including the notch.
     * 
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawWaferEdge</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// draw the wafer</comment>
        <decl_stmt><decl><type><name>Ellipse2D</name></type> <name>waferEdge</name> =<init> <expr><call><name>getWaferEdge</name><argument_list>(<argument><expr><name>plotArea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>waferEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// calculate and draw the notch</comment>
        <comment type="line">// horizontal orientation is considered notch right</comment>
        <comment type="line">// vertical orientation is considered notch down</comment>
        <decl_stmt><decl><type><name>Arc2D</name></type> <name>notch</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>waferFrame</name> =<init> <expr><call><name><name>waferEdge</name>.<name>getFrame</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>notchDiameter</name> =<init> <expr><call><name><name>waferFrame</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> * 0.04</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>notchFrame</name> =<init> 
                <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><call><name><name>waferFrame</name>.<name>getX</name></name><argument_list>()</argument_list></call> + <call><name><name>waferFrame</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> 
                    - (<name>notchDiameter</name> / 2)</expr></argument>, <argument><expr><call><name><name>waferFrame</name>.<name>getY</name></name><argument_list>()</argument_list></call>
                    + (<call><name><name>waferFrame</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> / 2) - (<name>notchDiameter</name> / 2)</expr></argument>,
                    <argument><expr><name>notchDiameter</name></expr></argument>, <argument><expr><name>notchDiameter</name></expr></argument>
                )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>notch</name> = new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>notchFrame</name></expr></argument>, <argument><expr>90d</expr></argument>, <argument><expr>180d</expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>notchFrame</name> =<init> 
                <expr>new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(
                    <argument><expr><call><name><name>waferFrame</name>.<name>getX</name></name><argument_list>()</argument_list></call> + (<call><name><name>waferFrame</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> / 2) 
                    - (<name>notchDiameter</name> / 2)</expr></argument>, <argument><expr><call><name><name>waferFrame</name>.<name>getY</name></name><argument_list>()</argument_list></call> 
                    + <call><name><name>waferFrame</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> - (<name>notchDiameter</name> / 2)</expr></argument>,
                    <argument><expr><name>notchDiameter</name></expr></argument>, <argument><expr><name>notchDiameter</name></expr></argument>
                )</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>notch</name> = new <call><name><name>Arc2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>notchFrame</name></expr></argument>, <argument><expr>0d</expr></argument>, <argument><expr>180d</expr></argument>, <argument><expr><name><name>Arc2D</name>.<name>OPEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        }</block></else></if>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name>notch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name>.<name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>notch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></function>

    <comment type="javadoc">/**
     * Return the legend items from the renderer.
     * 
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>renderer</name>.<name>getLegendCollection</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Notifies all registered listeners of a renderer change.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rendererChanged</name><parameter_list>(<param><decl><type><name>RendererChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
