<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\daniel.rodriguez\IdeaProjects\biorimp\resources\systems\JF_H_DATASET-9\src\XYPlot.java"><comment type="block">/* ===========================================================
 * JFreeChart : a free chart library for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.
 *
 * Project Info:  http://www.jfree.org/jfreechart/index.html
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, 
 * USA.  
 *
 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.
 * in the United States and other countries.]
 *
 * -----------
 * XYPlot.java
 * -----------
 * (C) Copyright 2000-2008, by Object Refinery Limited and Contributors.
 *
 * Original Author:  David Gilbert (for Object Refinery Limited);
 * Contributor(s):   Craig MacFarlane;
 *                   Mark Watson (www.markwatson.com);
 *                   Jonathan Nash;
 *                   Gideon Krause;
 *                   Klaus Rheinwald;
 *                   Xavier Poinsard;
 *                   Richard Atkinson;
 *                   Arnaud Lelievre;
 *                   Nicolas Brodu;
 *                   Eduardo Ramalho;
 *                   Sergei Ivanov;
 *                   Richard West, Advanced Micro Devices, Inc.;
 *
 * Changes (from 21-Jun-2001)
 * --------------------------
 * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG);
 * 18-Sep-2001 : Updated header and fixed DOS encoding problem (DG);
 * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG);
 * 19-Oct-2001 : Removed the code for drawing the visual representation of each
 *               data point into a separate class StandardXYItemRenderer.
 *               This will make it easier to add variations to the way the
 *               charts are drawn.  Based on code contributed by Mark
 *               Watson (DG);
 * 22-Oct-2001 : Renamed DataSource.java --&gt; Dataset.java etc. (DG);
 * 20-Nov-2001 : Fixed clipping bug that shows up when chart is displayed
 *               inside JScrollPane (DG);
 * 12-Dec-2001 : Removed unnecessary 'throws' clauses from constructor (DG);
 * 13-Dec-2001 : Added skeleton code for tooltips.  Added new constructor. (DG);
 * 16-Jan-2002 : Renamed the tooltips class (DG);
 * 22-Jan-2002 : Added DrawInfo class, incorporating tooltips and crosshairs.
 *               Crosshairs based on code by Jonathan Nash (DG);
 * 05-Feb-2002 : Added alpha-transparency setting based on code by Sylvain
 *               Vieujot (DG);
 * 26-Feb-2002 : Updated getMinimumXXX() and getMaximumXXX() methods to handle
 *               special case when chart is null (DG);
 * 28-Feb-2002 : Renamed Datasets.java --&gt; DatasetUtilities.java (DG);
 * 28-Mar-2002 : The plot now registers with the renderer as a property change
 *               listener.  Also added a new constructor (DG);
 * 09-Apr-2002 : Removed the transRangeZero from the renderer.drawItem()
 *               method.  Moved the tooltip generator into the renderer (DG);
 * 23-Apr-2002 : Fixed bug in methods for drawing horizontal and vertical
 *               lines (DG);
 * 13-May-2002 : Small change to the draw() method so that it works for
 *               OverlaidXYPlot also (DG);
 * 25-Jun-2002 : Removed redundant import (DG);
 * 20-Aug-2002 : Renamed getItemRenderer() --&gt; getRenderer(), and
 *               setXYItemRenderer() --&gt; setRenderer() (DG);
 * 28-Aug-2002 : Added mechanism for (optional) plot annotations (DG);
 * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG);
 * 18-Nov-2002 : Added grid settings for both domain and range axis (previously
 *               these were set in the axes) (DG);
 * 09-Jan-2003 : Further additions to the grid settings, plus integrated plot
 *               border bug fix contributed by Gideon Krause (DG);
 * 22-Jan-2003 : Removed monolithic constructor (DG);
 * 04-Mar-2003 : Added 'no data' message, see bug report 691634.  Added
 *               secondary range markers using code contributed by Klaus
 *               Rheinwald (DG);
 * 26-Mar-2003 : Implemented Serializable (DG);
 * 03-Apr-2003 : Added setDomainAxisLocation() method (DG);
 * 30-Apr-2003 : Moved annotation drawing into a separate method (DG);
 * 01-May-2003 : Added multi-pass mechanism for renderers (DG);
 * 02-May-2003 : Changed axis locations from int to AxisLocation (DG);
 * 15-May-2003 : Added an orientation attribute (DG);
 * 02-Jun-2003 : Removed range axis compatibility test (DG);
 * 05-Jun-2003 : Added domain and range grid bands (sponsored by Focus Computer
 *               Services Ltd) (DG);
 * 26-Jun-2003 : Fixed bug (757303) in getDataRange() method (DG);
 * 02-Jul-2003 : Added patch from bug report 698646 (secondary axes for
 *               overlaid plots) (DG);
 * 23-Jul-2003 : Added support for multiple secondary datasets, axes and
 *               renderers (DG);
 * 27-Jul-2003 : Added support for stacked XY area charts (RA);
 * 19-Aug-2003 : Implemented Cloneable (DG);
 * 01-Sep-2003 : Fixed bug where change to secondary datasets didn't generate
 *               change event (797466) (DG)
 * 08-Sep-2003 : Added internationalization via use of properties
 *               resourceBundle (RFE 690236) (AL);
 * 08-Sep-2003 : Changed ValueAxis API (DG);
 * 08-Sep-2003 : Fixes for serialization (NB);
 * 16-Sep-2003 : Changed ChartRenderingInfo --&gt; PlotRenderingInfo (DG);
 * 17-Sep-2003 : Fixed zooming to include secondary domain axes (DG);
 * 18-Sep-2003 : Added getSecondaryDomainAxisCount() and
 *               getSecondaryRangeAxisCount() methods suggested by Eduardo
 *               Ramalho (RFE 808548) (DG);
 * 23-Sep-2003 : Split domain and range markers into foreground and
 *               background (DG);
 * 06-Oct-2003 : Fixed bug in clearDomainMarkers() and clearRangeMarkers()
 *               methods.  Fixed bug (815876) in addSecondaryRangeMarker()
 *               method.  Added new addSecondaryDomainMarker methods (see bug
 *               id 815869) (DG);
 * 10-Nov-2003 : Added getSecondaryDomain/RangeAxisMappedToDataset() methods
 *               requested by Eduardo Ramalho (DG);
 * 24-Nov-2003 : Removed unnecessary notification when updating axis anchor
 *               values (DG);
 * 21-Jan-2004 : Update for renamed method in ValueAxis (DG);
 * 25-Feb-2004 : Replaced CrosshairInfo with CrosshairState (DG);
 * 12-Mar-2004 : Fixed bug where primary renderer is always used to determine
 *               range type (DG);
 * 22-Mar-2004 : Fixed cloning bug (DG);
 * 23-Mar-2004 : Fixed more cloning bugs (DG);
 * 07-Apr-2004 : Fixed problem with axis range when the secondary renderer is
 *               stacked, see this post in the forum:
 *               http://www.jfree.org/phpBB2/viewtopic.php?t=8204 (DG);
 * 07-Apr-2004 : Added get/setDatasetRenderingOrder() methods (DG);
 * 26-Apr-2004 : Added option to fill quadrant areas in the background of the
 *               plot (DG);
 * 27-Apr-2004 : Removed major distinction between primary and secondary
 *               datasets, renderers and axes (DG);
 * 30-Apr-2004 : Modified to make use of the new getRangeExtent() method in the
 *               renderer interface (DG);
 * 13-May-2004 : Added optional fixedLegendItems attribute (DG);
 * 19-May-2004 : Added indexOf() method (DG);
 * 03-Jun-2004 : Fixed zooming bug (DG);
 * 18-Aug-2004 : Added removedAnnotation() method (by tkram01) (DG);
 * 05-Oct-2004 : Modified storage type for dataset-to-axis maps (DG);
 * 06-Oct-2004 : Modified getDataRange() method to use renderer to determine
 *               the x-value range (now matches behaviour for y-values).  Added
 *               getDomainAxisIndex() method (DG);
 * 12-Nov-2004 : Implemented new Zoomable interface (DG);
 * 25-Nov-2004 : Small update to clone() implementation (DG);
 * 22-Feb-2005 : Changed axis offsets from Spacer --&gt; RectangleInsets (DG);
 * 24-Feb-2005 : Added indexOf(XYItemRenderer) method (DG);
 * 21-Mar-2005 : Register plot as change listener in setRenderer() method (DG);
 * 21-Apr-2005 : Added get/setSeriesRenderingOrder() methods (ET);
 * 26-Apr-2005 : Removed LOGGER (DG);
 * 04-May-2005 : Fixed serialization of domain and range markers (DG);
 * 05-May-2005 : Removed unused draw() method (DG);
 * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per
 *               RFE 1183100 (DG);
 * 01-Jun-2005 : Upon deserialization, register plot as a listener with its
 *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG);
 * 01-Jun-2005 : Added clearDomainMarkers(int) method to match 
 *               clearRangeMarkers(int) (DG);
 * 06-Jun-2005 : Fixed equals() method to handle GradientPaint (DG);
 * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG);
 * 06-Jul-2005 : Fixed crosshair bug (id = 1233336) (DG);
 * ------------- JFREECHART 1.0.x ---------------------------------------------
 * 26-Jan-2006 : Added getAnnotations() method (DG);
 * 05-Sep-2006 : Added MarkerChangeEvent support (DG);
 * 13-Oct-2006 : Fixed initialisation of CrosshairState - see bug report 
 *               1565168 (DG);
 * 22-Nov-2006 : Fixed equals() and cloning() for quadrant attributes, plus 
 *               API doc updates (DG);
 * 29-Nov-2006 : Added argument checks (DG);
 * 15-Jan-2007 : Fixed bug in drawRangeMarkers() (DG);
 * 07-Feb-2007 : Fixed bug 1654215, renderer with no dataset (DG);
 * 26-Feb-2007 : Added missing setDomainAxisLocation() and 
 *               setRangeAxisLocation() methods (DG);
 * 02-Mar-2007 : Fix for crosshair positioning with horizontal orientation
 *               (see patch 1671648 by Sergei Ivanov) (DG);
 * 13-Mar-2007 : Added null argument checks for crosshair attributes (DG);
 * 23-Mar-2007 : Added domain zero base line facility (DG);
 * 04-May-2007 : Render only visible data items if possible (DG);
 * 24-May-2007 : Fixed bug in render method for an empty series (DG);
 * 07-Jun-2007 : Modified drawBackground() to pass orientation to 
 *               fillBackground() for handling GradientPaint (DG);
 * 24-Sep-2007 : Added new zoom methods (DG);
 * 26-Sep-2007 : Include index value in IllegalArgumentExceptions (DG);
 * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain
 *               and range markers (DG);
 * 12-Nov-2007 : Fixed bug in equals() method for domain and range tick
 *               band paint attributes (DG);
 * 27-Nov-2007 : Added new setFixedDomain/RangeAxisSpace() methods (DG);
 * 04-Jan-2008 : Fix for quadrant painting error - see patch 1849564 (DG);
 * 
 */</comment>

<package>package <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>plot</name></name>;</package>

<import>import <name><name>java</name>.<name>awt</name>.<name>AlphaComposite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>BasicStroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Color</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Composite</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Graphics2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Paint</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Shape</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>Stroke</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Line2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Point2D</name></name>;</import>
<import>import <name><name>java</name>.<name>awt</name>.<name>geom</name>.<name>Rectangle2D</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>ObjectOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>Serializable</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collection</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Iterator</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ResourceBundle</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>TreeMap</name></name>;</import>

<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItem</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>LegendItemCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>annotations</name>.<name>XYAnnotation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>Axis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisCollection</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisLocation</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisSpace</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>AxisState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueAxis</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>axis</name>.<name>ValueTick</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>ChartChangeEventType</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>PlotChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>event</name>.<name>RendererChangeListener</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>RendererUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>AbstractXYItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>XYItemRenderer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>chart</name>.<name>renderer</name>.<name>xy</name>.<name>XYItemRendererState</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>Range</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>Dataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetChangeEvent</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>general</name>.<name>DatasetUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>data</name>.<name>xy</name>.<name>XYDataset</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>io</name>.<name>SerialUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>Layer</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleEdge</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>ui</name>.<name>RectangleInsets</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectList</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>ObjectUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PaintUtilities</name></name>;</import>
<import>import <name><name>org</name>.<name>jfree</name>.<name>util</name>.<name>PublicCloneable</name></name>;</import>

<comment type="javadoc">/**
 * A general class for plotting data in the form of (x, y) pairs.  This plot can
 * use data from any class that implements the {@link XYDataset} interface.
 * &lt;P&gt;
 * &lt;code&gt;XYPlot&lt;/code&gt; makes use of an {@link XYItemRenderer} to draw each point
 * on the plot.  By using different renderers, various chart types can be
 * produced.
 * &lt;p&gt;
 * The {@link org.jfree.chart.ChartFactory} class contains static methods for
 * creating pre-configured charts.
 */</comment>
<class><specifier>public</specifier> class <name>XYPlot</name> <super><extends>extends <name>Plot</name></extends> <implements>implements <name>ValueAxisPlot</name>, <name>Zoomable</name>,
        <name>RendererChangeListener</name>, <name>Cloneable</name>, <name>PublicCloneable</name>, <name>Serializable</name></implements></super> <block>{

    <comment type="javadoc">/** For serialization. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>7044148245716569264L</expr></init></decl>;</decl_stmt>
    
    <comment type="javadoc">/** The default grid line stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_GRIDLINE_STROKE</name> =<init> <expr>new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>,
            <argument><expr><name><name>BasicStroke</name>.<name>CAP_BUTT</name></name></expr></argument>, <argument><expr><name><name>BasicStroke</name>.<name>JOIN_BEVEL</name></name></expr></argument>, <argument><expr>0.0f</expr></argument>, 
            <argument><expr>new <name><name>float</name><index>[]</index></name> <block>{<expr>2.0f</expr>, <expr>2.0f</expr>}</block></expr></argument>, <argument><expr>0.0f</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default grid line paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_GRIDLINE_PAINT</name> =<init> <expr><name><name>Color</name>.<name>lightGray</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair visibility. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>DEFAULT_CROSSHAIR_VISIBLE</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair stroke. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Stroke</name></type> <name>DEFAULT_CROSSHAIR_STROKE</name>
            =<init> <expr><name>DEFAULT_GRIDLINE_STROKE</name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The default crosshair paint. */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Paint</name></type> <name>DEFAULT_CROSSHAIR_PAINT</name> =<init> <expr><name><name>Color</name>.<name>blue</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The resourceBundle for the localization. */</comment>
    <decl_stmt><decl><type><specifier>protected</specifier> <specifier>static</specifier> <name>ResourceBundle</name></type> <name>localizationResources</name> 
            =<init> <expr><call><name><name>ResourceBundle</name>.<name>getBundle</name></name><argument_list>(
                    <argument><expr>"org.jfree.chart.plot.LocalizationBundle"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The plot orientation. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PlotOrientation</name></type> <name>orientation</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The offset between the data area and the axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>RectangleInsets</name></type> <name>axisOffset</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The domain axis / axes (used for the x-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>domainAxes</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The domain axis locations. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>domainAxisLocations</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range axis (used for the y-values). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>rangeAxes</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range axis location. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>rangeAxisLocations</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the datasets. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>datasets</name></decl>;</decl_stmt>

    <comment type="javadoc">/** Storage for the renderers. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>ObjectList</name></type> <name>renderers</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Storage for keys that map datasets/renderers to domain axes.  If the
     * map contains no entry for a dataset, it is assumed to map to the
     * primary domain axis (index = 0).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>datasetToDomainAxisMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Storage for keys that map datasets/renderers to range axes. If the
     * map contains no entry for a dataset, it is assumed to map to the
     * primary domain axis (index = 0).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>datasetToRangeAxisMap</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The origin point for the quadrants (if drawn). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Point2D</name></type> <name>quadrantOrigin</name> =<init> <expr>new <call><name><name>Point2D</name>.<name>Double</name></name><argument_list>(<argument><expr>0.0</expr></argument>, <argument><expr>0.0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used for each quadrant. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name><index>[]</index></type> <name>quadrantPaint</name>
            =<init> <expr>new <name><name>Paint</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr><name>null</name></expr>, <expr><name>null</name></expr>, <expr><name>null</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the domain grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the domain grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>domainGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the domain grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether the range grid-lines are visible. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeGridlinesVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used to draw the range grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeGridlineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used to draw the range grid-lines. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeGridlinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not the zero baseline against the domain
     * axis is visible.
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainZeroBaselineVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The stroke used for the zero baseline against the domain axis. 
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>domainZeroBaselineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * The paint used for the zero baseline against the domain axis. 
     * 
     * @since 1.0.5
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainZeroBaselinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A flag that controls whether or not the zero baseline against the range
     * axis is visible.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeZeroBaselineVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The stroke used for the zero baseline against the range axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeZeroBaselineStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used for the zero baseline against the range axis. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeZeroBaselinePaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not a domain crosshair is drawn..*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainCrosshairVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The domain crosshair value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>domainCrosshairValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The pen/brush used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>domainCrosshairStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainCrosshairPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag that controls whether or not the crosshair locks onto actual
     * data points.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>domainCrosshairLockedOnData</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A flag that controls whether or not a range crosshair is drawn..*/</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeCrosshairVisible</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The range crosshair value. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>double</name></type> <name>rangeCrosshairValue</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The pen/brush used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Stroke</name></type> <name>rangeCrosshairStroke</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The color used to draw the crosshair (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeCrosshairPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * A flag that controls whether or not the crosshair locks onto actual
     * data points.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>boolean</name></type> <name>rangeCrosshairLockedOnData</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** A map of lists of foreground markers (optional) for the domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>foregroundDomainMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map of lists of background markers (optional) for the domain axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>backgroundDomainMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map of lists of foreground markers (optional) for the range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>foregroundRangeMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** A map of lists of background markers (optional) for the range axes. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>Map</name></type> <name>backgroundRangeMarkers</name></decl>;</decl_stmt>

    <comment type="javadoc">/** 
     * A (possibly empty) list of annotations for the plot.  The list should
     * be initialised in the constructor and never allowed to be 
     * &lt;code&gt;null&lt;/code&gt;.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>List</name></type> <name>annotations</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used for the domain tick bands (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>domainTickBandPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The paint used for the range tick bands (if any). */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>transient</name> <name>Paint</name></type> <name>rangeTickBandPaint</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fixed domain axis space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AxisSpace</name></type> <name>fixedDomainAxisSpace</name></decl>;</decl_stmt>

    <comment type="javadoc">/** The fixed range axis space. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>AxisSpace</name></type> <name>fixedRangeAxisSpace</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The order of the dataset rendering (REVERSE draws the primary dataset
     * last so that it appears to be on top).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>DatasetRenderingOrder</name></type> <name>datasetRenderingOrder</name>
            =<init> <expr><name><name>DatasetRenderingOrder</name>.<name>REVERSE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The order of the series rendering (REVERSE draws the primary series
     * last so that it appears to be on top).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>SeriesRenderingOrder</name></type> <name>seriesRenderingOrder</name>
            =<init> <expr><name><name>SeriesRenderingOrder</name>.<name>REVERSE</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The weight for this plot (only relevant if this is a subplot in a
     * combined plot).
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>weight</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * An optional collection of legend items that can be returned by the
     * getLegendItems() method.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>LegendItemCollection</name></type> <name>fixedLegendItems</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new &lt;code&gt;XYPlot&lt;/code&gt; instance with no dataset, no axes and
     * no renderer.  You should specify these items before using the plot.
     */</comment>
    <constructor><specifier>public</specifier> <name>XYPlot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new plot with the specified dataset, axes and renderer.  Any
     * of the arguments can be &lt;code&gt;null&lt;/code&gt;, but in that case you should
     * take care to specify the value before using the plot (otherwise a
     * &lt;code&gt;NullPointerException&lt;/code&gt; may be thrown).
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param domainAxis  the domain axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param rangeAxis  the range axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     */</comment>
    <constructor><specifier>public</specifier> <name>XYPlot</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>,
                  <param><decl><type><name>ValueAxis</name></type> <name>domainAxis</name></decl></param>,
                  <param><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name></decl></param>,
                  <param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{

        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>weight</name></name> = 1</expr>;</expr_stmt>  <comment type="line">// only relevant when this is a subplot</comment>
        <expr_stmt><expr><name><name>this</name>.<name>axisOffset</name></name> = <name><name>RectangleInsets</name>.<name>ZERO_INSETS</name></name></expr>;</expr_stmt>

        <comment type="line">// allocate storage for datasets, axes and renderers (all optional)</comment>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainAxisLocations</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeAxes</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeAxisLocations</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> = new <call><name>HashMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>datasets</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>renderers</name></name> = new <call><name>ObjectList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>datasetToDomainAxisMap</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>datasetToRangeAxisMap</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name>.<name>datasets</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>renderers</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>mapDatasetToDomainAxis</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>domainAxis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>domainAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>domainAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>AxisLocation</name>.<name>BOTTOM_OR_LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>mapDatasetToRangeAxis</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>AxisLocation</name>.<name>BOTTOM_OR_LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>configureDomainAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselineVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name>DEFAULT_GRIDLINE_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name>DEFAULT_GRIDLINE_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselineVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name> = <name><name>Color</name>.<name>black</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name> = new <call><name>BasicStroke</name><argument_list>(<argument><expr>0.5f</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairValue</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairStroke</name></name> = <name>DEFAULT_CROSSHAIR_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairPaint</name></name> = <name>DEFAULT_CROSSHAIR_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> = 0.0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <name>DEFAULT_CROSSHAIR_STROKE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <name>DEFAULT_CROSSHAIR_PAINT</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name>.<name>annotations</name></name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></constructor>

    <comment type="javadoc">/**
     * Returns the plot type as a string.
     *
     * @return A short string describing the type of plot.
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getPlotType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>localizationResources</name>.<name>getString</name></name><argument_list>(<argument><expr>"XY_Plot"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the orientation of the plot.
     *
     * @return The orientation (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setOrientation(PlotOrientation)
     */</comment>
    <function><type><specifier>public</specifier> <name>PlotOrientation</name></type> <name>getOrientation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>orientation</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param orientation  the orientation (&lt;code&gt;null&lt;/code&gt; not allowed).
     * 
     * @see #getOrientation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setOrientation</name><parameter_list>(<param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>orientation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'orientation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>orientation</name> != <name><name>this</name>.<name>orientation</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>orientation</name></name> = <name>orientation</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the axis offset.
     *
     * @return The axis offset (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setAxisOffset(RectangleInsets)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleInsets</name></type> <name>getAxisOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>axisOffset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis offsets (gap between the data area and the axes) and sends
     * a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param offset  the offset (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAxisOffset()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setAxisOffset</name><parameter_list>(<param><decl><type><name>RectangleInsets</name></type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>offset</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'offset' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>axisOffset</name></name> = <name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis with index 0.  If the domain axis for this plot
     * is &lt;code&gt;null&lt;/code&gt;, then the method will return the parent plot's 
     * domain axis (if there is a parent plot).
     *
     * @return The domain axis (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDomainAxis(int)
     * @see #setDomainAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getDomainAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis with the specified index, or &lt;code&gt;null&lt;/code&gt;.
     *
     * @param index  the axis index.
     *
     * @return The axis (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setDomainAxis(int, ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>XYPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>xy</name> =<init> <expr>(<name>XYPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>xy</name>.<name>getDomainAxis</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain axis for the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param axis  the new axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainAxis()
     * @see #setDomainAxis(int, ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a domain axis and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainAxis(int)
     * @see #setRangeAxis(int, ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets a domain axis and, if requested, sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis.
     * @param notify  notify listeners?
     * 
     * @see #getDomainAxis(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>existing</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain axes for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param axes  the axes (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setRangeAxes(ValueAxis[])
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxes</name><parameter_list>(<param><decl><type><name><name>ValueAxis</name><index>[]</index></name></type> <name>axes</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>axes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setDomainAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>axes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the location of the primary domain axis.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainAxisLocation(AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getDomainAxisLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>AxisLocation</name>) <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the primary domain axis and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the domain axis and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  notify listeners?
     * 
     * @see #getDomainAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for the primary domain axis (taking into account the
     * plot's orientation).
     *
     * @return The edge.
     * 
     * @see #getDomainAxisLocation()
     * @see #getOrientation()
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getDomainAxisEdge</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(<argument><expr><call><name>getDomainAxisLocation</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of domain axes.
     *
     * @return The axis count.
     * 
     * @see #getRangeAxisCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDomainAxisCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the domain axes from the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @see #clearRangeAxes()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxes</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the domain axes. 
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureDomainAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for a domain axis.  If this hasn't been set
     * explicitly, the method returns the location that is opposite to the
     * primary domain axis location.
     *
     * @param index  the axis index.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>AxisLocation</name>) <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>AxisLocation</name>.<name>getOpposite</name></name><argument_list>(<argument><expr><call><name>getDomainAxisLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param index  the axis index.
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted for index
     *     0).
     * 
     * @see #getDomainAxisLocation(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setDomainAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the axis location for a domain axis and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param index  the axis index.
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted for 
     *     index 0).
     * @param notify  notify listeners?
     * 
     * @since 1.0.5
     * 
     * @see #getDomainAxisLocation(int)
     * @see #setRangeAxisLocation(int, AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <name>location</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'location' for index 0 not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>domainAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>        
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for a domain axis.
     *
     * @param index  the axis index.
     *
     * @return The edge.
     * 
     * @see #getRangeAxisEdge(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getDomainAxisEdge</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>location</name> =<init> <expr><call><name>getDomainAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>result</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveDomainAxisLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>RectangleEdge</name>.<name>opposite</name></name><argument_list>(<argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis for the plot.  If the range axis for this plot is
     * &lt;code&gt;null&lt;/code&gt;, then the method will return the parent plot's range 
     * axis (if there is a parent plot).
     *
     * @return The range axis.
     * 
     * @see #getRangeAxis(int)
     * @see #setRangeAxis(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRangeAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axis for the plot and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @see #getRangeAxis()
     * @see #setRangeAxis(int, ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list>  <block>{

        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// plot is likely registered as a listener with the existing axis...</comment>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>existing</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the location of the primary range axis.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeAxisLocation(AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getRangeAxisLocation</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>(<name>AxisLocation</name>) <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the primary range axis and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location of the primary range axis and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param notify  notify listeners?
     * 
     * @see #getRangeAxisLocation()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for the primary range axis.
     *
     * @return The range axis edge.
     * 
     * @see #getRangeAxisLocation()
     * @see #getOrientation()
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getRangeAxisEdge</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(<argument><expr><call><name>getRangeAxisLocation</name><argument_list>()</argument_list></call></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a range axis.
     *
     * @param index  the axis index.
     *
     * @return The axis (&lt;code&gt;null&lt;/code&gt; possible).
     * 
     * @see #setRangeAxis(int, ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>XYPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>xy</name> =<init> <expr>(<name>XYPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>xy</name>.<name>getRangeAxis</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a range axis and sends a {@link PlotChangeEvent} to all registered
     * listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeAxis(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function> 
    
    <comment type="javadoc">/**
     * Sets a range axis and, if requested, sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param index  the axis index.
     * @param axis  the axis (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getRangeAxis(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>existing</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param axes  the axes (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #setDomainAxes(ValueAxis[])
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxes</name><parameter_list>(<param><decl><type><name><name>ValueAxis</name><index>[]</index></name></type> <name>axes</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>axes</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setRangeAxis</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>axes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the number of range axes.
     *
     * @return The axis count.
     * 
     * @see #getDomainAxisCount()
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRangeAxisCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the range axes from the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @see #clearDomainAxes()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Configures the range axes.
     * 
     * @see #configureDomainAxes()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>configureRangeAxes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>configure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the location for a range axis.  If this hasn't been set
     * explicitly, the method returns the location that is opposite to the
     * primary range axis location.
     *
     * @param index  the axis index.
     *
     * @return The location (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeAxisLocation(int, AxisLocation)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisLocation</name></type> <name>getRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>AxisLocation</name>) <call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>AxisLocation</name>.<name>getOpposite</name></name><argument_list>(<argument><expr><call><name>getRangeAxisLocation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the location for a range axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param index  the axis index.
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeAxisLocation(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate...</comment>
        <expr_stmt><expr><call><name>setRangeAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Sets the axis location for a domain axis and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @param index  the axis index.
     * @param location  the location (&lt;code&gt;null&lt;/code&gt; not permitted for 
     *     index 0).
     * @param notify  notify listeners?
     * 
     * @since 1.0.5
     * 
     * @see #getRangeAxisLocation(int)
     * @see #setDomainAxisLocation(int, AxisLocation, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeAxisLocation</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>AxisLocation</name></type> <name>location</name></decl></param>, 
            <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <name>location</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr>"Null 'location' for index 0 not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>   
    }</block></function>

    <comment type="javadoc">/**
     * Returns the edge for a range axis.
     *
     * @param index  the axis index.
     *
     * @return The edge.
     * 
     * @see #getRangeAxisLocation(int)
     * @see #getOrientation()
     */</comment>
    <function><type><specifier>public</specifier> <name>RectangleEdge</name></type> <name>getRangeAxisEdge</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisLocation</name></type> <name>location</name> =<init> <expr><call><name>getRangeAxisLocation</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>result</name> =<init> <expr><call><name><name>Plot</name>.<name>resolveRangeAxisLocation</name></name><argument_list>(<argument><expr><name>location</name></expr></argument>, 
                <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>RectangleEdge</name>.<name>opposite</name></name><argument_list>(<argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the primary dataset for the plot.
     *
     * @return The primary dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDataset(int)
     * @see #setDataset(XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>XYDataset</name></type> <name>getDataset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDataset</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a dataset.
     *
     * @param index  the dataset index.
     *
     * @return The dataset (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDataset(int, XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>XYDataset</name></type> <name>getDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>XYDataset</name>) <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the primary dataset for the plot, replacing the existing dataset if
     * there is one.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset()
     * @see #setDataset(int, XYDataset)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDataset</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a dataset for the plot.
     *
     * @param index  the dataset index.
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDataset(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>existing</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>datasets</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// send a dataset change event to self...</comment>
        <decl_stmt><decl><type><name>DatasetChangeEvent</name></type> <name>event</name> =<init> <expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of datasets.
     *
     * @return The number of datasets.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDatasetCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the specified dataset, or &lt;code&gt;-1&lt;/code&gt; if the
     * dataset does not belong to the plot.
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return The index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>indexOf</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>dataset</name> == <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Maps a dataset to a particular domain axis.  All data will be plotted
     * against axis zero by default, no mapping is required for this case.
     *
     * @param index  the dataset index (zero-based).
     * @param axisIndex  the axis index.
     * 
     * @see #mapDatasetToRangeAxis(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapDatasetToDomainAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>int</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// fake a dataset change event to update axes...</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Maps a dataset to a particular range axis.  All data will be plotted
     * against axis zero by default, no mapping is required for this case.
     *
     * @param index  the dataset index (zero-based).
     * @param axisIndex  the axis index.
     * 
     * @see #mapDatasetToDomainAxis(int, int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>mapDatasetToRangeAxis</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>int</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, 
                <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// fake a dataset change event to update axes...</comment>
        <expr_stmt><expr><call><name>datasetChanged</name><argument_list>(<argument><expr>new <call><name>DatasetChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the renderer for the primary dataset.
     *
     * @return The item renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRenderer(XYItemRenderer)
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRenderer</name></type> <name>getRenderer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getRenderer</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the renderer for a dataset, or &lt;code&gt;null&lt;/code&gt;.
     *
     * @param index  the renderer index.
     *
     * @return The renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRenderer(int, XYItemRenderer)
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRenderer</name></type> <name>getRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; <name>index</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>XYItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Sets the renderer for the primary dataset and sends a
     * {@link PlotChangeEvent} to all registered listeners.  If the renderer
     * is set to &lt;code&gt;null&lt;/code&gt;, no data will be displayed.
     *
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRenderer()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a renderer and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param index  the index.
     * @param renderer  the renderer.
     * 
     * @see #getRenderer(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets a renderer and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param index  the index.
     * @param renderer  the renderer.
     * @param notify  notify listeners?
     * 
     * @see #getRenderer(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderer</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>, 
                            <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>existing</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>existing</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>existing</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>renderers</name>.<name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>renderer</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>configureDomainAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the renderers for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * 
     * @param renderers  the renderers (&lt;code&gt;null&lt;/code&gt; not permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRenderers</name><parameter_list>(<param><decl><type><name><name>XYItemRenderer</name><index>[]</index></name></type> <name>renderers</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>renderers</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>setRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>renderers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>   
        }</block></for>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns the dataset rendering order.
     *
     * @return The order (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDatasetRenderingOrder(DatasetRenderingOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>DatasetRenderingOrder</name></type> <name>getDatasetRenderingOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>datasetRenderingOrder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the rendering order and sends a {@link PlotChangeEvent} to all
     * registered listeners.  By default, the plot renders the primary dataset
     * last (so that the primary dataset overlays the secondary datasets).
     * You can reverse this if you want to.
     *
     * @param order  the rendering order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDatasetRenderingOrder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDatasetRenderingOrder</name><parameter_list>(<param><decl><type><name>DatasetRenderingOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>datasetRenderingOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the series rendering order.
     *
     * @return the order (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setSeriesRenderingOrder(SeriesRenderingOrder)
     */</comment>
    <function><type><specifier>public</specifier> <name>SeriesRenderingOrder</name></type> <name>getSeriesRenderingOrder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>seriesRenderingOrder</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the series order and sends a {@link PlotChangeEvent} to all
     * registered listeners.  By default, the plot renders the primary series
     * last (so that the primary series appears to be on top).
     * You can reverse this if you want to.
     *
     * @param order  the rendering order (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getSeriesRenderingOrder()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setSeriesRenderingOrder</name><parameter_list>(<param><decl><type><name>SeriesRenderingOrder</name></type> <name>order</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'order' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>seriesRenderingOrder</name></name> = <name>order</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the specified renderer, or &lt;code&gt;-1&lt;/code&gt; if the
     * renderer is not assigned to this plot.
     *
     * @param renderer  the renderer (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The renderer index.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getIndexOf</name><parameter_list>(<param><decl><type><name>XYItemRenderer</name></type> <name>renderer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>renderers</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>renderer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the renderer for the specified dataset.  The code first
     * determines the index of the dataset, then checks if there is a
     * renderer with the same index (if not, the method returns renderer(0).
     *
     * @param dataset  the dataset (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The renderer (possibly &lt;code&gt;null&lt;/code&gt;).
     */</comment>
    <function><type><specifier>public</specifier> <name>XYItemRenderer</name></type> <name>getRendererForDataset</name><parameter_list>(<param><decl><type><name>XYDataset</name></type> <name>dataset</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> == <name>dataset</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = (<name>XYItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>result</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = <call><name>getRenderer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the weight for this plot when it is used as a subplot within a
     * combined plot.
     *
     * @return The weight.
     * 
     * @see #setWeight(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getWeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>weight</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the weight for the plot and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param weight  the weight.
     * 
     * @see #getWeight()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setWeight</name><parameter_list>(<param><decl><type><name>int</name></type> <name>weight</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>weight</name></name> = <name>weight</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the domain gridlines are visible, and
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     * 
     * @see #setDomainGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the domain grid-lines are
     * visible.
     * &lt;p&gt;
     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isDomainGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke for the grid-lines (if any) plotted against the
     * domain axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDomainGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the domain axis, and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     * &lt;p&gt;
     * If you set this to &lt;code&gt;null&lt;/code&gt;, no grid lines will be drawn.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;stroke&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     *
     * @see #getDomainGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the domain
     * axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the domain axis, and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @throws IllegalArgumentException if &lt;code&gt;paint&lt;/code&gt; is 
     *     &lt;code&gt;null&lt;/code&gt;.
     * 
     * @see #getDomainGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt; if the range axis grid is visible, and
     * &lt;code&gt;false&lt;code&gt; otherwise.
     *
     * @return A boolean.
     * 
     * @see #setRangeGridlinesVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeGridlinesVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the range axis grid lines
     * are visible.
     * &lt;p&gt;
     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     * 
     * @see #isRangeGridlinesVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinesVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> != <name>visible</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke for the grid lines (if any) plotted against the
     * range axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeGridlineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the grid lines plotted against the range axis,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeGridlineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the grid lines (if any) plotted against the range
     * axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeGridlinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeGridlinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the grid lines plotted against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeGridlinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeGridlinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag that controls whether or not a zero baseline is
     * displayed for the domain axis.
     *
     * @return A boolean.
     * 
     * @since 1.0.5
     * 
     * @see #setDomainZeroBaselineVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZeroBaselineVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainZeroBaselineVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the zero baseline is
     * displayed for the domain axis, and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param visible  the flag.
     * 
     * @since 1.0.5
     * 
     * @see #isDomainZeroBaselineVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainZeroBaselineVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselineVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used for the zero baseline against the domain axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @since 1.0.5
     * 
     * @see #setDomainZeroBaselineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDomainZeroBaselineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the zero baseline for the domain axis,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.5
     * 
     * @see #getRangeZeroBaselineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainZeroBaselineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the zero baseline (if any) plotted against the
     * domain axis.
     * 
     * @since 1.0.5
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainZeroBaselinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainZeroBaselinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the zero baseline plotted against the domain axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @since 1.0.5
     * 
     * @see #getDomainZeroBaselinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainZeroBaselinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Returns a flag that controls whether or not a zero baseline is
     * displayed for the range axis.
     *
     * @return A boolean.
     * 
     * @see #setRangeZeroBaselineVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZeroBaselineVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeZeroBaselineVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag that controls whether or not the zero baseline is
     * displayed for the range axis, and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param visible  the flag.
     * 
     * @see #isRangeZeroBaselineVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeZeroBaselineVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>visible</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselineVisible</name></name> = <name>visible</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used for the zero baseline against the range axis.
     *
     * @return The stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeZeroBaselineStroke(Stroke)
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeZeroBaselineStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke for the zero baseline for the range axis,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeZeroBaselineStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeZeroBaselineStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint for the zero baseline (if any) plotted against the
     * range axis.
     *
     * @return The paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeZeroBaselinePaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeZeroBaselinePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the zero baseline plotted against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeZeroBaselinePaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeZeroBaselinePaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used for the domain tick bands.  If this is
     * &lt;code&gt;null&lt;/code&gt;, no tick bands will be drawn.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainTickBandPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainTickBandPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainTickBandPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the domain tick bands.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getDomainTickBandPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainTickBandPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>domainTickBandPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used for the range tick bands.  If this is
     * &lt;code&gt;null&lt;/code&gt;, no tick bands will be drawn.
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeTickBandPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeTickBandPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeTickBandPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint for the range tick bands.
     *
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getRangeTickBandPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeTickBandPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rangeTickBandPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the origin for the quadrants that can be displayed on the plot.
     * This defaults to (0, 0).
     *
     * @return The origin point (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setQuadrantOrigin(Point2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>Point2D</name></type> <name>getQuadrantOrigin</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>quadrantOrigin</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the quadrant origin and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param origin  the origin (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getQuadrantOrigin()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuadrantOrigin</name><parameter_list>(<param><decl><type><name>Point2D</name></type> <name>origin</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>origin</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'origin' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>quadrantOrigin</name></name> = <name>origin</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the paint used for the specified quadrant.
     *
     * @param index  the quadrant index (0-3).
     *
     * @return The paint (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setQuadrantPaint(int, Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getQuadrantPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt; 3</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The index value (" + <name>index</name> 
                    + ") should be in the range 0 to 3."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used for the specified quadrant and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index  the quadrant index (0-3).
     * @param paint  the paint (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getQuadrantPaint(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setQuadrantPaint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt; 3</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"The index value (" + <name>index</name> 
                    + ") should be in the range 0 to 3."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>index</name></expr>]</index></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for the domain axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #addDomainMarker(Marker, Layer)
     * @see #clearDomainMarkers()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// defer argument checking...</comment>
        <expr_stmt><expr><call><name>addDomainMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for the domain axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer  the layer (foreground or background).
     * 
     * @see #addDomainMarker(int, Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addDomainMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the (foreground and background) domain markers and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * 
     * @see #addDomainMarker(int, Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainMarkers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearDomainMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearDomainMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the (foreground and background) domain markers for a particular
     * renderer.
     *
     * @param index  the renderer index.
     * 
     * @see #clearRangeMarkers(int)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearDomainMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name>
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name>
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for a specific dataset/renderer and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the domain axis (that the renderer is mapped to), however this is
     * entirely up to the renderer.
     *
     * @param index  the dataset/renderer index.
     * @param marker  the marker.
     * @param layer  the layer (foreground or background).
     * 
     * @see #clearDomainMarkers(int)
     * @see #addRangeMarker(int, Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addDomainMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>marker</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'marker' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <if>if <condition>(<expr><name>layer</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'layer' not permitted."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>marker</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the domain axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param marker  the marker.
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeDomainMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the domain axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param marker the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeDomainMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index the dataset/renderer index.
     * @param marker the marker.
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeDomainMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>markers</name>.<name>remove</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>
    
    <comment type="javadoc">/**
     * Adds a marker for the range axis and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #addRangeMarker(Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addRangeMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for the range axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer  the layer (foreground or background).
     * 
     * @see #addRangeMarker(int, Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addRangeMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the range markers and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @see #clearRangeMarkers()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeMarkers</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearRangeMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Set</name></type> <name>keys</name> =<init> <expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>keySet</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>keys</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>(<name>Integer</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>clearRangeMarkers</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Adds a marker for a specific dataset/renderer and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     * &lt;P&gt;
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to the range axis, however this is entirely up to the renderer.
     *
     * @param index  the dataset/renderer index.
     * @param marker  the marker.
     * @param layer  the layer (foreground or background).
     * 
     * @see #clearRangeMarkers(int)
     * @see #addDomainMarker(int, Marker, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addRangeMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>markers</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>markers</name> = new <call><name><name>java</name>.<name>util</name>.<name>ArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>put</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>markers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>markers</name>.<name>add</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name>marker</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Clears the (foreground and background) range markers for a particular
     * renderer.
     *
     * @param index  the renderer index.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearRangeMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name>
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name>
                =<init> <expr>(<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>markers</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>Marker</name></type> <name>m</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>m</name>.<name>removeChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>markers</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the range axis and sends a {@link PlotChangeEvent} 
     * to all registered listeners.
     *
     * @param marker the marker.
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeRangeMarker</name><argument_list>(<argument><expr><name>marker</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for the range axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param marker the marker (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>removeRangeMarker</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index the dataset/renderer index.
     * @param marker the marker.
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually 
     *         removed.
     *
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeRangeMarker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Marker</name></type> <name>marker</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>marker</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'marker' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>ArrayList</name></type> <name>markers</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>markers</name> = (<name>ArrayList</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(
                    <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>markers</name>.<name>remove</name></name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Adds an annotation to the plot and sends a {@link PlotChangeEvent} to 
     * all registered listeners.
     *
     * @param annotation  the annotation (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getAnnotations()
     * @see #removeAnnotation(XYAnnotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>addAnnotation</name><parameter_list>(<param><decl><type><name>XYAnnotation</name></type> <name>annotation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>annotation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'annotation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name>.<name>annotations</name>.<name>add</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Removes an annotation from the plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param annotation  the annotation (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A boolean (indicates whether or not the annotation was removed).
     * 
     * @see #addAnnotation(XYAnnotation)
     * @see #getAnnotations()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>removeAnnotation</name><parameter_list>(<param><decl><type><name>XYAnnotation</name></type> <name>annotation</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>annotation</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'annotation' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>removed</name> =<init> <expr><call><name><name>this</name>.<name>annotations</name>.<name>remove</name></name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>removed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>removed</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of annotations.
     *
     * @return The list of annotations.
     * 
     * @since 1.0.1
     * 
     * @see #addAnnotation(XYAnnotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>List</name></type> <name>getAnnotations</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ArrayList</name><argument_list>(<argument><expr><name><name>this</name>.<name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Clears all the annotations and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     * 
     * @see #addAnnotation(XYAnnotation)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>clearAnnotations</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>annotations</name>.<name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="javadoc">/**
     * Calculates the space required for all the axes in the plot.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     *
     * @return The required space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr>new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>space</name> = <call><name>calculateDomainAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>space</name> = <call><name>calculateRangeAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>space</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the space required for the domain axis/axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param space  a carrier for the result (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The required space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateDomainAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                 <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                                 <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// reserve some space for the domain axis...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedDomainAxisSpace</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">// reserve space for the domain axes...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>space</name> = <call><name><name>axis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>

        <return>return <expr><name>space</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Calculates the space required for the range axis/axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     * @param space  a carrier for the result (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return The required space.
     */</comment>
    <function><type><specifier>protected</specifier> <name>AxisSpace</name></type> <name>calculateRangeAxisSpace</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                                <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                                                <param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>space</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>space</name> = new <call><name>AxisSpace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// reserve some space for the range axis...</comment>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>space</name>.<name>ensureAtLeast</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>fixedRangeAxisSpace</name>.<name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then>
        <else>else <block>{
            <comment type="line">// reserve space for the range axes...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>edge</name> =<init> <expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>space</name> = <call><name><name>axis</name>.<name>reserveSpace</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>edge</name></expr></argument>, <argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></else></if>
        <return>return <expr><name>space</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the plot within the specified area on a graphics device.
     *
     * @param g2  the graphics device.
     * @param area  the plot area (in Java2D space).
     * @param anchor  an anchor point in Java2D space (&lt;code&gt;null&lt;/code&gt;
     *                permitted).
     * @param parentState  the state from the parent plot, if there is one
     *                     (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param info  collects chart drawing information (&lt;code&gt;null&lt;/code&gt;
     *              permitted).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>draw</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                     <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                     <param><decl><type><name>Point2D</name></type> <name>anchor</name></decl></param>,
                     <param><decl><type><name>PlotState</name></type> <name>parentState</name></decl></param>,
                     <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// if the plot area is too small, just return...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> =<init> <expr>(<call><name><name>area</name>.<name>getWidth</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_WIDTH_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> =<init> <expr>(<call><name><name>area</name>.<name>getHeight</name></name><argument_list>()</argument_list></call> &lt;= <name>MINIMUM_HEIGHT_TO_DRAW</name>)</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>b1</name> || <name>b2</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// record the plot area...</comment>
        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setPlotArea</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// adjust the drawing area for the plot insets (if any)...</comment>
        <decl_stmt><decl><type><name>RectangleInsets</name></type> <name>insets</name> =<init> <expr><call><name>getInsets</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>insets</name>.<name>trim</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisSpace</name></type> <name>space</name> =<init> <expr><call><name>calculateAxisSpace</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>space</name>.<name>shrink</name></name><argument_list>(<argument><expr><name>area</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>axisOffset</name>.<name>trim</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>info</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>info</name>.<name>setDataArea</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw the plot background and axes...</comment>
        <expr_stmt><expr><call><name>drawBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Map</name></type> <name>axisStateMap</name> =<init> <expr><call><name>drawAxes</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PlotOrientation</name></type> <name>orient</name> =<init> <expr><call><name>getOrientation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// the anchor point is typically the point where the mouse last</comment>
        <comment type="line">// clicked - the crosshairs will be driven off this point...</comment>
        <if>if <condition>(<expr><name>anchor</name> != <name>null</name> &amp;&amp; !<call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>anchor</name> = <name>null</name></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>CrosshairState</name></type> <name>crosshairState</name> =<init> <expr>new <call><name>CrosshairState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setCrosshairDistance</name></name><argument_list>(<argument><expr><name><name>Double</name>.<name>POSITIVE_INFINITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setAnchor</name></name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setAnchorX</name></name><argument_list>(<argument><expr><name><name>Double</name>.<name>NaN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setAnchorY</name></name><argument_list>(<argument><expr><name><name>Double</name>.<name>NaN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            
        <if>if <condition>(<expr><name>anchor</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>domainAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>x</name> = <call><name><name>domainAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <expr_stmt><expr><name>x</name> = <call><name><name>domainAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setAnchorX</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>y</name> = <call><name><name>rangeAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <expr_stmt><expr><name>y</name> = <call><name><name>rangeAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setAnchorY</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setCrosshairX</name></name><argument_list>(<argument><expr><call><name>getDomainCrosshairValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setCrosshairY</name></name><argument_list>(<argument><expr><call><name>getRangeCrosshairValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Shape</name></type> <name>originalClip</name> =<init> <expr><call><name><name>g2</name>.<name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>g2</name>.<name>clip</name></name><argument_list>(<argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>, 
                <argument><expr><call><name>getForegroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AxisState</name></type> <name>domainAxisState</name> =<init> <expr>(<name>AxisState</name>) <call><name><name>axisStateMap</name>.<name>get</name></name><argument_list>(
                <argument><expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>domainAxisState</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>parentState</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>domainAxisState</name> = (<name>AxisState</name>) <call><name><name>parentState</name>.<name>getSharedAxisStates</name></name><argument_list>()</argument_list></call>
                        .<call><name>get</name><argument_list>(<argument><expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>AxisState</name></type> <name>rangeAxisState</name> =<init> <expr>(<name>AxisState</name>) <call><name><name>axisStateMap</name>.<name>get</name></name><argument_list>(<argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rangeAxisState</name> == <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>parentState</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rangeAxisState</name> = (<name>AxisState</name>) <call><name><name>parentState</name>.<name>getSharedAxisStates</name></name><argument_list>()</argument_list></call>
                        .<call><name>get</name><argument_list>(<argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>domainAxisState</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawDomainTickBands</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>domainAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>rangeAxisState</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawRangeTickBands</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>rangeAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>domainAxisState</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawDomainGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>domainAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawZeroDomainBaseline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>rangeAxisState</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawRangeGridlines</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>rangeAxisState</name>.<name>getTicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>drawZeroRangeBaseline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw the markers that are associated with a specific renderer...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawDomainMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawRangeMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// now draw annotations and render data items...</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>foundData</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DatasetRenderingOrder</name></type> <name>order</name> =<init> <expr><call><name>getDatasetRenderingOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>order</name> == <name><name>DatasetRenderingOrder</name>.<name>FORWARD</name></name></expr>)</condition><then> <block>{

            <comment type="line">// draw background annotations</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>rendererCount</name> =<init> <expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>rendererCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>r</name>.<name>drawAnnotations</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                            <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <comment type="line">// render data items...</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>foundData</name> = <call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>)</argument_list></call>
                    || <name>foundData</name></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// draw foreground annotations</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>rendererCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>r</name>.<name>drawAnnotations</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                            <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

        }</block></then>
        <else>else <if>if <condition>(<expr><name>order</name> == <name><name>DatasetRenderingOrder</name>.<name>REVERSE</name></name></expr>)</condition><then> <block>{

            <comment type="line">// draw background annotations</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>rendererCount</name> =<init> <expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>rendererCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>i</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// we need the dataset to make</comment>
                    <continue>continue;</continue>                 <comment type="line">// a link to the axes</comment>
                }</block></then></if>
                <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>r</name>.<name>drawAnnotations</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                            <argument><expr><name><name>Layer</name>.<name>BACKGROUND</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><call><name>getDatasetCount</name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                <expr_stmt><expr><name>foundData</name> = <call><name>render</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>crosshairState</name></expr></argument>)</argument_list></call>
                    || <name>foundData</name></expr>;</expr_stmt>
            }</block></for>

            <comment type="line">// draw foreground annotations</comment>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr><name>rendererCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>i</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// we need the dataset to make</comment>
                    <continue>continue;</continue>                 <comment type="line">// a link to the axes</comment>
                }</block></then></if>
                <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>r</name>.<name>drawAnnotations</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>domainAxis</name></expr></argument>, <argument><expr><name>rangeAxis</name></expr></argument>,
                            <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

        }</block></then></if></else></if>

        <comment type="line">// draw domain crosshair if required...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>xAxisIndex</name> =<init> <expr><call><name><name>crosshairState</name>.<name>getDomainAxisIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>xAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>(<argument><expr><name>xAxisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>xAxisEdge</name> =<init> <expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr><name>xAxisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name><name>this</name>.<name>domainCrosshairLockedOnData</name></name> &amp;&amp; <name>anchor</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>xx</name> = <call><name><name>xAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> 
            <else>else <block>{
                <expr_stmt><expr><name>xx</name> = <call><name><name>xAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxisEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setCrosshairX</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setDomainCrosshairValue</name><argument_list>(<argument><expr><call><name><name>crosshairState</name>.<name>getCrosshairX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isDomainCrosshairVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name>getDomainCrosshairValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getDomainCrosshairPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getDomainCrosshairStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>drawDomainCrosshair</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>orient</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// draw range crosshair if required...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>yAxisIndex</name> =<init> <expr><call><name><name>crosshairState</name>.<name>getRangeAxisIndex</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>(<argument><expr><name>yAxisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RectangleEdge</name></type> <name>yAxisEdge</name> =<init> <expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr><name>yAxisIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> &amp;&amp; <name>anchor</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>yy</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orient</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>yy</name> = <call><name><name>yAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>yy</name> = <call><name><name>yAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><call><name><name>anchor</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>yAxisEdge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>crosshairState</name>.<name>setCrosshairY</name></name><argument_list>(<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setRangeCrosshairValue</name><argument_list>(<argument><expr><call><name><name>crosshairState</name>.<name>getCrosshairY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isRangeCrosshairVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name>getRangeCrosshairValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> =<init> <expr><call><name>getRangeCrosshairPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Stroke</name></type> <name>stroke</name> =<init> <expr><call><name>getRangeCrosshairStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>drawRangeCrosshair</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>orient</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>yAxis</name></expr></argument>, <argument><expr><name>stroke</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<name>foundData</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawNoDataMessage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawDomainMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>drawRangeMarkers</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>Layer</name>.<name>FOREGROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>drawAnnotations</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setClip</name></name><argument_list>(<argument><expr><name>originalClip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>drawOutline</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the background for the plot.
     *
     * @param g2  the graphics device.
     * @param area  the area.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawBackground</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>fillBackground</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><name><name>this</name>.<name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawQuadrants</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>drawBackgroundImage</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>area</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the quadrants.
     *
     * @param g2  the graphics device.
     * @param area  the area.
     * 
     * @see #setQuadrantOrigin(Point2D)
     * @see #setQuadrantPaint(int, Paint)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawQuadrants</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//  0 | 1</comment>
        <comment type="line">//  --+--</comment>
        <comment type="line">//  2 | 3</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>somethingToDraw</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>xAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> =<init> <expr><call><name><name>xAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>constrain</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>quadrantOrigin</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>xAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> =<init> <expr><call><name><name>yAxis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>constrain</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>quadrantOrigin</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>yAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xmin</name> =<init> <expr><call><name><name>xAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xxmin</name> =<init> <expr><call><name><name>xAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>xmin</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>xmax</name> =<init> <expr><call><name><name>xAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>xxmax</name> =<init> <expr><call><name><name>xAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>xmax</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>ymin</name> =<init> <expr><call><name><name>yAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yymin</name> =<init> <expr><call><name><name>yAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>ymin</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>ymax</name> =<init> <expr><call><name><name>yAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>yymax</name> =<init> <expr><call><name><name>yAxis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>ymax</name></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Rectangle2D</name><index>[]</index></type> <name>r</name> =<init> <expr>new <name><name>Rectangle2D</name><index>[]</index></name> <block>{<expr><name>null</name></expr>, <expr><name>null</name></expr>, <expr><name>null</name></expr>, <expr><name>null</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr>0</expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>x</name> &gt; <name>xmin</name> &amp;&amp; <name>y</name> &lt; <name>ymax</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>r</name><index>[<expr>0</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymax</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmin</name></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.VERTICAL</comment>
                    <expr_stmt><expr><name><name>r</name><index>[<expr>0</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymax</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmin</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>somethingToDraw</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr>1</expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>x</name> &lt; <name>xmax</name> &amp;&amp; <name>y</name> &lt; <name>ymax</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>r</name><index>[<expr>1</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymax</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmax</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.VERTICAL</comment>
                    <expr_stmt><expr><name><name>r</name><index>[<expr>1</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymax</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>somethingToDraw</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr>2</expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>x</name> &gt; <name>xmin</name> &amp;&amp; <name>y</name> &gt; <name>ymin</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>r</name><index>[<expr>2</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymin</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymin</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.VERTICAL</comment>
                    <expr_stmt><expr><name><name>r</name><index>[<expr>2</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmin</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymin</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmin</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>somethingToDraw</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr>3</expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>x</name> &lt; <name>xmax</name> &amp;&amp; <name>y</name> &gt; <name>ymin</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>r</name><index>[<expr>3</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymin</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xxmax</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymin</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{  <comment type="line">// PlotOrientation.VERTICAL</comment>
                    <expr_stmt><expr><name><name>r</name><index>[<expr>3</expr>]</index></name> = new <call><name><name>Rectangle2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>yymin</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>xx</name> - <name>xxmax</name></expr></argument>)</argument_list></call></expr></argument>, 
                            <argument><expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>yy</name> - <name>yymin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>somethingToDraw</name> = true</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>somethingToDraw</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Composite</name></type> <name>originalComposite</name> =<init> <expr><call><name><name>g2</name>.<name>getComposite</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><call><name><name>AlphaComposite</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>AlphaComposite</name>.<name>SRC_OVER</name></name></expr></argument>,
                    <argument><expr><call><name>getBackgroundAlpha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name> != <name>null</name> &amp;&amp; <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> != <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>g2</name>.<name>fill</name></name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setComposite</name></name><argument_list>(<argument><expr><name>originalComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the domain tick bands, if any.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param ticks  the ticks.
     * 
     * @see #setDomainTickBandPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawDomainTickBands</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>bandPaint</name> =<init> <expr><call><name>getDomainTickBandPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bandPaint</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>fillBand</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>xAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>previous</name> =<init> <expr><call><name><name>xAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fillBand</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>fillDomainGridBand</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>,
                            <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>previous</name> = <name>current</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>fillBand</name> = !<name>fillBand</name></expr>;</expr_stmt>
            }</block></while>
            <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>xAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fillBand</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>fillDomainGridBand</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the range tick bands, if any.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param ticks  the ticks.
     * 
     * @see #setRangeTickBandPaint(Paint)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawRangeTickBands</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                   <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Paint</name></type> <name>bandPaint</name> =<init> <expr><call><name>getRangeTickBandPaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>bandPaint</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>fillBand</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>previous</name> =<init> <expr><call><name><name>axis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>current</name> =<init> <expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>fillBand</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>fillRangeGridBand</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                            <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>previous</name> = <name>current</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>fillBand</name> = !<name>fillBand</name></expr>;</expr_stmt>
            }</block></while>
            <decl_stmt><decl><type><name>double</name></type> <name>end</name> =<init> <expr><call><name><name>axis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>fillBand</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>fillRangeGridBand</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * A utility method for drawing the axes.
     *
     * @param g2  the graphics device (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotArea  the plot area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param dataArea  the data area (&lt;code&gt;null&lt;/code&gt; not permitted).
     * @param plotState  collects information about the plot (&lt;code&gt;null&lt;/code&gt;
     *                   permitted).
     *
     * @return A map containing the state for each axis drawn.
     */</comment>
    <function><type><specifier>protected</specifier> <name>Map</name></type> <name>drawAxes</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                           <param><decl><type><name>Rectangle2D</name></type> <name>plotArea</name></decl></param>,
                           <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                           <param><decl><type><name>PlotRenderingInfo</name></type> <name>plotState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>AxisCollection</name></type> <name>axisCollection</name> =<init> <expr>new <call><name>AxisCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// add domain axes to lists...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axisCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <comment type="line">// add range axes to lists...</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>yAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axisCollection</name>.<name>add</name></name><argument_list>(<argument><expr><name>yAxis</name></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>Map</name></type> <name>axisStateMap</name> =<init> <expr>new <call><name>HashMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw the top axes</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>cursor</name> =<init> <expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call> - <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateTopOutset</name></name><argument_list>(
                <argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>axisCollection</name>.<name>getAxesAtTop</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AxisState</name></type> <name>info</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>TOP</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cursor</name> = <call><name><name>info</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// draw the bottom axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call>
                 + <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateBottomOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtBottom</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AxisState</name></type> <name>info</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cursor</name> = <call><name><name>info</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// draw the left axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call>
                 - <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateLeftOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtLeft</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AxisState</name></type> <name>info</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cursor</name> = <call><name><name>info</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// draw the right axes</comment>
        <expr_stmt><expr><name>cursor</name> = <call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call>
                 + <call><name><name>this</name>.<name>axisOffset</name>.<name>calculateRightOutset</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iterator</name> = <call><name><name>axisCollection</name>.<name>getAxesAtRight</name></name><argument_list>()</argument_list></call>.<call><name>iterator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AxisState</name></type> <name>info</name> =<init> <expr><call><name><name>axis</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>plotArea</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>RIGHT</name></name></expr></argument>, <argument><expr><name>plotState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cursor</name> = <call><name><name>info</name>.<name>getCursor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>axisStateMap</name>.<name>put</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>axisStateMap</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a representation of the data within the dataArea region, using the
     * current renderer.
     * &lt;P&gt;
     * The &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;crosshairState&lt;/code&gt; arguments may be
     * &lt;code&gt;null&lt;/code&gt;.
     *
     * @param g2  the graphics device.
     * @param dataArea  the region in which the data is to be drawn.
     * @param index  the dataset index.
     * @param info  an optional object for collection dimension information.
     * @param crosshairState  collects crosshair information
     *                        (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return A flag that indicates whether any data was actually rendered.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>render</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                          <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                          <param><decl><type><name>int</name></type> <name>index</name></decl></param>,
                          <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                          <param><decl><type><name>CrosshairState</name></type> <name>crosshairState</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>foundData</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name><name>DatasetUtilities</name>.<name>isEmptyOrNull</name></name><argument_list>(<argument><expr><name>dataset</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>foundData</name> = true</expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>xAxis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>renderer</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>renderer</name> == <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>renderer</name> = <call><name>getRenderer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>renderer</name> == <name>null</name></expr>)</condition><then> <block>{ <comment type="line">// no default renderer available</comment>
                    <return>return <expr><name>foundData</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>

            <decl_stmt><decl><type><name>XYItemRendererState</name></type> <name>state</name> =<init> <expr><call><name><name>renderer</name>.<name>initialise</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>passCount</name> =<init> <expr><call><name><name>renderer</name>.<name>getPassCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>SeriesRenderingOrder</name></type> <name>seriesOrder</name> =<init> <expr><call><name>getSeriesRenderingOrder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>seriesOrder</name> == <name><name>SeriesRenderingOrder</name>.<name>REVERSE</name></name></expr>)</condition><then> <block>{
                <comment type="line">//render series in reverse order</comment>
                <for>for (<init><decl><type><name>int</name></type> <name>pass</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pass</name> &lt; <name>passCount</name></expr>;</condition> <incr><expr><name>pass</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr><name>seriesCount</name> - 1</expr></init></decl>;</init> <condition><expr><name>series</name> &gt;= 0</expr>;</condition> <incr><expr><name>series</name>--</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>firstItem</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>lastItem</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>lastItem</name> == -1</expr>)</condition><then> <block>{
                            <continue>continue;</continue>
                        }</block></then></if>
                        <if>if <condition>(<expr><call><name><name>state</name>.<name>getProcessVisibleItemsOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>itemBounds</name> =<init> <expr><call><name><name>RendererUtilities</name>.<name>findLiveItems</name></name><argument_list>(
                                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>xAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                                    <argument><expr><call><name><name>xAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>firstItem</name> = <name><name>itemBounds</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>lastItem</name> = <name><name>itemBounds</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                        }</block></then></if>
                        <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr><name>firstItem</name></expr></init></decl>;</init> <condition><expr><name>item</name> &lt;= <name>lastItem</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
                                    <argument><expr><name>this</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>yAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,
                                    <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                    }</block></for>
                }</block></for>
            }</block></then>
            <else>else <block>{
                <comment type="line">//render series in forward order</comment>
                <for>for (<init><decl><type><name>int</name></type> <name>pass</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>pass</name> &lt; <name>passCount</name></expr>;</condition> <incr><expr><name>pass</name>++</expr></incr>) <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>series</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>series</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>series</name>++</expr></incr>) <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>firstItem</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>lastItem</name> =<init> <expr><call><name><name>dataset</name>.<name>getItemCount</name></name><argument_list>(<argument><expr><name>series</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>state</name>.<name>getProcessVisibleItemsOnly</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>itemBounds</name> =<init> <expr><call><name><name>RendererUtilities</name>.<name>findLiveItems</name></name><argument_list>(
                                    <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><call><name><name>xAxis</name>.<name>getLowerBound</name></name><argument_list>()</argument_list></call></expr></argument>, 
                                    <argument><expr><call><name><name>xAxis</name>.<name>getUpperBound</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>firstItem</name> = <name><name>itemBounds</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>lastItem</name> = <name><name>itemBounds</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                        }</block></then></if>
                        <for>for (<init><decl><type><name>int</name></type> <name>item</name> =<init> <expr><name>firstItem</name></expr></init></decl>;</init> <condition><expr><name>item</name> &lt;= <name>lastItem</name></expr>;</condition> <incr><expr><name>item</name>++</expr></incr>) <block>{
                            <expr_stmt><expr><call><name><name>renderer</name>.<name>drawItem</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
                                    <argument><expr><name>this</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>yAxis</name></expr></argument>, <argument><expr><name>dataset</name></expr></argument>, <argument><expr><name>series</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,
                                    <argument><expr><name>crosshairState</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></for>
                    }</block></for>
                }</block></for>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>foundData</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain axis for a dataset.
     *
     * @param index  the dataset index.
     *
     * @return The axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getDomainAxisForDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index " + <name>index</name> 
                    + " out of bounds."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>valueAxis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>axisIndex</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>get</name></name><argument_list>(
                <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axisIndex</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>valueAxis</name> = <call><name>getDomainAxis</name><argument_list>(<argument><expr><call><name><name>axisIndex</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>valueAxis</name> = <call><name>getDomainAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>valueAxis</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Returns the range axis for a dataset.
     *
     * @param index  the dataset index.
     *
     * @return The axis.
     */</comment>
    <function><type><specifier>public</specifier> <name>ValueAxis</name></type> <name>getRangeAxisForDataset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Index " + <name>index</name> 
                    + " out of bounds."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>valueAxis</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>axisIndex</name>
            =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>get</name></name><argument_list>(<argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>axisIndex</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>valueAxis</name> = <call><name>getRangeAxis</name><argument_list>(<argument><expr><call><name><name>axisIndex</name>.<name>intValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>valueAxis</name> = <call><name>getRangeAxis</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>valueAxis</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the gridlines for the plot, if they are visible.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param ticks  the ticks.
     * 
     * @see #drawRangeGridlines(Graphics2D, Rectangle2D, List)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                       <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// no renderer, no gridlines...</comment>
        <if>if <condition>(<expr><call><name>getRenderer</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// draw the domain grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isDomainGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getDomainGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getDomainGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>(<name>gridStroke</name> != <name>null</name>) &amp;&amp; (<name>gridPaint</name> != <name>null</name>)</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>drawDomainGridLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></argument>,
                            <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the gridlines for the plot's primary range axis, if they are
     * visible.
     *
     * @param g2  the graphics device.
     * @param area  the data area.
     * @param ticks  the ticks.
     * 
     * @see #drawDomainGridlines(Graphics2D, Rectangle2D, List)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeGridlines</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>,
                                      <param><decl><type><name>List</name></type> <name>ticks</name></decl></param>)</parameter_list> <block>{

        <comment type="line">// no renderer, no gridlines...</comment>
        <if>if <condition>(<expr><call><name>getRenderer</name><argument_list>()</argument_list></call> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// draw the range grid lines, if any...</comment>
        <if>if <condition>(<expr><call><name>isRangeGridlinesVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Stroke</name></type> <name>gridStroke</name> =<init> <expr><call><name>getRangeGridlineStroke</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Paint</name></type> <name>gridPaint</name> =<init> <expr><call><name>getRangeGridlinePaint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>ticks</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <decl_stmt><decl><type><name>ValueTick</name></type> <name>tick</name> =<init> <expr>(<name>ValueTick</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call> != 0.0
                            || !<call><name>isRangeZeroBaselineVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>drawRangeLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>, 
                                <argument><expr><name>area</name></expr></argument>, <argument><expr><call><name><name>tick</name>.<name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gridPaint</name></expr></argument>, <argument><expr><name>gridStroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a base line across the chart at value zero on the domain axis.
     *
     * @param g2  the graphics device.
     * @param area  the data area.
     * 
     * @see #setDomainZeroBaselineVisible(boolean)
     * 
     * @since 1.0.5
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawZeroDomainBaseline</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isDomainZeroBaselineVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// FIXME: the renderer interface doesn't have the drawDomainLine()</comment>
            <comment type="line">// method, so we have to rely on the renderer being a subclass of</comment>
            <comment type="line">// AbstractXYItemRenderer (which is lame)</comment>
            <if>if <condition>(<expr><name>r</name> <name>instanceof</name> <name>AbstractXYItemRenderer</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>AbstractXYItemRenderer</name></type> <name>renderer</name> =<init> <expr>(<name>AbstractXYItemRenderer</name>) <name>r</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>renderer</name>.<name>drawDomainLine</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr>0.0</expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name></expr></argument>, 
                        <argument><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws a base line across the chart at value zero on the range axis.
     *
     * @param g2  the graphics device.
     * @param area  the data area.
     * 
     * @see #setRangeZeroBaselineVisible(boolean)
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawZeroRangeBaseline</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>area</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isRangeZeroBaselineVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getRenderer</name><argument_list>()</argument_list></call>.<call><name>drawRangeLine</name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>area</name></expr></argument>, <argument><expr>0.0</expr></argument>, 
                    <argument><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name></expr></argument>, <argument><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Draws the annotations for the plot.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param info  the chart rendering info.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>drawAnnotations</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>,
                                <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>this</name>.<name>annotations</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYAnnotation</name></type> <name>annotation</name> =<init> <expr>(<name>XYAnnotation</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>xAxis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>yAxis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>annotation</name>.<name>draw</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name>xAxis</name></expr></argument>, <argument><expr><name>yAxis</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the domain markers (if any) for an axis and layer.  This method is
     * typically called from within the draw() method.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param index  the renderer index.
     * @param layer  the layer (foreground or background).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainMarkers</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <comment type="line">// check that the renderer has a corresponding dataset (it doesn't</comment>
        <comment type="line">// matter if the dataset is null)</comment>
        <if>if <condition>(<expr><name>index</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>    
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> =<init> <expr><call><name>getDomainMarkers</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getDomainAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>markers</name> != <name>null</name> &amp;&amp; <name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Marker</name></type> <name>marker</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>r</name>.<name>drawDomainMarker</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws the range markers (if any) for a renderer and layer.  This method
     * is typically called from within the draw() method.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param index  the renderer index.
     * @param layer  the layer (foreground or background).
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeMarkers</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>r</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <comment type="line">// check that the renderer has a corresponding dataset (it doesn't</comment>
        <comment type="line">// matter if the dataset is null)</comment>
        <if>if <condition>(<expr><name>index</name> &gt;= <call><name>getDatasetCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Collection</name></type> <name>markers</name> =<init> <expr><call><name>getRangeMarkers</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxisForDataset</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>markers</name> != <name>null</name> &amp;&amp; <name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>markers</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>Marker</name></type> <name>marker</name> =<init> <expr>(<name>Marker</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>r</name>.<name>drawRangeMarker</name></name><argument_list>(<argument><expr><name>g2</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>axis</name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of domain markers (read only) for the specified layer.
     *
     * @param layer  the layer (foreground or background).
     *
     * @return The list of domain markers.
     * 
     * @see #getRangeMarkers(Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getDomainMarkers</name><parameter_list>(<param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getDomainMarkers</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the list of range markers (read only) for the specified layer.
     *
     * @param layer  the layer (foreground or background).
     *
     * @return The list of range markers.
     * 
     * @see #getDomainMarkers(Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getRangeMarkers</name><parameter_list>(<param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getRangeMarkers</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>layer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of domain markers for a particular renderer and
     * layer.
     *
     * @param index  the renderer index.
     * @param layer  the layer.
     *
     * @return A collection of markers (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getRangeMarkers(int, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getDomainMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundDomainMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Collections</name>.<name>unmodifiableCollection</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a collection of range markers for a particular renderer and
     * layer.
     *
     * @param index  the renderer index.
     * @param layer  the layer.
     *
     * @return A collection of markers (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #getDomainMarkers(int, Layer)
     */</comment>
    <function><type><specifier>public</specifier> <name>Collection</name></type> <name>getRangeMarkers</name><parameter_list>(<param><decl><type><name>int</name></type> <name>index</name></decl></param>, <param><decl><type><name>Layer</name></type> <name>layer</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Collection</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Integer</name></type> <name>key</name> =<init> <expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>FOREGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>foregroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>layer</name> == <name><name>Layer</name>.<name>BACKGROUND</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = (<name>Collection</name>) <call><name><name>this</name>.<name>backgroundRangeMarkers</name>.<name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <if>if <condition>(<expr><name>result</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>Collections</name>.<name>unmodifiableCollection</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Utility method for drawing a horizontal line across the data area of the
     * plot.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param value  the coordinate, where to draw the line.
     * @param stroke  the stroke to use.
     * @param paint  the paint to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawHorizontalLine</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                      <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>,
                                      <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getOrientation</name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axis</name> = <call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>
    
    <comment type="javadoc">/**
     * Draws a domain crosshair.
     * 
     * @param g2  the graphics target.
     * @param dataArea  the data area.
     * @param orientation  the plot orientation.
     * @param value  the crosshair value.
     * @param axis  the axis against which the value is measured.
     * @param stroke  the stroke used to draw the crosshair line.
     * @param paint  the paint used to draw the crosshair line.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawDomainCrosshair</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, 
            <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>VERTICAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xx</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Utility method for drawing a vertical line on the data area of the plot.
     *
     * @param g2  the graphics device.
     * @param dataArea  the data area.
     * @param value  the coordinate, where to draw the line.
     * @param stroke  the stroke to use.
     * @param paint  the paint to use.
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawVerticalLine</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>,
                                    <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>getOrientation</name><argument_list>()</argument_list></call> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>axis</name> = <call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                    <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr>new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xx</name></expr></argument>, 
                    <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <comment type="javadoc">/**
     * Draws a range crosshair.
     * 
     * @param g2  the graphics target.
     * @param dataArea  the data area.
     * @param orientation  the plot orientation.
     * @param value  the crosshair value.
     * @param axis  the axis against which the value is measured.
     * @param stroke  the stroke used to draw the crosshair line.
     * @param paint  the paint used to draw the crosshair line.
     * 
     * @since 1.0.4
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>drawRangeCrosshair</name><parameter_list>(<param><decl><type><name>Graphics2D</name></type> <name>g2</name></decl></param>, <param><decl><type><name>Rectangle2D</name></type> <name>dataArea</name></decl></param>, 
            <param><decl><type><name>PlotOrientation</name></type> <name>orientation</name></decl></param>, <param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>, 
            <param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>, <param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        
        <if>if <condition>(<expr><call><name><name>axis</name>.<name>getRange</name></name><argument_list>()</argument_list></call>.<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Line2D</name></type> <name>line</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>orientation</name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>xx</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>BOTTOM</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><name>xx</name></expr></argument>, <argument><expr><call><name><name>dataArea</name>.<name>getMinY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>xx</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>yy</name> =<init> <expr><call><name><name>axis</name>.<name>valueToJava2D</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dataArea</name></expr></argument>, 
                        <argument><expr><name><name>RectangleEdge</name>.<name>LEFT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>line</name> = new <call><name><name>Line2D</name>.<name>Double</name></name><argument_list>(<argument><expr><call><name><name>dataArea</name>.<name>getMinX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>, 
                        <argument><expr><call><name><name>dataArea</name>.<name>getMaxX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setStroke</name></name><argument_list>(<argument><expr><name>stroke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>setPaint</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>g2</name>.<name>draw</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
    }</block></function>

    <comment type="javadoc">/**
     * Handles a 'click' on the plot by updating the anchor values.
     *
     * @param x  the x-coordinate, where the click occurred, in Java2D space.
     * @param y  the y-coordinate, where the click occurred, in Java2D space.
     * @param info  object containing information about the plot dimensions.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>handleClick</name><parameter_list>(<param><decl><type><name>int</name></type> <name>x</name></decl></param>, <param><decl><type><name>int</name></type> <name>y</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Rectangle2D</name></type> <name>dataArea</name> =<init> <expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>dataArea</name>.<name>contains</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// set the anchor value for the horizontal axis...</comment>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>da</name> =<init> <expr><call><name>getDomainAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>da</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>hvalue</name> =<init> <expr><call><name><name>da</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setDomainCrosshairValue</name><argument_list>(<argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// set the anchor value for the vertical axis...</comment>
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>ra</name> =<init> <expr><call><name>getRangeAxis</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ra</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>vvalue</name> =<init> <expr><call><name><name>ra</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, 
                        <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>setRangeCrosshairValue</name><argument_list>(<argument><expr><name>vvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * A utility method that returns a list of datasets that are mapped to a
     * particular axis.
     *
     * @param axisIndex  the axis index (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A list of datasets.
     */</comment>
    <function><type><specifier>private</specifier> <name>List</name></type> <name>getDatasetsMappedToDomainAxis</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axisIndex</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axisIndex' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Integer</name></type> <name>mappedAxis</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToDomainAxisMap</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mappedAxis</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>axisIndex</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name><name>mappedAxis</name>.<name>equals</name></name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * A utility method that returns a list of datasets that are mapped to a
     * particular axis.
     *
     * @param axisIndex  the axis index (&lt;code&gt;null&lt;/code&gt; not permitted).
     *
     * @return A list of datasets.
     */</comment>
    <function><type><specifier>private</specifier> <name>List</name></type> <name>getDatasetsMappedToRangeAxis</name><parameter_list>(<param><decl><type><name>Integer</name></type> <name>axisIndex</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>axisIndex</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'axisIndex' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>List</name></type> <name>result</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Integer</name></type> <name>mappedAxis</name> =<init> <expr>(<name>Integer</name>) <call><name><name>this</name>.<name>datasetToRangeAxisMap</name>.<name>get</name></name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mappedAxis</name> == <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>axisIndex</name>.<name>equals</name></name><argument_list>(<argument><expr><name>ZERO</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><call><name><name>mappedAxis</name>.<name>equals</name></name><argument_list>(<argument><expr><name>axisIndex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the given domain axis.
     *
     * @param axis  the axis.
     *
     * @return The axis index.
     * 
     * @see #getRangeAxisIndex(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getDomainAxisIndex</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{
            <comment type="line">// try the parent plot</comment>
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>XYPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>p</name> =<init> <expr>(<name>XYPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>getDomainAxisIndex</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the index of the given range axis.
     *
     * @param axis  the axis.
     *
     * @return The axis index.
     * 
     * @see #getDomainAxisIndex(ValueAxis)
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getRangeAxisIndex</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{
            <comment type="line">// try the parent plot</comment>
            <decl_stmt><decl><type><name>Plot</name></type> <name>parent</name> =<init> <expr><call><name>getParent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>parent</name> <name>instanceof</name> <name>XYPlot</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYPlot</name></type> <name>p</name> =<init> <expr>(<name>XYPlot</name>) <name>parent</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> = <call><name><name>p</name>.<name>getRangeAxisIndex</name></name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range for the specified axis.
     *
     * @param axis  the axis.
     *
     * @return The range.
     */</comment>
    <function><type><specifier>public</specifier> <name>Range</name></type> <name>getDataRange</name><parameter_list>(<param><decl><type><name>ValueAxis</name></type> <name>axis</name></decl></param>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Range</name></type> <name>result</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name></type> <name>mappedDatasets</name> =<init> <expr>new <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>isDomainAxis</name> =<init> <expr>true</expr></init></decl>;</decl_stmt>

        <comment type="line">// is it a domain axis?</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>domainIndex</name> =<init> <expr><call><name>getDomainAxisIndex</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>domainIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>isDomainAxis</name> = true</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mappedDatasets</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>getDatasetsMappedToDomainAxis</name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>domainIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// or is it a range axis?</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeIndex</name> =<init> <expr><call><name>getRangeAxisIndex</name><argument_list>(<argument><expr><name>axis</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>rangeIndex</name> &gt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>isDomainAxis</name> = false</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mappedDatasets</name>.<name>addAll</name></name><argument_list>(<argument><expr><call><name>getDatasetsMappedToRangeAxis</name><argument_list>(
                    <argument><expr>new <call><name>Integer</name><argument_list>(<argument><expr><name>rangeIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// iterate through the datasets that map to the axis and get the union</comment>
        <comment type="line">// of the ranges.</comment>
        <decl_stmt><decl><type><name>Iterator</name></type> <name>iterator</name> =<init> <expr><call><name><name>mappedDatasets</name>.<name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>iterator</name>.<name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>d</name> =<init> <expr>(<name>XYDataset</name>) <call><name><name>iterator</name>.<name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>d</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>r</name> =<init> <expr><call><name>getRendererForDataset</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>isDomainAxis</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>r</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                                <argument><expr><call><name><name>DatasetUtilities</name>.<name>findDomainBounds</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block>{
                    <if>if <condition>(<expr><name>r</name> != <name>null</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name><name>r</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><name>result</name> = <call><name><name>Range</name>.<name>combine</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, 
                                <argument><expr><call><name><name>DatasetUtilities</name>.<name>findRangeBounds</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>result</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of a change to the plot's dataset.
     * &lt;P&gt;
     * The axis ranges are updated if necessary.
     *
     * @param event  information about the event (not used here).
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>datasetChanged</name><parameter_list>(<param><decl><type><name>DatasetChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>configureDomainAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>configureRangeAxes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>getParent</name><argument_list>()</argument_list></call> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getParent</name><argument_list>()</argument_list></call>.<call><name>datasetChanged</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>PlotChangeEvent</name></type> <name>e</name> =<init> <expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>e</name>.<name>setType</name></name><argument_list>(<argument><expr><name><name>ChartChangeEventType</name>.<name>DATASET_UPDATED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Receives notification of a renderer change event.
     *
     * @param event  the event.
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>rendererChanged</name><parameter_list>(<param><decl><type><name>RendererChangeEvent</name></type> <name>event</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the domain crosshair is visible.
     *
     * @return The flag.
     * 
     * @see #setDomainCrosshairVisible(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainCrosshairVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainCrosshairVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the domain crosshair is visible 
     * and, if the flag changes, sends a {@link PlotChangeEvent} to all 
     * registered listeners.
     *
     * @param flag  the new value of the flag.
     * 
     * @see #isDomainCrosshairVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>domainCrosshairVisible</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the crosshair should "lock-on"
     * to actual data values.
     *
     * @return The flag.
     * 
     * @see #setDomainCrosshairLockedOnData(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainCrosshairLockedOnData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainCrosshairLockedOnData</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the domain crosshair should
     * "lock-on" to actual data values.  If the flag value changes, this
     * method sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #isDomainCrosshairLockedOnData()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairLockedOnData</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>domainCrosshairLockedOnData</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairLockedOnData</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain crosshair value.
     *
     * @return The value.
     * 
     * @see #setDomainCrosshairValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getDomainCrosshairValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainCrosshairValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain crosshair value and sends a {@link PlotChangeEvent} to
     * all registered listeners (provided that the domain crosshair is visible).
     *
     * @param value  the value.
     * 
     * @see #getDomainCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setDomainCrosshairValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the domain crosshair value and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners (provided that the
     * domain crosshair is visible).
     *
     * @param value  the new value.
     * @param notify  notify listeners?
     * 
     * @see #getDomainCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isDomainCrosshairVisible</name><argument_list>()</argument_list></call> &amp;&amp; <name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the {@link Stroke} used to draw the crosshair (if visible).
     *
     * @return The crosshair stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainCrosshairStroke(Stroke)
     * @see #isDomainCrosshairVisible()
     * @see #getDomainCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getDomainCrosshairStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainCrosshairStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the Stroke used to draw the crosshairs (if visible) and notifies
     * registered listeners that the axis has been modified.
     *
     * @param stroke  the new crosshair stroke (&lt;code&gt;null&lt;/code&gt; not 
     *     permitted).
     *     
     * @see #getDomainCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{ 
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the domain crosshair paint.
     *
     * @return The crosshair paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setDomainCrosshairPaint(Paint)
     * @see #isDomainCrosshairVisible()
     * @see #getDomainCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getDomainCrosshairPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>domainCrosshairPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to draw the crosshairs (if visible) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint the new crosshair paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getDomainCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setDomainCrosshairPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the range crosshair is visible.
     *
     * @return The flag.
     * 
     * @see #setRangeCrosshairVisible(boolean)
     * @see #isDomainCrosshairVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeCrosshairVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the range crosshair is visible.
     * If the flag value changes, this method sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param flag  the new value of the flag.
     * 
     * @see #isRangeCrosshairVisible()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairVisible</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a flag indicating whether or not the crosshair should "lock-on"
     * to actual data values.
     *
     * @return The flag.
     * 
     * @see #setRangeCrosshairLockedOnData(boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeCrosshairLockedOnData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the flag indicating whether or not the range crosshair should
     * "lock-on" to actual data values.  If the flag value changes, this method
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     * 
     * @see #isRangeCrosshairLockedOnData()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairLockedOnData</name><parameter_list>(<param><decl><type><name>boolean</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> != <name>flag</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name> = <name>flag</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range crosshair value.
     *
     * @return The value.
     * 
     * @see #setRangeCrosshairValue(double)
     */</comment>
    <function><type><specifier>public</specifier> <name>double</name></type> <name>getRangeCrosshairValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairValue</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range crosshair value.
     * &lt;P&gt;
     * Registered listeners are notified that the plot has been modified, but
     * only if the crosshair is visible.
     *
     * @param value  the new value.
     * 
     * @see #getRangeCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setRangeCrosshairValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the range crosshair value and sends a {@link PlotChangeEvent} to
     * all registered listeners, but only if the crosshair is visible.
     *
     * @param value  the new value.
     * @param notify  a flag that controls whether or not listeners are
     *                notified.
     *                
     * @see #getRangeCrosshairValue()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairValue</name><parameter_list>(<param><decl><type><name>double</name></type> <name>value</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> = <name>value</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isRangeCrosshairVisible</name><argument_list>()</argument_list></call> &amp;&amp; <name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the stroke used to draw the crosshair (if visible).
     *
     * @return The crosshair stroke (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeCrosshairStroke(Stroke)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>Stroke</name></type> <name>getRangeCrosshairStroke</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the stroke used to draw the crosshairs (if visible) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the new crosshair stroke (&lt;code&gt;null&lt;/code&gt; not 
     *         permitted).
     * 
     * @see #getRangeCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairStroke</name><parameter_list>(<param><decl><type><name>Stroke</name></type> <name>stroke</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>stroke</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'stroke' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <name>stroke</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the range crosshair paint.
     *
     * @return The crosshair paint (never &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setRangeCrosshairPaint(Paint)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairStroke()
     */</comment>
    <function><type><specifier>public</specifier> <name>Paint</name></type> <name>getRangeCrosshairPaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the paint used to color the crosshairs (if visible) and sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint the new crosshair paint (&lt;code&gt;null&lt;/code&gt; not permitted).
     * 
     * @see #getRangeCrosshairPaint()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRangeCrosshairPaint</name><parameter_list>(<param><decl><type><name>Paint</name></type> <name>paint</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>paint</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Null 'paint' argument."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <name>paint</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed domain axis space.
     *
     * @return The fixed domain axis space (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedDomainAxisSpace(AxisSpace)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>getFixedDomainAxisSpace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedDomainAxisSpace()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedDomainAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFixedDomainAxisSpace</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed domain axis space and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getFixedDomainAxisSpace()
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedDomainAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> = <name>space</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed range axis space.
     *
     * @return The fixed range axis space (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedRangeAxisSpace(AxisSpace)
     */</comment>
    <function><type><specifier>public</specifier> <name>AxisSpace</name></type> <name>getFixedRangeAxisSpace</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedRangeAxisSpace()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedRangeAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setFixedRangeAxisSpace</name><argument_list>(<argument><expr><name>space</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed range axis space and, if requested, sends a 
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param space  the space (&lt;code&gt;null&lt;/code&gt; permitted).
     * @param notify  notify listeners?
     * 
     * @see #getFixedRangeAxisSpace()
     * 
     * @since 1.0.9
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedRangeAxisSpace</name><parameter_list>(<param><decl><type><name>AxisSpace</name></type> <name>space</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>notify</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> = <name>space</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>notify</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * 
     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate to other method</comment>
        <expr_stmt><expr><call><name>zoomDomainAxes</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the domain axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point (in Java2D space).
     * @param useAnchor  use source point as zoom anchor?
     * 
     * @see #zoomRangeAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                               <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <comment type="line">// perform the zoom on each domain axis</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>domainAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
                    <comment type="line">// get the relevant source coordinate given the plot </comment>
                    <comment type="line">// orientation</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>sourceX</name> =<init> <expr><call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>sourceX</name> = <call><name><name>source</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>double</name></type> <name>anchorX</name> =<init> <expr><call><name><name>domainAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceX</name></expr></argument>, 
                            <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDomainAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>domainAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>domainAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the domain axis/axes.  The new lower and upper bounds are
     * specified as percentages of the current axis range, where 0 percent is
     * the current lower bound and 100 percent is the current upper bound.
     *
     * @param lowerPercent  a percentage that determines the new lower bound
     *                      for the axis (e.g. 0.20 is twenty percent).
     * @param upperPercent  a percentage that determines the new upper bound
     *                      for the axis (e.g. 0.80 is eighty percent).
     * @param info  the plot rendering info.
     * @param source  the source point (ignored).
     * 
     * @see #zoomRangeAxes(double, double, PlotRenderingInfo, Point2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomDomainAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>,
                               <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>domainAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>domainAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>domainAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point.
     * 
     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// delegate to other method</comment>
        <expr_stmt><expr><call><name>zoomRangeAxes</name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    }</block></function>
    
    <comment type="javadoc">/**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info.
     * @param source  the source point.
     * @param useAnchor  a flag that controls whether or not the source point
     *         is used for the zoom anchor.
     * 
     * @see #zoomDomainAxes(double, PlotRenderingInfo, Point2D, boolean)
     * 
     * @since 1.0.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>factor</name></decl></param>, <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>,
                              <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>useAnchor</name></decl></param>)</parameter_list> <block>{
                
        <comment type="line">// perform the zoom on each range axis</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>useAnchor</name></expr>)</condition><then> <block>{
                    <comment type="line">// get the relevant source coordinate given the plot </comment>
                    <comment type="line">// orientation</comment>
                    <decl_stmt><decl><type><name>double</name></type> <name>sourceY</name> =<init> <expr><call><name><name>source</name>.<name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> == <name><name>PlotOrientation</name>.<name>HORIZONTAL</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>sourceY</name> = <call><name><name>source</name>.<name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name>double</name></type> <name>anchorY</name> =<init> <expr><call><name><name>rangeAxis</name>.<name>java2DToValue</name></name><argument_list>(<argument><expr><name>sourceY</name></expr></argument>, 
                            <argument><expr><call><name><name>info</name>.<name>getDataArea</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getRangeAxisEdge</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>, <argument><expr><name>anchorY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>resizeRange</name></name><argument_list>(<argument><expr><name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Zooms in on the range axes.
     *
     * @param lowerPercent  the lower bound.
     * @param upperPercent  the upper bound.
     * @param info  the plot rendering info.
     * @param source  the source point.
     * 
     * @see #zoomDomainAxes(double, double, PlotRenderingInfo, Point2D)
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>zoomRangeAxes</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lowerPercent</name></decl></param>, <param><decl><type><name>double</name></type> <name>upperPercent</name></decl></param>,
                              <param><decl><type><name>PlotRenderingInfo</name></type> <name>info</name></decl></param>, <param><decl><type><name>Point2D</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>rangeAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>rangeAxis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>rangeAxis</name>.<name>zoomRange</name></name><argument_list>(<argument><expr><name>lowerPercent</name></expr></argument>, <argument><expr><name>upperPercent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt;, indicating that the domain axis/axes for this
     * plot are zoomable.
     *
     * @return A boolean.
     * 
     * @see #isRangeZoomable()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDomainZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns &lt;code&gt;true&lt;/code&gt;, indicating that the range axis/axes for this
     * plot are zoomable.
     *
     * @return A boolean.
     * 
     * @see #isDomainZoomable()
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isRangeZoomable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>true</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the number of series in the primary dataset for this plot.  If
     * the dataset is &lt;code&gt;null&lt;/code&gt;, the method returns 0.
     *
     * @return The series count.
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getSeriesCount</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name>getDataset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the fixed legend items, if any.
     *
     * @return The legend items (possibly &lt;code&gt;null&lt;/code&gt;).
     * 
     * @see #setFixedLegendItems(LegendItemCollection)
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getFixedLegendItems</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>fixedLegendItems</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the fixed legend items for the plot.  Leave this set to
     * &lt;code&gt;null&lt;/code&gt; if you prefer the legend items to be created
     * automatically.
     *
     * @param items  the legend items (&lt;code&gt;null&lt;/code&gt; permitted).
     * 
     * @see #getFixedLegendItems()
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setFixedLegendItems</name><parameter_list>(<param><decl><type><name>LegendItemCollection</name></type> <name>items</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>fixedLegendItems</name></name> = <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyListeners</name><argument_list>(<argument><expr>new <call><name>PlotChangeEvent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the legend items for the plot.  Each legend item is generated by
     * the plot's renderer, since the renderer is responsible for the visual
     * representation of the data.
     *
     * @return The legend items.
     */</comment>
    <function><type><specifier>public</specifier> <name>LegendItemCollection</name></type> <name>getLegendItems</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedLegendItems</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name><name>this</name>.<name>fixedLegendItems</name></name></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>LegendItemCollection</name></type> <name>result</name> =<init> <expr>new <call><name>LegendItemCollection</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>datasetIndex</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>datasetIndex</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>datasetIndex</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>dataset</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>renderer</name> =<init> <expr><call><name>getRenderer</name><argument_list>(<argument><expr><name>datasetIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>renderer</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>renderer</name> = <call><name>getRenderer</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>seriesCount</name> =<init> <expr><call><name><name>dataset</name>.<name>getSeriesCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>seriesCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                        <if>if <condition>(<expr><call><name><name>renderer</name>.<name>isSeriesVisible</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
                                &amp;&amp; <call><name><name>renderer</name>.<name>isSeriesVisibleInLegend</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>LegendItem</name></type> <name>item</name> =<init> <expr><call><name><name>renderer</name>.<name>getLegendItem</name></name><argument_list>(
                                    <argument><expr><name>datasetIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name>item</name> != <name>null</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name><name>result</name>.<name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></for>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests this plot for equality with another object.
     *
     * @param obj  the object (&lt;code&gt;null&lt;/code&gt; permitted).
     *
     * @return &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>equals</name><parameter_list>(<param><decl><type><name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>obj</name> == <name>this</name></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>XYPlot</name>)</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>XYPlot</name></type> <name>that</name> =<init> <expr>(<name>XYPlot</name>) <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>weight</name></name> != <name><name>that</name>.<name>weight</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>orientation</name></name> != <name><name>that</name>.<name>orientation</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>domainAxes</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>domainAxes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>domainAxisLocations</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>domainAxisLocations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairLockedOnData</name></name>
                != <name><name>that</name>.<name>rangeCrosshairLockedOnData</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainGridlinesVisible</name></name> != <name><name>that</name>.<name>domainGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeGridlinesVisible</name></name> != <name><name>that</name>.<name>rangeGridlinesVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainZeroBaselineVisible</name></name> != <name><name>that</name>.<name>domainZeroBaselineVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeZeroBaselineVisible</name></name> != <name><name>that</name>.<name>rangeZeroBaselineVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainCrosshairVisible</name></name> != <name><name>that</name>.<name>domainCrosshairVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainCrosshairValue</name></name> != <name><name>that</name>.<name>domainCrosshairValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>domainCrosshairLockedOnData</name></name>
                != <name><name>that</name>.<name>domainCrosshairLockedOnData</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairVisible</name></name> != <name><name>that</name>.<name>rangeCrosshairVisible</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>rangeCrosshairValue</name></name> != <name><name>that</name>.<name>rangeCrosshairValue</name></name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>axisOffset</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>axisOffset</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderers</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>renderers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeAxes</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>rangeAxes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>rangeAxisLocations</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>rangeAxisLocations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToDomainAxisMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>datasetToDomainAxisMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToRangeAxisMap</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>datasetToRangeAxisMap</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeGridlinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainZeroBaselinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainZeroBaselineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeZeroBaselinePaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeZeroBaselineStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainCrosshairStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainCrosshairStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainCrosshairPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainCrosshairPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeCrosshairStroke</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeCrosshairPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>foregroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>foregroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>foregroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>foregroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>backgroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>ObjectUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>annotations</name></name></expr></argument>, <argument><expr><name><name>that</name>.<name>annotations</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainTickBandPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>domainTickBandPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeTickBandPaint</name></name></expr></argument>, 
                <argument><expr><name><name>that</name>.<name>rangeTickBandPaint</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>!<call><name><name>this</name>.<name>quadrantOrigin</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>that</name>.<name>quadrantOrigin</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name><name>PaintUtilities</name>.<name>equal</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, 
                    <argument><expr><name><name>that</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr>false</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>super</name>.<name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a clone of the plot.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  this can occur if some component of
     *         the plot cannot be cloned.
     */</comment>
    <function><type><specifier>public</specifier> <name>Object</name></type> <name>clone</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>CloneNotSupportedException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><name>XYPlot</name></type> <name>clone</name> =<init> <expr>(<name>XYPlot</name>) <call><name><name>super</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>domainAxes</name></name> = (<name>ObjectList</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainAxes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ValueAxis</name></type> <name>clonedAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>axis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clone</name>.<name>domainAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>clonedAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>clonedAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>clonedAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>domainAxisLocations</name></name> = (<name>ObjectList</name>) 
                <call><name><name>this</name>.<name>domainAxisLocations</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>clone</name>.<name>rangeAxes</name></name> = (<name>ObjectList</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeAxes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>ValueAxis</name></type> <name>axis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ValueAxis</name></type> <name>clonedAxis</name> =<init> <expr>(<name>ValueAxis</name>) <call><name><name>axis</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clone</name>.<name>rangeAxes</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>clonedAxis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>clonedAxis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>clonedAxis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>rangeAxisLocations</name></name> = (<name>ObjectList</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>rangeAxisLocations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// the datasets are not cloned, but listeners need to be added...</comment>
        <expr_stmt><expr><name><name>clone</name>.<name>datasets</name></name> = (<name>ObjectList</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>clone</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYDataset</name></type> <name>d</name> =<init> <expr><call><name>getDataset</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>d</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>d</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>clone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><name><name>clone</name>.<name>datasetToDomainAxisMap</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clone</name>.<name>datasetToDomainAxisMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToDomainAxisMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>datasetToRangeAxisMap</name></name> = new <call><name>TreeMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>clone</name>.<name>datasetToRangeAxisMap</name>.<name>putAll</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>datasetToRangeAxisMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>clone</name>.<name>renderers</name></name> = (<name>ObjectList</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>renderers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>renderer2</name> =<init> <expr>(<name>XYItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>renderer2</name> <name>instanceof</name> <name>PublicCloneable</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>PublicCloneable</name></type> <name>pc</name> =<init> <expr>(<name>PublicCloneable</name>) <name>renderer2</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clone</name>.<name>renderers</name>.<name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>pc</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>clone</name>.<name>foregroundDomainMarkers</name></name> = (<name>Map</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>foregroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>backgroundDomainMarkers</name></name> = (<name>Map</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>backgroundDomainMarkers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>foregroundRangeMarkers</name></name> = (<name>Map</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>foregroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>backgroundRangeMarkers</name></name> = (<name>Map</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>backgroundRangeMarkers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>annotations</name></name> = (<name>List</name>) <call><name><name>ObjectUtilities</name>.<name>deepClone</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>annotations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>fixedDomainAxisSpace</name></name> = (<name>AxisSpace</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>fixedDomainAxisSpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name> != <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>clone</name>.<name>fixedRangeAxisSpace</name></name> = (<name>AxisSpace</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                    <argument><expr><name><name>this</name>.<name>fixedRangeAxisSpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name><name>clone</name>.<name>quadrantOrigin</name></name> = (<name>Point2D</name>) <call><name><name>ObjectUtilities</name>.<name>clone</name></name><argument_list>(
                <argument><expr><name><name>this</name>.<name>quadrantOrigin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>clone</name>.<name>quadrantPaint</name></name> = (<name><name>Paint</name><index>[]</index></name>) <call><name><name>this</name>.<name>quadrantPaint</name>.<name>clone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>clone</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>writeObject</name><parameter_list>(<param><decl><type><name>ObjectOutputStream</name></type> <name>stream</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultWriteObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainCrosshairStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainCrosshairPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainTickBandPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>rangeTickBandPaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePoint2D</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quadrantOrigin</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writeStroke</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>SerialUtilities</name>.<name>writePaint</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>readObject</name><parameter_list>(<param><decl><type><name>ObjectInputStream</name></type> <name>stream</name></decl></param>)</parameter_list>
        <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{

        <expr_stmt><expr><call><name><name>stream</name>.<name>defaultReadObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeGridlinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeZeroBaselinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainCrosshairPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeCrosshairPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainTickBandPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>rangeTickBandPaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>quadrantOrigin</name></name> = <call><name><name>SerialUtilities</name>.<name>readPoint2D</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>quadrantPaint</name></name> = new <name><name>Paint</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>this</name>.<name>quadrantPaint</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselineStroke</name></name> = <call><name><name>SerialUtilities</name>.<name>readStroke</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>domainZeroBaselinePaint</name></name> = <call><name><name>SerialUtilities</name>.<name>readPaint</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// register the plot as a listener with its axes, datasets, and </comment>
        <comment type="line">// renderers...</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>domainAxisCount</name> =<init> <expr><call><name><name>this</name>.<name>domainAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>domainAxisCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>domainAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>rangeAxisCount</name> =<init> <expr><call><name><name>this</name>.<name>rangeAxes</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>rangeAxisCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Axis</name></type> <name>axis</name> =<init> <expr>(<name>Axis</name>) <call><name><name>this</name>.<name>rangeAxes</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>axis</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>axis</name>.<name>setPlot</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>axis</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>datasetCount</name> =<init> <expr><call><name><name>this</name>.<name>datasets</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>datasetCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Dataset</name></type> <name>dataset</name> =<init> <expr>(<name>Dataset</name>) <call><name><name>this</name>.<name>datasets</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>dataset</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>dataset</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>rendererCount</name> =<init> <expr><call><name><name>this</name>.<name>renderers</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>rendererCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>XYItemRenderer</name></type> <name>renderer</name> =<init> <expr>(<name>XYItemRenderer</name>) <call><name><name>this</name>.<name>renderers</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>renderer</name> != <name>null</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>renderer</name>.<name>addChangeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    
    }</block></function>

}</block></class>
</unit>
