<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\test\java\org\apache\abdera\util\filter\AbstractListParseFilterTest.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>util</name>.
            <name>filter</name>
        </name>
        ;
    </package>

    <import>import static
        <name><name>org</name>.<name>junit</name>.<name>Assert</name>.
            <name>assertTrue</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ByteArrayInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ByteArrayOutputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>ObjectOutputStream</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.
            <name>QName</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>junit</name>.
            <name>Test</name>
        </name>
        ;
    </import>

    <class>
        <specifier>public</specifier>
        class <name>AbstractListParseFilterTest</name>
        <block>{

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>SerializedImpl</name>
                <super>
                    <extends>extends
                        <name>AbstractListParseFilter</name>
                    </extends>
                </super>
                <block>{

                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>static</specifier>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>serialVersionUID</name> =
                            <init>
                                <expr>-1695184231548373283L</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>acceptable</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>QName</name>
                                    </type>
                                    <name>qname</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>QName</name>
                                    </type>
                                    <name>attribute</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <annotation>@
                                <name>Override</name>
                            </annotation>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>acceptable</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>QName</name>
                                    </type>
                                    <name>qname</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return <expr>true</expr>;
                            </return>
                            }
                        </block>
                    </function>

                    }
                </block>
            </class>

            <function>
                <type>
                    <annotation>@
                        <name>Test</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>testSerialization</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>Exception</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>SerializedImpl</name>
                            </type>
                            <name>si</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>SerializedImpl</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>si</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>QName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"lp0"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>si</name>.
                                    <name>add</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>QName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"parentLp0"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>QName</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>"lp1"</expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ByteArrayOutputStream</name>
                            </type>
                            <name>baos</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ByteArrayOutputStream</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ObjectOutputStream</name>
                            </type>
                            <name>oos</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ObjectOutputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>baos</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>oos</name>.
                                    <name>writeObject</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>si</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>oos</name>.
                                    <name>flush</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>ObjectInputStream</name>
                            </type>
                            <name>ois</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>ObjectInputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>new
                                                    <call>
                                                        <name>ByteArrayInputStream</name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <call>
                                                                        <name><name>baos</name>.
                                                                            <name>toByteArray</name>
                                                                        </name>
                                                                        <argument_list>()</argument_list>
                                                                    </call>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>si</name>
                            = (<name>SerializedImpl</name>)
                            <call>
                                <name><name>ois</name>.
                                    <name>readObject</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>si</name>.
                                                    <name>contains</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>new
                                                            <call>
                                                                <name>QName</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"lp0"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>assertTrue</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>si</name>.
                                                    <name>contains</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>new
                                                            <call>
                                                                <name>QName</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"parentLp0"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>new
                                                            <call>
                                                                <name>QName</name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"lp1"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
