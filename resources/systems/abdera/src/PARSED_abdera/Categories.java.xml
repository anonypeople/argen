<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\model\Categories.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>model</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>List</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>iri</name>.
            <name>IRI</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * The Atom Publishing Protocol introduces the notion of a "Category Document" and the app:categories element.
        These are
        * used to provide a listing of atom:category elements that may be used with the members of an Atom Publishing
        Protocol
        * collection.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Categories</name>
        <super>
            <extends>extends
                <name>ExtensibleElement</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * When contained within an app:collection element, the app:categories element can have an href attribute
                whose
                * value MUST point to an Atompub Categories Document.
                *
                * @return The href attribute value
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getHref</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the value of the href attribute resolved against the in-scope Base URI
                *
                * @return The fully resolved href attribute value
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getResolvedHref</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the value of the href attribute.
                *
                * @param href The location of an Atompub Categories Document
                */
            </comment>
            <function_decl>
                <type>
                    <name>Categories</name>
                </type>
                <name>setHref</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>href</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If an app:categories element is marked as fixed, then the set of atom:category elements is considered
                to be a
                * closed set. That is, Atom Publishing Protocol clients SHOULD only use the atom:category elements
                listed. The
                * default is false (fixed="no")
                *
                * @return True if the categories listing is fixed
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isFixed</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets whether or not this is a fixed listing of categories. If set to false, the fixed attribute will
                be removed
                * from the app:categories element.
                *
                * @param fixed True if the app:categories listing is fixed
                */
            </comment>
            <function_decl>
                <type>
                    <name>Categories</name>
                </type>
                <name>setFixed</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>fixed</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The app:categories element may specify a default scheme attribute for listed atom:category elements
                that do not
                * have their own scheme attribute.
                *
                * @return The scheme IRI
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getScheme</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the default scheme for this listing of categories
                *
                * @param scheme The default scheme used for this listing of categories
                */
            </comment>
            <function_decl>
                <type>
                    <name>Categories</name>
                </type>
                <name>setScheme</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Lists the complete set of categories
                *
                * @return This app:categories listing of atom:category elements
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Category</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCategories</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Lists the complete set of categories that use the specified scheme
                *
                * @param scheme The IRI of an atom:category scheme
                * @return A listing of atom:category elements that use the specified scheme
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Category</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCategories</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a copy of the complete set of categories with the scheme attribute set
                *
                * @return A listing of atom:category elements using the default scheme specified by the app:categories
                scheme
                * attribute
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Category</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCategoriesWithScheme</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns a copy of the complete set of categories with the scheme attribute set as specified in 7.2.1.
                (child
                * categories that do not have a scheme attribute inherit the scheme attribute of the parent)
                *
                * @param scheme A scheme IRI
                * @return A listing of atom:category elements
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>List</name>
                        <argument_list>&lt;
                            <argument>
                                <name>Category</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getCategoriesWithScheme</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Add an atom:category to the listing
                *
                * @param category The atom:category to add to the listing
                */
            </comment>
            <function_decl>
                <type>
                    <name>Categories</name>
                </type>
                <name>addCategory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Category</name>
                            </type>
                            <name>category</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Create and add an atom:category to the listing
                *
                * @param term The string term
                * @return The newly created atom:category
                */
            </comment>
            <function_decl>
                <type>
                    <name>Category</name>
                </type>
                <name>addCategory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>term</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Create an add an atom:category to the listing
                *
                * @param scheme The scheme IRI for the newly created category
                * @param term The string term
                * @param label The human readable label for the category
                * @return The newly created atom:category
                */
            </comment>
            <function_decl>
                <type>
                    <name>Category</name>
                </type>
                <name>addCategory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>term</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>label</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true if this app:categories listing contains a category with the specified term
                *
                * @param term The term to look for
                * @return True if the term is found
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>term</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true if this app:categories listing contains a category with the specified term and scheme
                *
                * @param term The term to look for
                * @param scheme The IRI scheme
                * @return True if the term and scheme are found
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>contains</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>term</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>scheme</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true if the href attribute is set
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isOutOfLine</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            }
        </block>
    </class>
</unit>
