<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\util\filter\CompoundParseFilter.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>util</name>.
            <name>filter</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.
            <name>QName</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>filter</name>.
            <name>ParseFilter</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * A simple compound parse filter that allows us to apply multiple parse filters to a single parse operation.
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * CompoundParseFilter filter =
        * new CompoundParseFilter(CompoundParseFilter.Condition.ACCEPTABLE_TO_ALL, new
        SafeContentWhiteListParseFilter(),
        * new MyWhiteListParseFilter(), new MySomeOtherKindOfParseFilter());
        * options.setParseFilter(filter);
        * &lt;/pre&gt;
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>CompoundParseFilter</name>
        <super>
            <extends>extends
                <name>AbstractParseFilter</name>
            </extends>
            <implements>implements
                <name>ParseFilter</name>
            </implements>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>-7871289035422204698L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <enum>
                <specifier>public</specifier>
                enum <name>Condition</name>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>ACCEPTABLE_TO_ALL</name>
                        </expr>
                        ,
                        <expr>
                            <name>ACCEPTABLE_TO_ANY</name>
                        </expr>
                        ,
                        <expr>
                            <name>UNACCEPTABLE_TO_ALL</name>
                        </expr>
                        ,
                        <expr>
                            <name>UNACCEPTABLE_TO_ANY</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <function>
                        <type>
                            <name>byte</name>
                        </type>
                        <name>evaluate</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>boolean</name>
                                    </type>
                                    <name>b</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>b</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case
                                                    <expr>
                                                        <name>ACCEPTABLE_TO_ANY</name>
                                                    </expr>
                                                    :
                                                    <return>return <expr>1</expr>;
                                                    </return>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>UNACCEPTABLE_TO_ALL</name>
                                                    </expr>
                                                    :
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                </case>
                                                }
                                            </block>
                                        </switch>
                                        }
                                    </block>
                                </then>
                                <else>else
                                    <block>{
                                        <switch>switch
                                            <condition>(
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                                )
                                            </condition>
                                            <block>{
                                                <case>case
                                                    <expr>
                                                        <name>ACCEPTABLE_TO_ALL</name>
                                                    </expr>
                                                    :
                                                    <return>return <expr>-1</expr>;
                                                    </return>
                                                </case>
                                                <case>case
                                                    <expr>
                                                        <name>UNACCEPTABLE_TO_ANY</name>
                                                    </expr>
                                                    :
                                                    <return>return <expr>1</expr>;
                                                    </return>
                                                </case>
                                                }
                                            </block>
                                        </switch>
                                        }
                                    </block>
                                </else>
                            </if>
                            <return>return <expr>0</expr>;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </enum>
            <empty_stmt>;</empty_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>Condition</name>
                    </type>
                    <name>condition</name>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>protected</specifier>
                        <specifier>final</specifier>
                        <name>ParseFilter</name>
                        <index>[]</index>
                    </type>
                    <name>filters</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>CompoundParseFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Condition</name>
                            </type>
                            <name>condition</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type><name>ParseFilter</name>...
                            </type>
                            <name>filters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>filters</name>
                            </name>
                            =
                            <name>filters</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>condition</name>
                            </name>
                            =
                            <name>condition</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>public</specifier>
                <name>CompoundParseFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>ParseFilter</name>...
                            </type>
                            <name>filters</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Condition</name>.
                                                <name>ACCEPTABLE_TO_ANY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>filters</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>private</specifier>
                    <name>ParseFilter</name>
                    <index>[]</index>
                </type>
                <name>getFilters</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>filters</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>acceptable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>qname</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>ParseFilter</name>
                                </type>
                                <name>filter</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>getFilters</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>condition</name>.
                                                <name>evaluate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>filter</name>.
                                                                <name>acceptable</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>qname</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>1</expr>:
                                        <return>return <expr>true</expr>;
                                        </return>
                                    </case>
                                    <case>case <expr>-1</expr>:
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </case>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>acceptable</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>qname</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>QName</name>
                            </type>
                            <name>attribute</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>ParseFilter</name>
                                </type>
                                <name>filter</name> :
                                <range>
                                    <expr>
                                        <call>
                                            <name>getFilters</name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                        <block>{
                            <switch>switch
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>condition</name>.
                                                <name>evaluate</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <call>
                                                            <name><name>filter</name>.
                                                                <name>acceptable</name>
                                                            </name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>
                                                                        <name>qname</name>
                                                                    </expr>
                                                                </argument>
                                                                ,
                                                                <argument>
                                                                    <expr>
                                                                        <name>attribute</name>
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <case>case <expr>1</expr>:
                                        <return>return <expr>true</expr>;
                                        </return>
                                    </case>
                                    <case>case <expr>-1</expr>:
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </case>
                                    }
                                </block>
                            </switch>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CloneNotSupportedException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>super</name>.
                                    <name>clone</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
