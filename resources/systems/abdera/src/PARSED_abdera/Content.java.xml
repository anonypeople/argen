<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\model\Content.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>model</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>javax</name>.<name>activation</name>.
            <name>DataHandler</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>javax</name>.<name>activation</name>.
            <name>MimeType</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>util</name>.
            <name>MimeTypeHelper</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>iri</name>.
            <name>IRI</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Represents an atom:content element.
        * &lt;/p&gt;
        * &lt;p&gt;
        * Atom has a very clearly defined and extremely flexible content model. The model allows for five basic types of
        * content:
        * &lt;/p&gt;
        * &lt;ul&gt;
        * &lt;li&gt;Text, consisting of content that is to be interpreted as plain text with no markup. For instance,
        * &lt;code&gt;&amp;lt;content type="text"&gt;&amp;amp;lt;content&amp;amp;gt;&amp;lt;/content&gt;&lt;/code&gt; is
        interpreted as literal characer "&amp;lt;"
        * followed by the word "content", followed by the literal character "&amp;gt;".&lt;/li&gt;
        * &lt;li&gt;HTML, consisting of content that is to be interpreted as escaped HTML markup. For instance,
        * &lt;code&gt;&amp;lt;content type="html"&gt;&amp;amp;lt;b&amp;amp;gt;content&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/content&gt;&lt;/code&gt;
        is interpreted as the
        * word "content" surrounded by the HTML &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;
        tags.&lt;/li&gt;
        * &lt;li&gt;XHTML, consisting of well-formed XHTML content wrapped in an XHTML div element. For instance,
        * &lt;code&gt;&amp;lt;content type="xhtml"&gt;&amp;lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;&amp;lt;b&gt;Content&amp;lt;/b&gt;&amp;lt;/div&gt;&amp;lt;/content&gt;&lt;/code&gt;
        * .&lt;/li&gt;
        * &lt;li&gt;XML, consisting of well-formed XML content. For instance,
        * &lt;code&gt;&amp;lt;content type="application/xml"&gt;&amp;lt;a xmlns="..."&gt;&amp;lt;b&gt;&amp;lt;c/&gt;&amp;lt;/b&gt;&amp;lt;/a&gt;&amp;lt;/content&gt;&lt;/code&gt;.
        The
        * content could, alternatively, be linked to via the src attribute,
        * &lt;code&gt;&amp;lt;content type="application/xml" src="http://example.org/foo.xml"/&gt;&lt;/code&gt;.&lt;/li&gt;
        * &lt;li&gt;Media, consisting of content conforming to any MIME media type.
        * &lt;ul&gt;
        * &lt;li&gt;Text media types are encoded literally, e.g.
        * &lt;code&gt;&amp;lt;content type="text/calendar"&gt;BEGIN:VCALENDAR...&amp;lt;/content&gt;&lt;/code&gt;.&lt;/li&gt;
        * &lt;li&gt;Other media types are encoded as Base64 strings, e.g.
        * &lt;code&gt;&amp;lt;content type="image/jpeg"&gt;{Base64}&amp;lt;/content&gt;&lt;/code&gt;.&lt;/li&gt;
        * &lt;li&gt;Alternatively, media content may use the src attribute,
        * &lt;code&gt;&amp;lt;content type="text/calendar" src="http://example.org/foo.cal"/&gt;&lt;/code&gt;,
        * &lt;code&gt;&amp;lt;content type="image/jpeg" src="http://example.org/foo.jpg" /&gt;&lt;/code&gt;&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;p&gt;
        * Per RFC4287:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * The "atom:content" element either contains or links to the content of
        * the entry. The content of atom:content is Language-Sensitive.
        *
        * atomInlineTextContent =
        * element atom:content {
        * atomCommonAttributes,
        * attribute type { "text" | "html" }?,
        * (text)*
        * }
        *
        * atomInlineXHTMLContent =
        * element atom:content {
        * atomCommonAttributes,
        * attribute type { "xhtml" },
        * xhtmlDiv
        * }
        * atomInlineOtherContent =
        * element atom:content {
        * atomCommonAttributes,
        * attribute type { atomMediaType }?,
        * (text|anyElement)*
        * }
        *
        * atomOutOfLineContent =
        * element atom:content {
        * atomCommonAttributes,
        * attribute type { atomMediaType }?,
        * attribute src { atomUri },
        * empty
        * }
        *
        * atomContent = atomInlineTextContent
        * | atomInlineXHTMLContent
        * | atomInlineOtherContent
        * | atomOutOfLineContent
        *
        * &lt;/pre&gt;
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Content</name>
        <super>
            <extends>extends
                <name>Element</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Used to identify the type of content
                */
            </comment>
            <enum>
                <specifier>public</specifier>
                enum <name>Type</name>
                <block>{
                    <comment type="javadoc">/** Plain text **/</comment>
                    <expr_stmt>
                        <expr>
                            <name>TEXT</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Escaped HTML **/</comment>
                        <expr>
                            <name>HTML</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Welformed XHTML **/</comment>
                        <expr>
                            <name>XHTML</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Welformed XML **/</comment>
                        <expr>
                            <name>XML</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Base64-encoded Binary **/</comment>
                        <expr>
                            <name>MEDIA</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="javadoc">/**
                        * Return an appropriate Type given the specified @type attribute value
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <specifier>static</specifier>
                            <name>Type</name>
                        </type>
                        <name>typeFromString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>val</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Type</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <name>TEXT</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>val</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>equalsIgnoreCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"text"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>type</name>
                                                        =
                                                        <name>TEXT</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>val</name>.
                                                                    <name>equalsIgnoreCase</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"html"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>type</name>
                                                                =
                                                                <name>HTML</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>val</name>.
                                                                            <name>equalsIgnoreCase</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"xhtml"</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>type</name>
                                                                        =
                                                                        <name>XHTML</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                            <else>else
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>MimeTypeHelper</name>.
                                                                                    <name>isXml</name>
                                                                                </name>
                                                                                <argument_list>(
                                                                                    <argument>
                                                                                        <expr>
                                                                                            <name>val</name>
                                                                                        </expr>
                                                                                    </argument>
                                                                                    )
                                                                                </argument_list>
                                                                            </call>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <expr_stmt>
                                                                            <expr>
                                                                                <name>type</name>
                                                                                =
                                                                                <name>XML</name>
                                                                            </expr>
                                                                            ;
                                                                        </expr_stmt>
                                                                    </then>
                                                                    <else>else
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>type</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>
                                                                                            MimeTypeHelper</name>.
                                                                                            <name>isMimeType</name>
                                                                                        </name>
                                                                                        <argument_list>(
                                                                                            <argument>
                                                                                                <expr>
                                                                                                    <name>val</name>
                                                                                                </expr>
                                                                                            </argument>
                                                                                            )
                                                                                        </argument_list>
                                                                                    </call>
                                                                                    ? <name>MEDIA</name> :
                                                                                    <name>null</name>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            }
                                                                        </block>
                                                                    </else>
                                                                </if>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>type</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </enum>

            <comment type="javadoc">/**
                * Returns the Content Type
                *
                * @return The Content Type
                */
            </comment>
            <function_decl>
                <type>
                    <name>Type</name>
                </type>
                <name>getContentType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the Content Type
                *
                * @param type The Content Type
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setContentType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return the value element or null if type="text", type="html" or type is some non-XML media type
                *
                * @return The first child element of the atom:content element or null
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>Element</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>T</name>
                </type>
                <name>getValueElement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the value element of the content. If the value is a Div, the type attribute will be set to
                type="xhtml",
                * otherwise, the attribute will be set to type="application/xml"
                *
                * @param value The element to set
                */
            </comment>
            <function_decl>
                <type>
                    <argument_list>&lt;
                        <argument>
                            <name>T</name>
                            <extends>extends
                                <name>Element</name>
                            </extends>
                        </argument>
                        &gt;
                    </argument_list>
                    <name>Content</name>
                </type>
                <name>setValueElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>T</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * RFC4287: On the atom:content element, the value of the "type" attribute MAY be one of "text", "html",
                or "xhtml".
                * Failing that, it MUST conform to the syntax of a MIME media type, but MUST NOT be a composite type. If
                neither
                * the type attribute nor the src attribute is provided, Atom Processors MUST behave as though the type
                attribute
                * were present with a value of "text".
                *
                * @return null if type = text, html or xhtml, otherwise a media type
                */
            </comment>
            <function_decl>
                <type>
                    <name>MimeType</name>
                </type>
                <name>getMimeType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * RFC4287: On the atom:content element, the value of the "type" attribute MAY be one of "text", "html",
                or "xhtml".
                * Failing that, it MUST conform to the syntax of a MIME media type, but MUST NOT be a composite type. If
                neither
                * the type attribute nor the src attribute is provided, Atom Processors MUST behave as though the type
                attribute
                * were present with a value of "text".
                *
                * @param type The media type
                * @throws MimeTypeParseException if the media type is malformed
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setMimeType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * RFC4287: atom:content MAY have a "src" attribute, whose value MUST be an IRI reference. If the "src"
                attribute is
                * present, atom:content MUST be empty. Atom Processors MAY use the IRI to retrieve the content and MAY
                choose to
                * ignore remote content or to present it in a different manner than local content.
                * &lt;/p&gt;
                * &lt;p&gt;
                * If the "src" attribute is present, the "type" attribute SHOULD be provided and MUST be a MIME media
                type, rather
                * than "text", "html", or "xhtml".
                * &lt;/p&gt;
                *
                * @return The IRI value of the src attribute or null if none
                * @throws IRISyntaxException if the src attribute value is malformed
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getSrc</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the fully qualified URI form of the content src attribute.
                *
                * @return The IRI value of the src attribute resolved against the in-scope Base URI
                * @throws IRISyntaxException if the src attribute value is malformed
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getResolvedSrc</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * &lt;p&gt;
                * RFC4287: atom:content MAY have a "src" attribute, whose value MUST be an IRI reference. If the "src"
                attribute is
                * present, atom:content MUST be empty. Atom Processors MAY use the IRI to retrieve the content and MAY
                choose to
                * ignore remote content or to present it in a different manner than local content.
                * &lt;/p&gt;
                * &lt;p&gt;
                * If the "src" attribute is present, the "type" attribute SHOULD be provided and MUST be a MIME media
                type, rather
                * than "text", "html", or "xhtml".
                * &lt;/p&gt;
                *
                * @param src The IRI to use as the src attribute value for the content
                * @throws IRISyntaxException if the src value is malformed
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setSrc</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>src</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Attempts to Base64 decode the string value of the content element.
                *
                * @return A DataHandler or null
                * @throws UnsupportedOperationException if type = text, html, xhtml, or any application/*+xml, or text/*
                type
                */
            </comment>
            <function_decl>
                <type>
                    <name>DataHandler</name>
                </type>
                <name>getDataHandler</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the string value of the content element by Base64 encoding the specifed byte array.
                *
                * @param dataHandler The DataHandler for the binary content requiring Base64 encoding
                * @throws UnsupportedOperationException if type = text, html, xhtml, or any application/*+xml, or text/*
                type
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setDataHandler</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>DataHandler</name>
                            </type>
                            <name>dataHandler</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the string value of this atom:content element
                *
                * @return The string value
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the string value of the atom:content element
                *
                * @param value The string value
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return the string value of the atom:content element with the enclosing div tag if type="xhtml"
                *
                * @return The div wrapped value
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getWrappedValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the string value of the atom:content with the enclosing div tag
                *
                * @param wrappedValue The string value with the wrapping div tag
                */
            </comment>
            <function_decl>
                <type>
                    <name>Content</name>
                </type>
                <name>setWrappedValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wrappedValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
