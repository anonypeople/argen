<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\parser\ParserOptions.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>parser</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>javax</name>.<name>xml</name>.<name>namespace</name>.
            <name>QName</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>factory</name>.
            <name>Factory</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>filter</name>.
            <name>ParseFilter</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>text</name>.<name>
            io</name>.<name>CompressionUtil</name>.
            <name>CompressionCodec</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Parser options are used to modify the behavior of the parser.
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ParserOptions</name>
        <super>
            <extends>extends
                <name>Cloneable</name>
            </extends>
        </super>
        <block>{

            <function_decl>
                <type>
                    <name>Object</name>
                </type>
                <name>clone</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>CloneNotSupportedException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the factory the parser should use
                */
            </comment>
            <function_decl>
                <type>
                    <name>Factory</name>
                </type>
                <name>getFactory</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the factory the parser should use
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setFactory</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Factory</name>
                            </type>
                            <name>factory</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the default character set to use for the parsed document
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getCharset</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the character set to use for the parsed document
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setCharset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>charset</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns the Parse Filter. The parse filter is a set of XML QNames that the parse should watch out for.
                If the
                * filter is null, the parser will parse all elements in the document. I the filter is not null, the
                parser will
                * only pay attention to elements whose QName's appear in the filter list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParseFilter</name>
                </type>
                <name>getParseFilter</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Sets the Parse Filter. The parse filter is a set of XML QNames that the parse should watch out for. If
                the filter
                * is null, the parser will parse all elements in the document. I the filter is not null, the parser will
                only pay
                * attention to elements whose QName's appear in the filter list.
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setParseFilter</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ParseFilter</name>
                            </type>
                            <name>parseFilter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Returns true if the parser should attempt to automatically detect the character encoding from the
                stream
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>getAutodetectCharset</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If true, the parser will attempt to automatically detect the character encoding from the stream by
                checking for
                * the byte order mark or checking the XML prolog.
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setAutodetectCharset</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>detect</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If false, the parser will trim leading and trailing whitespace in element and attribute values unless
                there is an
                * in-scope xml:space="preserve".
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>getMustPreserveWhitespace</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If false, the parser will trim leading and trailing whitespace in element and attribute values unless
                there is an
                * in-scope xml:space="preserve".
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setMustPreserveWhitespace</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>preserve</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If true, the parser will attempt to silently filter out invalid XML characters appearing within the
                XML document.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>getFilterRestrictedCharacters</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If true, the parser will attempt to silently filter out invalid XML characters appearing within the
                XML document
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setFilterRestrictedCharacters</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>filter</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * If getFilterRestrictedCharacters is true, restricted characters will be replaced with the specified
                character
                */
            </comment>
            <function_decl>
                <type>
                    <name>char</name>
                </type>
                <name>getFilterRestrictedCharacterReplacement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * If getFilterRestrictedCharacters is true, restricted characters will be replaced with the specified
                character
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setFilterRestrictedCharacterReplacement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>replacement</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * When parsing an InputStream that contains compressed data, use these codecs to decompress the stream.
                Only used
                * when parsing an InputStream. Ignored when parsing a Reader
                */
            </comment>
            <function_decl>
                <type>
                    <name>CompressionCodec</name>
                    <index>[]</index>
                </type>
                <name>getCompressionCodecs</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * When parsing an InputStream that contains compressed data, use these codecs to decompress the stream.
                Only used
                * when parsing an InputStream. Ignored when parsing a Reader
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setCompressionCodecs</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type><name>CompressionCodec</name>...
                            </type>
                            <name>codecs</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Register a named entity. This provides an escape clause for when feeds use entities that are not
                supported in XML
                * without a DTD decl. By default, all of the (X)HTML entities are preregistered
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>registerEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Resolves a value for a named entity. This provides an escape clause for when feeds use entities that
                are not
                * supported in XML without a DTD decl. By default, all of the (X)HTML entities are preregistered
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>resolveEntity</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * True if undeclared named entities should be resolved.
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setResolveEntities</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>resolve</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * True if undeclared named entities should be resolved.
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>getResolveEntities</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * True if QName-Alias mapping is enabled
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setQNameAliasMappingEnabled</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>enabled</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * True if QName-Alias mapping is enabled (default is false)
                */
            </comment>
            <function_decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>isQNameAliasMappingEnabled</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Get the QName-Alias Mapping (default null)
                */
            </comment>
            <function_decl>
                <type>
                    <name>
                        <name>Map</name>
                        <argument_list>&lt;
                            <argument>
                                <name>QName</name>
                            </argument>
                            ,
                            <argument>
                                <name>QName</name>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>getQNameAliasMap</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the QName-Alias Mapping
                */
            </comment>
            <function_decl>
                <type>
                    <name>ParserOptions</name>
                </type>
                <name>setQNameAliasMap</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>Map</name>
                                    <argument_list>&lt;
                                        <argument>
                                            <name>QName</name>
                                        </argument>
                                        ,
                                        <argument>
                                            <name>QName</name>
                                        </argument>
                                        &gt;
                                    </argument_list>
                                </name>
                            </type>
                            <name>map</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
