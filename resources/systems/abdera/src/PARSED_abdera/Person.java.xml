<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\model\Person.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>model</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>iri</name>.
            <name>IRI</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>iri</name>.
            <name>IRISyntaxException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * An Atom Person Construct
        * &lt;/p&gt;
        * &lt;p&gt;
        * Per RFC4287:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * A Person construct is an element that describes a person,
        * corporation, or similar entity (hereafter, 'person').
        *
        * atomPersonConstruct =
        * atomCommonAttributes,
        * (element atom:name { text }
        * &amp;amp; element atom:uri { atomUri }?
        * &amp;amp; element atom:email { atomEmailAddress }?
        * &amp;amp; extensionElement*)
        *
        * &lt;/pre&gt;
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Person</name>
        <super>
            <extends>extends <name>ExtensibleElement</name>,
                <name>Element</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * The "atom:name" element's content conveys a human-readable name for the person. The content of
                atom:name is
                * Language-Sensitive. Person constructs MUST contain exactly one "atom:name" element.
                *
                * @return The atom:name element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Element</name>
                </type>
                <name>getNameElement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:name" element's content conveys a human-readable name for the person. The content of
                atom:name is
                * Language-Sensitive. Person constructs MUST contain exactly one "atom:name" element.
                *
                * @param element The atom:name element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Person</name>
                </type>
                <name>setNameElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:name" element's content conveys a human-readable name for the person. The content of
                atom:name is
                * Language-Sensitive. Person constructs MUST contain exactly one "atom:name" element.
                *
                * @param name The person name
                * @return The newly created atom:name element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Element</name>
                </type>
                <name>setName</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:name" element's content conveys a human-readable name for the person. The content of
                atom:name is
                * Language-Sensitive. Person constructs MUST contain exactly one "atom:name" element.
                *
                * @return The name value
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getName</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:email" element's content conveys an e-mail address associated with the person. Person
                constructs MAY
                * contain an atom:email element, but MUST NOT contain more than one. Its content MUST conform to the
                "addr-spec"
                * production in [RFC2822].
                *
                * @return the atom:email element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Element</name>
                </type>
                <name>getEmailElement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:email" element's content conveys an e-mail address associated with the person. Person
                constructs MAY
                * contain an atom:email element, but MUST NOT contain more than one. Its content MUST conform to the
                "addr-spec"
                * production in [RFC2822].
                *
                * @param element The atom:email element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Person</name>
                </type>
                <name>setEmailElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Element</name>
                            </type>
                            <name>element</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:email" element's content conveys an e-mail address associated with the person. Person
                constructs MAY
                * contain an atom:email element, but MUST NOT contain more than one. Its content MUST conform to the
                "addr-spec"
                * production in [RFC2822].
                *
                * @param email The person email
                * @return the newly created atom:email element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Element</name>
                </type>
                <name>setEmail</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>email</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:email" element's content conveys an e-mail address associated with the person. Person
                constructs MAY
                * contain an atom:email element, but MUST NOT contain more than one. Its content MUST conform to the
                "addr-spec"
                * production in [RFC2822].
                *
                * @return the person's emali
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getEmail</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:uri" element's content conveys an IRI associated with the person. Person constructs MAY
                contain an
                * atom:uri element, but MUST NOT contain more than one. The content of atom:uri in a Person construct
                MUST be an
                * IRI reference [RFC3987].
                *
                * @return the atom:uri element
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRIElement</name>
                </type>
                <name>getUriElement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:uri" element's content conveys an IRI associated with the person. Person constructs MAY
                contain an
                * atom:uri element, but MUST NOT contain more than one. The content of atom:uri in a Person construct
                MUST be an
                * IRI reference [RFC3987].
                *
                * @param uri The atom:uri element
                */
            </comment>
            <function_decl>
                <type>
                    <name>Person</name>
                </type>
                <name>setUriElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>IRIElement</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:uri" element's content conveys an IRI associated with the person. Person constructs MAY
                contain an
                * atom:uri element, but MUST NOT contain more than one. The content of atom:uri in a Person construct
                MUST be an
                * IRI reference [RFC3987].
                *
                * @param uri The atom:uri value
                * @throws IRISyntaxException if the uri is malformed
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRIElement</name>
                </type>
                <name>setUri</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>uri</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * The "atom:uri" element's content conveys an IRI associated with the person. Person constructs MAY
                contain an
                * atom:uri element, but MUST NOT contain more than one. The content of atom:uri in a Person construct
                MUST be an
                * IRI reference [RFC3987].
                *
                * @return The atom:uri value
                * @throws IRISyntaxException if the uri is invalid
                */
            </comment>
            <function_decl>
                <type>
                    <name>IRI</name>
                </type>
                <name>getUri</name>
                <parameter_list>()</parameter_list>;
            </function_decl>
            }
        </block>
    </class>
</unit>
