<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\protocol\error\ProtocolException.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>protocol</name>.
            <name>error</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>Abdera</name>
        </name>
        ;
    </import>

    <class>
        <specifier>public</specifier>
        class <name>ProtocolException</name>
        <super>
            <extends>extends
                <name>RuntimeException</name>
            </extends>
        </super>
        <block>{

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>serialVersionUID</name> =
                    <init>
                        <expr>1017447143200419489L</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Error</name>
                    </type>
                    <name>error</name>
                </decl>
                ;
            </decl_stmt>

            <constructor>
                <specifier>public</specifier>
                <name>ProtocolException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Error</name>
                            </type>
                            <name>error</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>error</name>.
                                                    <name>getCode</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                            + "::" +
                                            <call>
                                                <name><name>error</name>.
                                                    <name>getMessage</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>error</name>
                            </name>
                            =
                            <name>error</name>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <constructor>
                <specifier>public</specifier>
                <name>ProtocolException</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Abdera</name>
                            </type>
                            <name>abdera</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>code</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>super</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>code</name>
                                            + "::" +
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>error</name>
                            </name>
                            =
                            <call>
                                <name><name>Error</name>.
                                    <name>create</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>abdera</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>code</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>message</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Error</name>
                </type>
                <name>getError</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>error</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>int</name>
                </type>
                <name>hashCode</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>int</name>
                            </type>
                            <name>prime</name> =
                            <init>
                                <expr>31</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>result</name> =
                            <init>
                                <expr>1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name> =
                            <init>
                                <expr>
                                    <name>error</name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>error</name>.
                                            <name>getMessage</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>code</name> =
                            <init>
                                <expr>
                                    <name>error</name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>error</name>.
                                            <name>getCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = <name>prime</name> * <name>result</name> + ((<name>message</name> == <name>null</name>) ?
                            0 :
                            <call>
                                <name><name>message</name>.
                                    <name>hashCode</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            )
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>result</name>
                            = <name>prime</name> * <name>result</name> +
                            <name>code</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <return>return
                        <expr>
                            <name>result</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <annotation>@
                        <name>Override</name>
                    </annotation>
                    <specifier>public</specifier>
                    <name>boolean</name>
                </type>
                <name>equals</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Object</name>
                            </type>
                            <name>obj</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>this</name>
                                ==
                                <name>obj</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>true</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>obj</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <call>
                                    <name>getClass</name>
                                    <argument_list>()</argument_list>
                                </call>
                                !=
                                <call>
                                    <name><name>obj</name>.
                                        <name>getClass</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>ProtocolException</name>
                            </type>
                            <name>other</name> =
                            <init>
                                <expr>(<name>ProtocolException</name>)
                                    <name>obj</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>message</name> =
                            <init>
                                <expr>
                                    <name>error</name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>error</name>.
                                            <name>getMessage</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>code</name> =
                            <init>
                                <expr>
                                    <name>error</name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>error</name>.
                                            <name>getCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>omessage</name> =
                            <init>
                                <expr>
                                    <name><name>other</name>.
                                        <name>error</name>
                                    </name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>other</name>.<name>error</name>.
                                            <name>getMessage</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    :
                                    <name>null</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>ocode</name> =
                            <init>
                                <expr>
                                    <name><name>other</name>.
                                        <name>error</name>
                                    </name>
                                    != <name>null</name> ?
                                    <call>
                                        <name><name>other</name>.<name>error</name>.
                                            <name>getCode</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    : 0
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>message</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>omessage</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <return>return <expr>false</expr>;
                                        </return>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                        <else>else
                            <if>if
                                <condition>(
                                    <expr>!
                                        <call>
                                            <name><name>message</name>.
                                                <name>equals</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>omessage</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <return>return <expr>false</expr>;
                                    </return>
                                </then>
                            </if>
                        </else>
                    </if>
                    <if>if
                        <condition>(
                            <expr>
                                <name>code</name>
                                !=
                                <name>ocode</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <return>return <expr>false</expr>;
                            </return>
                        </then>
                    </if>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            }
        </block>
    </class>
</unit>
