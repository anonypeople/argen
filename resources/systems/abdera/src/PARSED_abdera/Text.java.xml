<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\model\Text.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>model</name>
        </name>
        ;
    </package>

    <comment type="javadoc">/**
        * &lt;p&gt;
        * Represents an Atom Text Contruct.
        * &lt;/p&gt;
        * &lt;p&gt;
        * Atom allows three kinds of Text constructs:
        * &lt;/p&gt;
        * &lt;ul&gt;
        * &lt;li&gt;Text, consisting of content that is to be interpreted as plain text with no markup. For instance,
        * &lt;code&gt;&amp;lt;title type="text"&gt;&amp;amp;lt;title&amp;amp;gt;&amp;lt;/title&gt;&lt;/code&gt; is
        interpreted as literal characer "&amp;lt;"
        * followed by the word "content", followed by the literal character "&amp;gt;".&lt;/li&gt;
        * &lt;li&gt;HTML, consisting of content that is to be interpreted as escaped HTML markup. For instance,
        * &lt;code&gt;&amp;lt;title type="html"&gt;&amp;amp;lt;b&amp;amp;gt;title&amp;amp;lt;/b&amp;amp;gt;&amp;lt;/title&gt;&lt;/code&gt;
        is interpreted as the word
        * "content" surrounded by the HTML &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/b&amp;gt;&lt;/code&gt;
        tags.&lt;/li&gt;
        * &lt;li&gt;XHTML, consisting of well-formed XHTML content wrapped in an XHTML div element. For instance,
        * &lt;code&gt;&amp;lt;title type="xhtml"&gt;&amp;lt;div xmlns="http://www.w3.org/1999/xhtml"&gt;&amp;lt;b&gt;Title&amp;lt;/b&gt;&amp;lt;/div&gt;&amp;lt;/title&gt;&lt;/code&gt;
        * .&lt;/li&gt;
        * &lt;/ul&gt;
        * &lt;p&gt;
        * Per RFC4287:
        * &lt;/p&gt;
        *
        * &lt;pre&gt;
        * A Text construct contains human-readable text, usually in small
        * quantities. The content of Text constructs is Language-Sensitive.
        *
        * atomPlainTextConstruct =
        * atomCommonAttributes,
        * attribute type { "text" | "html" }?,
        * text
        *
        * atomXHTMLTextConstruct =
        * atomCommonAttributes,
        * attribute type { "xhtml" },
        * xhtmlDiv
        *
        * atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct
        * &lt;/pre&gt;
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>Text</name>
        <super>
            <extends>extends
                <name>Element</name>
            </extends>
        </super>
        <block>{

            <comment type="javadoc">/**
                * Text Constructs can be either Text, HTML or XHTML
                */
            </comment>
            <enum>
                <specifier>public</specifier>
                <specifier>static</specifier> enum <name>Type</name>
                <block>{
                    <comment type="javadoc">/** Plain Text **/</comment>
                    <expr_stmt>
                        <expr>
                            <name>TEXT</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Escaped HTML **/</comment>
                        <expr>
                            <name>HTML</name>
                        </expr>
                        ,
                        <comment type="javadoc">/** Welformed XHTML **/</comment>
                        <expr>
                            <name>XHTML</name>
                        </expr>
                        ;
                    </expr_stmt>

                    <comment type="javadoc">/**
                        * Return the text type
                        */
                    </comment>
                    <function>
                        <type>
                            <specifier>public</specifier>
                            <specifier>static</specifier>
                            <name>Type</name>
                        </type>
                        <name>typeFromString</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>String</name>
                                    </type>
                                    <name>val</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Type</name>
                                    </type>
                                    <name>type</name> =
                                    <init>
                                        <expr>
                                            <name>TEXT</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>val</name>
                                        !=
                                        <name>null</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <call>
                                                        <name><name>val</name>.
                                                            <name>equalsIgnoreCase</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>"text"</expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <expr_stmt>
                                                    <expr>
                                                        <name>type</name>
                                                        =
                                                        <name>TEXT</name>
                                                    </expr>
                                                    ;
                                                </expr_stmt>
                                            </then>
                                            <else>else
                                                <if>if
                                                    <condition>(
                                                        <expr>
                                                            <call>
                                                                <name><name>val</name>.
                                                                    <name>equalsIgnoreCase</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>"html"</expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        )
                                                    </condition>
                                                    <then>
                                                        <expr_stmt>
                                                            <expr>
                                                                <name>type</name>
                                                                =
                                                                <name>HTML</name>
                                                            </expr>
                                                            ;
                                                        </expr_stmt>
                                                    </then>
                                                    <else>else
                                                        <if>if
                                                            <condition>(
                                                                <expr>
                                                                    <call>
                                                                        <name><name>val</name>.
                                                                            <name>equalsIgnoreCase</name>
                                                                        </name>
                                                                        <argument_list>(
                                                                            <argument>
                                                                                <expr>"xhtml"</expr>
                                                                            </argument>
                                                                            )
                                                                        </argument_list>
                                                                    </call>
                                                                </expr>
                                                                )
                                                            </condition>
                                                            <then>
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>type</name>
                                                                        =
                                                                        <name>XHTML</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </then>
                                                            <else>else
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>type</name>
                                                                        =
                                                                        <name>null</name>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                            </else>
                                                        </if>
                                                    </else>
                                                </if>
                                            </else>
                                        </if>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>type</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    }
                </block>
            </enum>
            <empty_stmt>;</empty_stmt>

            <comment type="javadoc">/**
                * Return the Text.Type
                *
                * @return The Text.Type
                */
            </comment>
            <function_decl>
                <type>
                    <name>Type</name>
                </type>
                <name>getTextType</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the Text.Type
                *
                * @param type The Text.Type
                */
            </comment>
            <function_decl>
                <type>
                    <name>Text</name>
                </type>
                <name>setTextType</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Type</name>
                            </type>
                            <name>type</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return the text value element
                *
                * @return A xhtml:div
                */
            </comment>
            <function_decl>
                <type>
                    <name>Div</name>
                </type>
                <name>getValueElement</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the text value element
                *
                * @param value The xhtml:div
                */
            </comment>
            <function_decl>
                <type>
                    <name>Text</name>
                </type>
                <name>setValueElement</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Div</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return the text value
                *
                * @return The text value
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the text value
                *
                * @param value The text value
                */
            </comment>
            <function_decl>
                <type>
                    <name>Text</name>
                </type>
                <name>setValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>value</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            <comment type="javadoc">/**
                * Return the wrapped value
                *
                * @return The text value wrapped in a xhtml:div
                */
            </comment>
            <function_decl>
                <type>
                    <name>String</name>
                </type>
                <name>getWrappedValue</name>
                <parameter_list>()</parameter_list>;
            </function_decl>

            <comment type="javadoc">/**
                * Set the wrapped value
                *
                * @param wrappedValue The text value wrapped in a xhtml:div
                */
            </comment>
            <function_decl>
                <type>
                    <name>Text</name>
                </type>
                <name>setWrappedValue</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>wrappedValue</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                ;
            </function_decl>

            }
        </block>
    </class>
</unit>
