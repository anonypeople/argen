<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\abdera\src\main\java\org\apache\abdera\util\XmlUtil.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. The ASF licenses this file to You
        * under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License. For additional information regarding
        * copyright in this work, please see the NOTICE file in the top level
        * directory of this distribution.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.
            <name>util</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>text</name>.
            <name>CharUtils</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>apache</name>.<name>abdera</name>.<name>i18n</name>.<name>text</name>.
            <name>Filter</name>
        </name>
        ;
    </import>

    <class>
        <specifier>public</specifier>
        class <name>XmlUtil</name>
        <block>{

            <enum>
                <specifier>public</specifier>
                enum <name>XMLVersion</name>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name>XML10</name>
                        </expr>
                        ,
                        <expr>
                            <name>XML11</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>Filter</name>
                            </type>
                            <name>filter</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>XMLVersion</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>filter</name>
                                    </name>
                                    = new
                                    <call>
                                        <name>XmlFilter</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>this</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>Filter</name>
                        </type>
                        <name>filter</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <return>return
                                <expr>
                                    <name>filter</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </enum>
            <empty_stmt>;</empty_stmt>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier> class <name>XmlFilter</name>
                <super>
                    <implements>implements
                        <name>Filter</name>
                    </implements>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>XMLVersion</name>
                            </type>
                            <name>version</name>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>XmlFilter</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>XMLVersion</name>
                                    </type>
                                    <name>version</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>version</name>
                                    </name>
                                    =
                                    <name>version</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>boolean</name>
                        </type>
                        <name>accept</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>c</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <return>return
                                <expr>!
                                    <call>
                                        <name>restricted</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>version</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>c</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <comment type="line">// inversion set</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>RESTRICTED_SET_v1</name> =
                    <init>
                        <expr>
                            <block>{<expr>0</expr>, <expr>9</expr>, <expr>11</expr>, <expr>13</expr>, <expr>
                                14</expr>, <expr>32</expr>, <expr>55296</expr>, <expr>57344</expr>, <expr>65534</expr>, <expr>
                                65536</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="line">// inversion set</comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <name>int</name>
                        <index>[]</index>
                    </type>
                    <name>RESTRICTED_SET_v11</name> =
                    <init>
                        <expr>
                            <block>{<expr>11</expr>, <expr>13</expr>, <expr>14</expr>, <expr>32</expr>, <expr>127</expr>, <expr>
                                160</expr>, <expr>55296</expr>, <expr>57344</expr>, <expr>65534</expr>, <expr>
                                65536</expr>}
                            </block>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>restricted</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLVersion</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>char</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name>restricted</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>version</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>(<name>int</name>)
                                            <name>c</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>boolean</name>
                </type>
                <name>restricted</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>XMLVersion</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>int</name>
                            </type>
                            <name>c</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>CharUtils</name>.
                                    <name>invset_contains</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>version</name>
                                            ==
                                            <name><name>XMLVersion</name>.
                                                <name>XML10</name>
                                            </name>
                                            ? <name>RESTRICTED_SET_v1</name> :
                                            <name>RESTRICTED_SET_v11</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>c</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>XMLVersion</name>
                </type>
                <name>getVersion</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>version</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>version</name>
                            == <name>null</name> ?
                            <name><name>XMLVersion</name>.
                                <name>XML10</name>
                            </name>
                            :
                            <call>
                                <name><name>version</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.0"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <name><name>XMLVersion</name>.
                                <name>XML10</name>
                            </name>
                            :
                            <call>
                                <name><name>version</name>.
                                    <name>equals</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>"1.1"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                            ?
                            <name><name>XMLVersion</name>.
                                <name>XML11</name>
                            </name>
                            :
                            <name><name>XMLVersion</name>.
                                <name>XML10</name>
                            </name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>
            }
        </block>
    </class>
</unit>
