<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\acra\src\main\java\org\acra\sender\ReportSender.java">
    <comment type="block">/*
        * Copyright 2010 Kevin Gaudin
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>acra</name>.
            <name>sender</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>android</name>.<name>content</name>.
            <name>Context</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.<name>collector</name>.
            <name>CrashReportData</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * A simple interface for defining various crash report senders. You can reuse
        * {@link HttpSender} to send reports to your custom server-side report
        * collection script even if you expect (or prefer) specific names for each
        * report field as {@link HttpSender#send(Context, CrashReportData)}
        * can take a {@code Map&lt;ReportField, String&gt;} as an input to convert each field name to
        * your preferred POST parameter name.
        *
        * @author Kevin Gaudin
        *
        */
    </comment>
    <class type="interface">
        <specifier>public</specifier>
        interface <name>ReportSender</name>
        <block>{
            <comment type="javadoc">/**
                * Send crash report data. You don't have to take care of managing Threads,
                * just implement what is necessary to handle the data. ACRA will use a
                * specific Thread (not the UI Thread) to run your sender.
                *
                *
                *
                * @param context Android Context in which to send the crash report.
                * @param errorContent
                * Stores key/value pairs for each report field. A report field
                * is identified by a {@link org.acra.ReportField} enum value.
                * @throws ReportSenderException
                * If anything goes fatally wrong during the handling of crash
                * data, you can (should) throw a {@link ReportSenderException}
                * with a custom message.
                */
            </comment>
            <function_decl>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>send</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Context</name>
                            </type>
                            <name>context</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>CrashReportData</name>
                            </type>
                            <name>errorContent</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ReportSenderException</name>
                        </expr>
                    </argument>
                </throws>
                ;
            </function_decl>
            }
        </block>
    </class>
</unit>
