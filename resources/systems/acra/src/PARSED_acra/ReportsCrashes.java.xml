<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\acra\src\main\java\org\acra\annotation\ReportsCrashes.java">
    <comment type="block">/*
        * Copyright 2010 Emmanuel Astier &amp; Kevin Gaudin
        *
        * Licensed under the Apache License, Version 2.0 (the "License");
        * you may not use this file except in compliance with the License.
        * You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        */
    </comment>
    <package>package
        <name><name>org</name>.<name>acra</name>.
            <name>annotation</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Documented</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>ElementType</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Inherited</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Retention</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>RetentionPolicy</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>lang</name>.<name>annotation</name>.
            <name>Target</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>ACRA</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>ACRAConstants</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>BaseCrashReportDialog</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>CrashReportDialog</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>ReportField</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.
            <name>ReportingInteractionMode</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.<name>sender</name>.<name>HttpSender</name>.
            <name>Method</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>org</name>.<name>acra</name>.<name>sender</name>.<name>HttpSender</name>.
            <name>Type</name>
        </name>
        ;
    </import>

    <import>import
        <name><name>android</name>.<name>content</name>.
            <name>Context</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>android</name>.<name>content</name>.
            <name>SharedPreferences</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>android</name>.<name>preference</name>.
            <name>PreferenceManager</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Provide configuration elements to the
        * {@link ACRA#init(android.app.Application)} method. The only mandatory
        * configuration item is the {@link #formUri()} parameter which is the Uri
        * to the server that will receive your reports.
        *
        * @author Kevin Gaudin
        *
        */
    </comment>
    @
    <expr_stmt>
        <expr>
            <name>Documented</name>
            @
            <call>
                <name>Retention</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>RetentionPolicy</name>.
                                <name>RUNTIME</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            @
            <call>
                <name>Target</name>
                <argument_list>(
                    <argument>
                        <expr>
                            <name><name>ElementType</name>.
                                <name>TYPE</name>
                            </name>
                        </expr>
                    </argument>
                    )
                </argument_list>
            </call>
            @
            <name>Inherited</name>
            public @interface <name>ReportsCrashes</name>
            <block>{

                <comment type="javadoc">/**
                    * The Uri of your own server-side script that will receive reports. This is
                    * to use if you don't want to send reports to Google Docs but to your own,
                    * self-hosted script.
                    *
                    * @return URI of a custom server to which to post reports.
                    */
                </comment>
                <expr>
                    <name>String</name>
                    <call>
                        <name>formUri</name>
                        <argument_list>()</argument_list>
                    </call>
                </expr>
            </block>
        </expr>
    </expr_stmt>
    <default>default ACRAConstants.DEFAULT_STRING_VALUE;

        <comment type="javadoc">/**
            * &lt;p&gt;
            * The interaction mode you want to implement. Default is
            * {@link ReportingInteractionMode#SILENT} which does not require any
            * resources configuration.
            * &lt;/p&gt;
            * &lt;p&gt;
            * Other modes have resources requirements:
            * &lt;/p&gt;
            * &lt;ul&gt;
            * &lt;li&gt;{@link ReportingInteractionMode#TOAST} requires
            * {@link #resToastText()} to be provided to define the text that you want
            * to be displayed to the user when a report is being sent.&lt;/li&gt;
            * &lt;li&gt;{@link ReportingInteractionMode#NOTIFICATION} requires
            * {@link #resNotifTickerText()}, {@link #resNotifTitle()},
            * {@link #resNotifText()}, {@link #resDialogText()}.&lt;/li&gt;
            * &lt;li&gt;{@link ReportingInteractionMode#DIALOG} requires
            * {@link #resDialogText()}.&lt;/li&gt;
            * &lt;/ul&gt;
            * &lt;p&gt;
            * Default is {@link ReportingInteractionMode#SILENT}
            * &lt;/p&gt;
            *
            * @return the interaction mode that you want ACRA to implement.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>ReportingInteractionMode</name>
                </type>
                <name>mode</name>
                <argument_list>()</argument_list>
                default
                <name><name>ReportingInteractionMode</name>.
                    <name>SILENT</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the label of positive button in the crash dialog.
            * If not provided, defaults to 'OK'.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogPositiveButtonText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the label of negative button in the crash dialog.
            * If not provided, defaults to 'cancel'.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogNegativeButtonText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the user comment input label in the crash dialog.
            * If not provided, disables the input field.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogCommentPrompt</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the user email address input label in the crash
            * dialog. If not provided, disables the input field.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogEmailPrompt</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the icon in the crash dialog. Default value is
            * the system alert icon.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogIcon</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DIALOG_ICON</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the Toast text triggered when the user accepts to
            * send a report in the crash dialog.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogOkToast</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the text in the crash dialog.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the title in the crash dialog.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resDialogTitle</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the icon in the status bar notification. Default
            * is the system error notification icon.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resNotifIcon</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_NOTIFICATION_ICON</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the text in the status bar notification.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resNotifText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the ticker text in the status bar notification.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resNotifTickerText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Resource id for the title in the status bar notification.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resNotifTitle</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Resource id for the Toast text triggered when the application crashes if
            * the {@link ReportingInteractionMode#TOAST} mode is used. Can also be used
            * in {@link ReportingInteractionMode#NOTIFICATION} and
            * {@link ReportingInteractionMode#DIALOG} modes to display a Toast message
            * while the report is being created, before the dialog/notification
            * appears. This allows the user to know what is happening just before the
            * application is terminated.
            *
            * @return Resource id for the Toast text triggered when the application
            * crashes.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>resToastText</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_RES_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Name of the SharedPreferences that will host ACRA settings you
            * can make accessible to your users through a preferences screen:
            * &lt;ul&gt;
            * &lt;li&gt;
            * {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ACRA#PREF_ALWAYS_ACCEPT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ACRA#PREF_ENABLE_DEVICE_ID}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}&lt;/li&gt;
            * &lt;/ul&gt;
            * preference. Default is to use the application default
            * SharedPreferences, as retrieved with
            * {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>sharedPreferencesName</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_STRING_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * If using a custom {@link ReportsCrashes#sharedPreferencesName()}, pass
            * here the mode that you need for the SharedPreference file creation:
            * {@link Context#MODE_PRIVATE}, {@link Context#MODE_WORLD_READABLE} or
            * {@link Context#MODE_WORLD_WRITEABLE}. Default is
            * {@link Context#MODE_PRIVATE}.
            *
            * @return Mode to use with the SharedPreference creation.
            * @see Context#getSharedPreferences(String, int)
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>sharedPreferencesMode</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_SHARED_PREFERENCES_MODE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * If enabled, DropBox events collection will include system tags:
            * &lt;ul&gt;
            * &lt;li&gt;system_app_anr&lt;/li&gt;
            * &lt;li&gt;system_app_wtf&lt;/li&gt;
            * &lt;li&gt;system_app_crash&lt;/li&gt;
            * &lt;li&gt;system_server_anr&lt;/li&gt;
            * &lt;li&gt;system_server_wtf&lt;/li&gt;
            * &lt;li&gt;system_server_crash&lt;/li&gt;
            * &lt;li&gt;BATTERY_DISCHARGE_INFO&lt;/li&gt;
            * &lt;li&gt;SYSTEM_RECOVERY_LOG&lt;/li&gt;
            * &lt;li&gt;SYSTEM_BOOT&lt;/li&gt;
            * &lt;li&gt;SYSTEM_LAST_KMSG&lt;/li&gt;
            * &lt;li&gt;APANIC_CONSOLE&lt;/li&gt;
            * &lt;li&gt;APANIC_THREADS&lt;/li&gt;
            * &lt;li&gt;SYSTEM_RESTART&lt;/li&gt;
            * &lt;li&gt;SYSTEM_TOMBSTONE&lt;/li&gt;
            * &lt;li&gt;data_app_strictmode&lt;/li&gt;
            * &lt;/ul&gt;
            *
            * @return True if system tags are to be included as part of DropBox events.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>includeDropBoxSystemTags</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Array of tags that you want to be fetched when collecting DropBox
            * entries.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>additionalDropBoxTags</name>
                <argument_list>()</argument_list>
                default
                <block>{}</block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * @return Number of minutes to look back when collecting events from
            * DropBoxManager.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>dropboxCollectionMinutes</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DROPBOX_COLLECTION_MINUTES</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * &lt;p&gt;
            * Arguments to be passed to the logcat command line. Default is { "-t",
            * "100", "-v", "time" } for:
            * &lt;/p&gt;
            *
            * &lt;pre&gt;
            * logcat -t 100 -v time
            * &lt;/pre&gt;
            *
            * &lt;p&gt;
            * Do not include -b arguments for buffer selection, include
            * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
            * {@link ReportsCrashes#customReportContent()} to activate alternative
            * logcat buffers reporting. They will use the same other arguments as those
            * provided here.
            * &lt;/p&gt;
            *
            * &lt;p&gt;
            * See &lt;a href=
            * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
            * &gt;Listing of logcat Command Options&lt;/a&gt;.
            * &lt;/p&gt;
            *
            * @return Array of arguments to supply if retrieving the log as part of the
            * report.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>logcatArguments</name>
                <argument_list>()</argument_list>
                default
                <block>{
                    <expr_stmt><expr>"-t"</expr>,
                        <expr>"" +
                            <name><name>ACRAConstants</name>.
                                <name>DEFAULT_LOGCAT_LINES</name>
                            </name>
                        </expr>
                        , <expr>"-v"</expr>,
                        <expr>"time"</expr>
                    </expr_stmt>
                    }
                </block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * When using the {@link #formUri()} parameter to send reports to a custom
            * server-side script, you can set here and in
            * {@link #formUriBasicAuthPassword()} the credentials for a BASIC HTTP
            * authentication.
            *
            * @return Login to use when posting reports to a custom server.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>formUriBasicAuthLogin</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>NULL_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * When using the {@link #formUri()} parameter to send reports to a custom
            * server-side script, you can set here and in
            * {@link #formUriBasicAuthLogin()} the credentials for a BASIC HTTP
            * authentication.
            *
            * @return Password to use when posting reports to a custom server.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>formUriBasicAuthPassword</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>NULL_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * &lt;p&gt;
            * Redefines the list of {@link ReportField}s collected and sent in your
            * reports. If you modify this list, you have to create a new Google Drive
            * Spreadsheet &amp;amp; Form which will be based on these fields as column headers.
            * &lt;/p&gt;
            * &lt;p&gt;
            * The fields order is significant. You can also use this property to modify
            * fields order in your reports.
            * &lt;/p&gt;
            * &lt;p&gt;
            * The default list is the following, except if you send reports by mail
            * using {@link #mailTo()}.
            * &lt;/p&gt;
            * &lt;ul&gt;
            * &lt;li&gt;
            * {@link ReportField#REPORT_ID}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#APP_VERSION_CODE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#APP_VERSION_NAME}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#PACKAGE_NAME}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#FILE_PATH}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#PHONE_MODEL}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#BRAND}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#PRODUCT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#ANDROID_VERSION}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#BUILD}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#TOTAL_MEM_SIZE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#AVAILABLE_MEM_SIZE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#CUSTOM_DATA}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#IS_SILENT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#STACK_TRACE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#INITIAL_CONFIGURATION}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#CRASH_CONFIGURATION}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#DISPLAY}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#USER_COMMENT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#USER_EMAIL}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#USER_APP_START_DATE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#USER_CRASH_DATE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#DUMPSYS_MEMINFO}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#LOGCAT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#INSTALLATION_ID}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#DEVICE_FEATURES}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#ENVIRONMENT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#SHARED_PREFERENCES}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#SETTINGS_SYSTEM}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#SETTINGS_SECURE}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#SETTINGS_GLOBAL}&lt;/li&gt;
            * &lt;/ul&gt;
            *
            * @return ReportField Array listing the fields to be included in the
            * report.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>ReportField</name>
                    <index>[]</index>
                </type>
                <name>customReportContent</name>
                <argument_list>()</argument_list>
                default
                <block>{}</block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * &lt;p&gt;
            * Add your crash reports mailbox here if you want to send reports via
            * email. This allows to get rid of the INTERNET permission. Reports content
            * can be customized with {@link #customReportContent()} . Default fields
            * are:
            * &lt;/p&gt;
            * &lt;ul&gt;
            * &lt;li&gt;
            * {@link ReportField#USER_COMMENT}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#ANDROID_VERSION}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#APP_VERSION_NAME}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#BRAND}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#PHONE_MODEL}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#CUSTOM_DATA}&lt;/li&gt;
            * &lt;li&gt;
            * {@link ReportField#STACK_TRACE}&lt;/li&gt;
            * &lt;/ul&gt;
            *
            * @return email address to which to send reports.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>mailTo</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_STRING_VALUE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Controls whether unapproved reports are deleted on application start or
            * not. Default is true. This is a change from versions of ACRA before 3.2
            * as in {@link ReportingInteractionMode#NOTIFICATION} mode reports were
            * previously kept until the user explicitly opens the Notification dialog
            * AND choose to send or discard the report. Until then, on application
            * restart, ACRA was issuing a new crash notification for previous reports
            * pending for approval. This could be misunderstood by the user with a new
            * crash, resulting in bad appreciation of the application.
            *
            * @return true if ACRA should delete unapproved reports on application
            * start.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>deleteUnapprovedReportsOnApplicationStart</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * This property can be used to determine whether old (out of date) reports
            * should be sent or not. By default they are discarded.
            *
            * @return true if ACRA should delete any unsent reports on startup if the
            * application has been updated since the last time the application
            * was started.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>deleteOldUnsentReportsOnApplicationStart</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Value in milliseconds for timeout attempting to connect to a
            * network (default 3000ms).
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>connectionTimeout</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_CONNECTION_TIMEOUT</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * If the request is retried due to timeout, the socketTimeout will double
            * before retrying the request.
            *
            * @return Value in milliseconds for timeout receiving a response to a
            * network request (default 5000ms).
            * @see #maxNumberOfRequestRetries()
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>socketTimeout</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_SOCKET_TIMEOUT</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Maximum number of times a network request will be retried when
            * receiving the response times out (default 3).
            * @see #socketTimeout()
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>maxNumberOfRequestRetries</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * In {@link ReportingInteractionMode#TOAST} mode, set this to true if you
            * prefer displaying the native Force Close dialog after the Toast.
            *
            * @return true if the Force Close dialog has to be displayed.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>forceCloseDialogAfterToast</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Add here your {@link SharedPreferences} identifier Strings if you use
            * others than your application's default. They will be added to the
            * {@link ReportField#SHARED_PREFERENCES} field.
            *
            * @return String Array containing the names of the additional preferences.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>additionalSharedPreferences</name>
                <argument_list>()</argument_list>
                default
                <block>{}</block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * Set this to true if you want to include only logcat lines related to your
            * Application process.
            *
            * @return true if you want to filter logcat with your process id.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>logcatFilterByPid</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_LOGCAT_FILTER_BY_PID</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Set this to false if you want to disable sending reports in development
            * mode. Only signed application packages will send reports. Default value
            * is true.
            *
            * @return false if reports should not be sent.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>sendReportsInDevMode</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_SEND_REPORTS_IN_DEV_MODE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Set this to false if you want to disable sending reports at the time the
            * exception is caught. In this case, reports will not be sent until the
            * application is restarted.
            *
            * @return false if reports should not be sent.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>sendReportsAtShutdown</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_SEND_REPORTS_AT_SHUTDOWN</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * Provide here regex patterns to be evaluated on each SharedPreference key
            * to exclude KV pairs from the collected SharedPreferences. This allows you
            * to exclude sensitive user data like passwords to be collected.
            *
            * @return an array of regex patterns, every matching key is not collected.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>excludeMatchingSharedPreferencesKeys</name>
                <argument_list>()</argument_list>
                default
                <block>{}</block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * Provide here regex patterns to be evaluated on each Settings.System,
            * Settings.Secure and Settings.Global key to exclude KV pairs from the
            * collected SharedPreferences. This allows you to exclude sensitive data to
            * be collected.
            *
            * @return an array of regex patterns, every matching key is not collected.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                    <index>[]</index>
                </type>
                <name>excludeMatchingSettingsKeys</name>
                <argument_list>()</argument_list>
                default
                <block>{}</block>
            </decl>
        </decl_stmt>
        <empty_stmt>;</empty_stmt>

        <comment type="javadoc">/**
            * The default value will be a BuildConfig class residing in the same package as the Application class.
            *
            * @return BuildConfig class from which to read any BuildConfig attributes.
            */
        </comment>
        <function_decl>
            <type>
                <name>Class</name>
            </type>
            <name>buildConfigClass</name>
            <parameter_list>()</parameter_list>;
        </function_decl>

        <comment type="javadoc">/**
            * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
            * path/name of your application log file. If the string does not contain
            * any path separator, the file is assumed as being in
            * {@link Context#getFilesDir()}.
            *
            * @return a String containing the path/name of your application log file.
            * If the string does not containt any path separator, the file is
            * assumed as being in {@link Context#getFilesDir()}.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>applicationLogFile</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_APPLICATION_LOGFILE</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
            * number of latest lines of your application log file to be collected.
            * Default value is 100.
            *
            * @return number of lines to collect.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>int</name>
                </type>
                <name>applicationLogFileLines</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_APPLICATION_LOGFILE_LINES</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * &lt;p&gt;
            * Set this to true if you need to post reports to your own server using an
            * SSL connection with a self-signed certificate.
            * &lt;/p&gt;
            *
            * @return True if SSL certificates validation has to be ignored when
            * posting reports.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>boolean</name>
                </type>
                <name>disableSSLCertValidation</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_DISABLE_SSL_CERT_VALIDATION</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <decl_stmt>
            <decl>
                <type>
                    <name>String</name>
                </type>
                <name>httpsSocketFactoryFactoryClass</name>
                <argument_list>()</argument_list>
                default
                <name><name>ACRAConstants</name>.
                    <name>DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * @return Class for the CrashReportDialog used when sending intent.
            * If not provided, defaults to CrashReportDialog.class
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>
                        <name>Class</name>
                        <argument_list>&lt;
                            <argument>
                                <name>?</name>
                                <extends>extends
                                    <name>BaseCrashReportDialog</name>
                                </extends>
                            </argument>
                            &gt;
                        </argument_list>
                    </name>
                </type>
                <name>reportDialogClass</name>
                <argument_list>()</argument_list>
                default
                <name><name>CrashReportDialog</name>.
                    <name>
                        <name/>
                    </name>
                </name>
                class
            </decl>
            ;
        </decl_stmt>

        <comment type="javadoc">/**
            * &lt;p&gt;
            * The {@link Method} to be used when posting with {@link #formUri()}.
            * &lt;/p&gt;
            *
            * @return HTTP method used when posting reports.
            */
        </comment>
        <decl_stmt>
            <decl>
                <type>
                    <name>Method</name>
                </type>
                <name>httpMethod</name>
                <argument_list>()</argument_list>
                default
                <name><name>Method</name>.
                    <name>POST</name>
                </name>
            </decl>
            ;
        </decl_stmt>

        <decl_stmt>
            <decl>
                <type>
                    <name>Type</name>
                </type>
                <name>reportType</name>
                <argument_list>()</argument_list>
                default
                <name><name>Type</name>.
                    <name>FORM</name>
                </name>
            </decl>
            ;
        </decl_stmt>
    </default>
    }
</unit>
