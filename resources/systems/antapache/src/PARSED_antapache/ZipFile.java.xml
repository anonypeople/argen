<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java"
      filename="D:\bio\git\biorimp\BIO-RIMP\test_data\code\antapache\src\main\org\apache\tools\zip\ZipFile.java">
    <comment type="block">/*
        * Licensed to the Apache Software Foundation (ASF) under one or more
        * contributor license agreements. See the NOTICE file distributed with
        * this work for additional information regarding copyright ownership.
        * The ASF licenses this file to You under the Apache License, Version 2.0
        * (the "License"); you may not use this file except in compliance with
        * the License. You may obtain a copy of the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS,
        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        * See the License for the specific language governing permissions and
        * limitations under the License.
        *
        */
    </comment>

    <package>package
        <name><name>org</name>.<name>apache</name>.<name>tools</name>.
            <name>zip</name>
        </name>
        ;
    </package>

    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>File</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>IOException</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>InputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>io</name>.
            <name>RandomAccessFile</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Calendar</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Collections</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Date</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Enumeration</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>HashMap</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.
            <name>Map</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>zip</name>.
            <name>CRC32</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>zip</name>.
            <name>Inflater</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>zip</name>.
            <name>InflaterInputStream</name>
        </name>
        ;
    </import>
    <import>import
        <name><name>java</name>.<name>util</name>.<name>zip</name>.
            <name>ZipException</name>
        </name>
        ;
    </import>

    <comment type="javadoc">/**
        * Replacement for &lt;code&gt;java.util.ZipFile&lt;/code&gt;.
        *
        * &lt;p&gt;This class adds support for file name encodings other than UTF-8
        * (which is required to work on ZIP files created by native zip tools
        * and is able to skip a preamble like the one found in self
        * extracting archives. Furthermore it returns instances of
        * &lt;code&gt;org.apache.tools.zip.ZipEntry&lt;/code&gt; instead of
        * &lt;code&gt;java.util.zip.ZipEntry&lt;/code&gt;.&lt;/p&gt;
        *
        * &lt;p&gt;It doesn't extend &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; as it would
        * have to reimplement all methods anyway. Like
        * &lt;code&gt;java.util.ZipFile&lt;/code&gt;, it uses RandomAccessFile under the
        * covers and supports compressed and uncompressed entries.&lt;/p&gt;
        *
        * &lt;p&gt;The method signatures mimic the ones of
        * &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt;, with a couple of exceptions:
        *
        * &lt;ul&gt;
        * &lt;li&gt;There is no getName method.&lt;/li&gt;
        * &lt;li&gt;entries has been renamed to getEntries.&lt;/li&gt;
        * &lt;li&gt;getEntries and getEntry return
        * &lt;code&gt;org.apache.tools.zip.ZipEntry&lt;/code&gt; instances.&lt;/li&gt;
        * &lt;li&gt;close is allowed to throw IOException.&lt;/li&gt;
        * &lt;/ul&gt;
        *
        */
    </comment>
    <class>
        <specifier>public</specifier>
        class <name>ZipFile</name>
        <block>{
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>HASH_SIZE</name> =
                    <init>
                        <expr>509</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>SHORT</name>     =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>WORD</name>      =
                    <init>
                        <expr>4</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>NIBLET_MASK</name> =
                    <init>
                        <expr>0x0f</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>BYTE_SHIFT</name> =
                    <init>
                        <expr>8</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>POS_0</name> =
                    <init>
                        <expr>0</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>POS_1</name> =
                    <init>
                        <expr>1</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>POS_2</name> =
                    <init>
                        <expr>2</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>POS_3</name> =
                    <init>
                        <expr>3</expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maps ZipEntrys to Longs, recording the offsets of the local
                * file headers.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>entries</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>HASH_SIZE</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Maps String to ZipEntrys, name -&gt; actual entry.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>Map</name>
                    </type>
                    <name>nameMap</name> =
                    <init>
                        <expr>new
                            <call>
                                <name>HashMap</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>HASH_SIZE</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>OffsetEntry</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>long</name>
                            </type>
                            <name>headerOffset</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>long</name>
                            </type>
                            <name>dataOffset</name> =
                            <init>
                                <expr>-1</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    }
                </block>
            </class>

            <comment type="javadoc">/**
                * The encoding to use for filenames and the file comment.
                *
                * &lt;p&gt;For a list of possible values see &lt;a
                * href="http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html"&gt;http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html&lt;/a&gt;.
                * Defaults to the platform's default character encoding.&lt;/p&gt;
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>String</name>
                    </type>
                    <name>encoding</name> =
                    <init>
                        <expr>
                            <name>null</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The zip encoding to use for filenames and the file comment.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>ZipEncoding</name>
                    </type>
                    <name>zipEncoding</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * The actual data source.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <name>RandomAccessFile</name>
                    </type>
                    <name>archive</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Whether to look for and use Unicode extra fields.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>final</specifier>
                        <name>boolean</name>
                    </type>
                    <name>useUnicodeExtraFields</name>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Opens the given file for reading, assuming the platform's
                * native encoding for file names.
                *
                * @param f the archive.
                *
                * @throws IOException if an error occurs while reading the file.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ZipFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Opens the given file for reading, assuming the platform's
                * native encoding for file names.
                *
                * @param name name of the archive.
                *
                * @throws IOException if an error occurs while reading the file.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ZipFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>File</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>null</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Opens the given file for reading, assuming the specified
                * encoding for file names, scanning unicode extra fields.
                *
                * @param name name of the archive.
                * @param encoding the encoding to use for file names
                *
                * @throws IOException if an error occurs while reading the file.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ZipFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>new
                                            <call>
                                                <name>File</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>name</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Opens the given file for reading, assuming the specified
                * encoding for file names and scanning for unicode extra fields.
                *
                * @param f the archive.
                * @param encoding the encoding to use for file names, use null
                * for the platform's default encoding
                *
                * @throws IOException if an error occurs while reading the file.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ZipFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name>this</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>true</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * Opens the given file for reading, assuming the specified
                * encoding for file names.
                *
                * @param f the archive.
                * @param encoding the encoding to use for file names, use null
                * for the platform's default encoding
                * @param useUnicodeExtraFields whether to use InfoZIP Unicode
                * Extra Fields (if present) to set the file names.
                *
                * @throws IOException if an error occurs while reading the file.
                */
            </comment>
            <constructor>
                <specifier>public</specifier>
                <name>ZipFile</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>File</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>encoding</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>useUnicodeExtraFields</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>encoding</name>
                            </name>
                            =
                            <name>encoding</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>zipEncoding</name>
                            </name>
                            =
                            <call>
                                <name><name>ZipEncodingHelper</name>.
                                    <name>getZipEncoding</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>encoding</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name><name>this</name>.
                                <name>useUnicodeExtraFields</name>
                            </name>
                            =
                            <name>useUnicodeExtraFields</name>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <name>archive</name>
                            = new
                            <call>
                                <name>RandomAccessFile</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>f</name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>"r"</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>success</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <try>try
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>Map</name>
                                    </type>
                                    <name>entriesWithoutUTF8Flag</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>populateFromCentralDirectory</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name>resolveLocalFileHeaderData</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>entriesWithoutUTF8Flag</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>success</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                        <finally>finally
                            <block>{
                                <if>if
                                    <condition>(
                                        <expr>!
                                            <name>success</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <call>
                                                                <name><name>archive</name>.
                                                                    <name>close</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>IOException</name>
                                                            </type>
                                                            <name>e2</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// swallow, throw the original exception
                                                            instead
                                                        </comment>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </finally>
                    </try>
                    }
                </block>
            </constructor>

            <comment type="javadoc">/**
                * The encoding to use for filenames and the file comment.
                *
                * @return null if using the platform's default character encoding.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>String</name>
                </type>
                <name>getEncoding</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <name>encoding</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Closes the archive.
                * @throws IOException if an error occurs closing the archive.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>void</name>
                </type>
                <name>close</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>close</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * close a zipfile quietly; throw no io fault, do nothing
                * on a null parameter
                * @param zipfile file to close, can be null
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <specifier>static</specifier>
                    <name>void</name>
                </type>
                <name>closeQuietly</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ZipFile</name>
                            </type>
                            <name>zipfile</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>zipfile</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <try>try
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>zipfile</name>.
                                                        <name>close</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                    <catch>catch (
                                        <param>
                                            <decl>
                                                <type>
                                                    <name>IOException</name>
                                                </type>
                                                <name>e</name>
                                            </decl>
                                        </param>
                                        )
                                        <block>{
                                            <comment type="line">//ignore</comment>
                                            }
                                        </block>
                                    </catch>
                                </try>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns all entries.
                * @return all entries as {@link ZipEntry} instances
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>Enumeration</name>
                </type>
                <name>getEntries</name>
                <parameter_list>()</parameter_list>
                <block>{
                    <return>return
                        <expr>
                            <call>
                                <name><name>Collections</name>.
                                    <name>enumeration</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>entries</name>.
                                                    <name>keySet</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns a named entry - or &lt;code&gt;null&lt;/code&gt; if no entry by
                * that name exists.
                * @param name name of the entry.
                * @return the ZipEntry corresponding to the given name - or
                * &lt;code&gt;null&lt;/code&gt; if not present.
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>ZipEntry</name>
                </type>
                <name>getEntry</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>name</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <return>return
                        <expr>(<name>ZipEntry</name>)
                            <call>
                                <name><name>nameMap</name>.
                                    <name>get</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>name</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Returns an InputStream for reading the contents of the given entry.
                * @param ze the entry to get the stream for.
                * @return a stream to read the entry from.
                * @throws IOException if unable to create an input stream from the zipenty
                * @throws ZipException if the zipentry has an unsupported
                * compression method
                */
            </comment>
            <function>
                <type>
                    <specifier>public</specifier>
                    <name>InputStream</name>
                </type>
                <name>getInputStream</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ZipEntry</name>
                            </type>
                            <name>ze</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>ZipException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>OffsetEntry</name>
                            </type>
                            <name>offsetEntry</name> =
                            <init>
                                <expr>(<name>OffsetEntry</name>)
                                    <call>
                                        <name><name>entries</name>.
                                            <name>get</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ze</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>offsetEntry</name>
                                ==
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <return>return
                                    <expr>
                                        <name>null</name>
                                    </expr>
                                    ;
                                </return>
                                }
                            </block>
                        </then>
                    </if>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>
                                    <name><name>offsetEntry</name>.
                                        <name>dataOffset</name>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>BoundedInputStream</name>
                            </type>
                            <name>bis</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>BoundedInputStream</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>start</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ze</name>.
                                                            <name>getCompressedSize</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <switch>switch
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>ze</name>.
                                        <name>getMethod</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <case>case
                                <expr>
                                    <name><name>ZipEntry</name>.
                                        <name>STORED</name>
                                    </name>
                                </expr>
                                :
                                <return>return
                                    <expr>
                                        <name>bis</name>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <case>case
                                <expr>
                                    <name><name>ZipEntry</name>.
                                        <name>DEFLATED</name>
                                    </name>
                                </expr>
                                :
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>bis</name>.
                                                <name>addDummy</name>
                                            </name>
                                            <argument_list>()</argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <return>return
                                    <expr>new
                                        <call>
                                            <name>InflaterInputStream</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>bis</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>new
                                                        <call>
                                                            <name>Inflater</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>true</expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </return>
                            </case>
                            <default>default:
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ZipException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Found unsupported compression method "
                                                        +
                                                        <call>
                                                            <name><name>ze</name>.
                                                                <name>getMethod</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                            </default>
                            }
                        </block>
                    </switch>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CFH_LEN</name> =
                    <init>
                        <comment type="block">/* version made by */</comment>
                        <expr>
                            <name>SHORT</name>
                            <comment type="block">/* version needed to extract */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* general purpose bit flag */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* compression method */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* last mod file time */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* last mod file date */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* crc-32 */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* compressed size */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* uncompressed size */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* filename length */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* extra field length */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* file comment length */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* disk number start */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* internal file attributes */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* external file attributes */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* relative offset of local header */</comment>
                            +
                            <name>WORD</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Reads the central directory of the given archive and populates
                * the internal tables with ZipEntry instances.
                *
                * &lt;p&gt;The ZipEntrys will know all data that can be obtained from
                * the central directory alone, but not the data that requires the
                * local file header or additional data to be read.&lt;/p&gt;
                *
                * @return a Map&amp;lt;ZipEntry, NameAndComment&gt;&amp;gt; of
                * zipentries that didn't have the language encoding flag set when
                * read.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>Map</name>
                </type>
                <name>populateFromCentralDirectory</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>HashMap</name>
                            </type>
                            <name>noUTF8Flag</name> =
                            <init>
                                <expr>new
                                    <call>
                                        <name>HashMap</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <expr_stmt>
                        <expr>
                            <call>
                                <name>positionAtCentralDirectory</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>cfh</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>CFH_LEN</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>signatureBytes</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>WORD</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>readFully</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>signatureBytes</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>sig</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ZipLong</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>signatureBytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>long</name>
                            </type>
                            <name>cfhSig</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ZipLong</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>ZipOutputStream</name>.
                                                        <name>CFH_SIG</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>sig</name>
                                != <name>cfhSig</name> &amp;&amp;
                                <call>
                                    <name>startsWithLocalFileHeader</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>IOException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"central directory is empty, can't expand"
                                                        + " corrupt archive."
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <while>while
                        <condition>(
                            <expr>
                                <name>sig</name>
                                ==
                                <name>cfhSig</name>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cfh</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>off</name> =
                                    <init>
                                        <expr>0</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ZipEntry</name>
                                    </type>
                                    <name>ze</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>ZipEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>versionMadeBy</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfh</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setPlatform</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>(<name>versionMadeBy</name> &gt;&gt; <name>BYTE_SHIFT</name>)
                                                    &amp;
                                                    <name>NIBLET_MASK</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// skip version info</comment>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>int</name>
                                    </type>
                                    <name>generalPurposeFlag</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfh</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>boolean</name>
                                    </type>
                                    <name>hasUTF8Flag</name> =
                                    <init>
                                        <expr>(<name>generalPurposeFlag</name> &amp;
                                            <name><name>ZipOutputStream</name>.
                                                <name>UFT8_NAMES_FLAG</name>
                                            </name>
                                            ) != 0
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <specifier>final</specifier>
                                        <name>ZipEncoding</name>
                                    </type>
                                    <name>entryEncoding</name> =
                                    <init>
                                        <expr>
                                            <name>hasUTF8Flag</name>
                                            ?
                                            <name><name>ZipEncodingHelper</name>.
                                                <name>UTF8_ZIP_ENCODING</name>
                                            </name>
                                            :
                                            <name>zipEncoding</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setMethod</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipShort</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// FIXME this is actually not very cpu cycles friendly as we are
                                converting from
                            </comment>
                            <comment type="line">// dos to java while the underlying Sun implementation will convert
                            </comment>
                            <comment type="line">// from java to dos time for internal storage...</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>time</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name>dosToJavaTime</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <call>
                                                                <name><name>ZipLong</name>.
                                                                    <name>getValue</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <name>cfh</name>
                                                                        </expr>
                                                                    </argument>
                                                                    ,
                                                                    <argument>
                                                                        <expr>
                                                                            <name>off</name>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setTime</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>time</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>WORD</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setCrc</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipLong</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>WORD</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setCompressedSize</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipLong</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>WORD</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setSize</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipLong</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>WORD</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>fileNameLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfh</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>extraLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfh</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>commentLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfh</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// disk number</comment>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setInternalAttributes</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipShort</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>SHORT</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setExternalAttributes</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ZipLong</name>.
                                                            <name>getValue</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>cfh</name>
                                                                </expr>
                                                            </argument>
                                                            ,
                                                            <argument>
                                                                <expr>
                                                                    <name>off</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>off</name>
                                    +=
                                    <name>WORD</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>fileName</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <name>fileNameLen</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>fileName</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setName</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>entryEncoding</name>.
                                                            <name>decode</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>fileName</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <comment type="line">// LFH offset,</comment>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>OffsetEntry</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>new
                                            <call>
                                                <name>OffsetEntry</name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>offset</name>.
                                        <name>headerOffset</name>
                                    </name>
                                    =
                                    <call>
                                        <name><name>ZipLong</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cfh</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>off</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="line">// data offset will be filled later</comment>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>entries</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>ze</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>nameMap</name>.
                                            <name>put</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>ze</name>.
                                                            <name>getName</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name>ze</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>cdExtraData</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <name>extraLen</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cdExtraData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setCentralDirectoryExtra</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>cdExtraData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>comment</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <name>commentLen</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>comment</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setComment</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>entryEncoding</name>.
                                                            <name>decode</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>comment</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>signatureBytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>sig</name>
                                    =
                                    <call>
                                        <name><name>ZipLong</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>signatureBytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>!<name>hasUTF8Flag</name> &amp;&amp;
                                        <name>useUnicodeExtraFields</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>noUTF8Flag</name>.
                                                        <name>put</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ze</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>new
                                                                <call>
                                                                    <name>NameAndComment</name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>fileName</name>
                                                                            </expr>
                                                                        </argument>
                                                                        ,
                                                                        <argument>
                                                                            <expr>
                                                                                <name>comment</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    <return>return
                        <expr>
                            <name>noUTF8Flag</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MIN_EOCD_SIZE</name> =
                    <init>
                        <comment type="block">/* end of central dir signature */</comment>
                        <expr>
                            <name>WORD</name>
                            <comment type="block">/* number of this disk */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* number of the disk with the */</comment>
                            <comment type="block">/* start of the central directory */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* total number of entries in */</comment>
                            <comment type="block">/* the central dir on this disk */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* total number of entries in */</comment>
                            <comment type="block">/* the central dir */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* size of the central directory */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* offset of start of central */</comment>
                            <comment type="block">/* directory with respect to */</comment>
                            <comment type="block">/* the starting disk number */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* zipfile comment length */</comment>
                            +
                            <name>SHORT</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>MAX_EOCD_SIZE</name> =
                    <init>
                        <expr>
                            <name>MIN_EOCD_SIZE</name>
                            <comment type="block">/* maximum length of zipfile comment */</comment>
                            + 0xFFFF
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>int</name>
                    </type>
                    <name>CFD_LOCATOR_OFFSET</name> =
                    <init>
                        <comment type="block">/* end of central dir signature */</comment>
                        <expr>
                            <name>WORD</name>
                            <comment type="block">/* number of this disk */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* number of the disk with the */</comment>
                            <comment type="block">/* start of the central directory */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* total number of entries in */</comment>
                            <comment type="block">/* the central dir on this disk */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* total number of entries in */</comment>
                            <comment type="block">/* the central dir */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* size of the central directory */</comment>
                            +
                            <name>WORD</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Searches for the &amp;quot;End of central dir record&amp;quot;, parses
                * it and positions the stream at the first central directory
                * record.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>positionAtCentralDirectory</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>boolean</name>
                            </type>
                            <name>found</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>off</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>length</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                    -
                                    <name>MIN_EOCD_SIZE</name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>stopSearching</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Math</name>.
                                            <name>max</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>0L</expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <call>
                                                        <name><name>archive</name>.
                                                            <name>length</name>
                                                        </name>
                                                        <argument_list>()</argument_list>
                                                    </call>
                                                    -
                                                    <name>MAX_EOCD_SIZE</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>off</name>
                                &gt;= 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>archive</name>.
                                                <name>seek</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>off</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </type>
                                        <name>sig</name> =
                                        <init>
                                            <expr>
                                                <name><name>ZipOutputStream</name>.
                                                    <name>EOCD_SIG</name>
                                                </name>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>int</name>
                                        </type>
                                        <name>curr</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>archive</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <while>while
                                    <condition>(
                                        <expr>
                                            <name>off</name>
                                            &gt;= <name>stopSearching</name> &amp;&amp; <name>curr</name> != -1
                                        </expr>
                                        )
                                    </condition>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>curr</name>
                                                    ==
                                                    <name>
                                                        <name>sig</name>
                                                        <index>[
                                                            <expr>
                                                                <name>POS_0</name>
                                                            </expr>
                                                            ]
                                                        </index>
                                                    </name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>curr</name>
                                                            =
                                                            <call>
                                                                <name><name>archive</name>.
                                                                    <name>read</name>
                                                                </name>
                                                                <argument_list>()</argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <if>if
                                                        <condition>(
                                                            <expr>
                                                                <name>curr</name>
                                                                ==
                                                                <name>
                                                                    <name>sig</name>
                                                                    <index>[
                                                                        <expr>
                                                                            <name>POS_1</name>
                                                                        </expr>
                                                                        ]
                                                                    </index>
                                                                </name>
                                                            </expr>
                                                            )
                                                        </condition>
                                                        <then>
                                                            <block>{
                                                                <expr_stmt>
                                                                    <expr>
                                                                        <name>curr</name>
                                                                        =
                                                                        <call>
                                                                            <name><name>archive</name>.
                                                                                <name>read</name>
                                                                            </name>
                                                                            <argument_list>()</argument_list>
                                                                        </call>
                                                                    </expr>
                                                                    ;
                                                                </expr_stmt>
                                                                <if>if
                                                                    <condition>(
                                                                        <expr>
                                                                            <name>curr</name>
                                                                            ==
                                                                            <name>
                                                                                <name>sig</name>
                                                                                <index>[
                                                                                    <expr>
                                                                                        <name>POS_2</name>
                                                                                    </expr>
                                                                                    ]
                                                                                </index>
                                                                            </name>
                                                                        </expr>
                                                                        )
                                                                    </condition>
                                                                    <then>
                                                                        <block>{
                                                                            <expr_stmt>
                                                                                <expr>
                                                                                    <name>curr</name>
                                                                                    =
                                                                                    <call>
                                                                                        <name><name>archive</name>.
                                                                                            <name>read</name>
                                                                                        </name>
                                                                                        <argument_list>()
                                                                                        </argument_list>
                                                                                    </call>
                                                                                </expr>
                                                                                ;
                                                                            </expr_stmt>
                                                                            <if>if
                                                                                <condition>(
                                                                                    <expr>
                                                                                        <name>curr</name>
                                                                                        ==
                                                                                        <name>
                                                                                            <name>sig</name>
                                                                                            <index>[
                                                                                                <expr>
                                                                                                    <name>POS_3</name>
                                                                                                </expr>
                                                                                                ]
                                                                                            </index>
                                                                                        </name>
                                                                                    </expr>
                                                                                    )
                                                                                </condition>
                                                                                <then>
                                                                                    <block>{
                                                                                        <expr_stmt>
                                                                                            <expr>
                                                                                                <name>found</name>
                                                                                                = true
                                                                                            </expr>
                                                                                            ;
                                                                                        </expr_stmt>
                                                                                        <break>break;</break>
                                                                                        }
                                                                                    </block>
                                                                                </then>
                                                                            </if>
                                                                            }
                                                                        </block>
                                                                    </then>
                                                                </if>
                                                                }
                                                            </block>
                                                        </then>
                                                    </if>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name><name>archive</name>.
                                                        <name>seek</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>--
                                                                <name>off</name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>curr</name>
                                                =
                                                <call>
                                                    <name><name>archive</name>.
                                                        <name>read</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </while>
                                }
                            </block>
                        </then>
                    </if>
                    <if>if
                        <condition>(
                            <expr>!
                                <name>found</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ZipException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"archive is not a ZIP archive"</expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </then>
                    </if>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>seek</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>off</name>
                                            +
                                            <name>CFD_LOCATOR_OFFSET</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>cfdOffset</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>WORD</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>readFully</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>cfdOffset</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>seek</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name><name>ZipLong</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>cfdOffset</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Number of bytes in local file header up to the &amp;quot;length of
                * filename&amp;quot; entry.
                */
            </comment>
            <decl_stmt>
                <decl>
                    <type>
                        <specifier>private</specifier>
                        <specifier>static</specifier>
                        <specifier>final</specifier>
                        <name>long</name>
                    </type>
                    <name>LFH_OFFSET_FOR_FILENAME_LENGTH</name> =
                    <init>
                        <comment type="block">/* local file header signature */</comment>
                        <expr>
                            <name>WORD</name>
                            <comment type="block">/* version needed to extract */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* general purpose bit flag */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* compression method */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* last mod file time */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* last mod file date */</comment>
                            +
                            <name>SHORT</name>
                            <comment type="block">/* crc-32 */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* compressed size */</comment>
                            +
                            <name>WORD</name>
                            <comment type="block">/* uncompressed size */</comment>
                            +
                            <name>WORD</name>
                        </expr>
                    </init>
                </decl>
                ;
            </decl_stmt>

            <comment type="javadoc">/**
                * Walks through all recorded entries and adds the data available
                * from the local file header.
                *
                * &lt;p&gt;Also records the offsets for the data to read from the
                * entries.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>resolveLocalFileHeaderData</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>Map</name>
                            </type>
                            <name>entriesWithoutUTF8Flag</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Enumeration</name>
                            </type>
                            <name>e</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getEntries</name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <while>while
                        <condition>(
                            <expr>
                                <call>
                                    <name><name>e</name>.
                                        <name>hasMoreElements</name>
                                    </name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <block>{
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>ZipEntry</name>
                                    </type>
                                    <name>ze</name> =
                                    <init>
                                        <expr>(<name>ZipEntry</name>)
                                            <call>
                                                <name><name>e</name>.
                                                    <name>nextElement</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>OffsetEntry</name>
                                    </type>
                                    <name>offsetEntry</name> =
                                    <init>
                                        <expr>(<name>OffsetEntry</name>)
                                            <call>
                                                <name><name>entries</name>.
                                                    <name>get</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>ze</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>offset</name> =
                                    <init>
                                        <expr>
                                            <name><name>offsetEntry</name>.
                                                <name>headerOffset</name>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>seek</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>offset</name>
                                                    +
                                                    <name>LFH_OFFSET_FOR_FILENAME_LENGTH</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>b</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <name>SHORT</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>fileNameLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>b</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>b</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>extraFieldLen</name> =
                                    <init>
                                        <expr>
                                            <call>
                                                <name><name>ZipShort</name>.
                                                    <name>getValue</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>b</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>lenToSkip</name> =
                                    <init>
                                        <expr>
                                            <name>fileNameLen</name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <while>while
                                <condition>(
                                    <expr>
                                        <name>lenToSkip</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <block>{
                                    <decl_stmt>
                                        <decl>
                                            <type>
                                                <name>int</name>
                                            </type>
                                            <name>skipped</name> =
                                            <init>
                                                <expr>
                                                    <call>
                                                        <name><name>archive</name>.
                                                            <name>skipBytes</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>lenToSkip</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                            </init>
                                        </decl>
                                        ;
                                    </decl_stmt>
                                    <if>if
                                        <condition>(
                                            <expr>
                                                <name>skipped</name>
                                                &lt;= 0
                                            </expr>
                                            )
                                        </condition>
                                        <then>
                                            <block>{
                                                <throw>throw
                                                    <expr>new
                                                        <call>
                                                            <name>RuntimeException</name>
                                                            <argument_list>(
                                                                <argument>
                                                                    <expr>"failed to skip file name in"
                                                                        + " local file header"
                                                                    </expr>
                                                                </argument>
                                                                )
                                                            </argument_list>
                                                        </call>
                                                    </expr>
                                                    ;
                                                </throw>
                                                }
                                            </block>
                                        </then>
                                    </if>
                                    <expr_stmt>
                                        <expr>
                                            <name>lenToSkip</name>
                                            -=
                                            <name>skipped</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </while>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>byte</name>
                                        <index>[]</index>
                                    </type>
                                    <name>localExtraData</name> =
                                    <init>
                                        <expr>new
                                            <name>
                                                <name>byte</name>
                                                <index>[
                                                    <expr>
                                                        <name>extraFieldLen</name>
                                                    </expr>
                                                    ]
                                                </index>
                                            </name>
                                        </expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>archive</name>.
                                            <name>readFully</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>localExtraData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>setExtra</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>localExtraData</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </expr_stmt>
                            <comment type="block">/*dataOffsets.put(ze,
                                new Long(offset + LFH_OFFSET_FOR_FILENAME_LENGTH
                                + SHORT + SHORT + fileNameLen + extraFieldLen));
                                */
                            </comment>
                            <expr_stmt>
                                <expr>
                                    <name><name>offsetEntry</name>.
                                        <name>dataOffset</name>
                                    </name>
                                    = <name>offset</name> +
                                    <name>LFH_OFFSET_FOR_FILENAME_LENGTH</name>
                                    + <name>SHORT</name> + <name>SHORT</name> + <name>fileNameLen</name> +
                                    <name>extraFieldLen</name>
                                </expr>
                                ;
                            </expr_stmt>

                            <if>if
                                <condition>(
                                    <expr>
                                        <call>
                                            <name><name>entriesWithoutUTF8Flag</name>.
                                                <name>containsKey</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>ze</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <call>
                                                    <name>setNameAndCommentFromExtraFields</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>ze</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>(<name>NameAndComment</name>)
                                                                <call>
                                                                    <name><name>entriesWithoutUTF8Flag</name>.
                                                                        <name>get</name>
                                                                    </name>
                                                                    <argument_list>(
                                                                        <argument>
                                                                            <expr>
                                                                                <name>ze</name>
                                                                            </expr>
                                                                        </argument>
                                                                        )
                                                                    </argument_list>
                                                                </call>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </while>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Convert a DOS date/time field to a Date object.
                *
                * @param zipDosTime contains the stored DOS time.
                * @return a Date instance corresponding to the given time.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <specifier>static</specifier>
                    <name>Date</name>
                </type>
                <name>fromDosTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ZipLong</name>
                            </type>
                            <name>zipDosTime</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>dosTime</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>zipDosTime</name>.
                                            <name>getValue</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <return>return
                        <expr>new
                            <call>
                                <name>Date</name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <call>
                                                <name>dosToJavaTime</name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dosTime</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="block">/*
                * Converts DOS time to Java time (number of milliseconds since epoch).
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <specifier>static</specifier>
                    <name>long</name>
                </type>
                <name>dosToJavaTime</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>long</name>
                            </type>
                            <name>dosTime</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>Calendar</name>
                            </type>
                            <name>cal</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>Calendar</name>.
                                            <name>getInstance</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <comment type="line">// CheckStyle:MagicNumberCheck OFF - no point</comment>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>YEAR</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>dosTime</name> &gt;&gt; 25) &amp; 0x7f
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            + 1980
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>MONTH</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>(<name>dosTime</name> &gt;&gt; 21) &amp; 0x0f
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            - 1
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>DATE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dosTime</name>
                                                            &gt;&gt; 16
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0x1f
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>HOUR_OF_DAY</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dosTime</name>
                                                            &gt;&gt; 11
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0x1f
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>MINUTE</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dosTime</name>
                                                            &gt;&gt; 5
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0x3f
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>set</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name><name>Calendar</name>.
                                                <name>SECOND</name>
                                            </name>
                                        </expr>
                                    </argument>
                                    ,
                                    <argument>
                                        <expr>
                                            <call>(<name>int</name>)
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>dosTime</name>
                                                            &lt;&lt; 1
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                            &amp; 0x3e
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <comment type="line">// CheckStyle:MagicNumberCheck ON</comment>
                    <return>return
                        <expr>
                            <call>
                                <name><name>cal</name>.
                                    <name>getTime</name>
                                </name>
                                <argument_list>()</argument_list>
                            </call>
                            .
                            <call>
                                <name>getTime</name>
                                <argument_list>()</argument_list>
                            </call>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>


            <comment type="javadoc">/**
                * Retrieve a String from the given bytes using the encoding set
                * for this ZipFile.
                *
                * @param bytes the byte array to transform
                * @return String obtained by using the given encoding
                * @throws ZipException if the encoding cannot be recognized.
                */
            </comment>
            <function>
                <type>
                    <specifier>protected</specifier>
                    <name>String</name>
                </type>
                <name>getString</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>bytes</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>ZipException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <try>try
                        <block>{
                            <return>return
                                <expr>
                                    <call>
                                        <name><name>ZipEncodingHelper</name>.
                                            <name>getZipEncoding</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>encoding</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                    .
                                    <call>
                                        <name>decode</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>bytes</name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                        <catch>catch (
                            <param>
                                <decl>
                                    <type>
                                        <name>IOException</name>
                                    </type>
                                    <name>ex</name>
                                </decl>
                            </param>
                            )
                            <block>{
                                <throw>throw
                                    <expr>new
                                        <call>
                                            <name>ZipException</name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>"Failed to decode name: " +
                                                        <call>
                                                            <name><name>ex</name>.
                                                                <name>getMessage</name>
                                                            </name>
                                                            <argument_list>()</argument_list>
                                                        </call>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </throw>
                                }
                            </block>
                        </catch>
                    </try>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * Checks whether the archive starts with a LFH. If it doesn't,
                * it may be an empty archive.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>boolean</name>
                </type>
                <name>startsWithLocalFileHeader</name>
                <parameter_list>()</parameter_list>
                <throws>throws
                    <argument>
                        <expr>
                            <name>IOException</name>
                        </expr>
                    </argument>
                </throws>
                <block>{
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>seek</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>0</expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>start</name> =
                            <init>
                                <expr>new
                                    <name>
                                        <name>byte</name>
                                        <index>[
                                            <expr>
                                                <name>WORD</name>
                                            </expr>
                                            ]
                                        </index>
                                    </name>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <expr_stmt>
                        <expr>
                            <call>
                                <name><name>archive</name>.
                                    <name>readFully</name>
                                </name>
                                <argument_list>(
                                    <argument>
                                        <expr>
                                            <name>start</name>
                                        </expr>
                                    </argument>
                                    )
                                </argument_list>
                            </call>
                        </expr>
                        ;
                    </expr_stmt>
                    <for>for (
                        <init>
                            <decl>
                                <type>
                                    <name>int</name>
                                </type>
                                <name>i</name> =
                                <init>
                                    <expr>0</expr>
                                </init>
                            </decl>
                            ;
                        </init>
                        <condition>
                            <expr>
                                <name>i</name>
                                &lt;
                                <name><name>start</name>.
                                    <name>length</name>
                                </name>
                            </expr>
                            ;
                        </condition>
                        <incr>
                            <expr><name>i</name>++
                            </expr>
                        </incr>
                        )
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>
                                            <name>start</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                        !=
                                        <name><name>ZipOutputStream</name>.
                                            <name>LFH_SIG</name>
                                            <index>[
                                                <expr>
                                                    <name>i</name>
                                                </expr>
                                                ]
                                            </index>
                                        </name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>false</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            }
                        </block>
                    </for>
                    <return>return <expr>true</expr>;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If the entry has Unicode*ExtraFields and the CRCs of the
                * names/comments match those of the extra fields, transfer the
                * known Unicode values from the extra field.
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>void</name>
                </type>
                <name>setNameAndCommentFromExtraFields</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>ZipEntry</name>
                            </type>
                            <name>ze</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>NameAndComment</name>
                            </type>
                            <name>nc</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>UnicodePathExtraField</name>
                            </type>
                            <name>name</name> =
                            <init>
                                <expr>(<name>UnicodePathExtraField</name>)
                                    <call>
                                        <name><name>ze</name>.
                                            <name>getExtraField</name>
                                        </name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name><name>UnicodePathExtraField</name>.
                                                        <name>UPATH_ID</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>originalName</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name><name>ze</name>.
                                            <name>getName</name>
                                        </name>
                                        <argument_list>()</argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <name>String</name>
                            </type>
                            <name>newName</name> =
                            <init>
                                <expr>
                                    <call>
                                        <name>getUnicodeStringIfOriginalMatches</name>
                                        <argument_list>(
                                            <argument>
                                                <expr>
                                                    <name>name</name>
                                                </expr>
                                            </argument>
                                            ,
                                            <argument>
                                                <expr>
                                                    <name><name>nc</name>.
                                                        <name>name</name>
                                                    </name>
                                                </expr>
                                            </argument>
                                            )
                                        </argument_list>
                                    </call>
                                </expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>
                    <if>if
                        <condition>(
                            <expr>
                                <name>newName</name>
                                != <name>null</name> &amp;&amp; !
                                <call>
                                    <name><name>originalName</name>.
                                        <name>equals</name>
                                    </name>
                                    <argument_list>(
                                        <argument>
                                            <expr>
                                                <name>newName</name>
                                            </expr>
                                        </argument>
                                        )
                                    </argument_list>
                                </call>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>ze</name>.
                                                <name>setName</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>nameMap</name>.
                                                <name>remove</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>originalName</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>nameMap</name>.
                                                <name>put</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>newName</name>
                                                    </expr>
                                                </argument>
                                                ,
                                                <argument>
                                                    <expr>
                                                        <name>ze</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                }
                            </block>
                        </then>
                    </if>

                    <if>if
                        <condition>(
                            <expr>
                                <name><name>nc</name>.
                                    <name>comment</name>
                                </name>
                                != <name>null</name> &amp;&amp;
                                <name><name>nc</name>.<name>comment</name>.
                                    <name>length</name>
                                </name>
                                &gt; 0
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>UnicodeCommentExtraField</name>
                                        </type>
                                        <name>cmt</name> =
                                        <init>
                                            <expr>(<name>UnicodeCommentExtraField</name>)
                                                <call>
                                                    <name><name>ze</name>.
                                                        <name>getExtraField</name>
                                                    </name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name><name>UnicodeCommentExtraField</name>.
                                                                    <name>UCOM_ID</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>String</name>
                                        </type>
                                        <name>newComment</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name>getUnicodeStringIfOriginalMatches</name>
                                                    <argument_list>(
                                                        <argument>
                                                            <expr>
                                                                <name>cmt</name>
                                                            </expr>
                                                        </argument>
                                                        ,
                                                        <argument>
                                                            <expr>
                                                                <name><name>nc</name>.
                                                                    <name>comment</name>
                                                                </name>
                                                            </expr>
                                                        </argument>
                                                        )
                                                    </argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>newComment</name>
                                            !=
                                            <name>null</name>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <expr_stmt>
                                                <expr>
                                                    <call>
                                                        <name><name>ze</name>.
                                                            <name>setComment</name>
                                                        </name>
                                                        <argument_list>(
                                                            <argument>
                                                                <expr>
                                                                    <name>newComment</name>
                                                                </expr>
                                                            </argument>
                                                            )
                                                        </argument_list>
                                                    </call>
                                                </expr>
                                                ;
                                            </expr_stmt>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * If the stored CRC matches the one of the given name, return the
                * Unicode name of the given field.
                *
                * &lt;p&gt;If the field is null or the CRCs don't match, return null
                * instead.&lt;/p&gt;
                */
            </comment>
            <function>
                <type>
                    <specifier>private</specifier>
                    <name>String</name>
                </type>
                <name>getUnicodeStringIfOriginalMatches</name>
                <parameter_list>(
                    <param>
                        <decl>
                            <type>
                                <name>AbstractUnicodeExtraField</name>
                            </type>
                            <name>f</name>
                        </decl>
                    </param>
                    ,
                    <param>
                        <decl>
                            <type>
                                <name>
                                    <name>byte</name>
                                    <index>[]</index>
                                </name>
                            </type>
                            <name>orig</name>
                        </decl>
                    </param>
                    )
                </parameter_list>
                <block>{
                    <if>if
                        <condition>(
                            <expr>
                                <name>f</name>
                                !=
                                <name>null</name>
                            </expr>
                            )
                        </condition>
                        <then>
                            <block>{
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>CRC32</name>
                                        </type>
                                        <name>crc32</name> =
                                        <init>
                                            <expr>new
                                                <call>
                                                    <name>CRC32</name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>
                                <expr_stmt>
                                    <expr>
                                        <call>
                                            <name><name>crc32</name>.
                                                <name>update</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>orig</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                    ;
                                </expr_stmt>
                                <decl_stmt>
                                    <decl>
                                        <type>
                                            <name>long</name>
                                        </type>
                                        <name>origCRC32</name> =
                                        <init>
                                            <expr>
                                                <call>
                                                    <name><name>crc32</name>.
                                                        <name>getValue</name>
                                                    </name>
                                                    <argument_list>()</argument_list>
                                                </call>
                                            </expr>
                                        </init>
                                    </decl>
                                    ;
                                </decl_stmt>

                                <if>if
                                    <condition>(
                                        <expr>
                                            <name>origCRC32</name>
                                            ==
                                            <call>
                                                <name><name>f</name>.
                                                    <name>getNameCRC32</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        )
                                    </condition>
                                    <then>
                                        <block>{
                                            <try>try
                                                <block>{
                                                    <return>return
                                                        <expr>
                                                            <call>
                                                                <name>
                                                                    <name>ZipEncodingHelper</name>
                                                                    .<name>UTF8_ZIP_ENCODING</name>.
                                                                    <name>decode</name>
                                                                </name>
                                                                <argument_list>(
                                                                    <argument>
                                                                        <expr>
                                                                            <call>
                                                                                <name><name>f</name>.
                                                                                    <name>getUnicodeName</name>
                                                                                </name>
                                                                                <argument_list>()</argument_list>
                                                                            </call>
                                                                        </expr>
                                                                    </argument>
                                                                    )
                                                                </argument_list>
                                                            </call>
                                                        </expr>
                                                        ;
                                                    </return>
                                                    }
                                                </block>
                                                <catch>catch (
                                                    <param>
                                                        <decl>
                                                            <type>
                                                                <name>IOException</name>
                                                            </type>
                                                            <name>ex</name>
                                                        </decl>
                                                    </param>
                                                    )
                                                    <block>{
                                                        <comment type="line">// UTF-8 unsupported? should be impossible
                                                            the
                                                        </comment>
                                                        <comment type="line">// Unicode*ExtraField must contain some bad
                                                            bytes
                                                        </comment>

                                                        <comment type="line">// TODO log this anywhere?</comment>
                                                        <return>return
                                                            <expr>
                                                                <name>null</name>
                                                            </expr>
                                                            ;
                                                        </return>
                                                        }
                                                    </block>
                                                </catch>
                                            </try>
                                            }
                                        </block>
                                    </then>
                                </if>
                                }
                            </block>
                        </then>
                    </if>
                    <return>return
                        <expr>
                            <name>null</name>
                        </expr>
                        ;
                    </return>
                    }
                </block>
            </function>

            <comment type="javadoc">/**
                * InputStream that delegates requests to the underlying
                * RandomAccessFile, making sure that only bytes from a certain
                * range can be read.
                */
            </comment>
            <class>
                <specifier>private</specifier>
                class <name>BoundedInputStream</name>
                <super>
                    <extends>extends
                        <name>InputStream</name>
                    </extends>
                </super>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>long</name>
                            </type>
                            <name>remaining</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>long</name>
                            </type>
                            <name>loc</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <name>boolean</name>
                            </type>
                            <name>addDummyByte</name> =
                            <init>
                                <expr>false</expr>
                            </init>
                        </decl>
                        ;
                    </decl_stmt>

                    <constructor>
                        <name>BoundedInputStream</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>start</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>long</name>
                                    </type>
                                    <name>remaining</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>remaining</name>
                                    </name>
                                    =
                                    <name>remaining</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>loc</name>
                                    =
                                    <name>start</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>read</name>
                        <parameter_list>()</parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr><name>remaining</name>-- &lt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>addDummyByte</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>addDummyByte</name>
                                                            = false
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return <expr>0</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>
                            <synchronized>synchronized (
                                <expr>
                                    <name>archive</name>
                                </expr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>archive</name>.
                                                    <name>seek</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr><name>loc</name>++
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <return>return
                                        <expr>
                                            <call>
                                                <name><name>archive</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>()</argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </return>
                                    }
                                </block>
                            </synchronized>
                            }
                        </block>
                    </function>

                    <function>
                        <type>
                            <specifier>public</specifier>
                            <name>int</name>
                        </type>
                        <name>read</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>b</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>off</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>len</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <throws>throws
                            <argument>
                                <expr>
                                    <name>IOException</name>
                                </expr>
                            </argument>
                        </throws>
                        <block>{
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>remaining</name>
                                        &lt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <if>if
                                            <condition>(
                                                <expr>
                                                    <name>addDummyByte</name>
                                                </expr>
                                                )
                                            </condition>
                                            <then>
                                                <block>{
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>addDummyByte</name>
                                                            = false
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <expr_stmt>
                                                        <expr>
                                                            <name>
                                                                <name>b</name>
                                                                <index>[
                                                                    <expr>
                                                                        <name>off</name>
                                                                    </expr>
                                                                    ]
                                                                </index>
                                                            </name>
                                                            = 0
                                                        </expr>
                                                        ;
                                                    </expr_stmt>
                                                    <return>return <expr>1</expr>;
                                                    </return>
                                                    }
                                                </block>
                                            </then>
                                        </if>
                                        <return>return <expr>-1</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>len</name>
                                        &lt;= 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <return>return <expr>0</expr>;
                                        </return>
                                        }
                                    </block>
                                </then>
                            </if>

                            <if>if
                                <condition>(
                                    <expr>
                                        <name>len</name>
                                        &gt;
                                        <name>remaining</name>
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>len</name>
                                                = (<name>int</name>)
                                                <name>remaining</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <decl_stmt>
                                <decl>
                                    <type>
                                        <name>int</name>
                                    </type>
                                    <name>ret</name> =
                                    <init>
                                        <expr>-1</expr>
                                    </init>
                                </decl>
                                ;
                            </decl_stmt>
                            <synchronized>synchronized (
                                <expr>
                                    <name>archive</name>
                                </expr>
                                )
                                <block>{
                                    <expr_stmt>
                                        <expr>
                                            <call>
                                                <name><name>archive</name>.
                                                    <name>seek</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>loc</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <name>ret</name>
                                            =
                                            <call>
                                                <name><name>archive</name>.
                                                    <name>read</name>
                                                </name>
                                                <argument_list>(
                                                    <argument>
                                                        <expr>
                                                            <name>b</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>off</name>
                                                        </expr>
                                                    </argument>
                                                    ,
                                                    <argument>
                                                        <expr>
                                                            <name>len</name>
                                                        </expr>
                                                    </argument>
                                                    )
                                                </argument_list>
                                            </call>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    }
                                </block>
                            </synchronized>
                            <if>if
                                <condition>(
                                    <expr>
                                        <name>ret</name>
                                        &gt; 0
                                    </expr>
                                    )
                                </condition>
                                <then>
                                    <block>{
                                        <expr_stmt>
                                            <expr>
                                                <name>loc</name>
                                                +=
                                                <name>ret</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        <expr_stmt>
                                            <expr>
                                                <name>remaining</name>
                                                -=
                                                <name>ret</name>
                                            </expr>
                                            ;
                                        </expr_stmt>
                                        }
                                    </block>
                                </then>
                            </if>
                            <return>return
                                <expr>
                                    <name>ret</name>
                                </expr>
                                ;
                            </return>
                            }
                        </block>
                    </function>

                    <comment type="javadoc">/**
                        * Inflater needs an extra dummy byte for nowrap - see
                        * Inflater's javadocs.
                        */
                    </comment>
                    <function>
                        <type>
                            <name>void</name>
                        </type>
                        <name>addDummy</name>
                        <parameter_list>()</parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name>addDummyByte</name>
                                    = true
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </function>
                    }
                </block>
            </class>

            <class>
                <specifier>private</specifier>
                <specifier>static</specifier>
                <specifier>final</specifier> class <name>NameAndComment</name>
                <block>{
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>name</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <decl_stmt>
                        <decl>
                            <type>
                                <specifier>private</specifier>
                                <specifier>final</specifier>
                                <name>byte</name>
                                <index>[]</index>
                            </type>
                            <name>comment</name>
                        </decl>
                        ;
                    </decl_stmt>
                    <constructor>
                        <specifier>private</specifier>
                        <name>NameAndComment</name>
                        <parameter_list>(
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>name</name>
                                </decl>
                            </param>
                            ,
                            <param>
                                <decl>
                                    <type>
                                        <name>
                                            <name>byte</name>
                                            <index>[]</index>
                                        </name>
                                    </type>
                                    <name>comment</name>
                                </decl>
                            </param>
                            )
                        </parameter_list>
                        <block>{
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>name</name>
                                    </name>
                                    =
                                    <name>name</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name><name>this</name>.
                                        <name>comment</name>
                                    </name>
                                    =
                                    <name>comment</name>
                                </expr>
                                ;
                            </expr_stmt>
                            }
                        </block>
                    </constructor>
                    }
                </block>
            </class>
            }
        </block>
    </class>
</unit>
