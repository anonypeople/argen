<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\digest\B64.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<comment type="javadoc">/**
 * Base64 like method to convert binary bytes into ASCII chars.
 *
 * TODO: Can Base64 be reused?
 *
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 * &lt;/p&gt;
 *
 * @version $Id: B64.java 1435550 2013-01-19 14:09:52Z tn $
 * @since 1.7
 */</comment>
<class>class <name>B64</name> <block>{

    <comment type="javadoc">/**
     * Table with characters for Base64 transformation.
     */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>B64T</name> =<init> <expr>"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Base64 like conversion of bytes to ASCII chars.
     *
     * @param b2
     *            A byte from the result.
     * @param b1
     *            A byte from the result.
     * @param b0
     *            A byte from the result.
     * @param outLen
     *            The number of expected output chars.
     * @param buffer
     *            Where the output chars is appended to.
     */</comment>
    <function><type><specifier>static</specifier> <name>void</name></type> <name>b64from24bit</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b2</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b0</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>outLen</name></decl></param>,
                             <param><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// The bit masking is necessary because the JVM byte type is signed!</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> =<init> <expr>((<name>b2</name> &lt;&lt; 16) &amp; 0x00ffffff) | ((<name>b1</name> &lt;&lt; 8) &amp; 0x00ffff) | (<name>b0</name> &amp; 0xff)</expr></init></decl>;</decl_stmt>
        <comment type="line">// It's effectively a "for" loop but kept to resemble the original C code.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><name>outLen</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>n</name>-- &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>buffer</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>B64T</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>w</name> &amp; 0x3f</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>w</name> &gt;&gt;= 6</expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a string of random chars from the B64T set.
     *
     * @param num
     *            Number of chars to generate.
     */</comment>
    <function><type><specifier>static</specifier> <name>String</name></type> <name>getRandomSalt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>num</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>saltString</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <name>num</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>saltString</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>B64T</name>.<name>charAt</name></name><argument_list>(<argument><expr>new <call><name>Random</name><argument_list>()</argument_list></call>.<call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>B64T</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name><name>saltString</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
