<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Base32OutputStreamTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>Base32OutputStreamTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>CRLF</name> =<init> <expr><block>{<expr>(<name>byte</name>) '\r'</expr>, <expr>(<name>byte</name>) '\n'</expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>LF</name> =<init> <expr><block>{<expr>(<name>byte</name>) '\n'</expr>}</block></expr></init></decl>;</decl_stmt>



<comment type="line">//    /**</comment>
<comment type="line">//     * Test the Base32OutputStream implementation against the special NPE inducing input</comment>
<comment type="line">//     * identified in the CODEC-98 bug.</comment>
<comment type="line">//     *</comment>
<comment type="line">//     * @throws Exception for some failure scenarios.</comment>
<comment type="line">//     */</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testCodec98NPE() throws Exception {</comment>
<comment type="line">//        byte[] codec98 = StringUtils.getBytesUtf8(Base32TestData.CODEC_98_NPE);</comment>
<comment type="line">//        byte[] codec98_1024 = new byte[1024];</comment>
<comment type="line">//        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);</comment>
<comment type="line">//        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);</comment>
<comment type="line">//        Base32OutputStream stream = new Base32OutputStream(data, false);</comment>
<comment type="line">//        stream.write(codec98_1024, 0, 1024);</comment>
<comment type="line">//        stream.close();</comment>
<comment type="line">//</comment>
<comment type="line">//        byte[] decodedBytes = data.toByteArray();</comment>
<comment type="line">//        String decoded = StringUtils.newStringUtf8(decodedBytes);</comment>
<comment type="line">//        assertEquals(</comment>
<comment type="line">//            "codec-98 NPE Base32OutputStream", Base32TestData.CODEC_98_NPE_DECODED, decoded</comment>
<comment type="line">//        );</comment>
<comment type="line">//    }</comment>


    <comment type="javadoc">/**
     * Test the Base32OutputStream implementation against empty input.
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32EmptyOutputStreamMimeChunkSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testBase32EmptyOutputStream</name><argument_list>(<argument><expr><name><name>BaseNCodec</name>.<name>MIME_CHUNK_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test the Base32OutputStream implementation against empty input.
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32EmptyOutputStreamPemChunkSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testBase32EmptyOutputStream</name><argument_list>(<argument><expr><name><name>BaseNCodec</name>.<name>PEM_CHUNK_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testBase32EmptyOutputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>chunkSize</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>emptyEncoded</name> =<init> <expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>emptyDecoded</name> =<init> <expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testByteByByte</name><argument_list>(<argument><expr><name>emptyEncoded</name></expr></argument>, <argument><expr><name>emptyDecoded</name></expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testByChunk</name><argument_list>(<argument><expr><name>emptyEncoded</name></expr></argument>, <argument><expr><name>emptyDecoded</name></expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test the Base32OutputStream implementation
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32OutputStreamByChunk</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// Hello World test.</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name><name>Base32TestData</name>.<name>BASE32_FIXTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>decoded</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name><name>Base32TestData</name>.<name>STRING_FIXTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testByChunk</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr><name><name>BaseNCodec</name>.<name>MIME_CHUNK_SIZE</name></name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        // Single Byte test.</comment>
<comment type="line">//        encoded = StringUtils.getBytesUtf8("AA==\r\n");</comment>
<comment type="line">//        decoded = new byte[]{(byte) 0};</comment>
<comment type="line">//        testByChunk(encoded, decoded, Base32.MIME_CHUNK_SIZE, CRLF);</comment>


<comment type="line">//        // Single Line test.</comment>
<comment type="line">//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll("\n", "");</comment>
<comment type="line">//        encoded = StringUtils.getBytesUtf8(singleLine);</comment>
<comment type="line">//        decoded = Base32TestData.DECODED;</comment>
<comment type="line">//        testByChunk(encoded, decoded, 0, LF);</comment>

        <comment type="line">// test random data of sizes 0 thru 150</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BaseNCodec</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 150</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>randomData</name> =<init> <expr><call><name><name>Base32TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>encoded</name> = <name><name>randomData</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>decoded</name> = <name><name>randomData</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testByChunk</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Test the Base32OutputStream implementation
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32OutputStreamByteByByte</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// Hello World test.</comment>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name><name>Base32TestData</name>.<name>BASE32_FIXTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>decoded</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name><name>Base32TestData</name>.<name>STRING_FIXTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testByteByByte</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr>76</expr></argument>, <argument><expr><name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        // Single Byte test.</comment>
<comment type="line">//        encoded = StringUtils.getBytesUtf8("AA==\r\n");</comment>
<comment type="line">//        decoded = new byte[]{(byte) 0};</comment>
<comment type="line">//        testByteByByte(encoded, decoded, 76, CRLF);</comment>


<comment type="line">//        // Single Line test.</comment>
<comment type="line">//        String singleLine = Base32TestData.ENCODED_64_CHARS_PER_LINE.replaceAll("\n", "");</comment>
<comment type="line">//        encoded = StringUtils.getBytesUtf8(singleLine);</comment>
<comment type="line">//        decoded = Base32TestData.DECODED;</comment>
<comment type="line">//        testByteByByte(encoded, decoded, 0, LF);</comment>

        <comment type="line">// test random data of sizes 0 thru 150</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BaseNCodec</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 150</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>randomData</name> =<init> <expr><call><name><name>Base32TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>encoded</name> = <name><name>randomData</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>decoded</name> = <name><name>randomData</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testByteByByte</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>LF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--&gt; decoded 2. decoded ---[ENCODE]--&gt;
     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --&gt; decoded
     * &lt;p/&gt;
     * By "[WRAP-WRAP-WRAP-etc...]" we mean situation where the Base32OutputStream wraps itself in encode and decode
     * mode over and over again.
     *
     * @param encoded
     *            Base32 encoded data
     * @param decoded
     *            the data from above, but decoded
     * @param chunkSize
     *            chunk size (line-length) of the Base32 encoded data.
     * @param separator
     *            Line separator in the Base32 encoded data.
     * @throws Exception
     *             Usually signifies a bug in the Base32 commons-codec implementation.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>testByChunk</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encoded</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decoded</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>chunkSize</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>separator</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <comment type="line">// Start with encode.</comment>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>byteOut</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>byteOut</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>output</name> =<init> <expr><call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming chunked Base32 encode"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now let's try decode.</comment>
        <expr_stmt><expr><name>byteOut</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>byteOut</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming chunked Base32 decode"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// I always wanted to do this! (wrap encoder with decoder etc etc).</comment>
        <expr_stmt><expr><name>byteOut</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = <name>byteOut</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming chunked Base32 wrap-wrap-wrap!"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test method does three tests on the supplied data: 1. encoded ---[DECODE]--&gt; decoded 2. decoded ---[ENCODE]--&gt;
     * encoded 3. decoded ---[WRAP-WRAP-WRAP-etc...] --&gt; decoded
     * &lt;p/&gt;
     * By "[WRAP-WRAP-WRAP-etc...]" we mean situation where the Base32OutputStream wraps itself in encode and decode
     * mode over and over again.
     *
     * @param encoded
     *            Base32 encoded data
     * @param decoded
     *            the data from above, but decoded
     * @param chunkSize
     *            chunk size (line-length) of the Base32 encoded data.
     * @param separator
     *            Line separator in the Base32 encoded data.
     * @throws Exception
     *             Usually signifies a bug in the Base32 commons-codec implementation.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>testByteByByte</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>encoded</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>decoded</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>chunkSize</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>separator</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <comment type="line">// Start with encode.</comment>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>byteOut</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>byteOut</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>element</name> :<range> <expr><name>decoded</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>output</name> =<init> <expr><call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming byte-by-byte Base32 encode"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now let's try decode.</comment>
        <expr_stmt><expr><name>byteOut</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>byteOut</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>element</name> :<range> <expr><name>encoded</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming byte-by-byte Base32 decode"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now let's try decode with tonnes of flushes.</comment>
        <expr_stmt><expr><name>byteOut</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>byteOut</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>element</name> :<range> <expr><name>encoded</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming byte-by-byte flush() Base32 decode"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// I always wanted to do this! (wrap encoder with decoder etc etc).</comment>
        <expr_stmt><expr><name>byteOut</name> = new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> = <name>byteOut</name></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name> = new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>element</name> :<range> <expr><name>decoded</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>output</name> = <call><name><name>byteOut</name>.<name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Streaming byte-by-byte Base32 wrap-wrap-wrap!"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests Base32OutputStream.write for expected IndexOutOfBoundsException conditions.
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWriteOutOfBounds</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1024</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>bout</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base32OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>bout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected Base32OutputStream.write(buf, -1, 1) to throw a IndexOutOfBoundsException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IndexOutOfBoundsException</name></type> <name>ioobe</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected Base32OutputStream.write(buf, 1, -1) to throw a IndexOutOfBoundsException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IndexOutOfBoundsException</name></type> <name>ioobe</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected Base32OutputStream.write(buf, buf.length + 1, 0) to throw a IndexOutOfBoundsException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IndexOutOfBoundsException</name></type> <name>ioobe</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> - 1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected Base32OutputStream.write(buf, buf.length - 1, 2) to throw a IndexOutOfBoundsException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IndexOutOfBoundsException</name></type> <name>ioobe</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests Base32OutputStream.write(null).
     *
     * @throws Exception
     *             for some failure scenarios.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWriteToNullCoverage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ByteArrayOutputStream</name></type> <name>bout</name> =<init> <expr>new <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base32OutputStream</name></type> <name>out</name> =<init> <expr>new <call><name>Base32OutputStream</name><argument_list>(<argument><expr><name>bout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expcted Base32OutputStream.write(null) to throw a NullPointerException"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NullPointerException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
