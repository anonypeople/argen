<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Base32Test.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>Base32Test</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name> <index>[]</index><index>[]</index></type> <name>BASE32_TEST_CASES</name> =<init> <expr><block>{ <comment type="line">// RFC 4648</comment>
        <expr><block>{<expr>""</expr>       ,<expr>""</expr>}</block></expr>,
        <expr><block>{<expr>"f"</expr>      ,<expr>"MY======"</expr>}</block></expr>,
        <expr><block>{<expr>"fo"</expr>     ,<expr>"MZXQ===="</expr>}</block></expr>,
        <expr><block>{<expr>"foo"</expr>    ,<expr>"MZXW6==="</expr>}</block></expr>,
        <expr><block>{<expr>"foob"</expr>   ,<expr>"MZXW6YQ="</expr>}</block></expr>,
        <expr><block>{<expr>"fooba"</expr>  ,<expr>"MZXW6YTB"</expr>}</block></expr>,
        <expr><block>{<expr>"foobar"</expr> ,<expr>"MZXW6YTBOI======"</expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name> <index>[]</index><index>[]</index></type> <name>BASE32HEX_TEST_CASES</name> =<init> <expr><block>{ <comment type="line">// RFC 4648</comment>
        <expr><block>{<expr>""</expr>       ,<expr>""</expr>}</block></expr>,
        <expr><block>{<expr>"f"</expr>      ,<expr>"CO======"</expr>}</block></expr>,
        <expr><block>{<expr>"fo"</expr>     ,<expr>"CPNG===="</expr>}</block></expr>,
        <expr><block>{<expr>"foo"</expr>    ,<expr>"CPNMU==="</expr>}</block></expr>,
        <expr><block>{<expr>"foob"</expr>   ,<expr>"CPNMUOG="</expr>}</block></expr>,
        <expr><block>{<expr>"fooba"</expr>  ,<expr>"CPNMUOJ1"</expr>}</block></expr>,
        <expr><block>{<expr>"foobar"</expr> ,<expr>"CPNMUOJ1E8======"</expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name> <index>[]</index><index>[]</index></type> <name>BASE32_TEST_CASES_CHUNKED</name> =<init> <expr><block>{ <comment type="line">//Chunked</comment>
        <expr><block>{<expr>""</expr>       ,<expr>""</expr>}</block></expr>,
        <expr><block>{<expr>"f"</expr>      ,<expr>"MY======\r\n"</expr>}</block></expr>,
        <expr><block>{<expr>"fo"</expr>     ,<expr>"MZXQ====\r\n"</expr>}</block></expr>,
        <expr><block>{<expr>"foo"</expr>    ,<expr>"MZXW6===\r\n"</expr>}</block></expr>,
        <expr><block>{<expr>"foob"</expr>   ,<expr>"MZXW6YQ=\r\n"</expr>}</block></expr>,
        <expr><block>{<expr>"fooba"</expr>  ,<expr>"MZXW6YTB\r\n"</expr>}</block></expr>,
        <expr><block>{<expr>"foobar"</expr> ,<expr>"MZXW6YTBOI======\r\n"</expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32Samples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>element</name> :<range> <expr><name>BASE32_TEST_CASES</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>codec</name>.<name>encodeAsString</name></name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>0</expr>]</index></name>.<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32HexSamples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>element</name> :<range> <expr><name>BASE32HEX_TEST_CASES</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>codec</name>.<name>encodeAsString</name></name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>0</expr>]</index></name>.<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase32Chunked</name> <parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>(<argument><expr>20</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>element</name> :<range> <expr><name>BASE32_TEST_CASES_CHUNKED</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>codec</name>.<name>encodeAsString</name></name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>0</expr>]</index></name>.<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSingleCharEncoding</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>BaseNCodec</name>.<name>Context</name></name></type> <name>context</name> =<init> <expr>new <call><name><name>BaseNCodec</name>.<name>Context</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>unencoded</name><index>[]</index></name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>allInOne</name><index>[]</index></name> =<init> <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>unencoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>codec</name> = new <call><name>Base32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>j</name>=<init><expr>0</expr></init></decl>;</init> <condition><expr><name>j</name>&lt; <name><name>unencoded</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>unencoded</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>unencoded</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>singly</name><index>[]</index></name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>allInOne</name>.<name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>codec</name>.<name>readResults</name></name><argument_list>(<argument><expr><name>singly</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>100</expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>allInOne</name></expr></argument>, <argument><expr><name>singly</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRandomBytes</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>Base32TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""+<name>i</name>+" "+<name><name>codec</name>.<name>lineLength</name></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr>1</expr>]</index></name>.<name>length</name></expr></argument>,<argument><expr><call><name><name>codec</name>.<name>getEncodedLength</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//assertEquals(b[0],codec.decode(b[1]));</comment>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRandomBytesChunked</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>Base32TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""+<name>i</name>+" "+<name><name>codec</name>.<name>lineLength</name></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr>1</expr>]</index></name>.<name>length</name></expr></argument>,<argument><expr><call><name><name>codec</name>.<name>getEncodedLength</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//assertEquals(b[0],codec.decode(b[1]));</comment>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRandomBytesHex</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Base32</name></type> <name>codec</name> =<init> <expr>new <call><name>Base32</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>Base32TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""+<name>i</name>+" "+<name><name>codec</name>.<name>lineLength</name></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr>1</expr>]</index></name>.<name>length</name></expr></argument>,<argument><expr><call><name><name>codec</name>.<name>getEncodedLength</name></name><argument_list>(<argument><expr><name><name>b</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//assertEquals(b[0],codec.decode(b[1]));</comment>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
