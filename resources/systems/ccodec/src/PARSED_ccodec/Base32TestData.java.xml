<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Base32TestData.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<comment type="javadoc">/**
 * This random data was encoded by OpenSSL. Java had nothing to do with it. This data helps us test interop between
 * Commons-Codec and OpenSSL. Notice that OpenSSL creates 64 character lines instead of the 76 of Commons-Codec.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;
 * @version $Id $
 * @since 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Base32TestData</name> <block>{

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>STRING_FIXTURE</name> =<init> <expr>"Hello World"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BASE32_FIXTURE</name> =<init> <expr>"JBSWY3DPEBLW64TMMQ======\r\n"</expr></init></decl>;</decl_stmt>
<comment type="line">//  static final String BASE32HEX_FIXTURE = "91IMOR3F41BMUSJCCG======";</comment>

    <comment type="line">// Some utility code to help test chunked reads of the InputStream.</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>SIZE_KEY</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>LAST_READ_KEY</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>streamToBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// new byte[7] is obviously quite slow, but helps exercise the code.</comment>
        <return>return <expr><call><name>streamToBytes</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>new <name><name>byte</name><index>[<expr>7</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>streamToBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>status</name> =<init> <expr><call><name>fill</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><name><name>status</name><index>[<expr><name>SIZE_KEY</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lastRead</name> =<init> <expr><name><name>status</name><index>[<expr><name>LAST_READ_KEY</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>lastRead</name> != -1</expr>)</condition> <block>{
                <expr_stmt><expr><name>buf</name> = <call><name>resizeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> = <call><name>fill</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> = <name><name>status</name><index>[<expr><name>SIZE_KEY</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastRead</name> = <name><name>status</name><index>[<expr><name>LAST_READ_KEY</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><name><name>buf</name>.<name>length</name></name> != <name>size</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>smallerBuf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>smallerBuf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> = <name>smallerBuf</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>fill</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>read</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> - <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastRead</name> =<init> <expr><name>read</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>read</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>read</name> = 0</expr>;</expr_stmt>
        }</block></then></if>
        <while>while <condition>(<expr><name>lastRead</name> != -1 &amp;&amp; <name>read</name> + <name>offset</name> &lt; <name><name>buf</name>.<name>length</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>lastRead</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> + <name>read</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> - <name>read</name> - <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>lastRead</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>read</name> += <name>lastRead</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr>new <name><name>int</name><index>[]</index></name><block>{<expr><name>offset</name> + <name>read</name></expr>, <expr><name>lastRead</name></expr>}</block></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>resizeArray</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>biggerBytes</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>bytes</name>.<name>length</name></name> * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>biggerBytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>biggerBytes</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns an encoded and decoded copy of the same random data.
     *
     * @param codec the codec to use
     * @param size amount of random data to generate and encode
     * @return two byte[] arrays:  [0] = decoded, [1] = encoded
     */</comment>
    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>randomData</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>BaseNCodec</name></type> <name>codec</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>r</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decoded</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>nextBytes</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>codec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <name><name>byte</name><index>[]</index><index>[]</index></name> <block>{<expr><name>decoded</name></expr>, <expr><name>encoded</name></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the supplied byte[] array to see if it contains the specified byte c.
     *
     * @param bytes byte[] array to test
     * @param c byte to look for
     * @return true if bytes contains c, false otherwise
     */</comment>
    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>bytesContain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name> :<range> <expr><name>bytes</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>b</name> == <name>c</name></expr>)</condition><then> <block>{ <return>return <expr>true</expr>;</return> }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

}</block></class>
</unit>
