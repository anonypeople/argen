<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\binary\Base64OutputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<comment type="javadoc">/**
 * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength
 * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate
 * constructor.
 * &lt;p&gt;
 * The default behaviour of the Base64OutputStream is to ENCODE, whereas the default behaviour of the Base64InputStream
 * is to DECODE. But this behaviour can be overridden by using a different constructor.
 * &lt;/p&gt;
 * &lt;p&gt;
 * This class implements section &lt;cite&gt;6.8. Base64 Content-Transfer-Encoding&lt;/cite&gt; from RFC 2045 &lt;cite&gt;Multipurpose
 * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies&lt;/cite&gt; by Freed and Borenstein.
 * &lt;/p&gt;
 * &lt;p&gt;
 * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode
 * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).
 * &lt;/p&gt;
 *
 * @version $Id: Base64OutputStream.java 1435550 2013-01-19 14:09:52Z tn $
 * @see &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;
 * @since 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Base64OutputStream</name> <super><extends>extends <name>BaseNCodecOutputStream</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Creates a Base64OutputStream such that all data written is Base64-encoded to the original provided OutputStream.
     *
     * @param out
     *            OutputStream to wrap.
     */</comment>
    <constructor><specifier>public</specifier> <name>Base64OutputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>out</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
     * original provided OutputStream.
     *
     * @param out
     *            OutputStream to wrap.
     * @param doEncode
     *            true if we should encode all data written to us, false if we should decode.
     */</comment>
    <constructor><specifier>public</specifier> <name>Base64OutputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr>new <call><name>Base64</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>doEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a Base64OutputStream such that all data written is either Base64-encoded or Base64-decoded to the
     * original provided OutputStream.
     *
     * @param out
     *            OutputStream to wrap.
     * @param doEncode
     *            true if we should encode all data written to us, false if we should decode.
     * @param lineLength
     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to
     *            nearest multiple of 4). If lineLength &lt;=0, the encoded data is not divided into lines. If doEncode is
     *            false, lineLength is ignored.
     * @param lineSeparator
     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n).
     *            If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.
     */</comment>
    <constructor><specifier>public</specifier> <name>Base64OutputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl></param>,
                              <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>lineLength</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>lineSeparator</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>new <call><name>Base64</name><argument_list>(<argument><expr><name>lineLength</name></expr></argument>, <argument><expr><name>lineSeparator</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>doEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>
