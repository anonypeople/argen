<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Base64Test.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>math</name>.<name>BigInteger</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Ignore</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Test cases for Base64 class.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;
 * @version $Id: Base64Test.java 1539804 2013-11-07 20:36:20Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>Base64Test</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Random</name></type> <name>random</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * @return Returns the random.
     */</comment>
    <function><type><specifier>public</specifier> <name>Random</name></type> <name>getRandom</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>random</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Test the isStringBase64 method.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsStringBase64</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>nullString</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>emptyString</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>validString</name> =<init> <expr>"abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL=============="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>invalidString</name> =<init> <expr><name>validString</name> + (<name>char</name>)0</expr></init></decl>;</decl_stmt> <comment type="line">// append null character</comment>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Base64.isStringBase64() should not be null-safe."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>"Base64.isStringBase64() should not be null-safe."</expr></argument>, <argument><expr><name>npe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Base64.isStringBase64(empty-string) is true"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>emptyString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Base64.isStringBase64(valid-string) is true"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>validString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Base64.isStringBase64(invalid-string) is false"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>invalidString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test the Base64 implementation
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBase64</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name> =<init> <expr>"Hello World"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>encodedContent</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>encodedBytes</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>encodedContent</name> = <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>encodedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"encoding hello world"</expr></argument>, <argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr><name>encodedContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr><name><name>BaseNCodec</name>.<name>MIME_CHUNK_SIZE</name></name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// null lineSeparator same as saying no-chunking</comment>
        <expr_stmt><expr><name>encodedBytes</name> = <call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encodedContent</name> = <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>encodedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"encoding hello world"</expr></argument>, <argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr><name>encodedContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>b64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// null lineSeparator same as saying no-chunking</comment>
        <expr_stmt><expr><name>encodedBytes</name> = <call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>encodedContent</name> = <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>encodedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"encoding hello world"</expr></argument>, <argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr><name>encodedContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// bogus characters to decode (to skip actually) {e-acute*6}</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decode</name> =<init> <expr><call><name><name>b64</name>.<name>decode</name></name><argument_list>(<argument><expr>"SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ="</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>decodeString</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"decode hello world"</expr></argument>, <argument><expr>"Hello World"</expr></argument>, <argument><expr><name>decodeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test our decode with pad character in the middle.
     * (Our current implementation:  halt decode and return what we've got so far).
     *
     * The point of this test is not to say "this is the correct way to decode base64."
     * The point is simply to keep us aware of the current logic since 1.4 so we
     * don't accidentally break it without realizing.
     *
     * Note for historians.  The 1.3 logic would decode to:
     * "Hello World\u0000Hello World" -- null in the middle ---
     * and 1.4 unwittingly changed it to current logic.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeWithInnerPad</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>content</name> =<init> <expr>"SGVsbG8gV29ybGQ=SGVsbG8gV29ybGQ="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>shouldBe</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"decode should halt at pad (=)"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>shouldBe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests Base64.encodeBase64().
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testChunkedEncodeMultipleOf76</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expectedEncode</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name><name>Base64TestData</name>.<name>DECODED</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// convert to "\r\n" so we're equal to the old openssl encoding test stored</comment>
        <comment type="line">// in Base64TestData.ENCODED_76_CHARS_PER_LINE:</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actualResult</name> =<init> <expr><call><name><name>Base64TestData</name>.<name>ENCODED_76_CHARS_PER_LINE</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr>"\r\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actualEncode</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>actualResult</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"chunkedEncodeMultipleOf76"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expectedEncode</name></expr></argument>, <argument><expr><name>actualEncode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodec68</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>x</name> =<init> <expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'n'</expr>, <expr>'A'</expr>, <expr>'='</expr>, <expr>'='</expr>, <expr>(<name>byte</name>) 0x9c</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeInteger1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedInt1</name> =<init> <expr>"li7dzDacuo67Jg7mtqEm2TRuOMU="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BigInteger</name></type> <name>bigInt1</name> =<init> <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"85739377120809420210425962799" + "0318636601332086981"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encodedInt1</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeInteger</name></name><argument_list>(<argument><expr><name>bigInt1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>bigInt1</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeInteger</name></name><argument_list>(<argument><expr><call><name><name>encodedInt1</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeInteger2</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedInt2</name> =<init> <expr>"9B5ypLY9pMOmtxCeTDHgwdNFeGs="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BigInteger</name></type> <name>bigInt2</name> =<init> <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"13936727572861167254666467268" + "91466679477132949611"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encodedInt2</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeInteger</name></name><argument_list>(<argument><expr><name>bigInt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>bigInt2</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeInteger</name></name><argument_list>(<argument><expr><call><name><name>encodedInt2</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeInteger3</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedInt3</name> =<init> <expr>"FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2" + "rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BigInteger</name></type> <name>bigInt3</name> =<init> <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"10806548154093873461951748545"
            + "1196989136416448805819079363524309897749044958112417136240557"
            + "4495062430572478766856090958495998158114332651671116876320938126"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encodedInt3</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeInteger</name></name><argument_list>(<argument><expr><name>bigInt3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>bigInt3</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeInteger</name></name><argument_list>(<argument><expr><call><name><name>encodedInt3</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeInteger4</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedInt4</name> =<init> <expr>"ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"
            + "4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"
            + "DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv"
            + "Q0="</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BigInteger</name></type> <name>bigInt4</name> =<init> <expr>new <call><name>BigInteger</name><argument_list>(<argument><expr>"80624726256040348115552042320"
            + "6968135001872753709424419772586693950232350200555646471175944"
            + "519297087885987040810778908507262272892702303774422853675597"
            + "748008534040890923814202286633163248086055216976551456088015"
            + "338880713818192088877057717530169381044092839402438015097654"
            + "53542091716518238707344493641683483917"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encodedInt4</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeInteger</name></name><argument_list>(<argument><expr><name>bigInt4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>bigInt4</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeInteger</name></name><argument_list>(<argument><expr><call><name><name>encodedInt4</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeIntegerEdgeCases</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// TODO</comment>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodeIntegerNull</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Base64</name>.<name>encodeInteger</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Exception not thrown when passing in null to encodeInteger(BigInteger)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NullPointerException</name></type> <name>npe</name></decl></param>) <block>{
            <comment type="line">// expected</comment>
        }</block></catch> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Incorrect Exception caught when passing in null to encodeInteger(BigInteger)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testConstructors</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Base64</name></type> <name>base64</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>-1</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// TODO do we need to check sep if len = -1?</comment>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have rejected attempt to use 'A' as a line separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>ignored</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have rejected attempt to use 'A' as a line separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>ignored</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <try>try <block>{
            <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'='</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have rejected attempt to use '=' as a line separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>ignored</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'$'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// OK</comment>
        <try>try <block>{
            <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>, <expr>'$'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Should have rejected attempt to use 'A$' as a line separator"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>ignored</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
        <expr_stmt><expr><name>base64</name> = new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>' '</expr>, <expr>'$'</expr>, <expr>'\n'</expr>, <expr>'\r'</expr>, <expr>'\t'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// OK</comment>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>base64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testConstructor_Int_ByteArray_Boolean</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr>65</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'\t'</expr>}</block></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>base64</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>Base64TestData</name>.<name>DECODED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr><name><name>Base64TestData</name>.<name>ENCODED_64_CHARS_PER_LINE</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>expectedResult</name> = <call><name><name>expectedResult</name>.<name>replace</name></name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr>'\t'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"new Base64(65, \\t, false)"</expr></argument>, <argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testConstructor_Int_ByteArray_Boolean_UrlSafe</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// url-safe variation</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'\t'</expr>}</block></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><call><name><name>base64</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>Base64TestData</name>.<name>DECODED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedResult</name> =<init> <expr><name><name>Base64TestData</name>.<name>ENCODED_64_CHARS_PER_LINE</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>expectedResult</name> = <call><name><name>expectedResult</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"="</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// url-safe has no == padding.</comment>
        <expr_stmt><expr><name>expectedResult</name> = <call><name><name>expectedResult</name>.<name>replace</name></name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr>'\t'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expectedResult</name> = <call><name><name>expectedResult</name>.<name>replace</name></name><argument_list>(<argument><expr>'+'</expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expectedResult</name> = <call><name><name>expectedResult</name>.<name>replace</name></name><argument_list>(<argument><expr>'/'</expr></argument>, <argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>result</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"new Base64(64, \\t, true)"</expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>expectedResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests conditional true branch for "marker0" test.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodePadMarkerIndex2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"QQ==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests conditional branches for "marker1" test.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodePadMarkerIndex3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AA"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"QUE=".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"QUFB".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodePadOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"====".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"====".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Test truncated padding</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"===".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"=".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodePadOnlyChunked</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"====\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"====\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Test truncated padding</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"===\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"==\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"=\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"\n".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>.<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeWithWhitespace</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>orig</name> =<init> <expr>"I am a late night coder."</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedArray</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><call><name><name>orig</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>intermediate</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>encodedArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>intermediate</name>.<name>insert</name></name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intermediate</name>.<name>insert</name></name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr>'\t'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intermediate</name>.<name>insert</name></name><argument_list>(<argument><expr>10</expr></argument>, <argument><expr>'\r'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intermediate</name>.<name>insert</name></name><argument_list>(<argument><expr>15</expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedWithWS</name> =<init> <expr><call><name><name>intermediate</name>.<name>toString</name></name><argument_list>()</argument_list></call>.<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedWithWS</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>encodedWithWS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dest</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>decodedWithWS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Dest string doesn't equal the original"</expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Test encode and decode of empty byte array.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEmptyBase64</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>empty</name> =<init> <expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"empty base64 encode"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"empty base64 encode"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>empty</name> = new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> = <call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"empty base64 decode"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"empty base64 encode"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// encode/decode a large random array</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeRandom</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>byte</name><index>[<expr><call><name><name>this</name>.<name>getRandom</name></name><argument_list>()</argument_list></call>.<call><name>nextInt</name><argument_list>(<argument><expr>10000</expr></argument>)</argument_list></call> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>getRandom</name></name><argument_list>()</argument_list></call>.<call><name>nextBytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>enc</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line">// encode/decode random arrays from size 0 to size 11</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeSmall</name><parameter_list>()</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 12</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>this</name>.<name>getRandom</name></name><argument_list>()</argument_list></call>.<call><name>nextBytes</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>enc</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"\"" + new <call><name>String</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call> + "\" is Base64 data."</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data2</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>toString</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> + " equals " + <call><name>toString</name><argument_list>(<argument><expr><name>data2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeOverMaxSize</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testEncodeOverMaxSize</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeOverMaxSize</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeOverMaxSize</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeOverMaxSize</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCodec112</name><parameter_list>()</parameter_list> <block>{ <comment type="line">// size calculation assumes always chunked</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>in</name> =<init> <expr>new <name><name>byte</name><index>[]</index></name> <block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>out</name>=<init><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>false</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name><name>out</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testEncodeOverMaxSize</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxSize</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name><name>Base64TestData</name>.<name>DECODED</name></name></expr></argument>, <argument><expr>true</expr></argument>, <argument><expr>false</expr></argument>, <argument><expr><name>maxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Expected " + <name><name>IllegalArgumentException</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>IllegalArgumentException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIgnoringNonBase64InDecode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The quick brown fox jumped over the lazy dogs."</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>decodeBase64</name></name><argument_list>(<argument><expr>"VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsArrayByteBase64</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr><name><name>Byte</name>.<name>MIN_VALUE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>-125</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>-10</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>64</expr>, <expr><name><name>Byte</name>.<name>MAX_VALUE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr><name><name>Byte</name>.<name>MAX_VALUE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>, <expr><name><name>Byte</name>.<name>MIN_VALUE</name></name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'A'</expr>, <expr>'Z'</expr>, <expr>'a'</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'/'</expr>, <expr>'='</expr>, <expr>'+'</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'$'</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests isUrlSafe.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsUrlSafe</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64Standard</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64URLSafe</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Base64.isUrlSafe=false"</expr></argument>, <argument><expr><call><name><name>base64Standard</name>.<name>isUrlSafe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Base64.isUrlSafe=true"</expr></argument>, <argument><expr><call><name><name>base64URLSafe</name>.<name>isUrlSafe</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>whiteSpace</name> =<init> <expr><block>{<expr>' '</expr>, <expr>'\n'</expr>, <expr>'\r'</expr>, <expr>'\t'</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Base64.isBase64(whiteSpace)=true"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>isBase64</name></name><argument_list>(<argument><expr><name>whiteSpace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testKnownDecodings</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The quick brown fox jumped over the lazy dogs."</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>decodeBase64</name></name><argument_list>(<argument><expr>"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"It was the best of times, it was the worst of times."</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>decodeBase64</name></name><argument_list>(<argument><expr>"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"http://jakarta.apache.org/commmons"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>decodeBase64</name></name><argument_list>(<argument><expr>"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>decodeBase64</name></name><argument_list>(<argument><expr>"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="
                .<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"xyzzy!"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"eHl6enkh".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testKnownEncodings</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>encodeBase64</name></name><argument_list>(<argument><expr>"The quick brown fox jumped over the lazy dogs.".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr>"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"</expr></argument>,
                <argument><expr>new <call><name>String</name><argument_list>(
                        <argument><expr><call><name><name>Base64</name>
                                .<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"
                                        .<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>encodeBase64</name></name><argument_list>(<argument><expr>"It was the best of times, it was the worst of times.".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>encodeBase64</name></name><argument_list>(<argument><expr>"http://jakarta.apache.org/commmons".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>
                .<name>encodeBase64</name></name><argument_list>(<argument><expr>"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>"{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }"
                .<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"eHl6enkh"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>"xyzzy!".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNonBase64Test</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>bArray</name> =<init> <expr><block>{<expr>'%'</expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Invalid Base64 array was incorrectly validated as " + "an array of Base64 encoded data"</expr></argument>, <argument><expr><call><name><name>Base64</name>
                .<name>isBase64</name></name><argument_list>(<argument><expr><name>bArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>b64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>bArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"The result should be empty as the test encoded content did " + "not contain any valid base 64 characters"</expr></argument>,
                    <argument><expr>0</expr></argument>, <argument><expr><name><name>result</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></param>) <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Exception was thrown when trying to decode "
                + "invalid base64 encoded data - RFC 2045 requires that all "
                + "non base64 character be discarded, an exception should not"
                + " have been thrown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testObjectDecodeWithInvalidParameter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>b64</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>Integer</name>.<name>valueOf</name></name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"decode(Object) didn't throw an exception when passed an Integer object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// ignored</comment>
        }</block></catch></try>

    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testObjectDecodeWithValidParameter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>original</name> =<init> <expr>"Hello World!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>o</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><call><name><name>original</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>oDecoded</name> =<init> <expr><call><name><name>b64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>baDecoded</name> =<init> <expr>(<name><name>byte</name><index>[]</index></name>) <name>oDecoded</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dest</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>baDecoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dest string does not equal original"</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testObjectEncodeWithInvalidParameter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr>"Yadayadayada"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"encode(Object) didn't throw an exception when passed a String object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testObjectEncodeWithValidParameter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>original</name> =<init> <expr>"Hello World!"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>origObj</name> =<init> <expr><call><name><name>original</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>oEncoded</name> =<init> <expr><call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr><name>origObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>bArray</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>oEncoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>dest</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>bArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"dest string does not equal original"</expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testObjectEncode</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr>"Hello World".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testPairs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>0</expr>, <expr>0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>-128</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 127</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>test</name><index>[]</index></name> =<init> <expr><block>{<expr>(<name>byte</name>) <name>i</name></expr>, <expr>(<name>byte</name>) <name>i</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 2045 section 2.1 CRLF definition.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc2045Section2Dot1CrLfDefinition</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>13</expr>, <expr>10</expr>}</block></expr></argument>, <argument><expr><name><name>Base64</name>.<name>CHUNK_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 2045 section 6.8 chuck size definition.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc2045Section6Dot8ChunkSizeDefinition</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>76</expr></argument>, <argument><expr><name><name>BaseNCodec</name>.<name>MIME_CHUNK_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 1421 section 4.3.2.4 chuck size definition.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc1421Section6Dot8ChunkSizeDefinition</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>64</expr></argument>, <argument><expr><name><name>BaseNCodec</name>.<name>PEM_CHUNK_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 4648 section 10 test vectors.
     * &lt;ul&gt;
     * &lt;li&gt;BASE64("") = ""&lt;/li&gt;
     * &lt;li&gt;BASE64("f") = "Zg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fo") = "Zm8="&lt;/li&gt;
     * &lt;li&gt;BASE64("foo") = "Zm9v"&lt;/li&gt;
     * &lt;li&gt;BASE64("foob") = "Zm9vYg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fooba") = "Zm9vYmE="&lt;/li&gt;
     * &lt;li&gt;BASE64("foobar") = "Zm9vYmFy"&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see &lt;a href="http://tools.ietf.org/html/rfc4648"&gt;http://tools.ietf.org/html/rfc4648&lt;/a&gt;
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc4648Section10Decode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"f"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zg=="</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"fo"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm8="</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9v"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foob"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYg=="</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"fooba"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYmE="</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foobar"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYmFy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 4648 section 10 test vectors.
     * &lt;ul&gt;
     * &lt;li&gt;BASE64("") = ""&lt;/li&gt;
     * &lt;li&gt;BASE64("f") = "Zg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fo") = "Zm8="&lt;/li&gt;
     * &lt;li&gt;BASE64("foo") = "Zm9v"&lt;/li&gt;
     * &lt;li&gt;BASE64("foob") = "Zm9vYg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fooba") = "Zm9vYmE="&lt;/li&gt;
     * &lt;li&gt;BASE64("foobar") = "Zm9vYmFy"&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see &lt;a href="http://tools.ietf.org/html/rfc4648"&gt;http://tools.ietf.org/html/rfc4648&lt;/a&gt;
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc4648Section10DecodeWithCrLf</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>CRLF</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><name><name>Base64</name>.<name>CHUNK_SEPARATOR</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"f"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zg==" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"fo"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm8=" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foo"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9v" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foob"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYg==" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"fooba"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYmE=" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"foobar"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr>"Zm9vYmFy" + <name>CRLF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 4648 section 10 test vectors.
     * &lt;ul&gt;
     * &lt;li&gt;BASE64("") = ""&lt;/li&gt;
     * &lt;li&gt;BASE64("f") = "Zg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fo") = "Zm8="&lt;/li&gt;
     * &lt;li&gt;BASE64("foo") = "Zm9v"&lt;/li&gt;
     * &lt;li&gt;BASE64("foob") = "Zm9vYg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fooba") = "Zm9vYmE="&lt;/li&gt;
     * &lt;li&gt;BASE64("foobar") = "Zm9vYmFy"&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see &lt;a href="http://tools.ietf.org/html/rfc4648"&gt;http://tools.ietf.org/html/rfc4648&lt;/a&gt;
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc4648Section10Encode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zg=="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"f"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zm8="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"fo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zm9v"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zm9vYg=="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"foob"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zm9vYmE="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"fooba"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zm9vYmFy"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"foobar"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 4648 section 10 test vectors.
     * &lt;ul&gt;
     * &lt;li&gt;BASE64("") = ""&lt;/li&gt;
     * &lt;li&gt;BASE64("f") = "Zg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fo") = "Zm8="&lt;/li&gt;
     * &lt;li&gt;BASE64("foo") = "Zm9v"&lt;/li&gt;
     * &lt;li&gt;BASE64("foob") = "Zm9vYg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fooba") = "Zm9vYmE="&lt;/li&gt;
     * &lt;li&gt;BASE64("foobar") = "Zm9vYmFy"&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see &lt;a href="http://tools.ietf.org/html/rfc4648"&gt;http://tools.ietf.org/html/rfc4648&lt;/a&gt;
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc4648Section10DecodeEncode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zg=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zm8="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zm9v"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zm9vYg=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zm9vYmE="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testDecodeEncode</name><argument_list>(<argument><expr>"Zm9vYmFy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testDecodeEncode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedText</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>decodedText</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>encodedText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedText2</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>decodedText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>encodedText</name></expr></argument>, <argument><expr><name>encodedText2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests RFC 4648 section 10 test vectors.
     * &lt;ul&gt;
     * &lt;li&gt;BASE64("") = ""&lt;/li&gt;
     * &lt;li&gt;BASE64("f") = "Zg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fo") = "Zm8="&lt;/li&gt;
     * &lt;li&gt;BASE64("foo") = "Zm9v"&lt;/li&gt;
     * &lt;li&gt;BASE64("foob") = "Zm9vYg=="&lt;/li&gt;
     * &lt;li&gt;BASE64("fooba") = "Zm9vYmE="&lt;/li&gt;
     * &lt;li&gt;BASE64("foobar") = "Zm9vYmFy"&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see &lt;a href="http://tools.ietf.org/html/rfc4648"&gt;http://tools.ietf.org/html/rfc4648&lt;/a&gt;
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRfc4648Section10EncodeDecode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"fo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"foo"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"foob"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"fooba"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testEncodeDecode</name><argument_list>(<argument><expr>"foobar"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>testEncodeDecode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>plainText</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encodedText</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>plainText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>decodedText</name> =<init> <expr><call><name><name>StringUtils</name>.<name>newStringUsAscii</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>encodedText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>plainText</name></expr></argument>, <argument><expr><name>decodedText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSingletons</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 1</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ag=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 2</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Aw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 3</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 4</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 5</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Bg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 6</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Bw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 7</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"CA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 8</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"CQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 9</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 10</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 11</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"DA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 12</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"DQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 13</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Dg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 14</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Dw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 15</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"EA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 16</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"EQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 17</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Eg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 18</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ew=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 19</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 20</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 21</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Fg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 22</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Fw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 23</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"GA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 24</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"GQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 25</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Gg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 26</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Gw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 27</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 28</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 29</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Hg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 30</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Hw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 31</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"IA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 32</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"IQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 33</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ig=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 34</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 35</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"JA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 36</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"JQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 37</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Jg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 38</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Jw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 39</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"KA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 40</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"KQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 41</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Kg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 42</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Kw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 43</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 44</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 45</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Lg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 46</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Lw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 47</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"MA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 48</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"MQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 49</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Mg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 50</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Mw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 51</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"NA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 52</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"NQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 53</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ng=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 54</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Nw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 55</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"OA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 56</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"OQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 57</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Og=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 58</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ow=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 59</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"PA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 60</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"PQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 61</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Pg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 62</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Pw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 63</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"QA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 64</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"QQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 65</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Qg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 66</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Qw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 67</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"RA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 68</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"RQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 69</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Rg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 70</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Rw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 71</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 72</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 73</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Sg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 74</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Sw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 75</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 76</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 77</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Tg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 78</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Tw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 79</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"UA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 80</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"UQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 81</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ug=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 82</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Uw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 83</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"VA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 84</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"VQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 85</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Vg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 86</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Vw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 87</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"WA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 88</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"WQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 89</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Wg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 90</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ww=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 91</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"XA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 92</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"XQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 93</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Xg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 94</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Xw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 95</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"YA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 96</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"YQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 97</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Yg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 98</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Yw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 99</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ZA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 100</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ZQ=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 101</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zg=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 102</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zw=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 103</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aA=="</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 104</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>-128</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 127</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>test</name><index>[]</index></name> =<init> <expr><block>{<expr>(<name>byte</name>) <name>i</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSingletonsChunked</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 1</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ag==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 2</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Aw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 3</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 4</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 5</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Bg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 6</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Bw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 7</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"CA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 8</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"CQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 9</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 10</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Cw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 11</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"DA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 12</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"DQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 13</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Dg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 14</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Dw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 15</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"EA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 16</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"EQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 17</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Eg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 18</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ew==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 19</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 20</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 21</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Fg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 22</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Fw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 23</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"GA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 24</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"GQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 25</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Gg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 26</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Gw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 27</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 28</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 29</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Hg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 30</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Hw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 31</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"IA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 32</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"IQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 33</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ig==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 34</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Iw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 35</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"JA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 36</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"JQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 37</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Jg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 38</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Jw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 39</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"KA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 40</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"KQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 41</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Kg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 42</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Kw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 43</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 44</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 45</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Lg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 46</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Lw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 47</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"MA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 48</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"MQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 49</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Mg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 50</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Mw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 51</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"NA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 52</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"NQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 53</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ng==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 54</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Nw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 55</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"OA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 56</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"OQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 57</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Og==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 58</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ow==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 59</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"PA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 60</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"PQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 61</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Pg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 62</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Pw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 63</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"QA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 64</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"QQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 65</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Qg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 66</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Qw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 67</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"RA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 68</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"RQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 69</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Rg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 70</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Rw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 71</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 72</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 73</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Sg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 74</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Sw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 75</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 76</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 77</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Tg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 78</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Tw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 79</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"UA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 80</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"UQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 81</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ug==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 82</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Uw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 83</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"VA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 84</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"VQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 85</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Vg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 86</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Vw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 87</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"WA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 88</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"WQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 89</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Wg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 90</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Ww==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 91</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"XA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 92</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"XQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 93</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Xg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 94</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Xw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 95</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"YA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 96</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"YQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 97</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Yg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 98</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Yw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 99</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ZA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 100</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ZQ==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 101</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zg==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 102</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Zw==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 103</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aA==\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 104</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTriplets</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAA"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAB"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 1</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAC"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 2</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAD"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 3</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAE"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 4</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAF"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 5</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAG"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 6</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAH"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 7</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAI"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 8</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAJ"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 9</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAK"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 10</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAL"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 11</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAM"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 12</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAN"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 13</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAO"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 14</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAP"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 15</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAQ"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 16</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAR"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 17</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAS"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 18</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAT"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 19</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAU"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 20</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAV"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 21</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAW"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 22</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAX"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 23</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAY"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 24</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAZ"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 25</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAa"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 26</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAb"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 27</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAc"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 28</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAd"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 29</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAe"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 30</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAf"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 31</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAg"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 32</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAh"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 33</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAi"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 34</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAj"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 35</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAk"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 36</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAl"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 37</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAm"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 38</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAn"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 39</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAo"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 40</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAp"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 41</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAq"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 42</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAr"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 43</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAs"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 44</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAt"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 45</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAu"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 46</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAv"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 47</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAw"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 48</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAx"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 49</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAy"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 50</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAz"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 51</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA0"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 52</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA1"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 53</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA2"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 54</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA3"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 55</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA4"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 56</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA5"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 57</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA6"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 58</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA7"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 59</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA8"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 60</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA9"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 61</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA+"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 62</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA/"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 63</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTripletsChunked</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAA\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAB\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 1</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAC\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 2</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAD\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 3</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAE\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 4</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAF\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 5</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAG\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 6</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAH\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 7</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAI\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 8</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAJ\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 9</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAK\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 10</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAL\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 11</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAM\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 12</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAN\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 13</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAO\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 14</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAP\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 15</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAQ\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 16</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAR\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 17</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAS\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 18</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAT\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 19</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAU\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 20</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAV\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 21</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAW\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 22</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAX\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 23</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAY\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 24</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAZ\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 25</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAa\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 26</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAb\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 27</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAc\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 28</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAd\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 29</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAe\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 30</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAf\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 31</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAg\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 32</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAh\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 33</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAi\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 34</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAj\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 35</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAk\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 36</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAl\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 37</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAm\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 38</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAn\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 39</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAo\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 40</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAp\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 41</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAq\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 42</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAr\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 43</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAs\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 44</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAt\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 45</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAu\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 46</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAv\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 47</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAw\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 48</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAx\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 49</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAy\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 50</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAAz\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 51</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA0\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 52</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA1\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 53</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA2\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 54</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA3\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 55</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA4\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 56</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA5\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 57</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA6\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 58</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA7\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 59</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA8\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 60</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA9\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 61</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA+\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 62</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AAA/\r\n"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>encodeBase64Chunked</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 0</expr>, <expr>(<name>byte</name>) 63</expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests url-safe Base64 against random data, sizes 0 to 150.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUrlSafe</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// test random data of sizes 0 thru 150</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= 150</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>randomData</name> =<init> <expr><call><name><name>Base64TestData</name>.<name>randomData</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><name><name>randomData</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decoded</name> =<init> <expr><name><name>randomData</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>result</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"url-safe i=" + <name>i</name></expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"url-safe i=" + <name>i</name> + " no '='"</expr></argument>, <argument><expr><call><name><name>Base64TestData</name>.<name>bytesContain</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr>(<name>byte</name>) '='</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"url-safe i=" + <name>i</name> + " no '\\'"</expr></argument>, <argument><expr><call><name><name>Base64TestData</name>.<name>bytesContain</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr>(<name>byte</name>) '\\'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"url-safe i=" + <name>i</name> + " no '+'"</expr></argument>, <argument><expr><call><name><name>Base64TestData</name>.<name>bytesContain</name></name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr>(<name>byte</name>) '+'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    }</block></function>

    <comment type="javadoc">/**
     * Base64 encoding of UUID's is a common use-case, especially in URL-SAFE mode. This test case ends up being the
     * "URL-SAFE" JUnit's.
     *
     * @throws DecoderException
     *             if Hex.decode() fails - a serious problem since Hex comes from our own commons-codec!
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUUID</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <comment type="line">// The 4 UUID's below contains mixtures of + and / to help us test the</comment>
        <comment type="line">// URL-SAFE encoding mode.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>ids</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// ids[0] was chosen so that it encodes with at least one +.</comment>
        <expr_stmt><expr><name><name>ids</name><index>[<expr>0</expr>]</index></name> = <call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"94ed8d0319e4493399560fb67404d370".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ids[1] was chosen so that it encodes with both / and +.</comment>
        <expr_stmt><expr><name><name>ids</name><index>[<expr>1</expr>]</index></name> = <call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"2bf7cc2701fe4397b49ebeed5acc7090".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ids[2] was chosen so that it encodes with at least one /.</comment>
        <expr_stmt><expr><name><name>ids</name><index>[<expr>2</expr>]</index></name> = <call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"64be154b6ffa40258d1a01288e7c31ca".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ids[3] was chosen so that it encodes with both / and +, with /</comment>
        <comment type="line">// right at the beginning.</comment>
        <expr_stmt><expr><name><name>ids</name><index>[<expr>3</expr>]</index></name> = <call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"ff7f8fc01cdb471a8c8b5a9306183fe8".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>standard</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>standard</name><index>[<expr>0</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"lO2NAxnkSTOZVg+2dATTcA=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>standard</name><index>[<expr>1</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"K/fMJwH+Q5e0nr7tWsxwkA=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>standard</name><index>[<expr>2</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"ZL4VS2/6QCWNGgEojnwxyg=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>standard</name><index>[<expr>3</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"/3+PwBzbRxqMi1qTBhg/6A=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>urlSafe1</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// regular padding (two '==' signs).</comment>
        <expr_stmt><expr><name><name>urlSafe1</name><index>[<expr>0</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"lO2NAxnkSTOZVg-2dATTcA=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe1</name><index>[<expr>1</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"K_fMJwH-Q5e0nr7tWsxwkA=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe1</name><index>[<expr>2</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"ZL4VS2_6QCWNGgEojnwxyg=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe1</name><index>[<expr>3</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"_3-PwBzbRxqMi1qTBhg_6A=="</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>urlSafe2</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// single padding (only one '=' sign).</comment>
        <expr_stmt><expr><name><name>urlSafe2</name><index>[<expr>0</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"lO2NAxnkSTOZVg-2dATTcA="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe2</name><index>[<expr>1</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"K_fMJwH-Q5e0nr7tWsxwkA="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe2</name><index>[<expr>2</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"ZL4VS2_6QCWNGgEojnwxyg="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe2</name><index>[<expr>3</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"_3-PwBzbRxqMi1qTBhg_6A="</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>urlSafe3</name> =<init> <expr>new <name><name>byte</name><index>[<expr>4</expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// no padding (no '=' signs).</comment>
        <expr_stmt><expr><name><name>urlSafe3</name><index>[<expr>0</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"lO2NAxnkSTOZVg-2dATTcA"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe3</name><index>[<expr>1</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"K_fMJwH-Q5e0nr7tWsxwkA"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe3</name><index>[<expr>2</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"ZL4VS2_6QCWNGgEojnwxyg"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>urlSafe3</name><index>[<expr>3</expr>]</index></name> = <call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"_3-PwBzbRxqMi1qTBhg_6A"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedStandard</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedUrlSafe</name> =<init> <expr><call><name><name>Base64</name>.<name>encodeBase64URLSafe</name></name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedStandard</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedUrlSafe1</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name><name>urlSafe1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedUrlSafe2</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name><name>urlSafe2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedUrlSafe3</name> =<init> <expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name><name>urlSafe3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Very important debugging output should anyone</comment>
            <comment type="line">// ever need to delve closely into this stuff.</comment>
            <if>if <condition>(<expr>false</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"reference: [" + <call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"standard:  [" +
                        <call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name>decodedStandard</name></expr></argument>)</argument_list></call> +
                    "] From: [" +
                    <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> +
                    "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"safe1:     [" +
                        <call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name>decodedUrlSafe1</name></expr></argument>)</argument_list></call> +
                    "] From: [" +
                    <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name><name>urlSafe1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> +
                    "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"safe2:     [" +
                        <call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name>decodedUrlSafe2</name></expr></argument>)</argument_list></call> +
                    "] From: [" +
                    <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name><name>urlSafe2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> +
                    "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr>"safe3:     [" +
                        <call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name>decodedUrlSafe3</name></expr></argument>)</argument_list></call> +
                    "] From: [" +
                    <call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><name><name>urlSafe3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> +
                    "]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"standard encode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>encodedStandard</name></expr></argument>, <argument><expr><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"url-safe encode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>encodedUrlSafe</name></expr></argument>, <argument><expr><name><name>urlSafe3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"standard decode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>decodedStandard</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"url-safe1 decode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>decodedUrlSafe1</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"url-safe2 decode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>decodedUrlSafe2</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"url-safe3 decode uuid"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>decodedUrlSafe3</name></expr></argument>, <argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testByteToStringVariations</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b1</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b2</name> =<init> <expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b3</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b4</name> =<init> <expr><call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"2bf7cc2701fe4397b49ebeed5acc7090".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// for url-safe tests</comment>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString Hello World"</expr></argument>, <argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr><call><name><name>base64</name>.<name>encodeToString</name></name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString static Hello World"</expr></argument>, <argument><expr>"SGVsbG8gV29ybGQ="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString \"\""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name><name>base64</name>.<name>encodeToString</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString static \"\""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>base64</name>.<name>encodeToString</name></name><argument_list>(<argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString static null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString UUID"</expr></argument>, <argument><expr>"K/fMJwH+Q5e0nr7tWsxwkA=="</expr></argument>, <argument><expr><call><name><name>base64</name>.<name>encodeToString</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString static UUID"</expr></argument>, <argument><expr>"K/fMJwH+Q5e0nr7tWsxwkA=="</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64String</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"byteToString static-url-safe UUID"</expr></argument>, <argument><expr>"K_fMJwH-Q5e0nr7tWsxwkA"</expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>encodeBase64URLSafeString</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testStringToByteVariations</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>base64</name> =<init> <expr>new <call><name>Base64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s1</name> =<init> <expr>"SGVsbG8gV29ybGQ=\r\n"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s2</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s3</name> =<init> <expr><name>null</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s4a</name> =<init> <expr>"K/fMJwH+Q5e0nr7tWsxwkA==\r\n"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>s4b</name> =<init> <expr>"K_fMJwH-Q5e0nr7tWsxwkA"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b4</name> =<init> <expr><call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>"2bf7cc2701fe4397b49ebeed5acc7090".<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// for url-safe tests</comment>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte Hello World"</expr></argument>, <argument><expr>"Hello World"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>base64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte Hello World"</expr></argument>, <argument><expr>"Hello World"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>)<call><name><name>base64</name>.<name>decode</name></name><argument_list>(<argument><expr>(<name>Object</name>)<name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte static Hello World"</expr></argument>, <argument><expr>"Hello World"</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte \"\""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>base64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte static \"\""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>base64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"StringToByte static null"</expr></argument>, <argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>StringUtils</name>.<name>newStringUtf8</name></name><argument_list>(<argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"StringToByte UUID"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><call><name><name>base64</name>.<name>decode</name></name><argument_list>(<argument><expr><name>s4b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"StringToByte static UUID"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>s4a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"StringToByte static-url-safe UUID"</expr></argument>, <argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><call><name><name>Base64</name>.<name>decodeBase64</name></name><argument_list>(<argument><expr><name>s4b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>String</name></type> <name>toString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buf</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>data</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> != <name><name>data</name>.<name>length</name></name> - 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>buf</name>.<name>append</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><call><name><name>buf</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.
     *
     * @see "&lt;a href='http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E'&gt;dev@commons.apache.org&lt;/a&gt;"
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <annotation>@<name>Ignore</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHugeLineSeparator</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>BaseNCodec_DEFAULT_BUFFER_SIZE</name> =<init> <expr>8192</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>Base64_BYTES_PER_ENCODED_BLOCK</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>baLineSeparator</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>BaseNCodec_DEFAULT_BUFFER_SIZE</name> * 4 - 3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Base64</name></type> <name>b64</name> =<init> <expr>new <call><name>Base64</name><argument_list>(<argument><expr><name>Base64_BYTES_PER_ENCODED_BLOCK</name></expr></argument>, <argument><expr><name>baLineSeparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>strOriginal</name> =<init> <expr>"Hello World"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>strDecoded</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name><name>b64</name>.<name>decode</name></name><argument_list>(<argument><expr><call><name><name>b64</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>strOriginal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"testDEFAULT_BUFFER_SIZE"</expr></argument>, <argument><expr><name>strOriginal</name></expr></argument>, <argument><expr><name>strDecoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
