<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Base64TestData.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<comment type="javadoc">/**
 * This random data was encoded by OpenSSL. Java had nothing to do with it. This data helps us test interop between
 * Commons-Codec and OpenSSL. Notice that OpenSSL creates 64 character lines instead of the 76 of Commons-Codec.
 *
 * @see &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;
 * @version $Id $
 * @since 1.4
 */</comment>
<class><specifier>public</specifier> class <name>Base64TestData</name> <block>{

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CODEC_101_MULTIPLE_OF_3</name> =<init> <expr>"123"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CODEC_98_NPE</name>
        =<init> <expr>"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>CODEC_98_NPE_DECODED</name>
        =<init> <expr>"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123"</expr></init></decl>;</decl_stmt>


    <comment type="line">// OpenSSL doesn't include the final \n, but it would be annoying beyond belief</comment>
    <comment type="line">// to further parameterize commons-codec to support this pointless variation.</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ENCODED_64_CHARS_PER_LINE</name>
            =<init> <expr>"9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9\n"
            + "xA7c/FHypWclrZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+\n"
            + "qBpTsPpepW8DNVYy1c02/1wyC+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYd\n"
            + "ivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6+WAELKvm/UovvyaOi+OdMUfjQ0JL\n"
            + "iLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQdgciIHnpdd4VUTPGR\n"
            + "UbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+KZJSo\n"
            + "AviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/\n"
            + "Qoqf92UH/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp25\n"
            + "1IUxBGA4cUxh0eaxk3ODWnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1\n"
            + "thMavm4nDc4vaNoSE1RnZNYwbiUVlVPM9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp\n"
            + "/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjvB5MYQlOlaaTtQrRApXa5\n"
            + "Z4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKWC3KuiOS9\n"
            + "BJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvf\n"
            + "DnqicYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK+\n"
            + "+S7Y0VXUgoYYrBV4Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUE\n"
            + "lepjs1QdV3fEV1LJtiywA3ubVNQJRxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35Ic\n"
            + "aOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p088l3/93qGR5593NCiuPPWcs\n"
            + "DWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2WcypAiOIEkBs\n"
            + "H+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\n"
            + "rb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG\n"
            + "/6YAHZilo8at0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq\n"
            + "3CLZXdZFZ/VrqXeVjtOAu2A=\n"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ENCODED_76_CHARS_PER_LINE</name>
            =<init> <expr>"9IPNKwUvdLiIAp6ctz12SiQmOGstWyYvSPeevufDhrzaws65voykKjbIj33YWTa9xA7c/FHypWcl\n"
            + "rZhQ7onfc3JE93BJ5fT4R9zAEdjbjy1hv4ZYNnET4WJeXMLJ/5p+qBpTsPpepW8DNVYy1c02/1wy\n"
            + "C+kgA6CvRUd9cSr/lt88AEdsTV4GMCn1+EwuAiYdivxuzn+cLM8q2jewqlI52tP9J7Cs8vqG71s6\n"
            + "+WAELKvm/UovvyaOi+OdMUfjQ0JLiLkHu6p9OwUgvQqiDKzEv/Augo0dTPZzYGEyCP5GVrle3QQd\n"
            + "gciIHnpdd4VUTPGRUbXeKbh++U3fbJIng/sQXM3IYByMZ7xt9HWS1LUcRdQ7Prwn/IlQWxOMeq+K\n"
            + "ZJSoAviWtdserXyHbIEa//hmr4p/j80k0g9q35hq1ayGM9984ALTSaZ8WeyFbZx1CxC/Qoqf92UH\n"
            + "/ylBRnSJNn4sS0oa3uUbNvOnpkB4D9V7Ut9atinCJrw+wiJcMl+9kp251IUxBGA4cUxh0eaxk3OD\n"
            + "WnwI95EktmWOKwCSP0xjWwIMxDjygwAG5R8fk9H9bVi1thMavm4nDc4vaNoSE1RnZNYwbiUVlVPM\n"
            + "9EclvJWTWd6igWeA0MxHAA8iOM5Vnmqp/WGM7UDq59rBIdNQCoeTJaAkEtAuLL5zogOa5e+MzVjv\n"
            + "B5MYQlOlaaTtQrRApXa5Z4VfEanu9UK2fi1T8jJPFC2PmXebxp0bnO+VW+bgyEdIIkIQCaZq1MKW\n"
            + "C3KuiOS9BJ1t7O0A2JKJKvoE4UNulzV2TGCC+KAnmjRqQBqXlJmgjHQAoHNZKOma/uIQOsvfDnqi\n"
            + "cYdDmfyCYuV89HjA1H8tiDJ85VfsrFHdcbPAoNCpi65awJSHfdPO1NDONOK++S7Y0VXUgoYYrBV4\n"
            + "Y7YbC8wg/nqcimr3lm3tRyp+QsgKzdREbfNRk0F5PLyLfsUElepjs1QdV3fEV1LJtiywA3ubVNQJ\n"
            + "RxhbYxa/C/Xy2qxpm6vvdL92l3q1ccev35IcaOiSx7Im+/GxV2lVKdaOvYVGDD1zBRe6Y2CwQb9p\n"
            + "088l3/93qGR5593NCiuPPWcsDWwUShM1EyW0FNX1F8bnzHnYijoyE/jf4s/l9bBd7yJdRWRCyih2\n"
            + "WcypAiOIEkBsH+dCTgalu8sRDoMh4ZIBBdgHfoZUycLqReQFLZZ4Sl4zSmzt5vQxQFhEKb9+ff/4\n"
            + "rb1KAo6wifengxVfIsa2b5ljXzAqXs7JkPvmC6fa7X4ZZndRokaxYlu3cg8OV+uG/6YAHZilo8at\n"
            + "0OpkkNdNFuhwuGlkBqrZKNUj/gSiYYc06gF/r/z6iWAjpXJRW1qq3CLZXdZFZ/VrqXeVjtOAu2A=\n"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>DECODED</name>
            =<init> <expr><block>{<expr>-12</expr>, <expr>-125</expr>, <expr>-51</expr>, <expr>43</expr>, <expr>5</expr>, <expr>47</expr>, <expr>116</expr>, <expr>-72</expr>, <expr>-120</expr>, <expr>2</expr>, <expr>-98</expr>, <expr>-100</expr>, <expr>-73</expr>, <expr>61</expr>, <expr>118</expr>, <expr>74</expr>, <expr>36</expr>, <expr>38</expr>, <expr>56</expr>, <expr>107</expr>, <expr>45</expr>, <expr>91</expr>, <expr>38</expr>,
            <expr>47</expr>, <expr>72</expr>, <expr>-9</expr>, <expr>-98</expr>, <expr>-66</expr>, <expr>-25</expr>, <expr>-61</expr>, <expr>-122</expr>, <expr>-68</expr>, <expr>-38</expr>, <expr>-62</expr>, <expr>-50</expr>, <expr>-71</expr>, <expr>-66</expr>, <expr>-116</expr>, <expr>-92</expr>, <expr>42</expr>, <expr>54</expr>, <expr>-56</expr>, <expr>-113</expr>, <expr>125</expr>,
            <expr>-40</expr>, <expr>89</expr>, <expr>54</expr>, <expr>-67</expr>, <expr>-60</expr>, <expr>14</expr>, <expr>-36</expr>, <expr>-4</expr>, <expr>81</expr>, <expr>-14</expr>, <expr>-91</expr>, <expr>103</expr>, <expr>37</expr>, <expr>-83</expr>, <expr>-104</expr>, <expr>80</expr>, <expr>-18</expr>, <expr>-119</expr>, <expr>-33</expr>, <expr>115</expr>, <expr>114</expr>, <expr>68</expr>,
            <expr>-9</expr>, <expr>112</expr>, <expr>73</expr>, <expr>-27</expr>, <expr>-12</expr>, <expr>-8</expr>, <expr>71</expr>, <expr>-36</expr>, <expr>-64</expr>, <expr>17</expr>, <expr>-40</expr>, <expr>-37</expr>, <expr>-113</expr>, <expr>45</expr>, <expr>97</expr>, <expr>-65</expr>, <expr>-122</expr>, <expr>88</expr>, <expr>54</expr>, <expr>113</expr>, <expr>19</expr>, <expr>-31</expr>, <expr>98</expr>,
            <expr>94</expr>, <expr>92</expr>, <expr>-62</expr>, <expr>-55</expr>, <expr>-1</expr>, <expr>-102</expr>, <expr>126</expr>, <expr>-88</expr>, <expr>26</expr>, <expr>83</expr>, <expr>-80</expr>, <expr>-6</expr>, <expr>94</expr>, <expr>-91</expr>, <expr>111</expr>, <expr>3</expr>, <expr>53</expr>, <expr>86</expr>, <expr>50</expr>, <expr>-43</expr>, <expr>-51</expr>, <expr>54</expr>, <expr>-1</expr>, <expr>92</expr>,
            <expr>50</expr>, <expr>11</expr>, <expr>-23</expr>, <expr>32</expr>, <expr>3</expr>, <expr>-96</expr>, <expr>-81</expr>, <expr>69</expr>, <expr>71</expr>, <expr>125</expr>, <expr>113</expr>, <expr>42</expr>, <expr>-1</expr>, <expr>-106</expr>, <expr>-33</expr>, <expr>60</expr>, <expr>0</expr>, <expr>71</expr>, <expr>108</expr>, <expr>77</expr>, <expr>94</expr>, <expr>6</expr>, <expr>48</expr>, <expr>41</expr>, <expr>-11</expr>,
            <expr>-8</expr>, <expr>76</expr>, <expr>46</expr>, <expr>2</expr>, <expr>38</expr>, <expr>29</expr>, <expr>-118</expr>, <expr>-4</expr>, <expr>110</expr>, <expr>-50</expr>, <expr>127</expr>, <expr>-100</expr>, <expr>44</expr>, <expr>-49</expr>, <expr>42</expr>, <expr>-38</expr>, <expr>55</expr>, <expr>-80</expr>, <expr>-86</expr>, <expr>82</expr>, <expr>57</expr>, <expr>-38</expr>, <expr>-45</expr>,
            <expr>-3</expr>, <expr>39</expr>, <expr>-80</expr>, <expr>-84</expr>, <expr>-14</expr>, <expr>-6</expr>, <expr>-122</expr>, <expr>-17</expr>, <expr>91</expr>, <expr>58</expr>, <expr>-7</expr>, <expr>96</expr>, <expr>4</expr>, <expr>44</expr>, <expr>-85</expr>, <expr>-26</expr>, <expr>-3</expr>, <expr>74</expr>, <expr>47</expr>, <expr>-65</expr>, <expr>38</expr>, <expr>-114</expr>, <expr>-117</expr>,
            <expr>-29</expr>, <expr>-99</expr>, <expr>49</expr>, <expr>71</expr>, <expr>-29</expr>, <expr>67</expr>, <expr>66</expr>, <expr>75</expr>, <expr>-120</expr>, <expr>-71</expr>, <expr>7</expr>, <expr>-69</expr>, <expr>-86</expr>, <expr>125</expr>, <expr>59</expr>, <expr>5</expr>, <expr>32</expr>, <expr>-67</expr>, <expr>10</expr>, <expr>-94</expr>, <expr>12</expr>, <expr>-84</expr>, <expr>-60</expr>, <expr>-65</expr>,
            <expr>-16</expr>, <expr>46</expr>, <expr>-126</expr>, <expr>-115</expr>, <expr>29</expr>, <expr>76</expr>, <expr>-10</expr>, <expr>115</expr>, <expr>96</expr>, <expr>97</expr>, <expr>50</expr>, <expr>8</expr>, <expr>-2</expr>, <expr>70</expr>, <expr>86</expr>, <expr>-71</expr>, <expr>94</expr>, <expr>-35</expr>, <expr>4</expr>, <expr>29</expr>, <expr>-127</expr>, <expr>-56</expr>, <expr>-120</expr>,
            <expr>30</expr>, <expr>122</expr>, <expr>93</expr>, <expr>119</expr>, <expr>-123</expr>, <expr>84</expr>, <expr>76</expr>, <expr>-15</expr>, <expr>-111</expr>, <expr>81</expr>, <expr>-75</expr>, <expr>-34</expr>, <expr>41</expr>, <expr>-72</expr>, <expr>126</expr>, <expr>-7</expr>, <expr>77</expr>, <expr>-33</expr>, <expr>108</expr>, <expr>-110</expr>, <expr>39</expr>, <expr>-125</expr>,
            <expr>-5</expr>, <expr>16</expr>, <expr>92</expr>, <expr>-51</expr>, <expr>-56</expr>, <expr>96</expr>, <expr>28</expr>, <expr>-116</expr>, <expr>103</expr>, <expr>-68</expr>, <expr>109</expr>, <expr>-12</expr>, <expr>117</expr>, <expr>-110</expr>, <expr>-44</expr>, <expr>-75</expr>, <expr>28</expr>, <expr>69</expr>, <expr>-44</expr>, <expr>59</expr>, <expr>62</expr>, <expr>-68</expr>,
            <expr>39</expr>, <expr>-4</expr>, <expr>-119</expr>, <expr>80</expr>, <expr>91</expr>, <expr>19</expr>, <expr>-116</expr>, <expr>122</expr>, <expr>-81</expr>, <expr>-118</expr>, <expr>100</expr>, <expr>-108</expr>, <expr>-88</expr>, <expr>2</expr>, <expr>-8</expr>, <expr>-106</expr>, <expr>-75</expr>, <expr>-37</expr>, <expr>30</expr>, <expr>-83</expr>, <expr>124</expr>, <expr>-121</expr>,
            <expr>108</expr>, <expr>-127</expr>, <expr>26</expr>, <expr>-1</expr>, <expr>-8</expr>, <expr>102</expr>, <expr>-81</expr>, <expr>-118</expr>, <expr>127</expr>, <expr>-113</expr>, <expr>-51</expr>, <expr>36</expr>, <expr>-46</expr>, <expr>15</expr>, <expr>106</expr>, <expr>-33</expr>, <expr>-104</expr>, <expr>106</expr>, <expr>-43</expr>, <expr>-84</expr>, <expr>-122</expr>,
            <expr>51</expr>, <expr>-33</expr>, <expr>124</expr>, <expr>-32</expr>, <expr>2</expr>, <expr>-45</expr>, <expr>73</expr>, <expr>-90</expr>, <expr>124</expr>, <expr>89</expr>, <expr>-20</expr>, <expr>-123</expr>, <expr>109</expr>, <expr>-100</expr>, <expr>117</expr>, <expr>11</expr>, <expr>16</expr>, <expr>-65</expr>, <expr>66</expr>, <expr>-118</expr>, <expr>-97</expr>, <expr>-9</expr>,
            <expr>101</expr>, <expr>7</expr>, <expr>-1</expr>, <expr>41</expr>, <expr>65</expr>, <expr>70</expr>, <expr>116</expr>, <expr>-119</expr>, <expr>54</expr>, <expr>126</expr>, <expr>44</expr>, <expr>75</expr>, <expr>74</expr>, <expr>26</expr>, <expr>-34</expr>, <expr>-27</expr>, <expr>27</expr>, <expr>54</expr>, <expr>-13</expr>, <expr>-89</expr>, <expr>-90</expr>, <expr>64</expr>, <expr>120</expr>, <expr>15</expr>,
            <expr>-43</expr>, <expr>123</expr>, <expr>82</expr>, <expr>-33</expr>, <expr>90</expr>, <expr>-74</expr>, <expr>41</expr>, <expr>-62</expr>, <expr>38</expr>, <expr>-68</expr>, <expr>62</expr>, <expr>-62</expr>, <expr>34</expr>, <expr>92</expr>, <expr>50</expr>, <expr>95</expr>, <expr>-67</expr>, <expr>-110</expr>, <expr>-99</expr>, <expr>-71</expr>, <expr>-44</expr>, <expr>-123</expr>,
            <expr>49</expr>, <expr>4</expr>, <expr>96</expr>, <expr>56</expr>, <expr>113</expr>, <expr>76</expr>, <expr>97</expr>, <expr>-47</expr>, <expr>-26</expr>, <expr>-79</expr>, <expr>-109</expr>, <expr>115</expr>, <expr>-125</expr>, <expr>90</expr>, <expr>124</expr>, <expr>8</expr>, <expr>-9</expr>, <expr>-111</expr>, <expr>36</expr>, <expr>-74</expr>, <expr>101</expr>, <expr>-114</expr>, <expr>43</expr>,
            <expr>0</expr>, <expr>-110</expr>, <expr>63</expr>, <expr>76</expr>, <expr>99</expr>, <expr>91</expr>, <expr>2</expr>, <expr>12</expr>, <expr>-60</expr>, <expr>56</expr>, <expr>-14</expr>, <expr>-125</expr>, <expr>0</expr>, <expr>6</expr>, <expr>-27</expr>, <expr>31</expr>, <expr>31</expr>, <expr>-109</expr>, <expr>-47</expr>, <expr>-3</expr>, <expr>109</expr>, <expr>88</expr>, <expr>-75</expr>, <expr>-74</expr>,
            <expr>19</expr>, <expr>26</expr>, <expr>-66</expr>, <expr>110</expr>, <expr>39</expr>, <expr>13</expr>, <expr>-50</expr>, <expr>47</expr>, <expr>104</expr>, <expr>-38</expr>, <expr>18</expr>, <expr>19</expr>, <expr>84</expr>, <expr>103</expr>, <expr>100</expr>, <expr>-42</expr>, <expr>48</expr>, <expr>110</expr>, <expr>37</expr>, <expr>21</expr>, <expr>-107</expr>, <expr>83</expr>, <expr>-52</expr>,
            <expr>-12</expr>, <expr>71</expr>, <expr>37</expr>, <expr>-68</expr>, <expr>-107</expr>, <expr>-109</expr>, <expr>89</expr>, <expr>-34</expr>, <expr>-94</expr>, <expr>-127</expr>, <expr>103</expr>, <expr>-128</expr>, <expr>-48</expr>, <expr>-52</expr>, <expr>71</expr>, <expr>0</expr>, <expr>15</expr>, <expr>34</expr>, <expr>56</expr>, <expr>-50</expr>, <expr>85</expr>, <expr>-98</expr>,
            <expr>106</expr>, <expr>-87</expr>, <expr>-3</expr>, <expr>97</expr>, <expr>-116</expr>, <expr>-19</expr>, <expr>64</expr>, <expr>-22</expr>, <expr>-25</expr>, <expr>-38</expr>, <expr>-63</expr>, <expr>33</expr>, <expr>-45</expr>, <expr>80</expr>, <expr>10</expr>, <expr>-121</expr>, <expr>-109</expr>, <expr>37</expr>, <expr>-96</expr>, <expr>36</expr>, <expr>18</expr>, <expr>-48</expr>,
            <expr>46</expr>, <expr>44</expr>, <expr>-66</expr>, <expr>115</expr>, <expr>-94</expr>, <expr>3</expr>, <expr>-102</expr>, <expr>-27</expr>, <expr>-17</expr>, <expr>-116</expr>, <expr>-51</expr>, <expr>88</expr>, <expr>-17</expr>, <expr>7</expr>, <expr>-109</expr>, <expr>24</expr>, <expr>66</expr>, <expr>83</expr>, <expr>-91</expr>, <expr>105</expr>, <expr>-92</expr>, <expr>-19</expr>,
            <expr>66</expr>, <expr>-76</expr>, <expr>64</expr>, <expr>-91</expr>, <expr>118</expr>, <expr>-71</expr>, <expr>103</expr>, <expr>-123</expr>, <expr>95</expr>, <expr>17</expr>, <expr>-87</expr>, <expr>-18</expr>, <expr>-11</expr>, <expr>66</expr>, <expr>-74</expr>, <expr>126</expr>, <expr>45</expr>, <expr>83</expr>, <expr>-14</expr>, <expr>50</expr>, <expr>79</expr>, <expr>20</expr>, <expr>45</expr>,
            <expr>-113</expr>, <expr>-103</expr>, <expr>119</expr>, <expr>-101</expr>, <expr>-58</expr>, <expr>-99</expr>, <expr>27</expr>, <expr>-100</expr>, <expr>-17</expr>, <expr>-107</expr>, <expr>91</expr>, <expr>-26</expr>, <expr>-32</expr>, <expr>-56</expr>, <expr>71</expr>, <expr>72</expr>, <expr>34</expr>, <expr>66</expr>, <expr>16</expr>, <expr>9</expr>, <expr>-90</expr>, <expr>106</expr>,
            <expr>-44</expr>, <expr>-62</expr>, <expr>-106</expr>, <expr>11</expr>, <expr>114</expr>, <expr>-82</expr>, <expr>-120</expr>, <expr>-28</expr>, <expr>-67</expr>, <expr>4</expr>, <expr>-99</expr>, <expr>109</expr>, <expr>-20</expr>, <expr>-19</expr>, <expr>0</expr>, <expr>-40</expr>, <expr>-110</expr>, <expr>-119</expr>, <expr>42</expr>, <expr>-6</expr>, <expr>4</expr>, <expr>-31</expr>,
            <expr>67</expr>, <expr>110</expr>, <expr>-105</expr>, <expr>53</expr>, <expr>118</expr>, <expr>76</expr>, <expr>96</expr>, <expr>-126</expr>, <expr>-8</expr>, <expr>-96</expr>, <expr>39</expr>, <expr>-102</expr>, <expr>52</expr>, <expr>106</expr>, <expr>64</expr>, <expr>26</expr>, <expr>-105</expr>, <expr>-108</expr>, <expr>-103</expr>, <expr>-96</expr>, <expr>-116</expr>,
            <expr>116</expr>, <expr>0</expr>, <expr>-96</expr>, <expr>115</expr>, <expr>89</expr>, <expr>40</expr>, <expr>-23</expr>, <expr>-102</expr>, <expr>-2</expr>, <expr>-30</expr>, <expr>16</expr>, <expr>58</expr>, <expr>-53</expr>, <expr>-33</expr>, <expr>14</expr>, <expr>122</expr>, <expr>-94</expr>, <expr>113</expr>, <expr>-121</expr>, <expr>67</expr>, <expr>-103</expr>, <expr>-4</expr>,
            <expr>-126</expr>, <expr>98</expr>, <expr>-27</expr>, <expr>124</expr>, <expr>-12</expr>, <expr>120</expr>, <expr>-64</expr>, <expr>-44</expr>, <expr>127</expr>, <expr>45</expr>, <expr>-120</expr>, <expr>50</expr>, <expr>124</expr>, <expr>-27</expr>, <expr>87</expr>, <expr>-20</expr>, <expr>-84</expr>, <expr>81</expr>, <expr>-35</expr>, <expr>113</expr>, <expr>-77</expr>,
            <expr>-64</expr>, <expr>-96</expr>, <expr>-48</expr>, <expr>-87</expr>, <expr>-117</expr>, <expr>-82</expr>, <expr>90</expr>, <expr>-64</expr>, <expr>-108</expr>, <expr>-121</expr>, <expr>125</expr>, <expr>-45</expr>, <expr>-50</expr>, <expr>-44</expr>, <expr>-48</expr>, <expr>-50</expr>, <expr>52</expr>, <expr>-30</expr>, <expr>-66</expr>, <expr>-7</expr>, <expr>46</expr>,
            <expr>-40</expr>, <expr>-47</expr>, <expr>85</expr>, <expr>-44</expr>, <expr>-126</expr>, <expr>-122</expr>, <expr>24</expr>, <expr>-84</expr>, <expr>21</expr>, <expr>120</expr>, <expr>99</expr>, <expr>-74</expr>, <expr>27</expr>, <expr>11</expr>, <expr>-52</expr>, <expr>32</expr>, <expr>-2</expr>, <expr>122</expr>, <expr>-100</expr>, <expr>-118</expr>, <expr>106</expr>, <expr>-9</expr>,
            <expr>-106</expr>, <expr>109</expr>, <expr>-19</expr>, <expr>71</expr>, <expr>42</expr>, <expr>126</expr>, <expr>66</expr>, <expr>-56</expr>, <expr>10</expr>, <expr>-51</expr>, <expr>-44</expr>, <expr>68</expr>, <expr>109</expr>, <expr>-13</expr>, <expr>81</expr>, <expr>-109</expr>, <expr>65</expr>, <expr>121</expr>, <expr>60</expr>, <expr>-68</expr>, <expr>-117</expr>, <expr>126</expr>,
            <expr>-59</expr>, <expr>4</expr>, <expr>-107</expr>, <expr>-22</expr>, <expr>99</expr>, <expr>-77</expr>, <expr>84</expr>, <expr>29</expr>, <expr>87</expr>, <expr>119</expr>, <expr>-60</expr>, <expr>87</expr>, <expr>82</expr>, <expr>-55</expr>, <expr>-74</expr>, <expr>44</expr>, <expr>-80</expr>, <expr>3</expr>, <expr>123</expr>, <expr>-101</expr>, <expr>84</expr>, <expr>-44</expr>, <expr>9</expr>, <expr>71</expr>,
            <expr>24</expr>, <expr>91</expr>, <expr>99</expr>, <expr>22</expr>, <expr>-65</expr>, <expr>11</expr>, <expr>-11</expr>, <expr>-14</expr>, <expr>-38</expr>, <expr>-84</expr>, <expr>105</expr>, <expr>-101</expr>, <expr>-85</expr>, <expr>-17</expr>, <expr>116</expr>, <expr>-65</expr>, <expr>118</expr>, <expr>-105</expr>, <expr>122</expr>, <expr>-75</expr>, <expr>113</expr>,
            <expr>-57</expr>, <expr>-81</expr>, <expr>-33</expr>, <expr>-110</expr>, <expr>28</expr>, <expr>104</expr>, <expr>-24</expr>, <expr>-110</expr>, <expr>-57</expr>, <expr>-78</expr>, <expr>38</expr>, <expr>-5</expr>, <expr>-15</expr>, <expr>-79</expr>, <expr>87</expr>, <expr>105</expr>, <expr>85</expr>, <expr>41</expr>, <expr>-42</expr>, <expr>-114</expr>, <expr>-67</expr>,
            <expr>-123</expr>, <expr>70</expr>, <expr>12</expr>, <expr>61</expr>, <expr>115</expr>, <expr>5</expr>, <expr>23</expr>, <expr>-70</expr>, <expr>99</expr>, <expr>96</expr>, <expr>-80</expr>, <expr>65</expr>, <expr>-65</expr>, <expr>105</expr>, <expr>-45</expr>, <expr>-49</expr>, <expr>37</expr>, <expr>-33</expr>, <expr>-1</expr>, <expr>119</expr>, <expr>-88</expr>, <expr>100</expr>, <expr>121</expr>,
            <expr>-25</expr>, <expr>-35</expr>, <expr>-51</expr>, <expr>10</expr>, <expr>43</expr>, <expr>-113</expr>, <expr>61</expr>, <expr>103</expr>, <expr>44</expr>, <expr>13</expr>, <expr>108</expr>, <expr>20</expr>, <expr>74</expr>, <expr>19</expr>, <expr>53</expr>, <expr>19</expr>, <expr>37</expr>, <expr>-76</expr>, <expr>20</expr>, <expr>-43</expr>, <expr>-11</expr>, <expr>23</expr>, <expr>-58</expr>, <expr>-25</expr>,
            <expr>-52</expr>, <expr>121</expr>, <expr>-40</expr>, <expr>-118</expr>, <expr>58</expr>, <expr>50</expr>, <expr>19</expr>, <expr>-8</expr>, <expr>-33</expr>, <expr>-30</expr>, <expr>-49</expr>, <expr>-27</expr>, <expr>-11</expr>, <expr>-80</expr>, <expr>93</expr>, <expr>-17</expr>, <expr>34</expr>, <expr>93</expr>, <expr>69</expr>, <expr>100</expr>, <expr>66</expr>, <expr>-54</expr>, <expr>40</expr>,
            <expr>118</expr>, <expr>89</expr>, <expr>-52</expr>, <expr>-87</expr>, <expr>2</expr>, <expr>35</expr>, <expr>-120</expr>, <expr>18</expr>, <expr>64</expr>, <expr>108</expr>, <expr>31</expr>, <expr>-25</expr>, <expr>66</expr>, <expr>78</expr>, <expr>6</expr>, <expr>-91</expr>, <expr>-69</expr>, <expr>-53</expr>, <expr>17</expr>, <expr>14</expr>, <expr>-125</expr>, <expr>33</expr>, <expr>-31</expr>, <expr>-110</expr>,
            <expr>1</expr>, <expr>5</expr>, <expr>-40</expr>, <expr>7</expr>, <expr>126</expr>, <expr>-122</expr>, <expr>84</expr>, <expr>-55</expr>, <expr>-62</expr>, <expr>-22</expr>, <expr>69</expr>, <expr>-28</expr>, <expr>5</expr>, <expr>45</expr>, <expr>-106</expr>, <expr>120</expr>, <expr>74</expr>, <expr>94</expr>, <expr>51</expr>, <expr>74</expr>, <expr>108</expr>, <expr>-19</expr>, <expr>-26</expr>, <expr>-12</expr>,
            <expr>49</expr>, <expr>64</expr>, <expr>88</expr>, <expr>68</expr>, <expr>41</expr>, <expr>-65</expr>, <expr>126</expr>, <expr>125</expr>, <expr>-1</expr>, <expr>-8</expr>, <expr>-83</expr>, <expr>-67</expr>, <expr>74</expr>, <expr>2</expr>, <expr>-114</expr>, <expr>-80</expr>, <expr>-119</expr>, <expr>-9</expr>, <expr>-89</expr>, <expr>-125</expr>, <expr>21</expr>, <expr>95</expr>, <expr>34</expr>,
            <expr>-58</expr>, <expr>-74</expr>, <expr>111</expr>, <expr>-103</expr>, <expr>99</expr>, <expr>95</expr>, <expr>48</expr>, <expr>42</expr>, <expr>94</expr>, <expr>-50</expr>, <expr>-55</expr>, <expr>-112</expr>, <expr>-5</expr>, <expr>-26</expr>, <expr>11</expr>, <expr>-89</expr>, <expr>-38</expr>, <expr>-19</expr>, <expr>126</expr>, <expr>25</expr>, <expr>102</expr>, <expr>119</expr>,
            <expr>81</expr>, <expr>-94</expr>, <expr>70</expr>, <expr>-79</expr>, <expr>98</expr>, <expr>91</expr>, <expr>-73</expr>, <expr>114</expr>, <expr>15</expr>, <expr>14</expr>, <expr>87</expr>, <expr>-21</expr>, <expr>-122</expr>, <expr>-1</expr>, <expr>-90</expr>, <expr>0</expr>, <expr>29</expr>, <expr>-104</expr>, <expr>-91</expr>, <expr>-93</expr>, <expr>-58</expr>, <expr>-83</expr>, <expr>-48</expr>,
            <expr>-22</expr>, <expr>100</expr>, <expr>-112</expr>, <expr>-41</expr>, <expr>77</expr>, <expr>22</expr>, <expr>-24</expr>, <expr>112</expr>, <expr>-72</expr>, <expr>105</expr>, <expr>100</expr>, <expr>6</expr>, <expr>-86</expr>, <expr>-39</expr>, <expr>40</expr>, <expr>-43</expr>, <expr>35</expr>, <expr>-2</expr>, <expr>4</expr>, <expr>-94</expr>, <expr>97</expr>, <expr>-121</expr>, <expr>52</expr>,
            <expr>-22</expr>, <expr>1</expr>, <expr>127</expr>, <expr>-81</expr>, <expr>-4</expr>, <expr>-6</expr>, <expr>-119</expr>, <expr>96</expr>, <expr>35</expr>, <expr>-91</expr>, <expr>114</expr>, <expr>81</expr>, <expr>91</expr>, <expr>90</expr>, <expr>-86</expr>, <expr>-36</expr>, <expr>34</expr>, <expr>-39</expr>, <expr>93</expr>, <expr>-42</expr>, <expr>69</expr>, <expr>103</expr>, <expr>-11</expr>,
            <expr>107</expr>, <expr>-87</expr>, <expr>119</expr>, <expr>-107</expr>, <expr>-114</expr>, <expr>-45</expr>, <expr>-128</expr>, <expr>-69</expr>, <expr>96</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Some utility code to help test chunked reads of the InputStream.</comment>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>SIZE_KEY</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>LAST_READ_KEY</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>streamToBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// new byte[7] is obviously quite slow, but helps exercise the code.</comment>
        <return>return <expr><call><name>streamToBytes</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr>new <name><name>byte</name><index>[<expr>7</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>streamToBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>, <param><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>int</name><index>[]</index></type> <name>status</name> =<init> <expr><call><name>fill</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><name><name>status</name><index>[<expr><name>SIZE_KEY</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lastRead</name> =<init> <expr><name><name>status</name><index>[<expr><name>LAST_READ_KEY</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>lastRead</name> != -1</expr>)</condition> <block>{
                <expr_stmt><expr><name>buf</name> = <call><name>resizeArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> = <call><name>fill</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>size</name> = <name><name>status</name><index>[<expr><name>SIZE_KEY</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastRead</name> = <name><name>status</name><index>[<expr><name>LAST_READ_KEY</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><name><name>buf</name>.<name>length</name></name> != <name>size</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>smallerBuf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>smallerBuf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> = <name>smallerBuf</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <finally>finally <block>{
            <expr_stmt><expr><call><name><name>in</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr><name>buf</name></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>int</name><index>[]</index></type> <name>fill</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>buf</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>read</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> - <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastRead</name> =<init> <expr><name>read</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>read</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>read</name> = 0</expr>;</expr_stmt>
        }</block></then></if>
        <while>while <condition>(<expr><name>lastRead</name> != -1 &amp;&amp; <name>read</name> + <name>offset</name> &lt; <name><name>buf</name>.<name>length</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>lastRead</name> = <call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name> + <name>read</name></expr></argument>, <argument><expr><name><name>buf</name>.<name>length</name></name> - <name>read</name> - <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>lastRead</name> != -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>read</name> += <name>lastRead</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr>new <name><name>int</name><index>[]</index></name><block>{<expr><name>offset</name> + <name>read</name></expr>, <expr><name>lastRead</name></expr>}</block></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>resizeArray</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>biggerBytes</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>bytes</name>.<name>length</name></name> * 2</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>biggerBytes</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>bytes</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>biggerBytes</name></expr>;</return>
    }</block></function>


    <comment type="javadoc">/**
     * Returns an encoded and decoded copy of the same random data.
     *
     * @param size amount of random data to generate and encode
     * @param urlSafe true if encoding be urlSafe
     * @return two byte[] arrays:  [0] = decoded, [1] = encoded
     */</comment>
    <function><type><specifier>static</specifier> <name>byte</name><index>[]</index><index>[]</index></type> <name>randomData</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>size</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>urlSafe</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>r</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decoded</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>nextBytes</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encoded</name> =<init> <expr><name>urlSafe</name> ? <call><name><name>Base64</name>.<name>encodeBase64URLSafe</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call> : <call><name><name>Base64</name>.<name>encodeBase64</name></name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <name><name>byte</name><index>[]</index><index>[]</index></name> <block>{<expr><name>decoded</name></expr>, <expr><name>encoded</name></expr>}</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests the supplied byte[] array to see if it contains the specified byte c.
     *
     * @param bytes byte[] array to test
     * @param c byte to look for
     * @return true if bytes contains c, false otherwise
     */</comment>
    <function><type><specifier>static</specifier> <name>boolean</name></type> <name>bytesContain</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name> :<range> <expr><name>bytes</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>b</name> == <name>c</name></expr>)</condition><then> <block>{ <return>return <expr>true</expr>;</return> }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

}</block></class>
</unit>
