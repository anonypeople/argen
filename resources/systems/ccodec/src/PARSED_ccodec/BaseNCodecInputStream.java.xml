<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\binary\BaseNCodecInputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>BaseNCodec</name>.<name>EOF</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>FilterInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>BaseNCodec</name>.<name>Context</name></name>;</import>

<comment type="javadoc">/**
 * Abstract superclass for Base-N input streams.
 *
 * @since 1.5
 * @version $Id: BaseNCodecInputStream.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>BaseNCodecInputStream</name> <super><extends>extends <name>FilterInputStream</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BaseNCodec</name></type> <name>baseNCodec</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>singleByte</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>context</name> =<init> <expr>new <call><name>Context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>BaseNCodecInputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>BaseNCodec</name></type> <name>baseNCodec</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>doEncode</name></name> = <name>doEncode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseNCodec</name></name> = <name>baseNCodec</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * {@inheritDoc}
     *
     * @return &lt;code&gt;0&lt;/code&gt; if the {@link InputStream} has reached &lt;code&gt;EOF&lt;/code&gt;,
     * &lt;code&gt;1&lt;/code&gt; otherwise
     * @since 1.7
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>available</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Note: the logic is similar to the InflaterInputStream:</comment>
        <comment type="line">//       as long as we have not reached EOF, indicate that there is more</comment>
        <comment type="line">//       data available. As we do not know for sure how much data is left,</comment>
        <comment type="line">//       just return 1 as a safe guess.</comment>

        <return>return <expr><name><name>context</name>.<name>eof</name></name> ? 0 : 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Marks the current position in this input stream.
     * &lt;p&gt;The {@link #mark} method of {@link BaseNCodecInputStream} does nothing.&lt;/p&gt;
     *
     * @param readLimit the maximum limit of bytes that can be read before the mark position becomes invalid.
     * @since 1.7
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>mark</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>readLimit</name></decl></param>)</parameter_list> <block>{
    }</block></function>

    <comment type="javadoc">/**
     * {@inheritDoc}
     *
     * @return always returns &lt;code&gt;false&lt;/code&gt;
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>boolean</name></type> <name>markSupported</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>false</expr>;</return> <comment type="line">// not an easy job to support marks</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Reads one &lt;code&gt;byte&lt;/code&gt; from this input stream.
     *
     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.
     * @throws IOException
     *             if an I/O error occurs.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> =<init> <expr><call><name>read</name><argument_list>(<argument><expr><name>singleByte</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>r</name> == 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>r</name> = <call><name>read</name><argument_list>(<argument><expr><name>singleByte</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>r</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name> =<init> <expr><name><name>singleByte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>b</name> &lt; 0 ? 256 + <name>b</name> : <name>b</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>EOF</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Attempts to read &lt;code&gt;len&lt;/code&gt; bytes into the specified &lt;code&gt;b&lt;/code&gt; array starting at &lt;code&gt;offset&lt;/code&gt;
     * from this InputStream.
     *
     * @param b
     *            destination byte array
     * @param offset
     *            where to start writing the bytes
     * @param len
     *            maximum number of bytes to read
     *
     * @return number of bytes read
     * @throws IOException
     *             if an I/O error occurs.
     * @throws NullPointerException
     *             if the byte array parameter is null
     * @throws IndexOutOfBoundsException
     *             if offset, len or buffer size are invalid
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>b</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>offset</name> &lt; 0 || <name>len</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>offset</name> &gt; <name><name>b</name>.<name>length</name></name> || <name>offset</name> + <name>len</name> &gt; <name><name>b</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>readLen</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
            <comment type="block">/*
             Rationale for while-loop on (readLen == 0):
             -----
             Base32.readResults() usually returns &gt; 0 or EOF (-1).  In the
             rare case where it returns 0, we just keep trying.

             This is essentially an undocumented contract for InputStream
             implementors that want their code to work properly with
             java.io.InputStreamReader, since the latter hates it when
             InputStream.read(byte[]) returns a zero.  Unfortunately our
             readResults() call must return 0 if a large amount of the data
             being decoded was non-base32, so this while-loop enables proper
             interop with InputStreamReader for that scenario.
             -----
             This is a fix for CODEC-101
            */</comment>
            <while>while <condition>(<expr><name>readLen</name> == 0</expr>)</condition> <block>{
                <if>if <condition>(<expr>!<call><name><name>baseNCodec</name>.<name>hasData</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>doEncode</name> ? 4096 : 8192</expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>c</name> =<init> <expr><call><name><name>in</name>.<name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>doEncode</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <expr_stmt><expr><name>readLen</name> = <call><name><name>baseNCodec</name>.<name>readResults</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>readLen</name></expr>;</return>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Repositions this stream to the position at the time the mark method was last called on this input stream.
     * &lt;p&gt;
     * The {@link #reset} method of {@link BaseNCodecInputStream} does nothing except throw an {@link IOException}.
     *
     * @throws IOException if this method is invoked
     * @since 1.7
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <throw>throw <expr>new <call><name>IOException</name><argument_list>(<argument><expr>"mark/reset not supported"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * {@inheritDoc}
     *
     * @throws IllegalArgumentException if the provided skip length is negative
     * @since 1.7
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>long</name></type> <name>skip</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>long</name></type> <name>n</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Negative skip length: " + <name>n</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// skip in chunks of 512 bytes</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr>new <name><name>byte</name><index>[<expr>512</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>todo</name> =<init> <expr><name>n</name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>todo</name> &gt; 0</expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> =<init> <expr>(<name>int</name>) <call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name><name>b</name>.<name>length</name></name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>len</name> = <call><name><name>this</name>.<name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>len</name> == <name>EOF</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>todo</name> -= <name>len</name></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>n</name> - <name>todo</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
