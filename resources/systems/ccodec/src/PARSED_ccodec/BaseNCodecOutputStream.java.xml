<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\binary\BaseNCodecOutputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>BaseNCodec</name>.<name>EOF</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>FilterOutputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>OutputStream</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>BaseNCodec</name>.<name>Context</name></name>;</import>

<comment type="javadoc">/**
 * Abstract superclass for Base-N output streams.
 *
 * @since 1.5
 * @version $Id: BaseNCodecOutputStream.java 1544347 2013-11-21 22:30:31Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>BaseNCodecOutputStream</name> <super><extends>extends <name>FilterOutputStream</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>BaseNCodec</name></type> <name>baseNCodec</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>singleByte</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Context</name></type> <name>context</name> =<init> <expr>new <call><name>Context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO should this be protected?</comment>
    <constructor><specifier>public</specifier> <name>BaseNCodecOutputStream</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>OutputStream</name></type> <name>out</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>BaseNCodec</name></type> <name>basedCodec</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>doEncode</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>baseNCodec</name></name> = <name>basedCodec</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>doEncode</name></name> = <name>doEncode</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Writes the specified &lt;code&gt;byte&lt;/code&gt; to this output stream.
     *
     * @param i
     *            source byte
     * @throws IOException
     *             if an I/O error occurs.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>i</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>singleByte</name><index>[<expr>0</expr>]</index></name> = (<name>byte</name>) <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>singleByte</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Writes &lt;code&gt;len&lt;/code&gt; bytes from the specified &lt;code&gt;b&lt;/code&gt; array starting at &lt;code&gt;offset&lt;/code&gt; to this
     * output stream.
     *
     * @param b
     *            source byte array
     * @param offset
     *            where to start reading the bytes
     * @param len
     *            maximum number of bytes to write
     *
     * @throws IOException
     *             if an I/O error occurs.
     * @throws NullPointerException
     *             if the byte array parameter is null
     * @throws IndexOutOfBoundsException
     *             if offset, len or buffer size are invalid
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>write</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>b</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>offset</name> &lt; 0 || <name>len</name> &lt; 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>offset</name> &gt; <name><name>b</name>.<name>length</name></name> || <name>offset</name> + <name>len</name> &gt; <name><name>b</name>.<name>length</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IndexOutOfBoundsException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then> <else>else <if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>doEncode</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>flush</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Flushes this output stream and forces any buffered output bytes to be written out to the stream. If propagate is
     * true, the wrapped stream will also be flushed.
     *
     * @param propagate
     *            boolean flag to indicate whether the wrapped OutputStream should also be flushed.
     * @throws IOException
     *             if an I/O error occurs.
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>propagate</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>avail</name> =<init> <expr><call><name><name>baseNCodec</name>.<name>available</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>avail</name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>buf</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>avail</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>c</name> =<init> <expr><call><name><name>baseNCodec</name>.<name>readResults</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>avail</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>out</name>.<name>write</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>propagate</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="javadoc">/**
     * Flushes this output stream and forces any buffered output bytes to be written out to the stream.
     *
     * @throws IOException
     *             if an I/O error occurs.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>flush</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Closes this output stream and releases any system resources associated with the stream.
     *
     * @throws IOException
     *             if an I/O error occurs.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Notify encoder of EOF (-1).</comment>
        <if>if <condition>(<expr><name>doEncode</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>singleByte</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>EOF</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>baseNCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>singleByte</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>EOF</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
