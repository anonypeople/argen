<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\BaseNCodecTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Before</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>BaseNCodecTest</name> <block>{

    <decl_stmt><decl><type><name>BaseNCodec</name></type> <name>codec</name></decl>;</decl_stmt>

    <function><type><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>codec</name> = new <class><super><name>BaseNCodec</name></super><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list> <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <name>boolean</name></type> <name>isInAlphabet</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name>b</name></decl></param>)</parameter_list> <block>{
                <return>return <expr><name>b</name>=='O' || <name>b</name> == 'K'</expr>;</return> <comment type="line">// allow OK</comment>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <name>void</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>pArray</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>i</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></param>)</parameter_list> <block>{
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <name>void</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>pArray</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>i</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></param>)</parameter_list> <block>{
            }</block></function>
        }</block></class></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBaseNCodec</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

<comment type="line">//    @Test</comment>
<comment type="line">//    public void testHasData() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testAvail() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEnsureBufferSize() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testReadResults() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsWhiteSpace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>BaseNCodec</name>.<name>isWhiteSpace</name></name><argument_list>(<argument><expr>(<name>byte</name>) ' '</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>BaseNCodec</name>.<name>isWhiteSpace</name></name><argument_list>(<argument><expr>(<name>byte</name>) '\n'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>BaseNCodec</name>.<name>isWhiteSpace</name></name><argument_list>(<argument><expr>(<name>byte</name>) '\r'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>BaseNCodec</name>.<name>isWhiteSpace</name></name><argument_list>(<argument><expr>(<name>byte</name>) '\t'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEncodeObject() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEncodeToString() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testDecodeObject() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testDecodeString() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testDecodeByteArray() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEncodeByteArray() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEncodeAsString() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testEncodeByteArrayIntInt() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    @Test</comment>
<comment type="line">//    public void testDecodeByteArrayIntInt() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsInAlphabetByte</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>(<name>byte</name>) 'a'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>(<name>byte</name>) 'O'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>(<name>byte</name>) 'K'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsInAlphabetByteArrayBoolean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'O'</expr>}</block></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'O'</expr>,<expr>' '</expr>}</block></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>' '</expr>}</block></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'O'</expr>}</block></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>'O'</expr>,<expr>' '</expr>}</block></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>' '</expr>}</block></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsInAlphabetString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>"OK"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>isInAlphabet</name></name><argument_list>(<argument><expr>"O=K= \t\n\r"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testContainsAlphabetOrPad</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr>"OK".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr>"OK ".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr>"ok ".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>codec</name>.<name>containsAlphabetOrPad</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr><name><name>codec</name>.<name>PAD</name></name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

<comment type="line">//    @Test</comment>
<comment type="line">//    public void testGetEncodedLength() {</comment>
<comment type="line">//        fail("Not yet implemented");</comment>
<comment type="line">//    }</comment>
}</block></class>
</unit>
