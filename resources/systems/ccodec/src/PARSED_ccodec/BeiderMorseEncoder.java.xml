<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\bm\BeiderMorseEncoder.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Encodes strings into their Beider-Morse phonetic encoding.
 * &lt;p&gt;
 * Beider-Morse phonetic encodings are optimised for family names. However, they may be useful for a wide range
 * of words.
 * &lt;p&gt;
 * This encoder is intentionally mutable to allow dynamic configuration through bean properties. As such, it
 * is mutable, and may not be thread-safe. If you require a guaranteed thread-safe encoding then use
 * {@link PhoneticEngine} directly.
 * &lt;p&gt;
 * &lt;b&gt;Encoding overview&lt;/b&gt;
 * &lt;p&gt;
 * Beider-Morse phonetic encodings is a multi-step process. Firstly, a table of rules is consulted to guess what
 * language the word comes from. For example, if it ends in "&lt;code&gt;ault&lt;/code&gt;" then it infers that the word is French.
 * Next, the word is translated into a phonetic representation using a language-specific phonetics table. Some
 * runs of letters can be pronounced in multiple ways, and a single run of letters may be potentially broken up
 * into phonemes at different places, so this stage results in a set of possible language-specific phonetic
 * representations. Lastly, this language-specific phonetic representation is processed by a table of rules that
 * re-writes it phonetically taking into account systematic pronunciation differences between languages, to move
 * it towards a pan-indo-european phonetic representation. Again, sometimes there are multiple ways this could be
 * done and sometimes things that can be pronounced in several ways in the source language have only one way to
 * represent them in this average phonetic language, so the result is again a set of phonetic spellings.
 * &lt;p&gt;
 * Some names are treated as having multiple parts. This can be due to two things. Firstly, they may be hyphenated.
 * In this case, each individual hyphenated word is encoded, and then these are combined end-to-end for the final
 * encoding. Secondly, some names have standard prefixes, for example, "&lt;code&gt;Mac/Mc&lt;/code&gt;" in Scottish (English)
 * names. As sometimes it is ambiguous whether the prefix is intended or is an accident of the spelling, the word
 * is encoded once with the prefix and once without it. The resulting encoding contains one and then the other result.
 * &lt;p&gt;
 * &lt;b&gt;Encoding format&lt;/b&gt;
 * &lt;p&gt;
 * Individual phonetic spellings of an input word are represented in upper- and lower-case roman characters. Where
 * there are multiple possible phonetic representations, these are joined with a pipe (&lt;code&gt;|&lt;/code&gt;) character.
 * If multiple hyphenated words where found, or if the word may contain a name prefix, each encoded word is placed
 * in elipses and these blocks are then joined with hyphens. For example, "&lt;code&gt;d'ortley&lt;/code&gt;" has a possible
 * prefix. The form without prefix encodes to "&lt;code&gt;ortlaj|ortlej&lt;/code&gt;", while the form with prefix encodes to
 * "&lt;code&gt;dortlaj|dortlej&lt;/code&gt;". Thus, the full, combined encoding is "{@code (ortlaj|ortlej)-(dortlaj|dortlej)}".
 * &lt;p&gt;
 * The encoded forms are often quite a bit longer than the input strings. This is because a single input may have many
 * potential phonetic interpretations. For example, "&lt;code&gt;Renault&lt;/code&gt;" encodes to
 * "&lt;code&gt;rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult&lt;/code&gt;". The &lt;code&gt;APPROX&lt;/code&gt; rules will tend to produce larger
 * encodings as they consider a wider range of possible, approximate phonetic interpretations of the original word.
 * Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by
 * splitting on pipe (&lt;code&gt;|&lt;/code&gt;) and indexing under each of these alternatives.
 *
 * @since 1.6
 * @version $Id: BeiderMorseEncoder.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>BeiderMorseEncoder</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{
    <comment type="line">// Implementation note: This class is a spring-friendly facade to PhoneticEngine. It allows read/write configuration</comment>
    <comment type="line">// of an immutable PhoneticEngine instance that will be delegated to for the actual encoding.</comment>

    <comment type="line">// a cached object</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>PhoneticEngine</name></type> <name>engine</name> =<init> <expr>new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>, <argument><expr><name><name>RuleType</name>.<name>APPROX</name></name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>source</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"BeiderMorseEncoder encode parameter is not of type String"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>) <name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>source</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>engine</name>.<name>encode</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the name type currently in operation.
     *
     * @return the NameType currently being used
     */</comment>
    <function><type><specifier>public</specifier> <name>NameType</name></type> <name>getNameType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>engine</name>.<name>getNameType</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the rule type currently in operation.
     *
     * @return the RuleType currently being used
     */</comment>
    <function><type><specifier>public</specifier> <name>RuleType</name></type> <name>getRuleType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>engine</name>.<name>getRuleType</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Discovers if multiple possible encodings are concatenated.
     *
     * @return true if multiple encodings are concatenated, false if just the first one is returned
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isConcat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>engine</name>.<name>isConcat</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets how multiple possible phonetic encodings are combined.
     *
     * @param concat
     *            true if multiple encodings are to be combined with a '|', false if just the first one is
     *            to be considered
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setConcat</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>concat</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>engine</name></name> = new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getNameType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getRuleType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>concat</name></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getMaxPhonemes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the type of name. Use {@link NameType#GENERIC} unless you specifically want phonetic encodings
     * optimized for Ashkenazi or Sephardic Jewish family names.
     *
     * @param nameType
     *            the NameType in use
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setNameType</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>engine</name></name> = new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><name>nameType</name></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getRuleType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>isConcat</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getMaxPhonemes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the rule type to apply. This will widen or narrow the range of phonetic encodings considered.
     *
     * @param ruleType
     *            {@link RuleType#APPROX} or {@link RuleType#EXACT} for approximate or exact phonetic matches
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setRuleType</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>RuleType</name></type> <name>ruleType</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>engine</name></name> = new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getNameType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>ruleType</name></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>isConcat</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getMaxPhonemes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the number of maximum of phonemes that shall be considered by the engine.
     *
     * @param maxPhonemes
     *            the maximum number of phonemes returned by the engine
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxPhonemes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxPhonemes</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>engine</name></name> = new <call><name>PhoneticEngine</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getNameType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>getRuleType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><call><name><name>this</name>.<name>engine</name>.<name>isConcat</name></name><argument_list>()</argument_list></call></expr></argument>,
                                         <argument><expr><name>maxPhonemes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
