<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\BeiderMorseEncoderTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests BeiderMorseEncoder.
 *
 * @since 1.6
 */</comment>
<class><specifier>public</specifier> class <name>BeiderMorseEncoderTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>StringEncoder</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>TEST_CHARS</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'a'</expr>, <expr>'b'</expr>, <expr>'c'</expr>, <expr>'d'</expr>, <expr>'e'</expr>, <expr>'f'</expr>, <expr>'g'</expr>, <expr>'h'</expr>, <expr>'o'</expr>, <expr>'u'</expr> }</block></expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertNotEmpty</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertFalse</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>BeiderMorseEncoder</name></type> <name>createGenericApproxEncoder</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>encoder</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>setNameType</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>setRuleType</name></name><argument_list>(<argument><expr><name><name>RuleType</name>.<name>APPROX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>encoder</name></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>StringEncoder</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests we do not blow up.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAllChars</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>char</name></type> <name>c</name> =<init> <expr><name><name>Character</name>.<name>MIN_VALUE</name></name></expr></init></decl>;</init> <condition><expr><name>c</name> &lt; <name><name>Character</name>.<name>MAX_VALUE</name></name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>Character</name>.<name>toString</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAsciiEncodeNotEmpty1Letter</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>char</name></type> <name>c</name> =<init> <expr>'a'</expr></init></decl>;</init> <condition><expr><name>c</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>c</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name> =<init> <expr><call><name><name>Character</name>.<name>toString</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>valueU</name> =<init> <expr><call><name><name>value</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><name>bmpm</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><name>bmpm</name></expr></argument>, <argument><expr><name>valueU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAsciiEncodeNotEmpty2Letters</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>char</name></type> <name>c1</name> =<init> <expr>'a'</expr></init></decl>;</init> <condition><expr><name>c1</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>c1</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>char</name></type> <name>c2</name> =<init> <expr>'a'</expr></init></decl>;</init> <condition><expr><name>c2</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>c2</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr><name>c1</name></expr>, <expr><name>c2</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>valueU</name> =<init> <expr><call><name><name>value</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><name>bmpm</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><name>bmpm</name></expr></argument>, <argument><expr><name>valueU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeAtzNotEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//String[] names = { "Ã¡cz", "Ã¡tz", "IgnÃ¡cz", "IgnÃ¡tz", "IgnÃ¡c" };</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>names</name> =<init> <expr><block>{ <expr>"\u00e1cz"</expr>, <expr>"\u00e1tz"</expr>, <expr>"Ign\u00e1cz"</expr>, <expr>"Ign\u00e1tz"</expr>, <expr>"Ign\u00e1c"</expr> }</block></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> :<range> <expr><name>names</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>assertNotEmpty</name><argument_list>(<argument><expr><name>bmpm</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * Tests https://issues.apache.org/jira/browse/CODEC-125?focusedCommentId=13071566&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:
     * comment-tabpanel#comment-13071566
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeGna</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr>"gna"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInvalidLangIllegalArgumentException</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Rule</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>, <argument><expr><name><name>RuleType</name>.<name>APPROX</name></name></expr></argument>, <argument><expr>"noSuchLanguage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalStateException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInvalidLangIllegalStateException</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Lang</name>.<name>loadFromResource</name></name><argument_list>(<argument><expr>"thisIsAMadeUpResourceName"</expr></argument>, <argument><expr><call><name><name>Languages</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInvalidLanguageIllegalArgumentException</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Languages</name>.<name>getInstance</name></name><argument_list>(<argument><expr>"thereIsNoSuchLanguage"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(timeout = 10000L)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testLongestEnglishSurname</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name>createGenericApproxEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr>"MacGhilleseatheanaich"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IndexOutOfBoundsException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testNegativeIndexForRuleMatchIndexOutOfBoundsException</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Rule</name></type> <name>r</name> =<init> <expr>new <call><name>Rule</name><argument_list>(<argument><expr>"a"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>new <call><name><name>Rule</name>.<name>Phoneme</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>Languages</name>.<name>ANY_LANGUAGE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>r</name>.<name>patternAndContextMatches</name></name><argument_list>(<argument><expr>"bob"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testOOM</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>phrase</name> =<init> <expr>"200697900'--&gt;&amp;#1913348150;&lt;/  bceaeef &gt;aadaabcf\"aedfbff&lt;!--\'--&gt;?&gt;cae"
                + "cfaaa&gt;&lt;?&amp;#&lt;!--&lt;/script&gt;&amp;lang&amp;fc;aadeaf?&gt;&gt;&amp;bdquo&lt;    cc =\"abff\"    /&gt;&lt;/   afe  &gt;"
                + "&lt;script&gt;&lt;!-- f(';&lt;    cf aefbeef = \"bfabadcf\" ebbfeedd = fccabeb &gt;"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>encoder</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>setNameType</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>setRuleType</name></name><argument_list>(<argument><expr><name><name>RuleType</name>.<name>EXACT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>encoder</name>.<name>setMaxPhonemes</name></name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>phonemes</name> =<init> <expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr><name>phrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>phonemes</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>phonemeArr</name> =<init> <expr><call><name><name>phonemes</name>.<name>split</name></name><argument_list>(<argument><expr>"\\|"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name><name>phonemeArr</name>.<name>length</name></name> &lt;= 10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSetConcat</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>setConcat</name></name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr>"Should be able to set concat to false"</expr></argument>, <argument><expr><call><name><name>bmpm</name>.<name>isConcat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSetNameTypeAsh</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>setNameType</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>ASHKENAZI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Name type should have been set to ash"</expr></argument>, <argument><expr><name><name>NameType</name>.<name>ASHKENAZI</name></name></expr></argument>, <argument><expr><call><name><name>bmpm</name>.<name>getNameType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSetRuleTypeExact</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>setRuleType</name></name><argument_list>(<argument><expr><name><name>RuleType</name>.<name>EXACT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Rule type should have been set to exact"</expr></argument>, <argument><expr><name><name>RuleType</name>.<name>EXACT</name></name></expr></argument>, <argument><expr><call><name><name>bmpm</name>.<name>getRuleType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSetRuleTypeToRulesIllegalArgumentException</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr>new <call><name>BeiderMorseEncoder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bmpm</name>.<name>setRuleType</name></name><argument_list>(<argument><expr><name><name>RuleType</name>.<name>RULES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * (Un)luckily, the worse performing test because of the data in {@link #TEST_CHARS}
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name><argument_list>(<comment type="block">/* timeout = 20000L */</comment>)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpeedCheck</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name><name>this</name>.<name>createGenericApproxEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>stringBuffer</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stringBuffer</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>TEST_CHARS</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init>, <name>j</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 40</expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>j</name> == <name><name>TEST_CHARS</name>.<name>length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>j</name> = 0</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>stringBuffer</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stringBuffer</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>TEST_CHARS</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpeedCheck2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name><name>this</name>.<name>createGenericApproxEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>phrase</name> =<init> <expr>"ItstheendoftheworldasweknowitandIfeelfine"</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <call><name><name>phrase</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>phrase</name>.<name>subSequence</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpeedCheck3</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>BeiderMorseEncoder</name></type> <name>bmpm</name> =<init> <expr><call><name><name>this</name>.<name>createGenericApproxEncoder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>phrase</name> =<init> <expr>"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"</expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt;= <call><name><name>phrase</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name><name>bmpm</name>.<name>encode</name></name><argument_list>(<argument><expr><call><name><name>phrase</name>.<name>subSequence</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class>
</unit>
