<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\binary\BinaryCodec.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>

<comment type="javadoc">/**
 * Converts between byte arrays and strings of "0"s and "1"s.
 *
 * &lt;p&gt;This class is immutable and thread-safe.&lt;/p&gt;
 *
 * TODO: may want to add more bit vector functions like and/or/xor/nand
 * TODO: also might be good to generate boolean[] from byte[] et cetera.
 *
 * @since 1.3
 * @version $Id: BinaryCodec.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>BinaryCodec</name> <super><implements>implements <name>BinaryDecoder</name>, <name>BinaryEncoder</name></implements></super> <block>{
    <comment type="block">/*
     * tried to avoid using ArrayUtils to minimize dependencies while using these empty arrays - dep is just not worth
     * it.
     */</comment>
    <comment type="javadoc">/** Empty char array. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>EMPTY_CHAR_ARRAY</name> =<init> <expr>new <name><name>char</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Empty byte array. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>EMPTY_BYTE_ARRAY</name> =<init> <expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 0 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_0</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 1 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_1</name> =<init> <expr>0x02</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 2 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_2</name> =<init> <expr>0x04</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 3 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_3</name> =<init> <expr>0x08</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 4 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_4</name> =<init> <expr>0x10</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 5 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_5</name> =<init> <expr>0x20</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 6 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_6</name> =<init> <expr>0x40</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** Mask for bit 7 of a byte. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BIT_7</name> =<init> <expr>0x80</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name><index>[]</index></type> <name>BITS</name> =<init> <expr><block>{<expr><name>BIT_0</name></expr>, <expr><name>BIT_1</name></expr>, <expr><name>BIT_2</name></expr>, <expr><name>BIT_3</name></expr>, <expr><name>BIT_4</name></expr>, <expr><name>BIT_5</name></expr>, <expr><name>BIT_6</name></expr>, <expr><name>BIT_7</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.
     *
     * @param raw
     *                  the raw binary data to convert
     * @return 0 and 1 ASCII character bytes one for each bit of the argument
     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>toAsciiBytes</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of raw binary data into an array of ASCII 0 and 1 chars.
     *
     * @param raw
     *                  the raw binary data to convert
     * @return 0 and 1 ASCII character chars one for each bit of the argument
     * @throws EncoderException
     *                  if the argument is not a byte[]
     * @see org.apache.commons.codec.Encoder#encode(Object)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>raw</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>raw</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"argument not a byte array"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>toAsciiChars</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>raw</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a byte array where each byte represents an ASCII '0' or '1'.
     *
     * @param ascii
     *                  each byte represents an ASCII '0' or '1'
     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument
     * @throws DecoderException
     *                  if argument is not a byte[], char[] or String
     * @see org.apache.commons.codec.Decoder#decode(Object)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>ascii</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>ascii</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_BYTE_ARRAY</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>ascii</name> <name>instanceof</name> <name><name>byte</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>fromAscii</name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>ascii</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>ascii</name> <name>instanceof</name> <name><name>char</name><index>[]</index></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>fromAscii</name><argument_list>(<argument><expr>(<name><name>char</name><index>[]</index></name>) <name>ascii</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>ascii</name> <name>instanceof</name> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>fromAscii</name><argument_list>(<argument><expr>((<name>String</name>) <name>ascii</name>).<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"argument not a byte array"</expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a byte array where each byte represents an ASCII '0' or '1'.
     *
     * @param ascii
     *                  each byte represents an ASCII '0' or '1'
     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument
     * @see org.apache.commons.codec.Decoder#decode(Object)
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ascii</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>fromAscii</name><argument_list>(<argument><expr><name>ascii</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a String where each char of the String represents an ASCII '0' or '1'.
     *
     * @param ascii
     *                  String of '0' and '1' characters
     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument
     * @see org.apache.commons.codec.Decoder#decode(Object)
     */</comment>
    <function><type><specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>toByteArray</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>ascii</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ascii</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_BYTE_ARRAY</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>fromAscii</name><argument_list>(<argument><expr><call><name><name>ascii</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// ------------------------------------------------------------------------</comment>
    <comment type="line">//</comment>
    <comment type="line">// static codec operations</comment>
    <comment type="line">//</comment>
    <comment type="line">// ------------------------------------------------------------------------</comment>
    <comment type="javadoc">/**
     * Decodes a char array where each char represents an ASCII '0' or '1'.
     *
     * @param ascii
     *                  each char represents an ASCII '0' or '1'
     * @return the raw encoded binary where each bit corresponds to a char in the char array argument
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>fromAscii</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>ascii</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>ascii</name> == <name>null</name> || <name><name>ascii</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_BYTE_ARRAY</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// get length/8 times bytes with 3 bit shifts to the right of the length</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>l_raw</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>ascii</name>.<name>length</name></name> &gt;&gt; 3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the
         * loop.
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>ii</name> =<init> <expr>0</expr></init>, <name>jj</name> =<init> <expr><name><name>ascii</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>ii</name> &lt; <name><name>l_raw</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>ii</name>++</expr>, <expr><name>jj</name> -= 8</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>bits</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>bits</name> &lt; <name><name>BITS</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>bits</name></expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> == '1'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>l_raw</name><index>[<expr><name>ii</name></expr>]</index></name> |= <name><name>BITS</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>l_raw</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Decodes a byte array where each byte represents an ASCII '0' or '1'.
     *
     * @param ascii
     *                  each byte represents an ASCII '0' or '1'
     * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>fromAscii</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>ascii</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isEmpty</name><argument_list>(<argument><expr><name>ascii</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_BYTE_ARRAY</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// get length/8 times bytes with 3 bit shifts to the right of the length</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>l_raw</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>ascii</name>.<name>length</name></name> &gt;&gt; 3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the
         * loop.
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>ii</name> =<init> <expr>0</expr></init>, <name>jj</name> =<init> <expr><name><name>ascii</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>ii</name> &lt; <name><name>l_raw</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>ii</name>++</expr>, <expr><name>jj</name> -= 8</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>bits</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>bits</name> &lt; <name><name>BITS</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>bits</name></expr></incr>) <block>{
                <if>if <condition>(<expr><name><name>ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> == '1'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>l_raw</name><index>[<expr><name>ii</name></expr>]</index></name> |= <name><name>BITS</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>l_raw</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns {@code true} if the given array is {@code null} or empty (size 0.)
     *
     * @param array
     *            the source array
     * @return {@code true} if the given array is {@code null} or empty (size 0.)
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>array</name> == <name>null</name> || <name><name>array</name>.<name>length</name></name> == 0</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated
     * char.
     *
     * @param raw
     *                  the raw binary data to convert
     * @return an array of 0 and 1 character bytes for each bit of the argument
     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>toAsciiBytes</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isEmpty</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_BYTE_ARRAY</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// get 8 times the bytes with 3 bit shifts to the left of the length</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>l_ascii</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name><name>raw</name>.<name>length</name></name> &lt;&lt; 3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the
         * loop.
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>ii</name> =<init> <expr>0</expr></init>, <name>jj</name> =<init> <expr><name><name>l_ascii</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>ii</name> &lt; <name><name>raw</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>ii</name>++</expr>, <expr><name>jj</name> -= 8</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>bits</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>bits</name> &lt; <name><name>BITS</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>bits</name></expr></incr>) <block>{
                <if>if <condition>(<expr>(<name><name>raw</name><index>[<expr><name>ii</name></expr>]</index></name> &amp; <name><name>BITS</name><index>[<expr><name>bits</name></expr>]</index></name>) == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>l_ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> = '0'</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>l_ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> = '1'</expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>l_ascii</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of raw binary data into an array of ASCII 0 and 1 characters.
     *
     * @param raw
     *                  the raw binary data to convert
     * @return an array of 0 and 1 characters for each bit of the argument
     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name><index>[]</index></type> <name>toAsciiChars</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isEmpty</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY_CHAR_ARRAY</name></expr>;</return>
        }</block></then></if>
        <comment type="line">// get 8 times the bytes with 3 bit shifts to the left of the length</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>l_ascii</name> =<init> <expr>new <name><name>char</name><index>[<expr><name><name>raw</name>.<name>length</name></name> &lt;&lt; 3</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * We decr index jj by 8 as we go along to not recompute indices using multiplication every time inside the
         * loop.
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>ii</name> =<init> <expr>0</expr></init>, <name>jj</name> =<init> <expr><name><name>l_ascii</name>.<name>length</name></name> - 1</expr></init></decl>;</init> <condition><expr><name>ii</name> &lt; <name><name>raw</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>ii</name>++</expr>, <expr><name>jj</name> -= 8</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>bits</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>bits</name> &lt; <name><name>BITS</name>.<name>length</name></name></expr>;</condition> <incr><expr>++<name>bits</name></expr></incr>) <block>{
                <if>if <condition>(<expr>(<name><name>raw</name><index>[<expr><name>ii</name></expr>]</index></name> &amp; <name><name>BITS</name><index>[<expr><name>bits</name></expr>]</index></name>) == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>l_ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> = '0'</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name><name>l_ascii</name><index>[<expr><name>jj</name> - <name>bits</name></expr>]</index></name> = '1'</expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
        }</block></for>
        <return>return <expr><name>l_ascii</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of raw binary data into a String of ASCII 0 and 1 characters.
     *
     * @param raw
     *                  the raw binary data to convert
     * @return a String of 0 and 1 characters representing the binary data
     * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>toAsciiString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>raw</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>toAsciiChars</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
