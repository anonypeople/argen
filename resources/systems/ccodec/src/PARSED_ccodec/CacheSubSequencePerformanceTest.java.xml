<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\CacheSubSequencePerformanceTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>CacheSubSequencePerformanceTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>times</name> =<init> <expr>10000000</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Test with String : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr>"Angelo"</expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Test with StringBuilder : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Test with cached String : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><call><name>cacheSubSequence</name><argument_list>(<argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>print</name></name><argument_list>(<argument><expr>"Test with cached StringBuilder : "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><call><name>cacheSubSequence</name><argument_list>(<argument><expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr>"Angelo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>test</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>input</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>times</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>beginTime</name> =<init> <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>times</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>test</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call> - <name>beginTime</name> + " millis"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>test</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <for>for (<init><decl><type><name>int</name></type> <name>j</name> =<init> <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> &lt;= <call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
                <expr_stmt><expr><call><name><name>input</name>.<name>subSequence</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <function><type><specifier>private</specifier> <name>CharSequence</name></type> <name>cacheSubSequence</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>cached</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name><index>[]</index><index>[]</index></type> <name>cache</name> =<init> <expr>new <name><name>CharSequence</name><index>[<expr><call><name><name>cached</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><call><name><name>cached</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <return>return <expr>new <class><super><name>CharSequence</name></super><argument_list>()</argument_list> <block>{
            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>char</name></type> <name>charAt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
                <return>return <expr><call><name><name>cached</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><call><name><name>cached</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></function>

            <function><type><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <name>CharSequence</name></type> <name>subSequence</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name></decl></param>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>start</name> == <name>end</name></expr>)</condition><then> <block>{
                    <return>return <expr>""</expr>;</return>
                }</block></then></if>
                <decl_stmt><decl><type><name>CharSequence</name></type> <name>res</name> =<init> <expr><name><name>cache</name><index>[<expr><name>start</name></expr>]</index><index>[<expr><name>end</name> - 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>res</name> == <name>null</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>res</name> = <call><name><name>cached</name>.<name>subSequence</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cache</name><index>[<expr><name>start</name></expr>]</index><index>[<expr><name>end</name> - 1</expr>]</index></name> = <name>res</name></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>res</name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>
