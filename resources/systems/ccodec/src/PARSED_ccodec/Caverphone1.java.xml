<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\Caverphone1.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<comment type="javadoc">/**
 * Encodes a string into a Caverphone 1.0 value.
 *
 * This is an algorithm created by the Caversham Project at the University of Otago. It implements the Caverphone 1.0
 * algorithm:
 *
 * @version $Id: Caverphone.java 1075947 2011-03-01 17:56:14Z ggregory $
 * @see &lt;a href="http://en.wikipedia.org/wiki/Caverphone"&gt;Wikipedia - Caverphone&lt;/a&gt;
 * @see &lt;a href="http://caversham.otago.ac.nz/files/working/ctp060902.pdf"&gt;Caverphone 1.0 specification&lt;/a&gt;
 * @since 1.5
 *
 * &lt;p&gt;This class is immutable and thread-safe.&lt;/p&gt;
 */</comment>
<class><specifier>public</specifier> class <name>Caverphone1</name> <super><extends>extends <name>AbstractCaverphone</name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SIX_1</name> =<init> <expr>"111111"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Encodes the given String into a Caverphone value.
     *
     * @param source
     *            String the source string
     * @return A caverphone code for the given String
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>txt</name> =<init> <expr><name>source</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>txt</name> == <name>null</name> || <call><name><name>txt</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>SIX_1</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// 1. Convert to lowercase</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>java</name>.<name>util</name>.<name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 2. Remove anything not A-Z</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"[^a-z]"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 3. Handle various start options</comment>
        <comment type="line">// 2 is a temporary placeholder to indicate a consonant which we are no longer interested in.</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^cough"</expr></argument>, <argument><expr>"cou2f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^rough"</expr></argument>, <argument><expr>"rou2f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^tough"</expr></argument>, <argument><expr>"tou2f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^enough"</expr></argument>, <argument><expr>"enou2f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^gn"</expr></argument>, <argument><expr>"2n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// End</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"mb$"</expr></argument>, <argument><expr>"m2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 4. Handle replacements</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"cq"</expr></argument>, <argument><expr>"2q"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"ci"</expr></argument>, <argument><expr>"si"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"ce"</expr></argument>, <argument><expr>"se"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"cy"</expr></argument>, <argument><expr>"sy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"tch"</expr></argument>, <argument><expr>"2ch"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"c"</expr></argument>, <argument><expr>"k"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"q"</expr></argument>, <argument><expr>"k"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"x"</expr></argument>, <argument><expr>"k"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"v"</expr></argument>, <argument><expr>"f"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"dg"</expr></argument>, <argument><expr>"2g"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"tio"</expr></argument>, <argument><expr>"sio"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"tia"</expr></argument>, <argument><expr>"sia"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"d"</expr></argument>, <argument><expr>"t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"ph"</expr></argument>, <argument><expr>"fh"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"b"</expr></argument>, <argument><expr>"p"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"sh"</expr></argument>, <argument><expr>"s2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"z"</expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^[aeiou]"</expr></argument>, <argument><expr>"A"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// 3 is a temporary placeholder marking a vowel</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"[aeiou]"</expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"3gh3"</expr></argument>, <argument><expr>"3kh3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"gh"</expr></argument>, <argument><expr>"22"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"g"</expr></argument>, <argument><expr>"k"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"s+"</expr></argument>, <argument><expr>"S"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"t+"</expr></argument>, <argument><expr>"T"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"p+"</expr></argument>, <argument><expr>"P"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"k+"</expr></argument>, <argument><expr>"K"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"f+"</expr></argument>, <argument><expr>"F"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"m+"</expr></argument>, <argument><expr>"M"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"n+"</expr></argument>, <argument><expr>"N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"w3"</expr></argument>, <argument><expr>"W3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"wy"</expr></argument>, <argument><expr>"Wy"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"wh3"</expr></argument>, <argument><expr>"Wh3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"why"</expr></argument>, <argument><expr>"Why"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"w"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"^h"</expr></argument>, <argument><expr>"A"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"h"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"r3"</expr></argument>, <argument><expr>"R3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"ry"</expr></argument>, <argument><expr>"Ry"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"r"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"l3"</expr></argument>, <argument><expr>"L3"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"ly"</expr></argument>, <argument><expr>"Ly"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"l"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"j"</expr></argument>, <argument><expr>"y"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"y3"</expr></argument>, <argument><expr>"Y3"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"y"</expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1.0 only</comment>

        <comment type="line">// 5. Handle removals</comment>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"2"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>txt</name> = <call><name><name>txt</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"3"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 6. put ten 1s on the end</comment>
        <expr_stmt><expr><name>txt</name> = <name>txt</name> + <name>SIX_1</name></expr>;</expr_stmt>

        <comment type="line">// 7. take the first six characters as the code</comment>
        <return>return <expr><call><name><name>txt</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>SIX_1</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
