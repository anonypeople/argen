<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\Caverphone1Test.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests Caverphone1.
 *
 * @version $Id: CaverphoneTest.java 1075947 2011-03-01 17:56:14Z ggregory $
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>Caverphone1Test</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>Caverphone1</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>Caverphone1</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Caverphone1</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * AT1111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedCommonCodeAT1111</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"AT1111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"add"</expr>,
            <expr>"aid"</expr>,
            <expr>"at"</expr>,
            <expr>"art"</expr>,
            <expr>"eat"</expr>,
            <expr>"earth"</expr>,
            <expr>"head"</expr>,
            <expr>"hit"</expr>,
            <expr>"hot"</expr>,
            <expr>"hold"</expr>,
            <expr>"hard"</expr>,
            <expr>"heart"</expr>,
            <expr>"it"</expr>,
            <expr>"out"</expr>,
            <expr>"old"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEndMb</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"mb"</expr>, <expr>"M11111"</expr>}</block></expr>, <expr><block>{<expr>"mbmb"</expr>, <expr>"MPM111"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsCaverphoneEquals</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Caverphone1</name></type> <name>caverphone</name> =<init> <expr>new <call><name>Caverphone1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertFalse</name></name><argument_list>(<argument><expr>"Caverphone encodings should not be equal"</expr></argument>, <argument><expr><call><name><name>caverphone</name>.<name>isEncodeEqual</name></name><argument_list>(<argument><expr>"Peter"</expr></argument>, <argument><expr>"Stevenson"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr>"Caverphone encodings should be equal"</expr></argument>, <argument><expr><call><name><name>caverphone</name>.<name>isEncodeEqual</name></name><argument_list>(<argument><expr>"Peter"</expr></argument>, <argument><expr>"Peady"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpecificationV1Examples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"David"</expr>, <expr>"TFT111"</expr>}</block></expr>, <expr><block>{<expr>"Whittle"</expr>, <expr>"WTL111"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests examples from http://en.wikipedia.org/wiki/Caverphone
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWikipediaExamples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"Lee"</expr>, <expr>"L11111"</expr>}</block></expr>, <expr><block>{<expr>"Thompson"</expr>, <expr>"TMPSN1"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
