<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\Caverphone2Test.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests Caverphone2.
 *
 * @version $Id: Caverphone2Test.java 1437501 2013-01-23 15:51:21Z ggregory $
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>Caverphone2Test</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>Caverphone2</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>Caverphone2</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Caverphone2</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * AT11111111 words: add, aid, at, art, eat, earth, head, hit, hot, hold, hard, heart, it, out, old
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedCommonCodeAT11111111</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"AT11111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"add"</expr>,
            <expr>"aid"</expr>,
            <expr>"at"</expr>,
            <expr>"art"</expr>,
            <expr>"eat"</expr>,
            <expr>"earth"</expr>,
            <expr>"head"</expr>,
            <expr>"hit"</expr>,
            <expr>"hot"</expr>,
            <expr>"hold"</expr>,
            <expr>"hard"</expr>,
            <expr>"heart"</expr>,
            <expr>"it"</expr>,
            <expr>"out"</expr>,
            <expr>"old"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedExamples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"Stevenson"</expr>, <expr>"STFNSN1111"</expr>}</block></expr>, <expr><block>{<expr>"Peter"</expr>, <expr>"PTA1111111"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedRandomNameKLN1111111</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"KLN1111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"Cailean"</expr>,
            <expr>"Calan"</expr>,
            <expr>"Calen"</expr>,
            <expr>"Callahan"</expr>,
            <expr>"Callan"</expr>,
            <expr>"Callean"</expr>,
            <expr>"Carleen"</expr>,
            <expr>"Carlen"</expr>,
            <expr>"Carlene"</expr>,
            <expr>"Carlin"</expr>,
            <expr>"Carline"</expr>,
            <expr>"Carlyn"</expr>,
            <expr>"Carlynn"</expr>,
            <expr>"Carlynne"</expr>,
            <expr>"Charlean"</expr>,
            <expr>"Charleen"</expr>,
            <expr>"Charlene"</expr>,
            <expr>"Charline"</expr>,
            <expr>"Cherlyn"</expr>,
            <expr>"Chirlin"</expr>,
            <expr>"Clein"</expr>,
            <expr>"Cleon"</expr>,
            <expr>"Cline"</expr>,
            <expr>"Cohleen"</expr>,
            <expr>"Colan"</expr>,
            <expr>"Coleen"</expr>,
            <expr>"Colene"</expr>,
            <expr>"Colin"</expr>,
            <expr>"Colleen"</expr>,
            <expr>"Collen"</expr>,
            <expr>"Collin"</expr>,
            <expr>"Colline"</expr>,
            <expr>"Colon"</expr>,
            <expr>"Cullan"</expr>,
            <expr>"Cullen"</expr>,
            <expr>"Cullin"</expr>,
            <expr>"Gaelan"</expr>,
            <expr>"Galan"</expr>,
            <expr>"Galen"</expr>,
            <expr>"Garlan"</expr>,
            <expr>"Garlen"</expr>,
            <expr>"Gaulin"</expr>,
            <expr>"Gayleen"</expr>,
            <expr>"Gaylene"</expr>,
            <expr>"Giliane"</expr>,
            <expr>"Gillan"</expr>,
            <expr>"Gillian"</expr>,
            <expr>"Glen"</expr>,
            <expr>"Glenn"</expr>,
            <expr>"Glyn"</expr>,
            <expr>"Glynn"</expr>,
            <expr>"Gollin"</expr>,
            <expr>"Gorlin"</expr>,
            <expr>"Kalin"</expr>,
            <expr>"Karlan"</expr>,
            <expr>"Karleen"</expr>,
            <expr>"Karlen"</expr>,
            <expr>"Karlene"</expr>,
            <expr>"Karlin"</expr>,
            <expr>"Karlyn"</expr>,
            <expr>"Kaylyn"</expr>,
            <expr>"Keelin"</expr>,
            <expr>"Kellen"</expr>,
            <expr>"Kellene"</expr>,
            <expr>"Kellyann"</expr>,
            <expr>"Kellyn"</expr>,
            <expr>"Khalin"</expr>,
            <expr>"Kilan"</expr>,
            <expr>"Kilian"</expr>,
            <expr>"Killen"</expr>,
            <expr>"Killian"</expr>,
            <expr>"Killion"</expr>,
            <expr>"Klein"</expr>,
            <expr>"Kleon"</expr>,
            <expr>"Kline"</expr>,
            <expr>"Koerlin"</expr>,
            <expr>"Kylen"</expr>,
            <expr>"Kylynn"</expr>,
            <expr>"Quillan"</expr>,
            <expr>"Quillon"</expr>,
            <expr>"Qulllon"</expr>,
            <expr>"Xylon"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedRandomNameTN11111111</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"TN11111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"Dan"</expr>,
            <expr>"Dane"</expr>,
            <expr>"Dann"</expr>,
            <expr>"Darn"</expr>,
            <expr>"Daune"</expr>,
            <expr>"Dawn"</expr>,
            <expr>"Ddene"</expr>,
            <expr>"Dean"</expr>,
            <expr>"Deane"</expr>,
            <expr>"Deanne"</expr>,
            <expr>"DeeAnn"</expr>,
            <expr>"Deeann"</expr>,
            <expr>"Deeanne"</expr>,
            <expr>"Deeyn"</expr>,
            <expr>"Den"</expr>,
            <expr>"Dene"</expr>,
            <expr>"Denn"</expr>,
            <expr>"Deonne"</expr>,
            <expr>"Diahann"</expr>,
            <expr>"Dian"</expr>,
            <expr>"Diane"</expr>,
            <expr>"Diann"</expr>,
            <expr>"Dianne"</expr>,
            <expr>"Diannne"</expr>,
            <expr>"Dine"</expr>,
            <expr>"Dion"</expr>,
            <expr>"Dione"</expr>,
            <expr>"Dionne"</expr>,
            <expr>"Doane"</expr>,
            <expr>"Doehne"</expr>,
            <expr>"Don"</expr>,
            <expr>"Donn"</expr>,
            <expr>"Doone"</expr>,
            <expr>"Dorn"</expr>,
            <expr>"Down"</expr>,
            <expr>"Downe"</expr>,
            <expr>"Duane"</expr>,
            <expr>"Dun"</expr>,
            <expr>"Dunn"</expr>,
            <expr>"Duyne"</expr>,
            <expr>"Dyan"</expr>,
            <expr>"Dyane"</expr>,
            <expr>"Dyann"</expr>,
            <expr>"Dyanne"</expr>,
            <expr>"Dyun"</expr>,
            <expr>"Tan"</expr>,
            <expr>"Tann"</expr>,
            <expr>"Teahan"</expr>,
            <expr>"Ten"</expr>,
            <expr>"Tenn"</expr>,
            <expr>"Terhune"</expr>,
            <expr>"Thain"</expr>,
            <expr>"Thaine"</expr>,
            <expr>"Thane"</expr>,
            <expr>"Thanh"</expr>,
            <expr>"Thayne"</expr>,
            <expr>"Theone"</expr>,
            <expr>"Thin"</expr>,
            <expr>"Thorn"</expr>,
            <expr>"Thorne"</expr>,
            <expr>"Thun"</expr>,
            <expr>"Thynne"</expr>,
            <expr>"Tien"</expr>,
            <expr>"Tine"</expr>,
            <expr>"Tjon"</expr>,
            <expr>"Town"</expr>,
            <expr>"Towne"</expr>,
            <expr>"Turne"</expr>,
            <expr>"Tyne"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedRandomNameTTA1111111</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"TTA1111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{
            <expr>"Darda"</expr>,
            <expr>"Datha"</expr>,
            <expr>"Dedie"</expr>,
            <expr>"Deedee"</expr>,
            <expr>"Deerdre"</expr>,
            <expr>"Deidre"</expr>,
            <expr>"Deirdre"</expr>,
            <expr>"Detta"</expr>,
            <expr>"Didi"</expr>,
            <expr>"Didier"</expr>,
            <expr>"Dido"</expr>,
            <expr>"Dierdre"</expr>,
            <expr>"Dieter"</expr>,
            <expr>"Dita"</expr>,
            <expr>"Ditter"</expr>,
            <expr>"Dodi"</expr>,
            <expr>"Dodie"</expr>,
            <expr>"Dody"</expr>,
            <expr>"Doherty"</expr>,
            <expr>"Dorthea"</expr>,
            <expr>"Dorthy"</expr>,
            <expr>"Doti"</expr>,
            <expr>"Dotti"</expr>,
            <expr>"Dottie"</expr>,
            <expr>"Dotty"</expr>,
            <expr>"Doty"</expr>,
            <expr>"Doughty"</expr>,
            <expr>"Douty"</expr>,
            <expr>"Dowdell"</expr>,
            <expr>"Duthie"</expr>,
            <expr>"Tada"</expr>,
            <expr>"Taddeo"</expr>,
            <expr>"Tadeo"</expr>,
            <expr>"Tadio"</expr>,
            <expr>"Tati"</expr>,
            <expr>"Teador"</expr>,
            <expr>"Tedda"</expr>,
            <expr>"Tedder"</expr>,
            <expr>"Teddi"</expr>,
            <expr>"Teddie"</expr>,
            <expr>"Teddy"</expr>,
            <expr>"Tedi"</expr>,
            <expr>"Tedie"</expr>,
            <expr>"Teeter"</expr>,
            <expr>"Teodoor"</expr>,
            <expr>"Teodor"</expr>,
            <expr>"Terti"</expr>,
            <expr>"Theda"</expr>,
            <expr>"Theodor"</expr>,
            <expr>"Theodore"</expr>,
            <expr>"Theta"</expr>,
            <expr>"Thilda"</expr>,
            <expr>"Thordia"</expr>,
            <expr>"Tilda"</expr>,
            <expr>"Tildi"</expr>,
            <expr>"Tildie"</expr>,
            <expr>"Tildy"</expr>,
            <expr>"Tita"</expr>,
            <expr>"Tito"</expr>,
            <expr>"Tjader"</expr>,
            <expr>"Toddie"</expr>,
            <expr>"Toddy"</expr>,
            <expr>"Torto"</expr>,
            <expr>"Tuddor"</expr>,
            <expr>"Tudor"</expr>,
            <expr>"Turtle"</expr>,
            <expr>"Tuttle"</expr>,
            <expr>"Tutto"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCaverphoneRevisitedRandomWords</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"RTA1111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"rather"</expr>, <expr>"ready"</expr>, <expr>"writer"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr>"SSA1111111"</expr></argument>, <argument><expr>"social"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"APA1111111"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name><block>{<expr>"able"</expr>, <expr>"appear"</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEndMb</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"mb"</expr>, <expr>"M111111111"</expr>}</block></expr>, <expr><block>{<expr>"mbmb"</expr>, <expr>"MPM1111111"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Caverphone Revisited</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsCaverphoneEquals</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Caverphone2</name></type> <name>caverphone</name> =<init> <expr>new <call><name>Caverphone2</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertFalse</name></name><argument_list>(<argument><expr>"Caverphone encodings should not be equal"</expr></argument>, <argument><expr><call><name><name>caverphone</name>.<name>isEncodeEqual</name></name><argument_list>(<argument><expr>"Peter"</expr></argument>, <argument><expr>"Stevenson"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr>"Caverphone encodings should be equal"</expr></argument>, <argument><expr><call><name><name>caverphone</name>.<name>isEncodeEqual</name></name><argument_list>(<argument><expr>"Peter"</expr></argument>, <argument><expr>"Peady"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpecificationExamples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{
            <expr><block>{<expr>"Peter"</expr>, <expr>"PTA1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"ready"</expr>, <expr>"RTA1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"social"</expr>, <expr>"SSA1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"able"</expr>, <expr>"APA1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"Tedder"</expr>, <expr>"TTA1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"Karleen"</expr>, <expr>"KLN1111111"</expr>}</block></expr>,
            <expr><block>{<expr>"Dyun"</expr>, <expr>"TN11111111"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
