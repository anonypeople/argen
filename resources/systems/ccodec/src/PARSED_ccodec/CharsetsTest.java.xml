<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\CharsetsTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Sanity checks for {@link Charsets}.
 *
 * @version $Id: CharEncodingTest.java 1298985 2012-03-09 19:12:49Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>CharsetsTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testToCharset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>toCharset</name></name><argument_list>(<argument><expr>(<name>String</name>) <name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>toCharset</name></name><argument_list>(<argument><expr>(<name>Charset</name>) <name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>toCharset</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>defaultCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>toCharset</name></name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIso8859_1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"ISO-8859-1"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>ISO_8859_1</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUsAscii</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>US_ASCII</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUtf16</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"UTF-16"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>UTF_16</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUtf16Be</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"UTF-16BE"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>UTF_16BE</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUtf16Le</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"UTF-16LE"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>UTF_16LE</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testUtf8</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"UTF-8"</expr></argument>, <argument><expr><call><name><name>Charsets</name>.<name>UTF_8</name>.<name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
