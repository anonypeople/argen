<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\Codec105ErrorInputStream.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>

<comment type="javadoc">/**
 * Emits three line-feeds '\n' in a row, one at a time, and then EOF.
 *
 * Recreates the bug described in CODEC-105.
 *
 * @version $Id $
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>Codec105ErrorInputStream</name> <super><extends>extends <name>InputStream</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>EOF</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>countdown</name> =<init> <expr>3</expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>countdown</name></name>-- &gt; 0</expr>)</condition><then> <block>{
            <return>return <expr>'\n'</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>EOF</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>int</name></type> <name>read</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>byte</name></type> <name><name>b</name><index>[]</index></name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>pos</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name>.<name>countdown</name></name>-- &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name> = '\n'</expr>;</expr_stmt>
            <return>return <expr>1</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>EOF</name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
