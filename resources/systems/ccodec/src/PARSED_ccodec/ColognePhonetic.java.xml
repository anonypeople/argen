<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\ColognePhonetic.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Encodes a string into a Cologne Phonetic value.
 * &lt;p&gt;
 * Implements the &lt;a href="http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik"&gt;K&amp;ouml;lner Phonetik&lt;/a&gt;
 * (Cologne Phonetic) algorithm issued by Hans Joachim Postel in 1969.
 * &lt;p&gt;
 * The &lt;i&gt;K&amp;ouml;lner Phonetik&lt;/i&gt; is a phonetic algorithm which is optimized for the German language.
 * It is related to the well-known soundex algorithm.
 * &lt;p&gt;
 *
 * &lt;h2&gt;Algorithm&lt;/h2&gt;
 *
 * &lt;ul&gt;
 *
 * &lt;li&gt;
 * &lt;h3&gt;Step 1:&lt;/h3&gt;
 * After preprocessing (conversion to upper case, transcription of &lt;a
 * href="http://en.wikipedia.org/wiki/Germanic_umlaut"&gt;germanic umlauts&lt;/a&gt;, removal of non alphabetical characters) the
 * letters of the supplied text are replaced by their phonetic code according to the following table.
 * &lt;table border="1"&gt;
 * &lt;tbody&gt;
 * &lt;tr&gt;
 * &lt;th&gt;Letter&lt;/th&gt;
 * &lt;th&gt;Context&lt;/th&gt;
 * &lt;th align="center"&gt;Code&lt;/th&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;A, E, I, J, O, U, Y&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;0&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *
 * &lt;td&gt;H&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;-&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;B&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td rowspan="2" align="center"&gt;1&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;P&lt;/td&gt;
 * &lt;td&gt;not before H&lt;/td&gt;
 *
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;D, T&lt;/td&gt;
 * &lt;td&gt;not before C, S, Z&lt;/td&gt;
 * &lt;td align="center"&gt;2&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;F, V, W&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td rowspan="2" align="center"&gt;3&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *
 * &lt;td&gt;P&lt;/td&gt;
 * &lt;td&gt;before H&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;G, K, Q&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td rowspan="3" align="center"&gt;4&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td rowspan="2"&gt;C&lt;/td&gt;
 * &lt;td&gt;at onset before A, H, K, L, O, Q, R, U, X&lt;/td&gt;
 *
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;before A, H, K, O, Q, U, X except after S, Z&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;X&lt;/td&gt;
 * &lt;td&gt;not after C, K, Q&lt;/td&gt;
 * &lt;td align="center"&gt;48&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;L&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 *
 * &lt;td align="center"&gt;5&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;M, N&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;6&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;R&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td align="center"&gt;7&lt;/td&gt;
 * &lt;/tr&gt;
 *
 * &lt;tr&gt;
 * &lt;td&gt;S, Z&lt;/td&gt;
 * &lt;td&gt;&lt;/td&gt;
 * &lt;td rowspan="6" align="center"&gt;8&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td rowspan="3"&gt;C&lt;/td&gt;
 * &lt;td&gt;after S, Z&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;at onset except before A, H, K, L, O, Q, R, U, X&lt;/td&gt;
 * &lt;/tr&gt;
 *
 * &lt;tr&gt;
 * &lt;td&gt;not before A, H, K, O, Q, U, X&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;D, T&lt;/td&gt;
 * &lt;td&gt;before C, S, Z&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 * &lt;td&gt;X&lt;/td&gt;
 * &lt;td&gt;after C, K, Q&lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/tbody&gt;
 * &lt;/table&gt;
 * &lt;p&gt;
 * &lt;small&gt;&lt;i&gt;(Source: &lt;a href= "http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik#Buchstabencodes" &gt;Wikipedia (de):
 * K&amp;ouml;lner Phonetik -- Buchstabencodes&lt;/a&gt;)&lt;/i&gt;&lt;/small&gt;
 * &lt;/p&gt;
 *
 * &lt;h4&gt;Example:&lt;/h4&gt;
 *
 * {@code "M}&amp;uuml;{@code ller-L}&amp;uuml;{@code denscheidt" =&gt; "MULLERLUDENSCHEIDT" =&gt; "6005507500206880022"}
 *
 * &lt;/li&gt;
 *
 * &lt;li&gt;
 * &lt;h3&gt;Step 2:&lt;/h3&gt;
 * Collapse of all multiple consecutive code digits.
 * &lt;h4&gt;Example:&lt;/h4&gt;
 * {@code "6005507500206880022" =&gt; "6050750206802"}&lt;/li&gt;
 *
 * &lt;li&gt;
 * &lt;h3&gt;Step 3:&lt;/h3&gt;
 * Removal of all codes "0" except at the beginning. This means that two or more identical consecutive digits can occur
 * if they occur after removing the "0" digits.
 *
 * &lt;h4&gt;Example:&lt;/h4&gt;
 * {@code "6050750206802" =&gt; "65752682"}&lt;/li&gt;
 *
 * &lt;/ul&gt;
 *
 * This class is thread-safe.
 *
 * @see &lt;a href="http://de.wikipedia.org/wiki/K%C3%B6lner_Phonetik"&gt;Wikipedia (de): K&amp;ouml;lner Phonetik (in German)&lt;/a&gt;
 * @since 1.5
 */</comment>
<class><specifier>public</specifier> class <name>ColognePhonetic</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{

    <comment type="line">// Predefined char arrays for better performance and less GC load</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>AEIJOUY</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'A'</expr>, <expr>'E'</expr>, <expr>'I'</expr>, <expr>'J'</expr>, <expr>'O'</expr>, <expr>'U'</expr>, <expr>'Y'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>SCZ</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'S'</expr>, <expr>'C'</expr>, <expr>'Z'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>WFPV</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'W'</expr>, <expr>'F'</expr>, <expr>'P'</expr>, <expr>'V'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>GKQ</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'G'</expr>, <expr>'K'</expr>, <expr>'Q'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CKQ</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'C'</expr>, <expr>'K'</expr>, <expr>'Q'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>AHKLOQRUX</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'A'</expr>, <expr>'H'</expr>, <expr>'K'</expr>, <expr>'L'</expr>, <expr>'O'</expr>, <expr>'Q'</expr>, <expr>'R'</expr>, <expr>'U'</expr>, <expr>'X'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>SZ</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'S'</expr>, <expr>'Z'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>AHOUKQX</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'A'</expr>, <expr>'H'</expr>, <expr>'O'</expr>, <expr>'U'</expr>, <expr>'K'</expr>, <expr>'Q'</expr>, <expr>'X'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>TDX</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'T'</expr>, <expr>'D'</expr>, <expr>'X'</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * This class is not thread-safe; the field {@link #length} is mutable.
     * However, it is not shared between threads, as it is constructed on demand
     * by the method {@link ColognePhonetic#colognePhonetic(String)}
     */</comment>
    <class><specifier>private</specifier> <specifier>abstract</specifier> class <name>CologneBuffer</name> <block>{

        <decl_stmt><decl><type><specifier>protected</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>data</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>protected</specifier> <name>int</name></type> <name>length</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>CologneBuffer</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>length</name></name> = <name><name>data</name>.<name>length</name></name></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>CologneBuffer</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>buffSize</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>data</name></name> = new <name><name>char</name><index>[<expr><name>buffSize</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>length</name></name> = 0</expr>;</expr_stmt>
        }</block></constructor>

        <function_decl><type><specifier>protected</specifier> <specifier>abstract</specifier> <name>char</name><index>[]</index></type> <name>copyData</name><parameter_list>(<param><decl><type><name>int</name></type> <name>start</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>

        <function><type><specifier>public</specifier> <name>int</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>length</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>copyData</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>CologneOutputBuffer</name> <super><extends>extends <name>CologneBuffer</name></extends></super> <block>{

        <constructor><specifier>public</specifier> <name>CologneOutputBuffer</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>buffSize</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>buffSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addRight</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>chr</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>data</name><index>[<expr><name>length</name></expr>]</index></name> = <name>chr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>length</name>++</expr>;</expr_stmt>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>char</name><index>[]</index></type> <name>copyData</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>newData</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>newData</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>newData</name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>CologneInputBuffer</name> <super><extends>extends <name>CologneBuffer</name></extends></super> <block>{

        <constructor><specifier>public</specifier> <name>CologneInputBuffer</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>addLeft</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name>length</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>data</name><index>[<expr><call><name>getNextPos</name><argument_list>()</argument_list></call></expr>]</index></name> = <name>ch</name></expr>;</expr_stmt>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <name>char</name><index>[]</index></type> <name>copyData</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>newData</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name>.<name>length</name></name> - <name><name>this</name>.<name>length</name></name> + <name>start</name></expr></argument>, <argument><expr><name>newData</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>newData</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>char</name></type> <name>getNextChar</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>data</name><index>[<expr><call><name>getNextPos</name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
        }</block></function>

        <function><type><specifier>protected</specifier> <name>int</name></type> <name>getNextPos</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>data</name>.<name>length</name></name> - <name>length</name></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>char</name></type> <name>removeNext</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name> =<init> <expr><call><name>getNextChar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>length</name>--</expr>;</expr_stmt>
            <return>return <expr><name>ch</name></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="javadoc">/**
     * Maps some Germanic characters to plain for internal processing. The following characters are mapped:
     * &lt;ul&gt;
     * &lt;li&gt;capital a, umlaut mark&lt;/li&gt;
     * &lt;li&gt;capital u, umlaut mark&lt;/li&gt;
     * &lt;li&gt;capital o, umlaut mark&lt;/li&gt;
     * &lt;li&gt;small sharp s, German&lt;/li&gt;
     * &lt;/ul&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index><index>[]</index></type> <name>PREPROCESS_MAP</name> =<init> <expr>new <name><name>char</name><index>[]</index><index>[]</index></name><block>{
        <expr><block>{<expr>'\u00C4'</expr>, <expr>'A'</expr>}</block></expr>, <comment type="line">// capital a, umlaut mark</comment>
        <expr><block>{<expr>'\u00DC'</expr>, <expr>'U'</expr>}</block></expr>, <comment type="line">// capital u, umlaut mark</comment>
        <expr><block>{<expr>'\u00D6'</expr>, <expr>'O'</expr>}</block></expr>, <comment type="line">// capital o, umlaut mark</comment>
        <expr><block>{<expr>'\u00DF'</expr>, <expr>'S'</expr>}</block></expr> <comment type="line">// small sharp s, German</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Returns whether the array contains the key, or not.
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>arrayContains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>arr</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>char</name></type> <name>element</name> :<range> <expr><name>arr</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><name>element</name> == <name>key</name></expr>)</condition><then> <block>{
                <return>return <expr>true</expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr>false</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * &lt;p&gt;
     * Implements the &lt;i&gt;K&amp;ouml;lner Phonetik&lt;/i&gt; algorithm.
     * &lt;/p&gt;
     * &lt;p&gt;
     * In contrast to the initial description of the algorithm, this implementation does the encoding in one pass.
     * &lt;/p&gt;
     *
     * @param text
     * @return the corresponding encoding according to the &lt;i&gt;K&amp;ouml;lner Phonetik&lt;/i&gt; algorithm
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>colognePhonetic</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>text</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>text</name> = <call><name>preprocess</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CologneOutputBuffer</name></type> <name>output</name> =<init> <expr>new <call><name>CologneOutputBuffer</name><argument_list>(<argument><expr><call><name><name>text</name>.<name>length</name></name><argument_list>()</argument_list></call> * 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CologneInputBuffer</name></type> <name>input</name> =<init> <expr>new <call><name>CologneInputBuffer</name><argument_list>(<argument><expr><call><name><name>text</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name>nextChar</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name>lastChar</name> =<init> <expr>'-'</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>lastCode</name> =<init> <expr>'/'</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>code</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>chr</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>rightLength</name> =<init> <expr><call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>rightLength</name> &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>chr</name> = <call><name><name>input</name>.<name>removeNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>(<name>rightLength</name> = <call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call>) &gt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>nextChar</name> = <call><name><name>input</name>.<name>getNextChar</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>nextChar</name> = '-'</expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>AEIJOUY</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '0'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'H' || <name>chr</name> &lt; 'A' || <name>chr</name> &gt; 'Z'</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>lastCode</name> == '/'</expr>)</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name>code</name> = '-'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'B' || (<name>chr</name> == 'P' &amp;&amp; <name>nextChar</name> != 'H')</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '1'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr>(<name>chr</name> == 'D' || <name>chr</name> == 'T') &amp;&amp; !<call><name>arrayContains</name><argument_list>(<argument><expr><name>SCZ</name></expr></argument>, <argument><expr><name>nextChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '2'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>WFPV</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '3'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>GKQ</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '4'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'X' &amp;&amp; !<call><name>arrayContains</name><argument_list>(<argument><expr><name>CKQ</name></expr></argument>, <argument><expr><name>lastChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '4'</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name>.<name>addLeft</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rightLength</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'S' || <name>chr</name> == 'Z'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '8'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'C'</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>lastCode</name> == '/'</expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>AHKLOQRUX</name></expr></argument>, <argument><expr><name>nextChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>code</name> = '4'</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>code</name> = '8'</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>SZ</name></expr></argument>, <argument><expr><name>lastChar</name></expr></argument>)</argument_list></call> || !<call><name>arrayContains</name><argument_list>(<argument><expr><name>AHOUKQX</name></expr></argument>, <argument><expr><name>nextChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>code</name> = '8'</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>code</name> = '4'</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>arrayContains</name><argument_list>(<argument><expr><name>TDX</name></expr></argument>, <argument><expr><name>chr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '8'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'R'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '7'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'L'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '5'</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>chr</name> == 'M' || <name>chr</name> == 'N'</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>code</name> = '6'</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>code</name> = <name>chr</name></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

            <if>if <condition>(<expr><name>code</name> != '-' &amp;&amp; (<name>lastCode</name> != <name>code</name> &amp;&amp; (<name>code</name> != '0' || <name>lastCode</name> == '/') || <name>code</name> &lt; '0' || <name>code</name> &gt; '8')</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>output</name>.<name>addRight</name></name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>lastChar</name> = <name>chr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lastCode</name> = <name>code</name></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><call><name><name>output</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>object</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"This method's parameter was expected to be of the type " +
                <name><name>String</name>.<name><name/></name></name>class.<call><name>getName</name><argument_list>()</argument_list></call> +
                ". But actually it was of the type " +
                <call><name><name>object</name>.<name>getClass</name></name><argument_list>()</argument_list></call>.<call><name>getName</name><argument_list>()</argument_list></call> +
                "."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>) <name>object</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>colognePhonetic</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEncodeEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>colognePhonetic</name><argument_list>(<argument><expr><name>text1</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>colognePhonetic</name><argument_list>(<argument><expr><name>text2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts the string to upper case and replaces germanic characters as defined in {@link #PREPROCESS_MAP}.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>preprocess</name><parameter_list>(<param><decl><type><name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>text</name> = <call><name><name>text</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>GERMAN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>chrs</name> =<init> <expr><call><name><name>text</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>index</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>index</name> &lt; <name><name>chrs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>index</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>chrs</name><index>[<expr><name>index</name></expr>]</index></name> &gt; 'Z'</expr>)</condition><then> <block>{
                <for>for (<init><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>element</name> :<range> <expr><name>PREPROCESS_MAP</name></expr></range></decl></init>) <block>{
                    <if>if <condition>(<expr><name><name>chrs</name><index>[<expr><name>index</name></expr>]</index></name> == <name><name>element</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>chrs</name><index>[<expr><name>index</name></expr>]</index></name> = <name><name>element</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
        }</block></for>
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><name>chrs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
