<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\ColognePhoneticTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests the {@code ColognePhonetic} class.
 *
 * &lt;p&gt;Keep this file in UTF-8 encoding for proper Javadoc processing.&lt;/p&gt;
 *
 */</comment>
<class><specifier>public</specifier> class <name>ColognePhoneticTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>ColognePhonetic</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>ColognePhonetic</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>ColognePhonetic</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAabjoe</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr>"01"</expr></argument>, <argument><expr>"Aabjoe"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAaclan</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr>"0856"</expr></argument>, <argument><expr>"Aaclan"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests [CODEC-122]
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testAychlmajrForCodec122</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncoding</name></name><argument_list>(<argument><expr>"04567"</expr></argument>, <argument><expr>"Aychlmajr"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEdgeCases</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{
            <expr><block>{<expr>"a"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"e"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"i"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"o"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"u"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"\u00E4"</expr>, <expr>"0"</expr>}</block></expr>, <comment type="line">// a-umlaut</comment>
            <expr><block>{<expr>"\u00F6"</expr>, <expr>"0"</expr>}</block></expr>, <comment type="line">// o-umlaut</comment>
            <expr><block>{<expr>"\u00FC"</expr>, <expr>"0"</expr>}</block></expr>, <comment type="line">// u-umlaut</comment>
            <expr><block>{<expr>"aa"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"ha"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"h"</expr>, <expr>""</expr>}</block></expr>,
            <expr><block>{<expr>"aha"</expr>, <expr>"0"</expr>}</block></expr>,
            <expr><block>{<expr>"b"</expr>, <expr>"1"</expr>}</block></expr>,
            <expr><block>{<expr>"p"</expr>, <expr>"1"</expr>}</block></expr>,
            <expr><block>{<expr>"ph"</expr>, <expr>"3"</expr>}</block></expr>,
            <expr><block>{<expr>"f"</expr>, <expr>"3"</expr>}</block></expr>,
            <expr><block>{<expr>"v"</expr>, <expr>"3"</expr>}</block></expr>,
            <expr><block>{<expr>"w"</expr>, <expr>"3"</expr>}</block></expr>,
            <expr><block>{<expr>"g"</expr>, <expr>"4"</expr>}</block></expr>,
            <expr><block>{<expr>"k"</expr>, <expr>"4"</expr>}</block></expr>,
            <expr><block>{<expr>"q"</expr>, <expr>"4"</expr>}</block></expr>,
            <expr><block>{<expr>"x"</expr>, <expr>"48"</expr>}</block></expr>,
            <expr><block>{<expr>"ax"</expr>, <expr>"048"</expr>}</block></expr>,
            <expr><block>{<expr>"cx"</expr>, <expr>"48"</expr>}</block></expr>,
            <expr><block>{<expr>"l"</expr>, <expr>"5"</expr>}</block></expr>,
            <expr><block>{<expr>"cl"</expr>, <expr>"45"</expr>}</block></expr>,
            <expr><block>{<expr>"acl"</expr>, <expr>"085"</expr>}</block></expr>,
            <expr><block>{<expr>"mn"</expr>, <expr>"6"</expr>}</block></expr>,
            <expr><block>{<expr>"r"</expr>, <expr>"7"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testExamples</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{
            <expr><block>{<expr>"m\u00DCller"</expr>, <expr>"657"</expr>}</block></expr>, <comment type="line">// mÃller - why upper case U-umlaut?</comment>
            <expr><block>{<expr>"schmidt"</expr>, <expr>"862"</expr>}</block></expr>,
            <expr><block>{<expr>"schneider"</expr>, <expr>"8627"</expr>}</block></expr>,
            <expr><block>{<expr>"fischer"</expr>, <expr>"387"</expr>}</block></expr>,
            <expr><block>{<expr>"weber"</expr>, <expr>"317"</expr>}</block></expr>,
            <expr><block>{<expr>"wagner"</expr>, <expr>"3467"</expr>}</block></expr>,
            <expr><block>{<expr>"becker"</expr>, <expr>"147"</expr>}</block></expr>,
            <expr><block>{<expr>"hoffmann"</expr>, <expr>"0366"</expr>}</block></expr>,
            <expr><block>{<expr>"sch\u00C4fer"</expr>, <expr>"837"</expr>}</block></expr>, <comment type="line">// schÃfer - why upper case A-umlaut ?</comment>
            <expr><block>{<expr>"Breschnew"</expr>, <expr>"17863"</expr>}</block></expr>,
            <expr><block>{<expr>"Wikipedia"</expr>, <expr>"3412"</expr>}</block></expr>,
            <expr><block>{<expr>"peter"</expr>, <expr>"127"</expr>}</block></expr>,
            <expr><block>{<expr>"pharma"</expr>, <expr>"376"</expr>}</block></expr>,
            <expr><block>{<expr>"m\u00f6nchengladbach"</expr>, <expr>"664645214"</expr>}</block></expr>, <comment type="line">// mÃ¶nchengladbach</comment>
            <expr><block>{<expr>"deutsch"</expr>, <expr>"28"</expr>}</block></expr>,
            <expr><block>{<expr>"deutz"</expr>, <expr>"28"</expr>}</block></expr>,
            <expr><block>{<expr>"hamburg"</expr>, <expr>"06174"</expr>}</block></expr>,
            <expr><block>{<expr>"hannover"</expr>, <expr>"0637"</expr>}</block></expr>,
            <expr><block>{<expr>"christstollen"</expr>, <expr>"478256"</expr>}</block></expr>,
            <expr><block>{<expr>"Xanthippe"</expr>, <expr>"48621"</expr>}</block></expr>,
            <expr><block>{<expr>"Zacharias"</expr>, <expr>"8478"</expr>}</block></expr>,
            <expr><block>{<expr>"Holzbau"</expr>, <expr>"0581"</expr>}</block></expr>,
            <expr><block>{<expr>"matsch"</expr>, <expr>"68"</expr>}</block></expr>,
            <expr><block>{<expr>"matz"</expr>, <expr>"68"</expr>}</block></expr>,
            <expr><block>{<expr>"Arbeitsamt"</expr>, <expr>"071862"</expr>}</block></expr>,
            <expr><block>{<expr>"Eberhard"</expr>, <expr>"01772"</expr>}</block></expr>,
            <expr><block>{<expr>"Eberhardt"</expr>, <expr>"01772"</expr>}</block></expr>,
            <expr><block>{<expr>"heithabu"</expr>, <expr>"021"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHyphen</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{<expr><block>{<expr>"bergisch-gladbach"</expr>, <expr>"174845214"</expr>}</block></expr>,
                <expr><block>{<expr>"M\u00fcller-L\u00fcdenscheidt"</expr>, <expr>"65752682"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt> <comment type="line">// MÃ¼ller-LÃ¼denscheidt</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodings</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsEncodeEquals</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index><index>[]</index></type> <name>data</name> =<init> <expr><block>{
            <expr><block>{<expr>"Meyer"</expr>, <expr>"M\u00fcller"</expr>}</block></expr>, <comment type="line">// MÃ¼ller</comment>
            <expr><block>{<expr>"Meyer"</expr>, <expr>"Mayr"</expr>}</block></expr>,
            <expr><block>{<expr>"house"</expr>, <expr>"house"</expr>}</block></expr>,
            <expr><block>{<expr>"House"</expr>, <expr>"house"</expr>}</block></expr>,
            <expr><block>{<expr>"Haus"</expr>, <expr>"house"</expr>}</block></expr>,
            <expr><block>{<expr>"ganz"</expr>, <expr>"Gans"</expr>}</block></expr>,
            <expr><block>{<expr>"ganz"</expr>, <expr>"G\u00e4nse"</expr>}</block></expr>, <comment type="line">// GÃ¤nse</comment>
            <expr><block>{<expr>"Miyagi"</expr>, <expr>"Miyako"</expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>element</name> :<range> <expr><name>data</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEqual</name><argument_list>(<argument><expr><name><name>element</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>element</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testVariationsMella</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name><name>data</name><index>[]</index></name> =<init> <expr><block>{<expr>"mella"</expr>, <expr>"milah"</expr>, <expr>"moulla"</expr>, <expr>"mellah"</expr>, <expr>"muehle"</expr>, <expr>"mule"</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"65"</expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testVariationsMeyer</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name><name>data</name><index>[]</index></name> =<init> <expr><block>{<expr>"Meier"</expr>, <expr>"Maier"</expr>, <expr>"Mair"</expr>, <expr>"Meyer"</expr>, <expr>"Meyr"</expr>, <expr>"Mejer"</expr>, <expr>"Major"</expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>checkEncodingVariations</name></name><argument_list>(<argument><expr>"67"</expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
