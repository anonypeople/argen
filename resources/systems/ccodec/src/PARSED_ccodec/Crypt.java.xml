<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\digest\Crypt.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>

<comment type="javadoc">/**
 * GNU libc crypt(3) compatible hash method.
 * &lt;p&gt;
 * See {@link #crypt(String, String)} for further details.
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @version $Id: Crypt.java 1429868 2013-01-07 16:08:05Z ggregory $
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Crypt</name> <block>{

    <comment type="javadoc">/**
     * Encrypts a password in a crypt(3) compatible way.
     * &lt;p&gt;
     * A random salt and the default algorithm (currently SHA-512) are used. See {@link #crypt(String, String)} for
     * details.
     *
     * @param keyBytes
     *            plaintext password
     * @return hash value
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encrypts a password in a crypt(3) compatible way.
     * &lt;p&gt;
     * If no salt is provided, a random salt and the default algorithm (currently SHA-512) will be used. See
     * {@link #crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext password
     * @param salt
     *            salt value
     * @return hash value
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>salt</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>salt</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>Sha2Crypt</name>.<name>SHA512_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Sha2Crypt</name>.<name>sha512Crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>salt</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>Sha2Crypt</name>.<name>SHA256_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Sha2Crypt</name>.<name>sha256Crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>salt</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>Md5Crypt</name>.<name>MD5_PREFIX</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>UnixCrypt</name>.<name>crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the digest using the strongest crypt(3) algorithm.
     * &lt;p&gt;
     * A random salt and the default algorithm (currently SHA-512) are used.
     *
     * @see #crypt(String, String)
     * @param key
     *            plaintext password
     * @return hash value
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encrypts a password in a crypt(3) compatible way.
     * &lt;p&gt;
     * The exact algorithm depends on the format of the salt string:
     * &lt;ul&gt;
     * &lt;li&gt;SHA-512 salts start with $6$ and are up to 16 chars long.
     * &lt;li&gt;SHA-256 salts start with $5$ and are up to 16 chars long
     * &lt;li&gt;MD5 salts start with "$1$" and are up to 8 chars long
     * &lt;li&gt;DES, the traditional UnixCrypt algorithm is used else with only 2 chars
     * &lt;li&gt;Only the first 8 chars of the passwords are used in the DES algorithm!
     * &lt;/ul&gt;
     * The magic strings "$apr1$" and "$2a$" are not recognised by this method as its output should be identical with
     * that of the libc implementation.
     * &lt;p&gt;
     * The rest of the salt string is drawn from the set [a-zA-Z0-9./] and is cut at the maximum length of if a "$"
     * sign is encountered. It is therefore valid to enter a complete hash value as salt to e.g. verify a password
     * with:
     *
     * &lt;pre&gt;
     * storedPwd.equals(crypt(enteredPwd, storedPwd))
     * &lt;/pre&gt;
     * &lt;p&gt;
     * The resulting string starts with the marker string ($6$), continues with the salt value and ends with a "$" sign
     * followed by the actual hash value. For DES the string only contains the salt and actual hash. It's total length
     * is dependent on the algorithm used:
     * &lt;ul&gt;
     * &lt;li&gt;SHA-512: 106 chars
     * &lt;li&gt;SHA-256: 63 chars
     * &lt;li&gt;MD5: 34 chars
     * &lt;li&gt;DES: 13 chars
     * &lt;/ul&gt;
     * &lt;p&gt;
     * Example:
     *
     * &lt;pre&gt;
     *      crypt("secret", "$1$xxxx") =&gt; "$1$xxxx$aMkevjfEIpa35Bh3G4bAc."
     *      crypt("secret", "xx") =&gt; "xxWAum7tHdIUw"
     * &lt;/pre&gt;
     * &lt;p&gt;
     * This method comes in a variation that accepts a byte[] array to support input strings that are not encoded in
     * UTF-8 but e.g. in ISO-8859-1 where equal characters result in different byte values.
     *
     * @see "The man page of the libc crypt (3) function."
     * @param key
     *            plaintext password as entered by the used
     * @param salt
     *            salt value
     * @return hash value, i.e. encrypted password including the salt string
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>crypt</name><argument_list>(<argument><expr><call><name><name>key</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
