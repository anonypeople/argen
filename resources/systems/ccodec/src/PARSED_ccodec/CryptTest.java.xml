<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\digest\CryptTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>CryptTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCrypt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>new <call><name>Crypt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// just for Test Coverage</comment>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDefaultCryptVariant</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// If salt is null or completely omitted, a random "$6$" is used.</comment>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>)</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr>"$6$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>startsWith</name><argument_list>(<argument><expr>"$6$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCryptWithBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>keyBytes</name> =<init> <expr>new <name><name>byte</name><index>[]</index></name> <block>{ <expr>'b'</expr>, <expr>'y'</expr>, <expr>'t'</expr>, <expr>'e'</expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>hash</name> =<init> <expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"byte"</expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An empty string as salt is invalid.
     *
     * The C and Perl implementations return an empty string, PHP threads it
     * as NULL. Our implementation should throw an Exception as any resulting
     * hash would not be verifyable with other implementations of crypt().
     */</comment>
    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCryptWithEmptySalt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
