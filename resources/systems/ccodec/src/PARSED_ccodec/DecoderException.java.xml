<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\DecoderException.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name></name>;</package>

<comment type="javadoc">/**
 * Thrown when there is a failure condition during the decoding process. This exception is thrown when a {@link Decoder}
 * encounters a decoding specific exception such as invalid data, or characters outside of the expected range.
 *
 * @version $Id: DecoderException.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>DecoderException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{

    <comment type="javadoc">/**
     * Declares the Serial Version Uid.
     *
     * @see &lt;a href="http://c2.com/cgi/wiki?AlwaysDeclareSerialVersionUid"&gt;Always Declare Serial Version Uid&lt;/a&gt;
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> =<init> <expr>1L</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may
     * subsequently be initialized by a call to {@link #initCause}.
     *
     * @since 1.4
     */</comment>
    <constructor><specifier>public</specifier> <name>DecoderException</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently
     * be initialized by a call to {@link #initCause}.
     *
     * @param message
     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.
     */</comment>
    <constructor><specifier>public</specifier> <name>DecoderException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new exception with the specified detail message and cause.
     * &lt;p&gt;
     * Note that the detail message associated with &lt;code&gt;cause&lt;/code&gt; is not automatically incorporated into this
     * exception's detail message.
     *
     * @param message
     *            The detail message which is saved for later retrieval by the {@link #getMessage()} method.
     * @param cause
     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}
     *            value is permitted, and indicates that the cause is nonexistent or unknown.
     * @since 1.4
     */</comment>
    <constructor><specifier>public</specifier> <name>DecoderException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>cause</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Constructs a new exception with the specified cause and a detail message of &lt;code&gt;(cause==null ?
     * null : cause.toString())&lt;/code&gt; (which typically contains the class and detail message of &lt;code&gt;cause&lt;/code&gt;).
     * This constructor is useful for exceptions that are little more than wrappers for other throwables.
     *
     * @param cause
     *            The cause which is saved for later retrieval by the {@link #getCause()} method. A {@code null}
     *            value is permitted, and indicates that the cause is nonexistent or unknown.
     * @since 1.4
     */</comment>
    <constructor><specifier>public</specifier> <name>DecoderException</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>cause</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>
