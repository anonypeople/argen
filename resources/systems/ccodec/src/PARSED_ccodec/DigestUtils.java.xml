<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\digest\DigestUtils.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>Hex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name></name>;</import>

<comment type="javadoc">/**
 * Operations to simplify common {@link java.security.MessageDigest} tasks.
 * This class is immutable and thread-safe.
 *
 * @version $Id: DigestUtils.java 1542813 2013-11-17 20:52:32Z tn $
 */</comment>
<class><specifier>public</specifier> class <name>DigestUtils</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>STREAM_BUFFER_LENGTH</name> =<init> <expr>1024</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Read through an InputStream and returns the digest for the data
     *
     * @param digest
     *            The MessageDigest to use (e.g. MD5)
     * @param data
     *            Data to digest
     * @return the digest
     * @throws IOException
     *             On error reading from the stream
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>digest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>MessageDigest</name></type> <name>digest</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>updateDigest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call>.<call><name>digest</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a &lt;code&gt;MessageDigest&lt;/code&gt; for the given &lt;code&gt;algorithm&lt;/code&gt;.
     *
     * @param algorithm
     *            the name of the algorithm requested. See &lt;a
     *            href="http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA"&gt;Appendix A in the Java
     *            Cryptography Architecture API Specification &amp; Reference&lt;/a&gt; for information about standard algorithm
     *            names.
     * @return A digest instance.
     * @see MessageDigest#getInstance(String)
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getDigest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>algorithm</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <return>return <expr><call><name><name>MessageDigest</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>NoSuchAlgorithmException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an MD2 MessageDigest.
     *
     * @return An MD2 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD2 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#MD2
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getMd2Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>MD2</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an MD5 MessageDigest.
     *
     * @return An MD5 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because MD5 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#MD5
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getMd5Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>MD5</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an SHA-1 digest.
     *
     * @return An SHA-1 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-1 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#SHA_1
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getSha1Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>SHA_1</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an SHA-256 digest.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @return An SHA-256 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-256 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#SHA_256
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getSha256Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>SHA_256</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an SHA-384 digest.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @return An SHA-384 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-384 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#SHA_384
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getSha384Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>SHA_384</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an SHA-512 digest.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @return An SHA-512 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught, which should never happen because SHA-512 is a
     *             built-in algorithm
     * @see MessageDigestAlgorithms#SHA_512
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getSha512Digest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDigest</name><argument_list>(<argument><expr><name><name>MessageDigestAlgorithms</name>.<name>SHA_512</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns an SHA-1 digest.
     *
     * @return An SHA-1 digest instance.
     * @throws IllegalArgumentException
     *             when a {@link NoSuchAlgorithmException} is caught
     * @deprecated Use {@link #getSha1Digest()}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>getShaDigest</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getSha1Digest</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return MD2 digest
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md2</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMd2Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return MD2 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md2</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getMd2Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return MD2 digest
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md2</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>md2</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD2 digest as a hex string
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md2Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD2 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md2Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD2 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD2 digest as a hex string
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md2Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md2</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return MD5 digest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md5</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getMd5Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return MD5 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md5</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getMd5Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 16 element &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return MD5 digest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>md5</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>md5</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD5 digest as a hex string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD5 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the MD5 digest and returns the value as a 32 character hex string.
     *
     * @param data
     *            Data to digest
     * @return MD5 digest as a hex string
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>md5</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest
     * @deprecated Use {@link #sha1(byte[])}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     * @deprecated Use {@link #sha1(InputStream)}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest
     * @deprecated Use {@link #sha1(String)}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha1</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSha1Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha1</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getSha1Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return SHA-1 digest
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha1</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha1</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha1Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha1Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha1Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha1</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-256 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha256</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSha256Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-256 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha256</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getSha256Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return SHA-256 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha256</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha256</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-256 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha256Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha256</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-256 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha256Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha256</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-256 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-256 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha256Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha256</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-384 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha384</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSha384Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-384 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha384</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getSha384Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return SHA-384 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha384</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha384</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-384 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha384Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha384</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-384 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha384Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha384</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-384 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-384 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha384Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha384</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-512 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha512</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>getSha512Digest</name><argument_list>()</argument_list></call>.<call><name>digest</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-512 digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha512</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>digest</name><argument_list>(<argument><expr><call><name>getSha512Digest</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a &lt;code&gt;byte[]&lt;/code&gt;.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest; converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return SHA-512 digest
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>sha512</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha512</name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-512 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha512Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha512</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-512 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha512Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha512</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-512 digest and returns the value as a hex string.
     * &lt;p&gt;
     * Throws a &lt;code&gt;RuntimeException&lt;/code&gt; on JRE versions prior to 1.4.0.
     * &lt;/p&gt;
     *
     * @param data
     *            Data to digest
     * @return SHA-512 digest as a hex string
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>sha512Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name>sha512</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @deprecated Use {@link #sha1Hex(byte[])}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>shaHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha1Hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @throws IOException
     *             On error reading from the stream
     * @since 1.4
     * @deprecated Use {@link #sha1Hex(InputStream)}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>shaHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>sha1Hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Calculates the SHA-1 digest and returns the value as a hex string.
     *
     * @param data
     *            Data to digest
     * @return SHA-1 digest as a hex string
     * @deprecated Use {@link #sha1Hex(String)}
     */</comment>
    <function><type><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>shaHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>sha1Hex</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Updates the given {@link MessageDigest}.
     *
     * @param messageDigest
     *            the {@link MessageDigest} to update
     * @param valueToDigest
     *            the value to update the {@link MessageDigest} with
     * @return the updated {@link MessageDigest}
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>MessageDigest</name></type> <name>messageDigest</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>valueToDigest</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><name>valueToDigest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>messageDigest</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Reads through an InputStream and updates the digest for the data
     *
     * @param digest
     *            The MessageDigest to use (e.g. MD5)
     * @param data
     *            Data to digest
     * @return the digest
     * @throws IOException
     *             On error reading from the stream
     * @since 1.8
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>MessageDigest</name></type> <name>digest</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>buffer</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>STREAM_BUFFER_LENGTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>read</name> =<init> <expr><call><name><name>data</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>STREAM_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>read</name> &gt; -1</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>digest</name>.<name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>read</name> = <call><name><name>data</name>.<name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>STREAM_BUFFER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <return>return <expr><name>digest</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Updates the given {@link MessageDigest}.
     *
     * @param messageDigest
     *            the {@link MessageDigest} to update
     * @param valueToDigest
     *            the value to update the {@link MessageDigest} with;
     *            converted to bytes using {@link StringUtils#getBytesUtf8(String)}
     * @return the updated {@link MessageDigest}
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>MessageDigest</name></type> <name>updateDigest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>MessageDigest</name></type> <name>messageDigest</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>valueToDigest</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>valueToDigest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>messageDigest</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
