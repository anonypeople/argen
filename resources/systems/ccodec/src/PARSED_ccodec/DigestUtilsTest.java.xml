<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\digest\DigestUtilsTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import static <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name>.<name>getBytesUtf8</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNotNull</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>io</name>.<name>IOException</name></name>;</import>
<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>Hex</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name>.<name>StringUtils</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests DigestUtils methods.
 *
 * @version $Id: DigestUtilsTest.java 1414924 2012-11-28 21:13:20Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>DigestUtilsTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>testData</name> =<init> <expr>new <name><name>byte</name><index>[<expr>1024*1024</expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* (non-Javadoc)
     * @see junit.framework.TestCase#setUp()
     */</comment>
    <function><type><specifier>protected</specifier> <name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr>new <call><name>Random</name><argument_list>()</argument_list></call>.<call><name>nextBytes</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testConstructable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>new <call><name>DigestUtils</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected=IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testInternalNoSuchAlgorithmException</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>getDigest</name></name><argument_list>(<argument><expr>"Bogus Bogus"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd2Hex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Examples from RFC 1319</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"8350e5a3e24c153df2275c9f80692773"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"32ec01ec4a6dac72c0ab96fb34c0b5d1"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"da853b0d3f88d99b30283a69e6ded6bb"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ab4f496bfb2a530b219ff33031fe06b0"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"message digest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"4e8ddff3650292ab5a4108c3aa47940b"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"abcdefghijklmnopqrstuvwxyz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"da33def2a42df13975352846c30338cd"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"d5976f79d83d3a0dc9806c3c66f3efd8"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>"1234567890123456789012345678901234567890" + "1234567890123456789012345678901234567890"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An MD2 hash converted to hex should always be 32 characters.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd2HexLength</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>hashMe</name> =<init> <expr>"this is some string that is longer than 32 characters"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>hash</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>32</expr></argument>, <argument><expr><call><name><name>hash</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hashMe</name> = "length &lt; 32"</expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> = <call><name><name>DigestUtils</name>.<name>md2Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>32</expr></argument>, <argument><expr><call><name><name>hash</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An MD2 hash should always be a 16 element byte[].
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd2Length</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>hashMe</name> =<init> <expr>"this is some string that is longer than 16 characters"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>hash</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>md2</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>16</expr></argument>, <argument><expr><name><name>hash</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hashMe</name> = "length &lt; 16"</expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> = <call><name><name>DigestUtils</name>.<name>md2</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>16</expr></argument>, <argument><expr><name><name>hash</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5Hex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Examples from RFC 1321</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"d41d8cd98f00b204e9800998ecf8427e"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0cc175b9c0f1b6a831c399e269772661"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"a"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"900150983cd24fb0d6963f7d28e17f72"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"f96b697d7cb7938d525a2f31aaf161d0"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"message digest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"c3fcd3d76192e4007dfb496cca67e13b"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"abcdefghijklmnopqrstuvwxyz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"d174ab98d277d9f5a5611c2c9f419d9f"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"57edf4a22be3c955ac49da2e2107b67a"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>"1234567890123456789012345678901234567890" + "1234567890123456789012345678901234567890"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An MD5 hash converted to hex should always be 32 characters.
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5HexLength</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>hashMe</name> =<init> <expr>"this is some string that is longer than 32 characters"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>hash</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>32</expr></argument>, <argument><expr><call><name><name>hash</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hashMe</name> = "length &lt; 32"</expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> = <call><name><name>DigestUtils</name>.<name>md5Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>32</expr></argument>, <argument><expr><call><name><name>hash</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * An MD5 hash should always be a 16 element byte[].
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5Length</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>hashMe</name> =<init> <expr>"this is some string that is longer than 16 characters"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>hash</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>md5</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>16</expr></argument>, <argument><expr><name><name>hash</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>hashMe</name> = "length &lt; 16"</expr>;</expr_stmt>
        <expr_stmt><expr><name>hash</name> = <call><name><name>DigestUtils</name>.<name>md5</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr><name>hashMe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>16</expr></argument>, <argument><expr><name><name>hash</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha1Hex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Examples from FIPS 180-1</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a9993e364706816aba3e25717850c26c9cd0d89d"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>sha1Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a9993e364706816aba3e25717850c26c9cd0d89d"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>sha1Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"84983e441c3bd26ebaae4aa1f95129e5e54670f1"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>sha1Hex</name></name><argument_list>(<argument><expr>"abcdbcdecdefdefgefghfghighij" + "hijkijkljklmklmnlmnomnopnopq"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>sha1Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DigestUtils</name>.<name>sha1Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha1UpdateWithByteArray</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d1</name> =<init> <expr>"C'est un homme qui rentre dans un cafÃ©, et plouf"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d2</name> =<init> <expr>"C'est un homme, c'est qu'une tÃªte, on lui offre un cadeau: 'oh... encore un chapeau!'"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>messageDigest</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getSha1Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>d1</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>d2</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expectedResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageDigest</name> = <call><name><name>DigestUtils</name>.<name>getSha1Digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><call><name><name>d1</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><call><name><name>d2</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actualResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>actualResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha1UpdateWithString</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d1</name> =<init> <expr>"C'est un homme qui rentre dans un cafÃ©, et plouf"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d2</name> =<init> <expr>"C'est un homme, c'est qu'une tÃªte, on lui offre un cadeau: 'oh... encore un chapeau!'"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>messageDigest</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getSha1Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expectedResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageDigest</name> = <call><name><name>DigestUtils</name>.<name>getSha1Digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actualResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>actualResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha256</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <comment type="line">// Examples from FIPS 180-2</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha256Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha256Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha256Hex</name></name><argument_list>(<argument><expr>"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>sha256Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>sha256Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha384</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <comment type="line">// Examples from FIPS 180-2</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed" +
             "8086072ba1e7cc2358baeca134c825a7"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha384Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed" +
             "8086072ba1e7cc2358baeca134c825a7"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha384Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712" +
            "fcc7c71a557e2db966c3e9fa91746039"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha384Hex</name></name><argument_list>(<argument><expr>"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn" +
                       "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>sha384Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>sha384Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSha512</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <comment type="line">// Examples from FIPS 180-2</comment>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a" +
            "2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha512Hex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a" +
             "2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha512Hex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018" +
             "501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909"</expr></argument>,
             <argument><expr><call><name><name>DigestUtils</name>.<name>sha512Hex</name></name><argument_list>(<argument><expr>"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn" +
                       "hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>sha512Hex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>sha512Hex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

    <function><type><annotation>@<name>SuppressWarnings</name><argument_list>("deprecation")</argument_list></annotation> <comment type="line">// deliberate tests of deprecated code</comment>
    <annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testShaHex</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Examples from FIPS 180-1</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a9993e364706816aba3e25717850c26c9cd0d89d"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>shaHex</name></name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"a9993e364706816aba3e25717850c26c9cd0d89d"</expr></argument>, <argument><expr><call><name><name>DigestUtils</name>.<name>shaHex</name></name><argument_list>(<argument><expr><call><name>getBytesUtf8</name><argument_list>(<argument><expr>"abc"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
            <argument><expr>"84983e441c3bd26ebaae4aa1f95129e5e54670f1"</expr></argument>,
            <argument><expr><call><name><name>DigestUtils</name>.<name>shaHex</name></name><argument_list>(<argument><expr>"abcdbcdecdefdefgefghfghighij" + "hijkijkljklmklmnlmnomnopnopq"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><call><name><name>DigestUtils</name>.<name>shaHex</name></name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>DigestUtils</name>.<name>shaHex</name></name><argument_list>(<argument><expr>new <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>testData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>SuppressWarnings</name><argument_list>("deprecation")</argument_list></annotation> <comment type="line">// deliberate tests of deprecated code</comment>
    <annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testShaUpdateWithByteArray</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d1</name> =<init> <expr>"C'est un homme qui rentre dans un cafÃ©, et plouf"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d2</name> =<init> <expr>"C'est un homme, c'est qu'une tÃªte, on lui offre un cadeau: 'oh... encore un chapeau!'"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>messageDigest</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getShaDigest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>d1</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>d2</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expectedResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageDigest</name> = <call><name><name>DigestUtils</name>.<name>getShaDigest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><call><name><name>d1</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><call><name><name>d2</name>.<name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actualResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>actualResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>SuppressWarnings</name><argument_list>("deprecation")</argument_list></annotation> <comment type="line">// deliberate tests of deprecated code</comment>
    <annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testShaUpdateWithString</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d1</name> =<init> <expr>"C'est un homme qui rentre dans un cafÃ©, et plouf"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>d2</name> =<init> <expr>"C'est un homme, c'est qu'une tÃªte, on lui offre un cadeau: 'oh... encore un chapeau!'"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>messageDigest</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getShaDigest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>messageDigest</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expectedResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>messageDigest</name> = <call><name><name>DigestUtils</name>.<name>getShaDigest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DigestUtils</name>.<name>updateDigest</name></name><argument_list>(<argument><expr><name>messageDigest</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>actualResult</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><call><name><name>messageDigest</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expectedResult</name></expr></argument>, <argument><expr><name>actualResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
