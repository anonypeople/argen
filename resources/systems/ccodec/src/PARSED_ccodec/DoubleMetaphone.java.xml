<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\DoubleMetaphone.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Encodes a string into a double metaphone value. This Implementation is based on the algorithm by &lt;CITE&gt;Lawrence
 * Philips&lt;/CITE&gt;.
 * &lt;p&gt;
 * This class is conditionally thread-safe. The instance field {@link #maxCodeLen} is mutable
 * {@link #setMaxCodeLen(int)} but is not volatile, and accesses are not synchronized. If an instance of the class is
 * shared between threads, the caller needs to ensure that suitable synchronization is used to ensure safe publication
 * of the value between threads, and must not invoke {@link #setMaxCodeLen(int)} after initial setup.
 *
 * @see &lt;a href="http://drdobbs.com/184401251?pgno=2"&gt;Original Article&lt;/a&gt;
 * @see &lt;a href="http://en.wikipedia.org/wiki/Metaphone"&gt;http://en.wikipedia.org/wiki/Metaphone&lt;/a&gt;
 *
 * @version $Id: DoubleMetaphone.java 1544347 2013-11-21 22:30:31Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>DoubleMetaphone</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{

    <comment type="javadoc">/**
     * "Vowels" to test for
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>VOWELS</name> =<init> <expr>"AEIOUY"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Prefixes when present which are not pronounced
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>SILENT_START</name> =<init>
        <expr><block>{ <expr>"GN"</expr>, <expr>"KN"</expr>, <expr>"PN"</expr>, <expr>"WR"</expr>, <expr>"PS"</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>L_R_N_M_B_H_F_V_W_SPACE</name> =<init>
        <expr><block>{ <expr>"L"</expr>, <expr>"R"</expr>, <expr>"N"</expr>, <expr>"M"</expr>, <expr>"B"</expr>, <expr>"H"</expr>, <expr>"F"</expr>, <expr>"V"</expr>, <expr>"W"</expr>, <expr>" "</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER</name> =<init>
        <expr><block>{ <expr>"ES"</expr>, <expr>"EP"</expr>, <expr>"EB"</expr>, <expr>"EL"</expr>, <expr>"EY"</expr>, <expr>"IB"</expr>, <expr>"IL"</expr>, <expr>"IN"</expr>, <expr>"IE"</expr>, <expr>"EI"</expr>, <expr>"ER"</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>L_T_K_S_N_M_B_Z</name> =<init>
        <expr><block>{ <expr>"L"</expr>, <expr>"T"</expr>, <expr>"K"</expr>, <expr>"S"</expr>, <expr>"N"</expr>, <expr>"M"</expr>, <expr>"B"</expr>, <expr>"Z"</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Maximum length of an encoding, default is 4
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <name>int</name></type> <name>maxCodeLen</name> =<init> <expr>4</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an instance of this DoubleMetaphone encoder
     */</comment>
    <constructor><specifier>public</specifier> <name>DoubleMetaphone</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Encode a value with Double Metaphone.
     *
     * @param value String to encode
     * @return an encoded string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>doubleMetaphone</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>doubleMetaphone</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encode a value with Double Metaphone, optionally using the alternate encoding.
     *
     * @param value String to encode
     * @param alternate use alternate encode
     * @return an encoded string
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>doubleMetaphone</name><parameter_list>(<param><decl><type><name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>alternate</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>value</name> = <call><name>cleanInput</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>value</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name> =<init> <expr><call><name>isSlavoGermanic</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> =<init> <expr><call><name>isSilentStart</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> ? 1 : 0</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name> =<init> <expr>new <call><name>DoubleMetaphoneResult</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getMaxCodeLen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr>!<call><name><name>result</name>.<name>isComplete</name></name><argument_list>()</argument_list></call> &amp;&amp; <name>index</name> &lt;= <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition> <block>{
            <switch>switch <condition>(<expr><call><name><name>value</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <case>case <expr>'A'</expr>:
            </case><case>case <expr>'E'</expr>:
            </case><case>case <expr>'I'</expr>:
            </case><case>case <expr>'O'</expr>:
            </case><case>case <expr>'U'</expr>:
            </case><case>case <expr>'Y'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleAEIOUY</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'B'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'P'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'B' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'\u00C7'</expr>:
                <comment type="line">// A C with a Cedilla</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'C'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'D'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleD</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'F'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'F' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'G'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleG</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>slavoGermanic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'H'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleH</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'J'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleJ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>slavoGermanic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'K'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'K' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'L'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleL</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'M'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'M'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>conditionM0</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'N'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'N'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'N' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'\u00D1'</expr>:
                <comment type="line">// N with a tilde (spanish ene)</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'N'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'P'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleP</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'Q'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'Q' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'R'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleR</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>slavoGermanic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'S'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleS</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>slavoGermanic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'T'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleT</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'V'</expr>:
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'V' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'W'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleW</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'X'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleX</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr>'Z'</expr>:
                <expr_stmt><expr><name>index</name> = <call><name>handleZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>slavoGermanic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                <break>break;</break>
            </default>}</block></switch>
        }</block></while>

        <return>return <expr><name>alternate</name> ? <call><name><name>result</name>.<name>getAlternate</name></name><argument_list>()</argument_list></call> : <call><name><name>result</name>.<name>getPrimary</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encode the value using DoubleMetaphone.  It will only work if
     * &lt;code&gt;obj&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; (like &lt;code&gt;Metaphone&lt;/code&gt;).
     *
     * @param obj Object to encode (should be of type String)
     * @return An encoded Object (will be of type String)
     * @throws EncoderException encode parameter is not of type String
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"DoubleMetaphone encode parameter is not of type String"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>doubleMetaphone</name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encode the value using DoubleMetaphone.
     *
     * @param value String to encode
     * @return An encoded String
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>doubleMetaphone</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the Double Metaphone values of two &lt;code&gt;String&lt;/code&gt; values
     * are equal.
     *
     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.
     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.
     * @return {@code true} if the encoded &lt;code&gt;String&lt;/code&gt;s are equal;
     *          {@code false} otherwise.
     * @see #isDoubleMetaphoneEqual(String,String,boolean)
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDoubleMetaphoneEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value2</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>isDoubleMetaphoneEqual</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Check if the Double Metaphone values of two &lt;code&gt;String&lt;/code&gt; values
     * are equal, optionally using the alternate value.
     *
     * @param value1 The left-hand side of the encoded {@link String#equals(Object)}.
     * @param value2 The right-hand side of the encoded {@link String#equals(Object)}.
     * @param alternate use the alternate value if {@code true}.
     * @return {@code true} if the encoded &lt;code&gt;String&lt;/code&gt;s are equal;
     *          {@code false} otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isDoubleMetaphoneEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value2</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>alternate</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>doubleMetaphone</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>alternate</name></expr></argument>)</argument_list></call>.<call><name>equals</name><argument_list>(<argument><expr><call><name>doubleMetaphone</name><argument_list>(<argument><expr><name>value2</name></expr></argument>, <argument><expr><name>alternate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns the maxCodeLen.
     * @return int
     */</comment>
    <function><type><specifier>public</specifier> <name>int</name></type> <name>getMaxCodeLen</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>maxCodeLen</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Sets the maxCodeLen.
     * @param maxCodeLen The maxCodeLen to set
     */</comment>
    <function><type><specifier>public</specifier> <name>void</name></type> <name>setMaxCodeLen</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxCodeLen</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>maxCodeLen</name></name> = <name>maxCodeLen</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//-- BEGIN HANDLERS --//</comment>

    <comment type="javadoc">/**
     * Handles 'A', 'E', 'I', 'O', 'U', and 'Y' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleAEIOUY</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>index</name> + 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'C' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleC</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>conditionC0</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{  <comment type="line">// very confusing, moved out</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"CAESAR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> = <call><name>handleCH</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CZ"</expr></argument>)</argument_list></call> &amp;&amp;
                   !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"WICZ"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- "Czerny" --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>, <argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"CIA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- "focaccia" --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CC"</expr></argument>)</argument_list></call> &amp;&amp;
                   !(<name>index</name> == 1 &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 'M')</expr>)</condition><then> <block>{
            <comment type="line">//-- double "cc" but not "McClelland" --//</comment>
            <return>return <expr><call><name>handleCC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CK"</expr></argument>, <argument><expr>"CG"</expr></argument>, <argument><expr>"CQ"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CI"</expr></argument>, <argument><expr>"CE"</expr></argument>, <argument><expr>"CY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- Italian vs. English --//</comment>
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"CIO"</expr></argument>, <argument><expr>"CIE"</expr></argument>, <argument><expr>"CIA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>, <argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>" C"</expr></argument>, <argument><expr>" Q"</expr></argument>, <argument><expr>" G"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- Mac Caffrey, Mac Gregor --//</comment>
                <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"K"</expr></argument>, <argument><expr>"Q"</expr></argument>)</argument_list></call> &amp;&amp;
                       !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"CE"</expr></argument>, <argument><expr>"CI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'CC' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleCC</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"H"</expr></argument>)</argument_list></call> &amp;&amp;
            !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"HU"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- "bellocchio" but not "bacchus" --//</comment>
            <if>if <condition>(<expr>(<name>index</name> == 1 &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call> == 'A') ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"UCCEE"</expr></argument>, <argument><expr>"UCCES"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- "accident", "accede", "succeed" --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"KS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">//-- "bacci", "bertucci", other Italian --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
        }</block></then> <else>else <block>{    <comment type="line">// Pierce's rule</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'CH' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleCH</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &gt; 0 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"CHAE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{   <comment type="line">// Michael</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>, <argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>index</name> + 2</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>conditionCH0</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- Greek roots ("chemistry", "chorus", etc.) --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>index</name> + 2</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>conditionCH1</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- Germanic, Greek, or otherwise 'ch' for 'kh' sound --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>index</name> + 2</expr>;</return>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>index</name> &gt; 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"MC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>, <argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><name>index</name> + 2</expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'D' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleD</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"DG"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- "Edge" --//</comment>
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"Y"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
                <comment type="line">//-- "Edgar" --//</comment>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"TK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"DT"</expr></argument>, <argument><expr>"DD"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
        }</block></else></if></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'G' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleG</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>,
                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'H'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> = <call><name>handleGH</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'N'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>index</name> == 1 &amp;&amp; <call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; !<name>slavoGermanic</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"KN"</expr></argument>, <argument><expr>"N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr>!<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"EY"</expr></argument>)</argument_list></call> &amp;&amp;
                       <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> != 'Y' &amp;&amp; !<name>slavoGermanic</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"N"</expr></argument>, <argument><expr>"KN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"KN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <expr_stmt><expr><name>index</name> = <name>index</name> + 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"LI"</expr></argument>)</argument_list></call> &amp;&amp; !<name>slavoGermanic</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"KL"</expr></argument>, <argument><expr>"L"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp;
                   (<call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'Y' ||
                    <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <comment type="line">//-- -ges-, -gep-, -gel-, -gie- at beginning --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>, <argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>(<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ER"</expr></argument>)</argument_list></call> ||
                    <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'Y') &amp;&amp;
                   !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"DANGER"</expr></argument>, <argument><expr>"RANGER"</expr></argument>, <argument><expr>"MANGER"</expr></argument>)</argument_list></call> &amp;&amp;
                   !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"I"</expr></argument>)</argument_list></call> &amp;&amp;
                   !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"RGY"</expr></argument>, <argument><expr>"OGY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- -ger-, -gy- --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>, <argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>"Y"</expr></argument>)</argument_list></call> ||
                   <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"AGGI"</expr></argument>, <argument><expr>"OGGI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- Italian "biaggi" --//</comment>
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument> ,<argument><expr>4</expr></argument>, <argument><expr>"VAN "</expr></argument>, <argument><expr>"VON "</expr></argument>)</argument_list></call> ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"SCH"</expr></argument>)</argument_list></call> ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ET"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- obvious germanic --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"IER"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>, <argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'G'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'GH' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleGH</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &gt; 0 &amp;&amp; !<call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>index</name> == 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>)</argument_list></call> == 'I'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>(<name>index</name> &gt; 1 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>"D"</expr></argument>)</argument_list></call>) ||
                   (<name>index</name> &gt; 2 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr>"D"</expr></argument>)</argument_list></call>) ||
                   (<name>index</name> &gt; 3 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 4</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr>"H"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <comment type="line">//-- Parker's rule (with some further refinements) - "hugh"</comment>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>index</name> &gt; 2 &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call> == 'U' &amp;&amp;
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 3</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"G"</expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr>"R"</expr></argument>, <argument><expr>"T"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- "laugh", "McLaughlin", "cough", "gough", "rough", "tough"</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><name>index</name> &gt; 0 &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call> != 'I'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></else></if></else></if></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'H' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleH</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <comment type="line">//-- only keep if first &amp; before vowel or between 2 vowels --//</comment>
        <if>if <condition>(<expr>(<name>index</name> == 0 || <call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) &amp;&amp;
            <call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'H'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
            <comment type="line">//-- also takes car of "HH" --//</comment>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'J' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleJ</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>,
                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"JOSE"</expr></argument>)</argument_list></call> || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"SAN "</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- obvious Spanish, "Jose", "San Jacinto" --//</comment>
                <if>if <condition>(<expr>(<name>index</name> == 0 &amp;&amp; (<call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 4</expr></argument>)</argument_list></call> == ' ') ||
                     <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> == 4) || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"SAN "</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'H'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>, <argument><expr>'H'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"JOSE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>, <argument><expr>'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; !<name>slavoGermanic</name> &amp;&amp;
                           (<call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'A' || <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'O')</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>, <argument><expr>'H'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr><name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <if>if <condition>(<expr>!<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>L_T_K_S_N_M_B_Z</name></expr></argument>)</argument_list></call> &amp;&amp;
                           !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"S"</expr></argument>, <argument><expr>"K"</expr></argument>, <argument><expr>"L"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>

                <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'J'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'L' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleL</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'L'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>conditionL0</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>appendPrimary</name></name><argument_list>(<argument><expr>'L'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'L'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'L'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'P' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleP</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'H'</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'P'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> = <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"P"</expr></argument>, <argument><expr>"B"</expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'R' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleR</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>,
                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1 &amp;&amp; !<name>slavoGermanic</name> &amp;&amp;
            <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"IE"</expr></argument>)</argument_list></call> &amp;&amp;
            !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 4</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ME"</expr></argument>, <argument><expr>"MA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>appendAlternate</name></name><argument_list>(<argument><expr>'R'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'R'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'R' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'S' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleS</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>,
                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"ISL"</expr></argument>, <argument><expr>"YSL"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- special cases "island", "isle", "carlisle", "carlysle" --//</comment>
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"SUGAR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- special case "sugar-" --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>, <argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"SH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"HEIM"</expr></argument>, <argument><expr>"HOEK"</expr></argument>, <argument><expr>"HOLM"</expr></argument>, <argument><expr>"HOLZ"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- germanic --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"SIO"</expr></argument>, <argument><expr>"SIA"</expr></argument>)</argument_list></call> || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"SIAN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- Italian and Armenian --//</comment>
            <if>if <condition>(<expr><name>slavoGermanic</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>, <argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>(<name>index</name> == 0 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"M"</expr></argument>, <argument><expr>"N"</expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr>"W"</expr></argument>)</argument_list></call>) ||
                   <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"Z"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- german &amp; anglicisations, e.g. "smith" match "schmidt" //</comment>
            <comment type="line">// "snider" match "schneider" --//</comment>
            <comment type="line">//-- also, -sz- in slavic language although in hungarian it //</comment>
            <comment type="line">//   is pronounced "s" --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>, <argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> = <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"Z"</expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"SC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>index</name> = <call><name>handleSC</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1 &amp;&amp; <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"AI"</expr></argument>, <argument><expr>"OI"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- french e.g. "resnais", "artois" --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>appendAlternate</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> = <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"S"</expr></argument>, <argument><expr>"Z"</expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if></else></if></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'SC' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleSC</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>)</argument_list></call> == 'H'</expr>)</condition><then> <block>{
            <comment type="line">//-- Schlesinger's rule --//</comment>
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"OO"</expr></argument>, <argument><expr>"ER"</expr></argument>, <argument><expr>"EN"</expr></argument>, <argument><expr>"UY"</expr></argument>, <argument><expr>"ED"</expr></argument>, <argument><expr>"EM"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- Dutch origin, e.g. "school", "schooner" --//</comment>
                <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 3</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ER"</expr></argument>, <argument><expr>"EN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">//-- "schermerhorn", "schenker" --//</comment>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"X"</expr></argument>, <argument><expr>"SK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"SK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; !<call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> != 'W'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>, <argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"I"</expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr>"Y"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"SK"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <return>return <expr><name>index</name> + 3</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'T' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleT</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"TION"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"TIA"</expr></argument>, <argument><expr>"TCH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'X'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 3</expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"TH"</expr></argument>)</argument_list></call> || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"TTH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"OM"</expr></argument>, <argument><expr>"AM"</expr></argument>)</argument_list></call> ||
                <comment type="line">//-- special case "thomas", "thames" or germanic --//</comment>
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"VAN "</expr></argument>, <argument><expr>"VON "</expr></argument>)</argument_list></call> ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"SCH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'0'</expr></argument>, <argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'T'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> = <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"T"</expr></argument>, <argument><expr>"D"</expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></else></if></else></if></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'W' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleW</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"WR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">//-- can also be in middle of word --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'R'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>index</name> == 0 &amp;&amp; (<call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
                               <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"WH"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">//-- Wasserman should match Vasserman --//</comment>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'A'</expr></argument>, <argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">//-- need Uomo to match Womo --//</comment>
                    <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'A'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr>(<name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1 &amp;&amp; <call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) ||
                       <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"EWSKI"</expr></argument>, <argument><expr>"EWSKY"</expr></argument>, <argument><expr>"OWSKI"</expr></argument>, <argument><expr>"OWSKY"</expr></argument>)</argument_list></call> ||
                       <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"SCH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- Arnow should match Arnoff --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>appendAlternate</name></name><argument_list>(<argument><expr>'F'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"WICZ"</expr></argument>, <argument><expr>"WITZ"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">//-- Polish e.g. "filipowicz" --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"TS"</expr></argument>, <argument><expr>"FX"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>index</name> += 4</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
            }</block></else></if></else></if></else></if>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'X' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleX</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name>++</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr>!((<name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1) &amp;&amp;
                  (<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 3</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"IAU"</expr></argument>, <argument><expr>"EAU"</expr></argument>)</argument_list></call> ||
                   <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"AU"</expr></argument>, <argument><expr>"OU"</expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
                <comment type="line">//-- French e.g. breaux --//</comment>
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"KS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>index</name> = <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr>"X"</expr></argument>)</argument_list></call> ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Handles 'Z' cases.
     */</comment>
    <function><type><specifier>private</specifier> <name>int</name></type> <name>handleZ</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>DoubleMetaphoneResult</name></type> <name>result</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>,
                        <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>slavoGermanic</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'H'</expr>)</condition><then> <block>{
            <comment type="line">//-- Chinese pinyin e.g. "zhao" or Angelina "Zhang" --//</comment>
            <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'J'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>index</name> += 2</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ZO"</expr></argument>, <argument><expr>"ZI"</expr></argument>, <argument><expr>"ZA"</expr></argument>)</argument_list></call> ||
                (<name>slavoGermanic</name> &amp;&amp; (<name>index</name> &gt; 0 &amp;&amp; <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>)</argument_list></call> != 'T'))</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>"S"</expr></argument>, <argument><expr>"TS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>result</name>.<name>append</name></name><argument_list>(<argument><expr>'S'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>index</name> = <call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'Z' ? <name>index</name> + 2 : <name>index</name> + 1</expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>index</name></expr>;</return>
    }</block></function>

    <comment type="line">//-- BEGIN CONDITIONS --//</comment>

    <comment type="javadoc">/**
     * Complex condition 0 for 'C'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>conditionC0</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"CHIA"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>index</name> &lt;= 1</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>isVowel</name><argument_list>(<argument><expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"ACH"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name> =<init> <expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr>(<name>c</name> != 'I' &amp;&amp; <name>c</name> != 'E') ||
                    <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"BACHER"</expr></argument>, <argument><expr>"MACHER"</expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Complex condition 0 for 'CH'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>conditionCH0</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> != 0</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr>!<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"HARAC"</expr></argument>, <argument><expr>"HARIS"</expr></argument>)</argument_list></call> &amp;&amp;
                   !<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"HOR"</expr></argument>, <argument><expr>"HYM"</expr></argument>, <argument><expr>"HIA"</expr></argument>, <argument><expr>"HEM"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>"CHORE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>true</expr>;</return>
        }</block></else></if></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Complex condition 1 for 'CH'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>conditionCH1</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>((<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"VAN "</expr></argument>, <argument><expr>"VON "</expr></argument>)</argument_list></call> || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"SCH"</expr></argument>)</argument_list></call>) ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 2</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"ORCHES"</expr></argument>, <argument><expr>"ARCHIT"</expr></argument>, <argument><expr>"ORCHID"</expr></argument>)</argument_list></call> ||
                <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"T"</expr></argument>, <argument><expr>"S"</expr></argument>)</argument_list></call> ||
                ((<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr>"U"</expr></argument>, <argument><expr>"E"</expr></argument>)</argument_list></call> || <name>index</name> == 0) &amp;&amp;
                 (<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>L_R_N_M_B_H_F_V_W_SPACE</name></expr></argument>)</argument_list></call> || <name>index</name> + 1 == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1)))</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Complex condition 0 for 'L'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>conditionL0</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 3 &amp;&amp;
            <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"ILLO"</expr></argument>, <argument><expr>"ILLA"</expr></argument>, <argument><expr>"ALLE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr>(<call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"AS"</expr></argument>, <argument><expr>"OS"</expr></argument>)</argument_list></call> ||
                    <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr>"O"</expr></argument>)</argument_list></call>) &amp;&amp;
                   <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>"ALLE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr>false</expr>;</return>
        }</block></else></if></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Complex condition 0 for 'M'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>conditionM0</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>charAt</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 1</expr></argument>)</argument_list></call> == 'M'</expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> - 1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>"UMB"</expr></argument>)</argument_list></call> &amp;&amp;
               ((<name>index</name> + 1) == <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1 || <call><name>contains</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>index</name> + 2</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>"ER"</expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></function>

    <comment type="line">//-- BEGIN HELPER FUNCTIONS --//</comment>

    <comment type="javadoc">/**
     * Determines whether or not a value is of slavo-germanic origin. A value is
     * of slavo-germanic origin if it contians any of 'W', 'K', 'CZ', or 'WITZ'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSlavoGermanic</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>value</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'W'</expr></argument>)</argument_list></call> &gt; -1 || <call><name><name>value</name>.<name>indexOf</name></name><argument_list>(<argument><expr>'K'</expr></argument>)</argument_list></call> &gt; -1 ||
            <call><name><name>value</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"CZ"</expr></argument>)</argument_list></call> &gt; -1 || <call><name><name>value</name>.<name>indexOf</name></name><argument_list>(<argument><expr>"WITZ"</expr></argument>)</argument_list></call> &gt; -1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines whether or not a character is a vowel or not
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isVowel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>VOWELS</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> != -1</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines whether or not the value starts with a silent letter.  It will
     * return {@code true} if the value starts with any of 'GN', 'KN',
     * 'PN', 'WR' or 'PS'.
     */</comment>
    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>isSilentStart</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>element</name> :<range> <expr><name>SILENT_START</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>value</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> = true</expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Cleans the input.
     */</comment>
    <function><type><specifier>private</specifier> <name>String</name></type> <name>cleanInput</name><parameter_list>(<param><decl><type><name>String</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>input</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>input</name> = <call><name><name>input</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>input</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>input</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>java</name>.<name>util</name>.<name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the character at index &lt;code&gt;index&lt;/code&gt; if available, otherwise
     * it returns &lt;code&gt;Character.MIN_VALUE&lt;/code&gt; so that there is some sort
     * of a default.
     */</comment>
    <function><type><specifier>protected</specifier> <name>char</name></type> <name>charAt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>index</name> &lt; 0 || <name>index</name> &gt;= <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>Character</name>.<name>MIN_VALUE</name></name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>value</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines whether &lt;code&gt;value&lt;/code&gt; contains any of the criteria starting at index &lt;code&gt;start&lt;/code&gt; and
     * matching up to length &lt;code&gt;length&lt;/code&gt;.
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></param>,
                                      <param><decl><type><specifier>final</specifier> <name>String</name>...</type> <name>criteria</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> &gt;= 0 &amp;&amp; <name>start</name> + <name>length</name> &lt;= <call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>target</name> =<init> <expr><call><name><name>value</name>.<name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> + <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>element</name> :<range> <expr><name>criteria</name></expr></range></decl></init>) <block>{
                <if>if <condition>(<expr><call><name><name>target</name>.<name>equals</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>result</name> = true</expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="line">//-- BEGIN INNER CLASSES --//</comment>

    <comment type="javadoc">/**
     * Inner class for storing results, since there is the optional alternate encoding.
     */</comment>
    <class><specifier>public</specifier> class <name>DoubleMetaphoneResult</name> <block>{

        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StringBuilder</name></type> <name>primary</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name>getMaxCodeLen</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>StringBuilder</name></type> <name>alternate</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name>getMaxCodeLen</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>int</name></type> <name>maxLength</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>DoubleMetaphoneResult</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxLength</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>maxLength</name></name> = <name>maxLength</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>appendPrimary</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendAlternate</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>primary</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>alternate</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>appendPrimary</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendAlternate</name><argument_list>(<argument><expr><name>alternate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>appendPrimary</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>primary</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt; <name><name>this</name>.<name>maxLength</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>primary</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>appendAlternate</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>this</name>.<name>alternate</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt; <name><name>this</name>.<name>maxLength</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>alternate</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>appendPrimary</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendAlternate</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>append</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>primary</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>alternate</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>appendPrimary</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>appendAlternate</name><argument_list>(<argument><expr><name>alternate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>appendPrimary</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>addChars</name> =<init> <expr><name><name>this</name>.<name>maxLength</name></name> - <call><name><name>this</name>.<name>primary</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= <name>addChars</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>primary</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>primary</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>addChars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>void</name></type> <name>appendAlternate</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>addChars</name> =<init> <expr><name><name>this</name>.<name>maxLength</name></name> - <call><name><name>this</name>.<name>alternate</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>value</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= <name>addChars</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>alternate</name>.<name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name>.<name>alternate</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>value</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>addChars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getPrimary</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>primary</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>String</name></type> <name>getAlternate</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>alternate</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isComplete</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>primary</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt;= <name><name>this</name>.<name>maxLength</name></name> &amp;&amp;
                   <call><name><name>this</name>.<name>alternate</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt;= <name><name>this</name>.<name>maxLength</name></name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
