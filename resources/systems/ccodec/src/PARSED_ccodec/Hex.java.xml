<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\binary\Hex.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryDecoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>BinaryEncoder</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>CharEncoding</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>

<comment type="javadoc">/**
 * Converts hexadecimal Strings. The charset used for certain operation can be set, the default is set in
 * {@link #DEFAULT_CHARSET_NAME}
 *
 * This class is thread-safe.
 *
 * @since 1.1
 * @version $Id: Hex.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>Hex</name> <super><implements>implements <name>BinaryEncoder</name>, <name>BinaryDecoder</name></implements></super> <block>{

    <comment type="javadoc">/**
     * Default charset name is {@link Charsets#UTF_8}
     *
     * @since 1.7
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>DEFAULT_CHARSET</name> =<init> <expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Default charset name is {@link CharEncoding#UTF_8}
     *
     * @since 1.4
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>DEFAULT_CHARSET_NAME</name> =<init> <expr><name><name>CharEncoding</name>.<name>UTF_8</name></name></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Used to build output as Hex
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>DIGITS_LOWER</name> =<init>
        <expr><block>{<expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>, <expr>'4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>, <expr>'8'</expr>, <expr>'9'</expr>, <expr>'a'</expr>, <expr>'b'</expr>, <expr>'c'</expr>, <expr>'d'</expr>, <expr>'e'</expr>, <expr>'f'</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Used to build output as Hex
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>DIGITS_UPPER</name> =<init>
        <expr><block>{<expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>, <expr>'4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>, <expr>'8'</expr>, <expr>'9'</expr>, <expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>'D'</expr>, <expr>'E'</expr>, <expr>'F'</expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Converts an array of characters representing hexadecimal values into an array of bytes of those same values. The
     * returned array will be half the length of the passed array, as it takes two characters to represent any given
     * byte. An exception is thrown if the passed char array has an odd number of elements.
     *
     * @param data
     *            An array of characters containing hexadecimal digits
     * @return A byte array containing binary data decoded from the supplied char array.
     * @throws DecoderException
     *             Thrown if an odd number or illegal of characters is supplied
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>byte</name><index>[]</index></type> <name>decodeHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>len</name> &amp; 0x01) != 0</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Odd number of characters."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>out</name> =<init> <expr>new <name><name>byte</name><index>[<expr><name>len</name> &gt;&gt; 1</expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// two characters form the hex value.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init>, <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>j</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>f</name> =<init> <expr><call><name>toDigit</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> &lt;&lt; 4</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name>f</name> = <name>f</name> | <call><name>toDigit</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> = <call>(<name>byte</name>) <argument_list>(<argument><expr><name>f</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
     * The returned array will be double the length of the passed array, as it takes two characters to represent any
     * given byte.
     *
     * @param data
     *            a byte[] to convert to Hex characters
     * @return A char[] containing hexadecimal characters
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name><index>[]</index></type> <name>encodeHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encodeHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
     * The returned array will be double the length of the passed array, as it takes two characters to represent any
     * given byte.
     *
     * @param data
     *            a byte[] to convert to Hex characters
     * @param toLowerCase
     *            {@code true} converts to lowercase, {@code false} to uppercase
     * @return A char[] containing hexadecimal characters
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>char</name><index>[]</index></type> <name>encodeHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>toLowerCase</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encodeHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>toLowerCase</name> ? <name>DIGITS_LOWER</name> : <name>DIGITS_UPPER</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of bytes into an array of characters representing the hexadecimal values of each byte in order.
     * The returned array will be double the length of the passed array, as it takes two characters to represent any
     * given byte.
     *
     * @param data
     *            a byte[] to convert to Hex characters
     * @param toDigits
     *            the output alphabet
     * @return A char[] containing hexadecimal characters
     * @since 1.4
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>char</name><index>[]</index></type> <name>encodeHex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>toDigits</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>l</name> =<init> <expr><name><name>data</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>out</name> =<init> <expr>new <name><name>char</name><index>[<expr><name>l</name> &lt;&lt; 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// two characters form the hex value.</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init>, <name>j</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>l</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>toDigits</name><index>[<expr>(0xF0 &amp; <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name>) &gt;&gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>toDigits</name><index>[<expr>0x0F &amp; <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of bytes into a String representing the hexadecimal values of each byte in order. The returned
     * String will be double the length of the passed array, as it takes two characters to represent any given byte.
     *
     * @param data
     *            a byte[] to convert to Hex characters
     * @return A String containing hexadecimal characters
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>encodeHexString</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <return>return <expr>new <call><name>String</name><argument_list>(<argument><expr><call><name>encodeHex</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts a hexadecimal character to an integer.
     *
     * @param ch
     *            A character to convert to an integer digit
     * @param index
     *            The index of the character in the source
     * @return An integer
     * @throws DecoderException
     *             Thrown if ch is an illegal hex character
     */</comment>
    <function><type><specifier>protected</specifier> <specifier>static</specifier> <name>int</name></type> <name>toDigit</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>int</name></type> <name>index</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>digit</name> =<init> <expr><call><name><name>Character</name>.<name>digit</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>digit</name> == -1</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr>"Illegal hexadecimal character " + <name>ch</name> + " at index " + <name>index</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>digit</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates a new codec with the default charset name {@link #DEFAULT_CHARSET}
     */</comment>
    <constructor><specifier>public</specifier> <name>Hex</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// use default encoding</comment>
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>DEFAULT_CHARSET</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new codec with the given Charset.
     *
     * @param charset
     *            the charset.
     * @since 1.7
     */</comment>
    <constructor><specifier>public</specifier> <name>Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>charset</name></name> = <name>charset</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Creates a new codec with the given charset name.
     *
     * @param charsetName
     *            the charset name.
     * @throws java.nio.charset.UnsupportedCharsetException
     *             If the named charset is unavailable
     * @since 1.4
     * @since 1.7 throws UnsupportedCharsetException if the named charset is unavailable
     */</comment>
    <constructor><specifier>public</specifier> <name>Hex</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>charsetName</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Charset</name>.<name>forName</name></name><argument_list>(<argument><expr><name>charsetName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Converts an array of character bytes representing hexadecimal values into an array of bytes of those same values.
     * The returned array will be half the length of the passed array, as it takes two characters to represent any given
     * byte. An exception is thrown if the passed char array has an odd number of elements.
     *
     * @param array
     *            An array of character bytes containing hexadecimal digits
     * @return A byte array containing binary data decoded from the supplied byte array (representing characters).
     * @throws DecoderException
     *             Thrown if an odd number of characters is supplied to this function
     * @see #decodeHex(char[])
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>decodeHex</name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><call><name>getCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>toCharArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts a String or an array of character bytes representing hexadecimal values into an array of bytes of those
     * same values. The returned array will be half the length of the passed String or array, as it takes two characters
     * to represent any given byte. An exception is thrown if the passed char array has an odd number of elements.
     *
     * @param object
     *            A String or, an array of character bytes containing hexadecimal digits
     * @return A byte array containing binary data decoded from the supplied byte array (representing characters).
     * @throws DecoderException
     *             Thrown if an odd number of characters is supplied to this function or the object is not a String or
     *             char[]
     * @see #decodeHex(char[])
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>decode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>charArray</name> =<init> <expr><name>object</name> <name>instanceof</name> <name>String</name> ? ((<name>String</name>) <name>object</name>).<call><name>toCharArray</name><argument_list>()</argument_list></call> : (<name><name>char</name><index>[]</index></name>) <name>object</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>decodeHex</name><argument_list>(<argument><expr><name>charArray</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>ClassCastException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>DecoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Converts an array of bytes into an array of bytes for the characters representing the hexadecimal values of each
     * byte in order. The returned array will be double the length of the passed array, as it takes two characters to
     * represent any given byte.
     * &lt;p&gt;
     * The conversion from hexadecimal characters to the returned bytes is performed with the charset named by
     * {@link #getCharset()}.
     * &lt;/p&gt;
     *
     * @param array
     *            a byte[] to convert to Hex characters
     * @return A byte[] containing the bytes of the hexadecimal characters
     * @since 1.7 No longer throws IllegalStateException if the charsetName is invalid.
     * @see #encodeHex(byte[])
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>byte</name><index>[]</index></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>array</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>encodeHexString</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call>.<call><name>getBytes</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Converts a String or an array of bytes into an array of characters representing the hexadecimal values of each
     * byte in order. The returned array will be double the length of the passed String or array, as it takes two
     * characters to represent any given byte.
     * &lt;p&gt;
     * The conversion from hexadecimal characters to bytes to be encoded to performed with the charset named by
     * {@link #getCharset()}.
     * &lt;/p&gt;
     *
     * @param object
     *            a String, or byte[] to convert to Hex characters
     * @return A char[] containing hexadecimal characters
     * @throws EncoderException
     *             Thrown if the given object is not a String or byte[]
     * @see #encodeHex(byte[])
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>byteArray</name> =<init> <expr><name>object</name> <name>instanceof</name> <name>String</name> ?
                                   ((<name>String</name>) <name>object</name>).<call><name>getBytes</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> : (<name><name>byte</name><index>[]</index></name>) <name>object</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name>encodeHex</name><argument_list>(<argument><expr><name>byteArray</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>ClassCastException</name></type> <name>e</name></decl></param>) <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr><call><name><name>e</name>.<name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the charset.
     *
     * @return the charset.
     * @since 1.7
     */</comment>
    <function><type><specifier>public</specifier> <name>Charset</name></type> <name>getCharset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>charset</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the charset name.
     *
     * @return the charset name.
     * @since 1.4
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>getCharsetName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>charset</name>.<name>name</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Returns a string representation of the object, which includes the charset name.
     *
     * @return a string representation of the object.
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name>.<name>toString</name></name><argument_list>()</argument_list></call> + "[charsetName=" + <name><name>this</name>.<name>charset</name></name> + "]"</expr>;</return>
    }</block></function>
}</block></class>
</unit>
