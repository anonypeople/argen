<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\binary\HexTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>binary</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>java</name>.<name>io</name>.<name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>Charset</name></name>;</import>
<import>import <name><name>java</name>.<name>nio</name>.<name>charset</name>.<name>UnsupportedCharsetException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Random</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>DecoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests {@link org.apache.commons.codec.binary.Hex}.
 *
 * @version $Id: HexTest.java 1544390 2013-11-22 02:05:09Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>HexTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>BAD_ENCODING_NAME</name> =<init> <expr>"UNKNOWN"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>LOG</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>

    <function><type><specifier>private</specifier> <name>boolean</name></type> <name>charsetSanityCheck</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name> =<init> <expr>"the quick brown dog jumped over the lazy fox"</expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>bytes</name> =<init> <expr><call><name><name>source</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>equals</name> =<init> <expr><call><name><name>source</name>.<name>equals</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>equals</name> == false</expr>)</condition><then> <block>{
                <comment type="line">// Here with:</comment>
                <comment type="line">//</comment>
                <comment type="line">// Java Sun 1.4.2_19 x86 32-bits on Windows XP</comment>
                <comment type="line">// JIS_X0212-1990</comment>
                <comment type="line">// x-JIS0208</comment>
                <comment type="line">//</comment>
                <comment type="line">// Java Sun 1.5.0_17 x86 32-bits on Windows XP</comment>
                <comment type="line">// JIS_X0212-1990</comment>
                <comment type="line">// x-IBM834</comment>
                <comment type="line">// x-JIS0208</comment>
                <comment type="line">// x-MacDingbat</comment>
                <comment type="line">// x-MacSymbol</comment>
                <comment type="line">//</comment>
                <comment type="line">// Java Sun 1.6.0_14 x86 32-bits</comment>
                <comment type="line">// JIS_X0212-1990</comment>
                <comment type="line">// x-IBM834</comment>
                <comment type="line">// x-JIS0208</comment>
                <comment type="line">// x-MacDingbat</comment>
                <comment type="line">// x-MacSymbol</comment>
                <comment type="line">//</comment>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"FAILED charsetSanityCheck=Interesting Java charset oddity: Roundtrip failed for " + <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>equals</name></expr>;</return>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedEncodingException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Should NEVER happen since we are getting the name from the Charset class.</comment>
            <if>if <condition>(<expr><name>LOG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"FAILED charsetSanityCheck=" + <name>name</name> + ", e=" + <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></catch> <catch>catch (<param><decl><type><specifier>final</specifier> <name>UnsupportedOperationException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Caught here with:</comment>
            <comment type="line">// x-JISAutoDetect on Windows XP and Java Sun 1.4.2_19 x86 32-bits</comment>
            <comment type="line">// x-JISAutoDetect on Windows XP and Java Sun 1.5.0_17 x86 32-bits</comment>
            <comment type="line">// x-JISAutoDetect on Windows XP and Java Sun 1.6.0_14 x86 32-bits</comment>
            <if>if <condition>(<expr><name>LOG</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr>"FAILED charsetSanityCheck=" + <name>name</name> + ", e=" + <name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr>false</expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="javadoc">/**
     * @param data
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>checkDecodeHexOddCharacters</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>data</name></decl></param>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode an odd number of characters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>s</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>LOG</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>log</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>t</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>LOG</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>t</name>.<name>printStackTrace</name></name><argument_list>(<argument><expr><name><name>System</name>.<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCustomCharset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument>, <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name> :<range> <expr><call><name><name>Charset</name>.<name>availableCharsets</name></name><argument_list>()</argument_list></call>.<call><name>keySet</name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"testCustomCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="javadoc">/**
     * @param name
     * @param parent
     * @throws UnsupportedEncodingException
     * @throws DecoderException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>testCustomCharset</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>parent</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument>, <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>charsetSanityCheck</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> == false</expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>parent</name> + "=" + <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Hex</name></type> <name>customCodec</name> =<init> <expr>new <call><name>Hex</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// source data</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sourceString</name> =<init> <expr>"Hello World"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>sourceBytes</name> =<init> <expr><call><name><name>sourceString</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// test 1</comment>
        <comment type="line">// encode source to hex string to bytes with charset</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>actualEncodedBytes</name> =<init> <expr><call><name><name>customCodec</name>.<name>encode</name></name><argument_list>(<argument><expr><name>sourceBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// encode source to hex string...</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>expectedHexString</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHexString</name></name><argument_list>(<argument><expr><name>sourceBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// ... and get the bytes in the expected charset</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>expectedHexStringBytes</name> =<init> <expr><call><name><name>expectedHexString</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>expectedHexStringBytes</name></expr></argument>, <argument><expr><name>actualEncodedBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// test 2</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>actualStringFromBytes</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>actualEncodedBytes</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name> + ", expectedHexString=" + <name>expectedHexString</name> + ", actualStringFromBytes=" + <name>actualStringFromBytes</name></expr></argument>,
                <argument><expr><name>expectedHexString</name></expr></argument>, <argument><expr><name>actualStringFromBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// second test:</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Hex</name></type> <name>utf8Codec</name> =<init> <expr>new <call><name>Hex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>expectedHexString</name> = "48656c6c6f20576f726c64"</expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedUtf8Bytes</name> =<init> <expr>(<name><name>byte</name><index>[]</index></name>) <call><name><name>utf8Codec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>expectedHexString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>actualStringFromBytes</name> = new <call><name>String</name><argument_list>(<argument><expr><name>decodedUtf8Bytes</name></expr></argument>, <argument><expr><call><name><name>utf8Codec</name>.<name>getCharset</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// sanity check:</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sourceString</name></expr></argument>, <argument><expr><name>actualStringFromBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// actual check:</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>decodedCustomBytes</name> =<init> <expr><call><name><name>customCodec</name>.<name>decode</name></name><argument_list>(<argument><expr><name>actualEncodedBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>actualStringFromBytes</name> = new <call><name>String</name><argument_list>(<argument><expr><name>decodedCustomBytes</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>sourceString</name></expr></argument>, <argument><expr><name>actualStringFromBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected=UnsupportedCharsetException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCustomCharsetBadName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr>new <call><name>Hex</name><argument_list>(<argument><expr><name>BAD_ENCODING_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCustomCharsetToString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>toString</name><argument_list>()</argument_list></call>.<call><name>indexOf</name><argument_list>(<argument><expr><name><name>Hex</name>.<name>DEFAULT_CHARSET_NAME</name></name></expr></argument>)</argument_list></call> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeArrayOddCharacters</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[]</index></name><block>{<expr>65</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode an odd number of characters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeBadCharacterPos0</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>"q0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode an illegal character"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeBadCharacterPos1</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>"0q"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode an illegal character"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeClassCastException</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>new <name><name>int</name><index>[]</index></name><block>{<expr>65</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeHexOddCharacters1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkDecodeHexOddCharacters</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name><block>{<expr>'A'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeHexOddCharacters3</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkDecodeHexOddCharacters</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name><block>{<expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeHexOddCharacters5</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>checkDecodeHexOddCharacters</name><argument_list>(<argument><expr>new <name><name>char</name><index>[]</index></name><block>{<expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>'D'</expr>, <expr>'E'</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDecodeStringOddCharacters</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>"6"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to decode an odd number of characters"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>DecoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDencodeEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr>new <name><name>char</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name><name>byte</name><index>[]</index></name>) new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>decode</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeClassCastException</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>new <name><name>int</name><index>[]</index></name><block>{<expr>65</expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"An exception wasn't thrown when trying to encode."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch (<param><decl><type><specifier>final</specifier> <name>EncoderException</name></type> <name>e</name></decl></param>) <block>{
            <comment type="line">// Expected exception</comment>
        }</block></catch></try>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeDecodeRandom</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>DecoderException</name></expr></argument>, <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Random</name></type> <name>random</name> =<init> <expr>new <call><name>Random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Hex</name></type> <name>hex</name> =<init> <expr>new <call><name>Hex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>5</expr></init></decl>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>data</name> =<init> <expr>new <name><name>byte</name><index>[<expr><call><name><name>random</name>.<name>nextInt</name></name><argument_list>(<argument><expr>10000</expr></argument>)</argument_list></call> + 1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>random</name>.<name>nextBytes</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// static API</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>encodedChars</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>decodedBytes</name> =<init> <expr><call><name><name>Hex</name>.<name>decodeHex</name></name><argument_list>(<argument><expr><name>encodedChars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>decodedBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// instance API with array parameter</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>encodedStringBytes</name> =<init> <expr><call><name><name>hex</name>.<name>encode</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>decodedBytes</name> = <call><name><name>hex</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encodedStringBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>decodedBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// instance API with char[] (Object) parameter</comment>
            <decl_stmt><decl><type><name>String</name></type> <name>dataString</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>encodedChars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>encodedStringChars</name> =<init> <expr>(<name><name>char</name><index>[]</index></name>) <call><name><name>hex</name>.<name>encode</name></name><argument_list>(<argument><expr><name>dataString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>decodedBytes</name> = (<name><name>byte</name><index>[]</index></name>) <call><name><name>hex</name>.<name>decode</name></name><argument_list>(<argument><expr><name>encodedStringChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>dataString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decodedBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// instance API with String (Object) parameter</comment>
            <expr_stmt><expr><name>dataString</name> = new <call><name>String</name><argument_list>(<argument><expr><name>encodedChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>encodedStringChars</name> = (<name><name>char</name><index>[]</index></name>) <call><name><name>hex</name>.<name>encode</name></name><argument_list>(<argument><expr><name>dataString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>decodedBytes</name> = (<name><name>byte</name><index>[]</index></name>) <call><name><name>hex</name>.<name>decode</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>encodedStringChars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr><name>dataString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decodedBytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeEmpty</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>char</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>equals</name></name><argument_list>(<argument><expr>new <name><name>char</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(<name><name>char</name><index>[]</index></name>) new <call><name>Hex</name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testEncodeZeroes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>c</name> =<init> <expr><call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>36</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"000000000000000000000000000000000000000000000000000000000000000000000000"</expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHelloWorldLowerCaseHex</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>"48656c6c6f20576f726c64"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>actual</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>equals</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testHelloWorldUpperCaseHex</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>b</name> =<init> <expr><call><name><name>StringUtils</name>.<name>getBytesUtf8</name></name><argument_list>(<argument><expr>"Hello World"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>expected</name> =<init> <expr>"48656C6C6F20576F726C64"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name><index>[]</index></type> <name>actual</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>equals</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>equals</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>actual</name> = <call><name><name>Hex</name>.<name>encodeHex</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>expected</name>.<name>equals</name></name><argument_list>(<argument><expr>new <call><name>String</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRequiredCharset</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>UnsupportedEncodingException</name></expr></argument>, <argument><expr><name>DecoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"UTF-8"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"UTF-16"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"UTF-16BE"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"UTF-16LE"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"US-ASCII"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testCustomCharset</name><argument_list>(<argument><expr>"ISO8859_1"</expr></argument>, <argument><expr>"testRequiredCharset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
