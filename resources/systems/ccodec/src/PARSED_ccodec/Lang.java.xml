<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\bm\Lang.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>ArrayList</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Scanner</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<comment type="javadoc">/**
 * Language guessing utility.
 * &lt;p&gt;
 * This class encapsulates rules used to guess the possible languages that a word originates from. This is
 * done by reference to a whole series of rules distributed in resource files.
 * &lt;p&gt;
 * Instances of this class are typically managed through the static factory method instance().
 * Unless you are developing your own language guessing rules, you will not need to interact with this class directly.
 * &lt;p&gt;
 * This class is intended to be immutable and thread-safe.
 * &lt;p&gt;
 * &lt;b&gt;Lang resources&lt;/b&gt;
 * &lt;p&gt;
 * Language guessing rules are typically loaded from resource files. These are UTF-8 encoded text files.
 * They are systematically named following the pattern:
 * &lt;blockquote&gt;org/apache/commons/codec/language/bm/lang.txt&lt;/blockquote&gt;
 * The format of these resources is the following:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;b&gt;Rules:&lt;/b&gt; whitespace separated strings.
 * There should be 3 columns to each row, and these will be interpreted as:
 * &lt;ol&gt;
 * &lt;li&gt;pattern: a regular expression.&lt;/li&gt;
 * &lt;li&gt;languages: a '+'-separated list of languages.&lt;/li&gt;
 * &lt;li&gt;acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.&lt;/li&gt;
 * &lt;/ol&gt;
 * &lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;End-of-line comments:&lt;/b&gt; Any occurrence of '//' will cause all text following on that line to be
 * discarded as a comment.&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;Multi-line comments:&lt;/b&gt; Any line starting with '/*' will start multi-line commenting mode.
 * This will skip all content until a line ending in '*' and '/' is found.&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;Blank lines:&lt;/b&gt; All blank lines will be skipped.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * Port of lang.php
 *
 * @since 1.6
 * @version $Id: Lang.java 1542813 2013-11-17 20:52:32Z tn $
 */</comment>
<class><specifier>public</specifier> class <name>Lang</name> <block>{
    <comment type="line">// Implementation note: This class is divided into two sections. The first part is a static factory interface that</comment>
    <comment type="line">// exposes the LANGUAGE_RULES_RN resource as a Lang instance. The second part is the Lang instance methods that</comment>
    <comment type="line">// encapsulate a particular language-guessing rule table and the language guessing itself.</comment>
    <comment type="line">//</comment>
    <comment type="line">// It may make sense in the future to expose the private constructor to allow power users to build custom language-</comment>
    <comment type="line">// guessing rules, perhaps by marking it protected and allowing sub-classing. However, the vast majority of users</comment>
    <comment type="line">// should be strongly encouraged to use the static factory &lt;code&gt;instance&lt;/code&gt; method to get their Lang instances.</comment>

    <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>LangRule</name> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>acceptOnMatch</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>pattern</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>LangRule</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Pattern</name></type> <name>pattern</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>acceptOnMatch</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>pattern</name></name> = <name>pattern</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>languages</name></name> = <name>languages</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name>.<name>acceptOnMatch</name></name> = <name>acceptOnMatch</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><specifier>public</specifier> <name>boolean</name></type> <name>matches</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>txt</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>pattern</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call>.<call><name>find</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>NameType</name></argument>, <argument><name>Lang</name></argument>&gt;</argument_list></name></type> <name>Langs</name> =<init> <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name>NameType</name></argument>, <argument><name>Lang</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>NameType</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>LANGUAGE_RULES_RN</name> =<init> <expr>"org/apache/commons/codec/language/bm/lang.txt"</expr></init></decl>;</decl_stmt>

    static <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>s</name> :<range> <expr><call><name><name>NameType</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>Langs</name>.<name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>loadFromResource</name><argument_list>(<argument><expr><name>LANGUAGE_RULES_RN</name></expr></argument>, <argument><expr><call><name><name>Languages</name>.<name>getInstance</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block>

    <comment type="javadoc">/**
     * Gets a Lang instance for one of the supported NameTypes.
     *
     * @param nameType
     *            the NameType to look up
     * @return a Lang encapsulating the language guessing rules for that name type
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Lang</name></type> <name>instance</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Langs</name>.<name>get</name></name><argument_list>(<argument><expr><name>nameType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Loads language rules from a resource.
     * &lt;p&gt;
     * In normal use, you will obtain instances of Lang through the {@link #instance(NameType)} method.
     * You will only need to call this yourself if you are developing custom language mapping rules.
     *
     * @param languageRulesResourceName
     *            the fully-qualified resource name to load
     * @param languages
     *            the languages that these rules will support
     * @return a Lang encapsulating the loaded language-guessing rules.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Lang</name></type> <name>loadFromResource</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>languageRulesResourceName</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Languages</name></type> <name>languages</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>LangRule</name></argument>&gt;</argument_list></name></type> <name>rules</name> =<init> <expr>new <call><name><name>ArrayList</name><argument_list>&lt;<argument><name>LangRule</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>lRulesIS</name> =<init> <expr><name><name>Lang</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>languageRulesResourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>lRulesIS</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalStateException</name><argument_list>(<argument><expr>"Unable to resolve required resource:" + <name>LANGUAGE_RULES_RN</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Scanner</name></type> <name>scanner</name> =<init> <expr>new <call><name>Scanner</name><argument_list>(<argument><expr><name>lRulesIS</name></expr></argument>, <argument><expr><name><name>ResourceConstants</name>.<name>ENCODING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>inExtendedComment</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>scanner</name>.<name>hasNextLine</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rawLine</name> =<init> <expr><call><name><name>scanner</name>.<name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>line</name> =<init> <expr><name>rawLine</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>inExtendedComment</name></expr>)</condition><then> <block>{
                    <comment type="line">// check for closing comment marker, otherwise discard doc comment line</comment>
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>ResourceConstants</name>.<name>EXT_CMT_END</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inExtendedComment</name> = false</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>ResourceConstants</name>.<name>EXT_CMT_START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inExtendedComment</name> = true</expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// discard comments</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>cmtI</name> =<init> <expr><call><name><name>line</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name><name>ResourceConstants</name>.<name>CMT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>cmtI</name> &gt;= 0</expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>cmtI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <comment type="line">// trim leading-trailing whitespace</comment>
                        <expr_stmt><expr><name>line</name> = <call><name><name>line</name>.<name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
                            <continue>continue;</continue> <comment type="line">// empty lines can be safely skipped</comment>
                        }</block></then></if>

                        <comment type="line">// split it up</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>parts</name> =<init> <expr><call><name><name>line</name>.<name>split</name></name><argument_list>(<argument><expr>"\\s+"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if>if <condition>(<expr><name><name>parts</name>.<name>length</name></name> != 3</expr>)</condition><then> <block>{
                            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Malformed line '" + <name>rawLine</name> +
                                    "' in language resource '" + <name>languageRulesResourceName</name> + "'"</expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>

                        <decl_stmt><decl><type><specifier>final</specifier> <name>Pattern</name></type> <name>pattern</name> =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>langs</name> =<init> <expr><name><name>parts</name><index>[<expr>1</expr>]</index></name>.<call><name>split</name><argument_list>(<argument><expr>"\\+"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>accept</name> =<init> <expr><name><name>parts</name><index>[<expr>2</expr>]</index></name>.<call><name>equals</name><argument_list>(<argument><expr>"true"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name><name>rules</name>.<name>add</name></name><argument_list>(<argument><expr>new <call><name>LangRule</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr><name>langs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>accept</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></while>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>scanner</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return>return <expr>new <call><name>Lang</name><argument_list>(<argument><expr><name>rules</name></expr></argument>, <argument><expr><name>languages</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Languages</name></type> <name>languages</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>LangRule</name></argument>&gt;</argument_list></name></type> <name>rules</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Lang</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>List</name><argument_list>&lt;<argument><name>LangRule</name></argument>&gt;</argument_list></name></type> <name>rules</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>Languages</name></type> <name>languages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>rules</name></name> = <call><name><name>Collections</name>.<name>unmodifiableList</name></name><argument_list>(<argument><expr><name>rules</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>languages</name></name> = <name>languages</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Guesses the language of a word.
     *
     * @param text
     *            the word
     * @return the language that the word originates from or {@link Languages#ANY} if there was no unique match
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>guessLanguage</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Languages</name>.<name>LanguageSet</name></name></type> <name>ls</name> =<init> <expr><call><name>guessLanguages</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ls</name>.<name>isSingleton</name></name><argument_list>()</argument_list></call> ? <call><name><name>ls</name>.<name>getAny</name></name><argument_list>()</argument_list></call> : <name><name>Languages</name>.<name>ANY</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Guesses the languages of a word.
     *
     * @param input
     *            the word
     * @return a Set of Strings of language names that are potential matches for the input word
     */</comment>
    <function><type><specifier>public</specifier> <name><name>Languages</name>.<name>LanguageSet</name></name></type> <name>guessLanguages</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>text</name> =<init> <expr><call><name><name>input</name>.<name>toLowerCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>langs</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>this</name>.<name>languages</name>.<name>getLanguages</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>LangRule</name></type> <name>rule</name> :<range> <expr><name><name>this</name>.<name>rules</name></name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>rule</name>.<name>matches</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>rule</name>.<name>acceptOnMatch</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>langs</name>.<name>retainAll</name></name><argument_list>(<argument><expr><name><name>rule</name>.<name>languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>langs</name>.<name>removeAll</name></name><argument_list>(<argument><expr><name><name>rule</name>.<name>languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Languages</name>.<name>LanguageSet</name></name></type> <name>ls</name> =<init> <expr><call><name><name>Languages</name>.<name>LanguageSet</name>.<name>from</name></name><argument_list>(<argument><expr><name>langs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ls</name>.<name>equals</name></name><argument_list>(<argument><expr><name><name>Languages</name>.<name>NO_LANGUAGES</name></name></expr></argument>)</argument_list></call> ? <name><name>Languages</name>.<name>ANY_LANGUAGE</name></name> : <name>ls</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
