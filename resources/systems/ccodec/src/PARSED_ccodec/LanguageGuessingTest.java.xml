<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\bm\LanguageGuessingTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>List</name></name>;</import>

<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runner</name>.<name>RunWith</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>runners</name>.<name>Parameterized</name></name>;</import>

<comment type="javadoc">/**
 * Tests guessLanguages API.
 *
 * @since 1.6
 */</comment>
<class><annotation>@<name>RunWith</name><argument_list>(Parameterized.class)</argument_list></annotation>
<specifier>public</specifier> class <name>LanguageGuessingTest</name> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>EXACT</name> =<init> <expr>"exact"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>ONE_OF</name> =<init> <expr>"one of"</expr></init></decl>;</decl_stmt>

    <function><type><annotation>@<name><name>Parameterized</name>.<name>Parameters</name></name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <name><name>List</name><argument_list>&lt;<argument><name>Object</name><index>[]</index></argument>&gt;</argument_list></name></type> <name>data</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Arrays</name>.<name>asList</name></name><argument_list>(<argument><expr>new <name><name>Object</name><index>[]</index><index>[]</index></name> <block>{
                <expr><block>{ <expr>"Renault"</expr>, <expr>"french"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"Mickiewicz"</expr>, <expr>"polish"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"Thompson"</expr>, <expr>"english"</expr>, <expr><name>ONE_OF</name></expr> }</block></expr>, <comment type="line">// this also hits german and greeklatin</comment>
                <expr><block>{ <expr>"Nu\u00f1ez"</expr>, <expr>"spanish"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// NuÃ±ez</comment>
                <expr><block>{ <expr>"Carvalho"</expr>, <expr>"portuguese"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"\u010capek"</expr>, <expr>"czech"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// Äapek</comment>
                <expr><block>{ <expr>"Sjneijder"</expr>, <expr>"dutch"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"Klausewitz"</expr>, <expr>"german"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"K\u00fc\u00e7\u00fck"</expr>, <expr>"turkish"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// KÃ¼Ã§Ã¼k</comment>
                <expr><block>{ <expr>"Giacometti"</expr>, <expr>"italian"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"Nagy"</expr>, <expr>"hungarian"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"Ceau\u015fescu"</expr>, <expr>"romanian"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// CeauÅescu</comment>
                <expr><block>{ <expr>"Angelopoulos"</expr>, <expr>"greeklatin"</expr>, <expr><name>EXACT</name></expr> }</block></expr>,
                <expr><block>{ <expr>"\u0391\u03b3\u03b3\u03b5\u03bb\u03cc\u03c0\u03bf\u03c5\u03bb\u03bf\u03c2"</expr>, <expr>"greek"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// ÎÎ³Î³ÎµÎ»ÏÏÎ¿ÏÎ»Î¿Ï</comment>
                <expr><block>{ <expr>"\u041f\u0443\u0448\u043a\u0438\u043d"</expr>, <expr>"cyrillic"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// ÐÑÑÐºÐ¸Ð½</comment>
                <expr><block>{ <expr>"\u05db\u05d4\u05df"</expr>, <expr>"hebrew"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// ×××</comment>
                <expr><block>{ <expr>"\u00e1cz"</expr>, <expr>"any"</expr>, <expr><name>EXACT</name></expr> }</block></expr>, <comment type="line">// Ã¡cz</comment>
                <expr><block>{ <expr>"\u00e1tz"</expr>, <expr>"any"</expr>, <expr><name>EXACT</name></expr> }</block></expr> }</block></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// Ã¡tz</comment>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>exactness</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Lang</name></type> <name>lang</name> =<init> <expr><call><name><name>Lang</name>.<name>instance</name></name><argument_list>(<argument><expr><name><name>NameType</name>.<name>GENERIC</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>language</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LanguageGuessingTest</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>language</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>exactness</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>language</name></name> = <name>language</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name>.<name>exactness</name></name> = <name>exactness</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testLanguageGuessing</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Languages</name>.<name>LanguageSet</name></name></type> <name>guesses</name> =<init> <expr><call><name><name>this</name>.<name>lang</name>.<name>guessLanguages</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"language predicted for name '" + <name><name>this</name>.<name>name</name></name> + "' is wrong: " + <name>guesses</name> + " should contain '" + <name><name>this</name>.<name>language</name></name> + "'"</expr></argument>,
                <argument><expr><call><name><name>guesses</name>.<name>contains</name></name><argument_list>(<argument><expr><name><name>this</name>.<name>language</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
}</block></class>
</unit>
