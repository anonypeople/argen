<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\bm\Languages.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name>.<name>bm</name></name>;</package>

<import>import <name><name>java</name>.<name>io</name>.<name>InputStream</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Collections</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>EnumMap</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>HashSet</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Map</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Scanner</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Set</name></name>;</import>

<comment type="javadoc">/**
 * Language codes.
 * &lt;p&gt;
 * Language codes are typically loaded from resource files. These are UTF-8 encoded text files. They are
 * systematically named following the pattern:
 * &lt;blockquote&gt;org/apache/commons/codec/language/bm/${{@link NameType#getName()} languages.txt&lt;/blockquote&gt;
 * &lt;p&gt;
 * The format of these resources is the following:
 * &lt;ul&gt;
 * &lt;li&gt;&lt;b&gt;Language:&lt;/b&gt; a single string containing no whitespace&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;End-of-line comments:&lt;/b&gt; Any occurrence of '//' will cause all text following on that line to be
 * discarded as a comment.&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;Multi-line comments:&lt;/b&gt; Any line starting with '/*' will start multi-line commenting mode.
 * This will skip all content until a line ending in '*' and '/' is found.&lt;/li&gt;
 * &lt;li&gt;&lt;b&gt;Blank lines:&lt;/b&gt; All blank lines will be skipped.&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * Ported from language.php
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @since 1.6
 * @version $Id: Languages.java 1541239 2013-11-12 21:20:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>Languages</name> <block>{
    <comment type="line">// Iimplementation note: This class is divided into two sections. The first part is a static factory interface that</comment>
    <comment type="line">// exposes org/apache/commons/codec/language/bm/%s_languages.txt for %s in NameType.* as a list of supported</comment>
    <comment type="line">// languages, and a second part that provides instance methods for accessing this set fo supported languages.</comment>

    <comment type="javadoc">/**
     * A set of languages.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name>LanguageSet</name> <block>{

        <function><type><specifier>public</specifier> <specifier>static</specifier> <name>LanguageSet</name></type> <name>from</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>langs</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>langs</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call> ? <name>NO_LANGUAGES</name> : new <call><name>SomeLanguages</name><argument_list>(<argument><expr><name>langs</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><name>String</name></type> <name>language</name></decl></param>)</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>String</name></type> <name>getAny</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>boolean</name></type> <name>isSingleton</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><specifier>public</specifier> <specifier>abstract</specifier> <name>LanguageSet</name></type> <name>restrictTo</name><parameter_list>(<param><decl><type><name>LanguageSet</name></type> <name>other</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>

    <comment type="javadoc">/**
     * Some languages, explicitly enumerated.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SomeLanguages</name> <super><extends>extends <name>LanguageSet</name></extends></super> <block>{
        <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>SomeLanguages</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl></param>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name>.<name>languages</name></name> = <call><name><name>Collections</name>.<name>unmodifiableSet</name></name><argument_list>(<argument><expr><name>languages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>languages</name>.<name>contains</name></name><argument_list>(<argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>getAny</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>languages</name>.<name>iterator</name></name><argument_list>()</argument_list></call>.<call><name>next</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLanguages</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>this</name>.<name>languages</name></name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>languages</name>.<name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isSingleton</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>this</name>.<name>languages</name>.<name>size</name></name><argument_list>()</argument_list></call> == 1</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>LanguageSet</name></type> <name>restrictTo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>LanguageSet</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>other</name> == <name>NO_LANGUAGES</name></expr>)</condition><then> <block>{
                <return>return <expr><name>other</name></expr>;</return>
            }</block></then> <else>else <if>if <condition>(<expr><name>other</name> == <name>ANY_LANGUAGE</name></expr>)</condition><then> <block>{
                <return>return <expr><name>this</name></expr>;</return>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>SomeLanguages</name></type> <name>sl</name> =<init> <expr>(<name>SomeLanguages</name>) <name>other</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ls</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><call><name><name>languages</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sl</name>.<name>languages</name>.<name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for (<init><decl><type><name>String</name></type> <name>lang</name> :<range> <expr><name>languages</name></expr></range></decl></init>) <block>{
                    <if>if <condition>(<expr><call><name><name>sl</name>.<name>languages</name>.<name>contains</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>ls</name>.<name>add</name></name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
                <return>return <expr><call><name>from</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if></else></if>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"Languages(" + <call><name><name>languages</name>.<name>toString</name></name><argument_list>()</argument_list></call> + ")"</expr>;</return>
        }</block></function>

    }</block></class>

    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>ANY</name> =<init> <expr>"any"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name><name>Map</name><argument_list>&lt;<argument><name>NameType</name></argument>, <argument><name>Languages</name></argument>&gt;</argument_list></name></type> <name>LANGUAGES</name> =<init> <expr>new <call><name><name>EnumMap</name><argument_list>&lt;<argument><name>NameType</name></argument>, <argument><name>Languages</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>NameType</name>.<name><name/></name></name>class</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    static <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>s</name> :<range> <expr><call><name><name>NameType</name>.<name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>LANGUAGES</name>.<name>put</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>getInstance</name><argument_list>(<argument><expr><call><name>langResourceName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Languages</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>LANGUAGES</name>.<name>get</name></name><argument_list>(<argument><expr><name>nameType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Languages</name></type> <name>getInstance</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>languagesResourceName</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// read languages list</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>ls</name> =<init> <expr>new <call><name><name>HashSet</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>InputStream</name></type> <name>langIS</name> =<init> <expr><name><name>Languages</name>.<name><name/></name></name>class.<call><name>getClassLoader</name><argument_list>()</argument_list></call>.<call><name>getResourceAsStream</name><argument_list>(<argument><expr><name>languagesResourceName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>langIS</name> == <name>null</name></expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Unable to resolve required resource: " + <name>languagesResourceName</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Scanner</name></type> <name>lsScanner</name> =<init> <expr>new <call><name>Scanner</name><argument_list>(<argument><expr><name>langIS</name></expr></argument>, <argument><expr><name><name>ResourceConstants</name>.<name>ENCODING</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>inExtendedComment</name> =<init> <expr>false</expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>lsScanner</name>.<name>hasNextLine</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> =<init> <expr><call><name><name>lsScanner</name>.<name>nextLine</name></name><argument_list>()</argument_list></call>.<call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>inExtendedComment</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>endsWith</name></name><argument_list>(<argument><expr><name><name>ResourceConstants</name>.<name>EXT_CMT_END</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inExtendedComment</name> = false</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><call><name><name>line</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name><name>ResourceConstants</name>.<name>EXT_CMT_START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>inExtendedComment</name> = true</expr>;</expr_stmt>
                    }</block></then> <else>else <if>if <condition>(<expr><call><name><name>line</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>ls</name>.<name>add</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                }</block></else></if>
            }</block></while>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>lsScanner</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>

        <return>return <expr>new <call><name>Languages</name><argument_list>(<argument><expr><call><name><name>Collections</name>.<name>unmodifiableSet</name></name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>String</name></type> <name>langResourceName</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>NameType</name></type> <name>nameType</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name>.<name>format</name></name><argument_list>(<argument><expr>"org/apache/commons/codec/language/bm/%s_languages.txt"</expr></argument>, <argument><expr><call><name><name>nameType</name>.<name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * No languages at all.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LanguageSet</name></type> <name>NO_LANGUAGES</name> =<init> <expr>new <class><super><name>LanguageSet</name></super><argument_list>()</argument_list> <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>getAny</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>(<argument><expr>"Can't fetch any language from the empty language set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isSingleton</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>LanguageSet</name></type> <name>restrictTo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>LanguageSet</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"NO_LANGUAGES"</expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Any/all languages.
     */</comment>
    <decl_stmt><decl><type><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>LanguageSet</name></type> <name>ANY_LANGUAGE</name> =<init> <expr>new <class><super><name>LanguageSet</name></super><argument_list>()</argument_list> <block>{
        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>contains</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>language</name></decl></param>)</parameter_list> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>getAny</name><parameter_list>()</parameter_list> <block>{
            <throw>throw <expr>new <call><name>NoSuchElementException</name><argument_list>(<argument><expr>"Can't fetch any language from the any language set."</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>boolean</name></type> <name>isSingleton</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>LanguageSet</name></type> <name>restrictTo</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>LanguageSet</name></type> <name>other</name></decl></param>)</parameter_list> <block>{
            <return>return <expr><name>other</name></expr>;</return>
        }</block></function>

        <function><type><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr>"ANY_LANGUAGE"</expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Languages</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>languages</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>languages</name></name> = <name>languages</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier>public</specifier> <name><name>Set</name><argument_list>&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getLanguages</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>languages</name></name></expr>;</return>
    }</block></function>
}</block></class>
</unit>
