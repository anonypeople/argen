<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\MatchRatingApproachEncoder.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>Locale</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Match Rating Approach Phonetic Algorithm Developed by &lt;CITE&gt;Western Airlines&lt;/CITE&gt; in 1977.
 *
 * This class is immutable and thread-safe.
 *
 * @see &lt;a href="http://en.wikipedia.org/wiki/Match_rating_approach"&gt;Wikipedia - Match Rating Approach&lt;/a&gt;
 * @since 1.8
 */</comment>
<class><specifier>public</specifier> class <name>MatchRatingApproachEncoder</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>SPACE</name> =<init> <expr>" "</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>EMPTY</name> =<init> <expr>""</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Constants used mainly for the min rating value.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ONE</name> =<init> <expr>1</expr></init>, <name>TWO</name> =<init> <expr>2</expr></init>, <name>THREE</name> =<init> <expr>3</expr></init>, <name>FOUR</name> =<init> <expr>4</expr></init>, <name>FIVE</name> =<init> <expr>5</expr></init>, <name>SIX</name> =<init> <expr>6</expr></init>, <name>SEVEN</name> =<init> <expr>7</expr></init>, <name>EIGHT</name> =<init> <expr>8</expr></init>,
                             <name>ELEVEN</name> =<init> <expr>11</expr></init>, <name>TWELVE</name> =<init> <expr>12</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * The plain letter equivalent of the accented letters.
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>PLAIN_ASCII</name> =<init> <expr>"AaEeIiOoUu" + <comment type="line">// grave</comment>
            "AaEeIiOoUuYy" + <comment type="line">// acute</comment>
            "AaEeIiOoUuYy" + <comment type="line">// circumflex</comment>
            "AaOoNn" + <comment type="line">// tilde</comment>
            "AaEeIiOoUuYy" + <comment type="line">// umlaut</comment>
            "Aa" + <comment type="line">// ring</comment>
            "Cc" + <comment type="line">// cedilla</comment>
            "OoUu"</expr></init></decl>;</decl_stmt> <comment type="line">// double acute</comment>

    <comment type="javadoc">/**
     * Unicode characters corresponding to various accented letters. For example: \u00DA is U acute etc...
     */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>UNICODE</name> =<init> <expr>"\u00C0\u00E0\u00C8\u00E8\u00CC\u00EC\u00D2\u00F2\u00D9\u00F9" +
            "\u00C1\u00E1\u00C9\u00E9\u00CD\u00ED\u00D3\u00F3\u00DA\u00FA\u00DD\u00FD" +
            "\u00C2\u00E2\u00CA\u00EA\u00CE\u00EE\u00D4\u00F4\u00DB\u00FB\u0176\u0177" +
            "\u00C3\u00E3\u00D5\u00F5\u00D1\u00F1" +
            "\u00C4\u00E4\u00CB\u00EB\u00CF\u00EF\u00D6\u00F6\u00DC\u00FC\u0178\u00FF" +
            "\u00C5\u00E5" + "\u00C7\u00E7" + "\u0150\u0151\u0170\u0171"</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>String</name><index>[]</index></type> <name>DOUBLE_CONSONANT</name> =<init>
            <expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"BB"</expr>, <expr>"CC"</expr>, <expr>"DD"</expr>, <expr>"FF"</expr>, <expr>"GG"</expr>, <expr>"HH"</expr>, <expr>"JJ"</expr>, <expr>"KK"</expr>, <expr>"LL"</expr>, <expr>"MM"</expr>, <expr>"NN"</expr>, <expr>"PP"</expr>, <expr>"QQ"</expr>, <expr>"RR"</expr>, <expr>"SS"</expr>,
                           <expr>"TT"</expr>, <expr>"VV"</expr>, <expr>"WW"</expr>, <expr>"XX"</expr>, <expr>"YY"</expr>, <expr>"ZZ"</expr> }</block></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Cleans up a name: 1. Upper-cases everything 2. Removes some common punctuation 3. Removes accents 4. Removes any
     * spaces.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param name
     *            The name to be cleaned
     * @return The cleaned name
     */</comment>
    <function><type><name>String</name></type> <name>cleanName</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>upperName</name> =<init> <expr><call><name><name>name</name>.<name>toUpperCase</name></name><argument_list>(<argument><expr><name><name>Locale</name>.<name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>charsToTrim</name> =<init> <expr><block>{ <expr>"\\-"</expr>, <expr>"[&amp;]"</expr>, <expr>"\\'"</expr>, <expr>"\\."</expr>, <expr>"[\\,]"</expr> }</block></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name> :<range> <expr><name>charsToTrim</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><name>upperName</name> = <call><name><name>upperName</name>.<name>replaceAll</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>upperName</name> = <call><name>removeAccents</name><argument_list>(<argument><expr><name>upperName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>upperName</name> = <call><name><name>upperName</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"\\s+"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>upperName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes an Object using the Match Rating Approach algorithm. Method is here to satisfy the requirements of the
     * Encoder interface Throws an EncoderException if input object is not of type java.lang.String.
     *
     * @param pObject
     *            Object to encode
     * @return An object (or type java.lang.String) containing the Match Rating Approach code which corresponds to the
     *         String supplied.
     * @throws EncoderException
     *             if the parameter supplied is not of type java.lang.String
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>pObject</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>pObject</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(
                    <argument><expr>"Parameter supplied to Match Rating Approach encoder is not of type java.lang.String"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name>encode</name><argument_list>(<argument><expr>(<name>String</name>) <name>pObject</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a String using the Match Rating Approach (MRA) algorithm.
     *
     * @param name
     *            String object to encode
     * @return The MRA code corresponding to the String supplied
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Bulletproof for trivial input - NINO</comment>
        <if>if <condition>(<expr><name>name</name> == <name>null</name> || <call><name><name>EMPTY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> || <call><name><name>SPACE</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> || <call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
            <return>return <expr><name>EMPTY</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Preprocessing</comment>
        <expr_stmt><expr><name>name</name> = <call><name>cleanName</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// BEGIN: Actual encoding part of the algorithm...</comment>
        <comment type="line">// 1. Delete all vowels unless the vowel begins the word</comment>
        <expr_stmt><expr><name>name</name> = <call><name>removeVowels</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 2. Remove second consonant from any double consonant</comment>
        <expr_stmt><expr><name>name</name> = <call><name>removeDoubleConsonants</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 3. Reduce codex to 6 letters by joining the first 3 and last 3 letters</comment>
        <expr_stmt><expr><name>name</name> = <call><name>getFirst3Last3</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Gets the first &amp; last 3 letters of a name (if &gt; 6 characters) Else just returns the name.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param name
     *            The string to get the substrings from
     * @return Annexed first &amp; last 3 letters of input word.
     */</comment>
    <function><type><name>String</name></type> <name>getFirst3Last3</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>nameLength</name> =<init> <expr><call><name><name>name</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>nameLength</name> &gt; <name>SIX</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>firstThree</name> =<init> <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>THREE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>lastThree</name> =<init> <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr><name>nameLength</name> - <name>THREE</name></expr></argument>, <argument><expr><name>nameLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>firstThree</name> + <name>lastThree</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Obtains the min rating of the length sum of the 2 names. In essence the larger the sum length the smaller the
     * min rating. Values strictly from documentation.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param sumLength
     *            The length of 2 strings sent down
     * @return The min rating value
     */</comment>
    <function><type><name>int</name></type> <name>getMinRating</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>int</name></type> <name>sumLength</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>minRating</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>sumLength</name> &lt;= <name>FOUR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>minRating</name> = <name>FIVE</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>sumLength</name> &gt;= <name>FIVE</name> &amp;&amp; <name>sumLength</name> &lt;= <name>SEVEN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>minRating</name> = <name>FOUR</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>sumLength</name> &gt;= <name>EIGHT</name> &amp;&amp; <name>sumLength</name> &lt;= <name>ELEVEN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>minRating</name> = <name>THREE</name></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr><name>sumLength</name> == <name>TWELVE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>minRating</name> = <name>TWO</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>minRating</name> = <name>ONE</name></expr>;</expr_stmt> <comment type="line">// docs said little here.</comment>
        }</block></else></if></else></if></else></if></else></if>

        <return>return <expr><name>minRating</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Determines if two names are homophonous via Match Rating Approach (MRA) algorithm. It should be noted that the
     * strings are cleaned in the same way as {@link #encode(String)}.
     *
     * @param name1
     *            First of the 2 strings (names) to compare
     * @param name2
     *            Second of the 2 names to compare
     * @return &lt;code&gt;true&lt;/code&gt; if the encodings are identical &lt;code&gt;false&lt;/code&gt; otherwise.
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isEncodeEquals</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name1</name></decl></param>, <param><decl><type><name>String</name></type> <name>name2</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Bulletproof for trivial input - NINO</comment>
        <if>if <condition>(<expr><name>name1</name> == <name>null</name> || <call><name><name>EMPTY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call> || <call><name><name>SPACE</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>name2</name> == <name>null</name> || <call><name><name>EMPTY</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call> || <call><name><name>SPACE</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>name1</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1 || <call><name><name>name2</name>.<name>length</name></name><argument_list>()</argument_list></call> == 1</expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><call><name><name>name1</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>true</expr>;</return>
        }</block></then></if></else></if></else></if></else></if>

        <comment type="line">// Preprocessing</comment>
        <expr_stmt><expr><name>name1</name> = <call><name>cleanName</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name2</name> = <call><name>cleanName</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Actual MRA Algorithm</comment>

        <comment type="line">// 1. Remove vowels</comment>
        <expr_stmt><expr><name>name1</name> = <call><name>removeVowels</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name2</name> = <call><name>removeVowels</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 2. Remove double consonants</comment>
        <expr_stmt><expr><name>name1</name> = <call><name>removeDoubleConsonants</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name2</name> = <call><name>removeDoubleConsonants</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 3. Reduce down to 3 letters</comment>
        <expr_stmt><expr><name>name1</name> = <call><name>getFirst3Last3</name><argument_list>(<argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name2</name> = <call><name>getFirst3Last3</name><argument_list>(<argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 4. Check for length difference - if 3 or greater then no similarity</comment>
        <comment type="line">// comparison is done</comment>
        <if>if <condition>(<expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call><name><name>name1</name>.<name>length</name></name><argument_list>()</argument_list></call> - <call><name><name>name2</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> &gt;= <name>THREE</name></expr>)</condition><then> <block>{
            <return>return <expr>false</expr>;</return>
        }</block></then></if>

        <comment type="line">// 5. Obtain the minimum rating value by calculating the length sum of the</comment>
        <comment type="line">// encoded Strings and sending it down.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>sumLength</name> =<init> <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><call><name><name>name1</name>.<name>length</name></name><argument_list>()</argument_list></call> + <call><name><name>name2</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minRating</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>minRating</name> = <call><name>getMinRating</name><argument_list>(<argument><expr><name>sumLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 6. Process the encoded Strings from left to right and remove any</comment>
        <comment type="line">// identical characters found from both Strings respectively.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> =<init> <expr><call><name>leftToRightThenRightToLeftProcessing</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// 7. Each PNI item that has a similarity rating equal to or greater than</comment>
        <comment type="line">// the min is considered to be a good candidate match</comment>
        <return>return <expr><name>count</name> &gt;= <name>minRating</name></expr>;</return>

    }</block></function>

    <comment type="javadoc">/**
     * Determines if a letter is a vowel.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param letter
     *            The letter under investiagtion
     * @return True if a vowel, else false
     */</comment>
    <function><type><name>boolean</name></type> <name>isVowel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>letter</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>letter</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"E"</expr></argument>)</argument_list></call> || <call><name><name>letter</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"A"</expr></argument>)</argument_list></call> || <call><name><name>letter</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"O"</expr></argument>)</argument_list></call> ||
               <call><name><name>letter</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"I"</expr></argument>)</argument_list></call> || <call><name><name>letter</name>.<name>equalsIgnoreCase</name></name><argument_list>(<argument><expr>"U"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Processes the names from left to right (first) then right to left removing identical letters in same positions.
     * Then subtracts the longer string that remains from 6 and returns this.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param name1
     *            name2
     * @return
     */</comment>
    <function><type><name>int</name></type> <name>leftToRightThenRightToLeftProcessing</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name1</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name2</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>name1Char</name> =<init> <expr><call><name><name>name1</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>name2Char</name> =<init> <expr><call><name><name>name2</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>name1Size</name> =<init> <expr><call><name><name>name1</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>name2Size</name> =<init> <expr><call><name><name>name2</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name1LtRStart</name> =<init> <expr><name>EMPTY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name1LtREnd</name> =<init> <expr><name>EMPTY</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name2RtLStart</name> =<init> <expr><name>EMPTY</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name2RtLEnd</name> =<init> <expr><name>EMPTY</name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>name1Char</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name>i</name> &gt; <name>name2Size</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>

            <expr_stmt><expr><name>name1LtRStart</name> = <call><name><name>name1</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name1LtREnd</name> = <call><name><name>name1</name>.<name>substring</name></name><argument_list>(<argument><expr><name>name1Size</name> - <name>i</name></expr></argument>, <argument><expr><name>name1Size</name> - <name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>name2RtLStart</name> = <call><name><name>name2</name>.<name>substring</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>name2RtLEnd</name> = <call><name><name>name2</name>.<name>substring</name></name><argument_list>(<argument><expr><name>name2Size</name> - <name>i</name></expr></argument>, <argument><expr><name>name2Size</name> - <name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Left to right...</comment>
            <if>if <condition>(<expr><call><name><name>name1LtRStart</name>.<name>equals</name></name><argument_list>(<argument><expr><name>name2RtLStart</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>name1Char</name><index>[<expr><name>i</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>name2Char</name><index>[<expr><name>i</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// Right to left...</comment>
            <if>if <condition>(<expr><call><name><name>name1LtREnd</name>.<name>equals</name></name><argument_list>(<argument><expr><name>name2RtLEnd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>name1Char</name><index>[<expr><name>name1Size</name> - <name>i</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>name2Char</name><index>[<expr><name>name2Size</name> - <name>i</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <comment type="line">// Char arrays -&gt; string &amp; remove extraneous space</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>strA</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>name1Char</name></expr></argument>)</argument_list></call>.<call><name>replaceAll</name><argument_list>(<argument><expr>"\\s+"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>strB</name> =<init> <expr>new <call><name>String</name><argument_list>(<argument><expr><name>name2Char</name></expr></argument>)</argument_list></call>.<call><name>replaceAll</name><argument_list>(<argument><expr>"\\s+"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Final bit - subtract longest string from 6 and return this int value</comment>
        <if>if <condition>(<expr><call><name><name>strA</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; <call><name><name>strB</name>.<name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>SIX</name> - <call><name><name>strA</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name><name>Math</name>.<name>abs</name></name><argument_list>(<argument><expr><name>SIX</name> - <call><name><name>strB</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="javadoc">/**
     * Removes accented letters and replaces with non-accented ascii equivalent Case is preserved.
     * http://www.codecodex.com/wiki/Remove_accent_from_letters_%28ex_.%C3%A9_to_e%29
     *
     * @param accentedWord
     *            The word that may have accents in it.
     * @return De-accented word
     */</comment>
    <function><type><name>String</name></type> <name>removeAccents</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>accentedWord</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>accentedWord</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sb</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>n</name> =<init> <expr><call><name><name>accentedWord</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name> =<init> <expr><call><name><name>accentedWord</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>pos</name> =<init> <expr><call><name><name>UNICODE</name>.<name>indexOf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>pos</name> &gt; -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>PLAIN_ASCII</name>.<name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sb</name>.<name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <return>return <expr><call><name><name>sb</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Replaces any double consonant pair with the single letter equivalent.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param name
     *            String to have double consonants removed
     * @return Single consonant word
     */</comment>
    <function><type><name>String</name></type> <name>removeDoubleConsonants</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>replacedName</name> =<init> <expr><call><name><name>name</name>.<name>toUpperCase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>dc</name> :<range> <expr><name>DOUBLE_CONSONANT</name></expr></range></decl></init>) <block>{
            <if>if <condition>(<expr><call><name><name>replacedName</name>.<name>contains</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>singleLetter</name> =<init> <expr><call><name><name>dc</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>replacedName</name> = <call><name><name>replacedName</name>.<name>replace</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>singleLetter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>replacedName</name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Deletes all vowels unless the vowel begins the word.
     *
     * &lt;h2&gt;API Usage&lt;/h2&gt;
     * &lt;p&gt;
     * Consider this method private, it is package protected for unit testing only.
     * &lt;/p&gt;
     *
     * @param name
     *            The name to have vowels removed
     * @return De-voweled word
     */</comment>
    <function><type><name>String</name></type> <name>removeVowels</name><parameter_list>(<param><decl><type><name>String</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// Extract first letter</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>firstLetter</name> =<init> <expr><call><name><name>name</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"A"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"E"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"I"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"O"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"U"</expr></argument>, <argument><expr><name>EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>name</name> = <call><name><name>name</name>.<name>replaceAll</name></name><argument_list>(<argument><expr>"\\s{2,}\\b"</expr></argument>, <argument><expr><name>SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// return isVowel(firstLetter) ? (firstLetter + name) : name;</comment>
        <if>if <condition>(<expr><call><name>isVowel</name><argument_list>(<argument><expr><name>firstLetter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>firstLetter</name> + <name>name</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>name</name></expr>;</return>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>
