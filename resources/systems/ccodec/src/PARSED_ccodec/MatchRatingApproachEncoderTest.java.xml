<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\MatchRatingApproachEncoderTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Series of tests for the Match Rating Approach algorithm.
 *
 * General naming nomenclature for the test is of the form:
 * GeneralMetadataOnTheTestArea_ActualTestValues_ExpectedResult
 *
 * An unusual value is indicated by the term "corner case"
 */</comment>
<class><specifier>public</specifier> class <name>MatchRatingApproachEncoderTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>MatchRatingApproachEncoder</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <comment type="line">// ********** BEGIN REGION - TEST SUPPORT METHODS</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_AllLower_SuccessfullyRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aeiou"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Ã¡Ã©Ã­Ã³Ãº"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_WithSpaces_SuccessfullyRemovedAndSpacesInvariant</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ae io  u"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Ã¡Ã© Ã­Ã³  Ãº"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_UpperandLower_SuccessfullyRemovedAndCaseInvariant</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"AeiOuu"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"ÃeÃ­Ãuu"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_MixedWithUnusualChars_SuccessfullyRemovedAndUnusualcharactersInvariant</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"A-e'i.,o&amp;u"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Ã-e'Ã­.,Ã³&amp;Ãº"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_GerSpanFrenMix_SuccessfullyRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"aeouÃAEOUnNa"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Ã¤Ã«Ã¶Ã¼ÃÃÃÃÃÃ±ÃÃ "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_ComprehensiveAccentMix_AllSuccessfullyRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c"</expr></argument>,
                <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Ã,Ã,Ã,Ã,Ã,Ã,Ã,Ã,Ã,Ã,Ã,Ã¨,Ã©,Ãª,Ã«,Ã»,Ã¹,Ã¯,Ã®,Ã ,Ã¢,Ã´,Ã§"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemovalNormalString_NoChange</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Colorless green ideas sleep furiously"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>"Colorless green ideas sleep furiously"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_NINO_NoChange</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testAccentRemoval_NullValue_ReturnNullSuccessfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeAccents</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveSingleDoubleConsonants_BUBLE_RemovedSuccessfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BUBLE"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeDoubleConsonants</name><argument_list>(<argument><expr>"BUBBLE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveDoubleConsonants_MISSISSIPPI_RemovedSuccessfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"MISISIPI"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeDoubleConsonants</name><argument_list>(<argument><expr>"MISSISSIPPI"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveDoubleDoubleVowel_BEETLE_NotRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BEETLE"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeDoubleConsonants</name><argument_list>(<argument><expr>"BEETLE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testIsVowel_CapitalA_ReturnsTrue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isVowel</name><argument_list>(<argument><expr>"A"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testIsVowel_SmallD_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isVowel</name><argument_list>(<argument><expr>"d"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveVowel_ALESSANDRA_Returns_ALSSNDR</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ALSSNDR"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeVowels</name><argument_list>(<argument><expr>"ALESSANDRA"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveVowel__AIDAN_Returns_ADN</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"ADN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeVowels</name><argument_list>(<argument><expr>"AIDAN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testRemoveVowel__DECLAN_Returns_DCLN</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"DCLN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>removeVowels</name><argument_list>(<argument><expr>"DECLAN"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetFirstLast3__ALEXANDER_Returns_Aleder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"Aleder"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getFirst3Last3</name><argument_list>(<argument><expr>"Alexzander"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetFirstLast3_PETE_Returns_PETE</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"PETE"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getFirst3Last3</name><argument_list>(<argument><expr>"PETE"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>leftToRightThenRightToLeftProcessing</name><argument_list>(<argument><expr>"ALEXANDER"</expr></argument>, <argument><expr>"ALEXANDRA"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testleftTorightThenRightToLeft_EINSTEIN_MICHAELA_Returns0</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>leftToRightThenRightToLeftProcessing</name><argument_list>(<argument><expr>"EINSTEIN"</expr></argument>, <argument><expr>"MICHAELA"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetMinRating_7_Return4_Successfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetMinRating_1_Returns5_Successfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetMinRating_2_Returns5_Successfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>5</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_5_Returns4_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_5_Returns4_Successfully2</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_6_Returns4_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>6</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_7_Returns4_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>4</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>7</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_8_Returns3_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_10_Returns3_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>10</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testgetMinRating_11_Returns_3_Successfully</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>11</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetMinRating_13_Returns_1_Successfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>getMinRating</name><argument_list>(<argument><expr>13</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testcleanName_SuccessfullyClean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"THISISATEST"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>cleanName</name><argument_list>(<argument><expr>"This-Ã­s   a t.,es &amp;t"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisVowel_SingleVowel_ReturnsTrue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isVowel</name><argument_list>(<argument><expr>("I")</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_SecondNameNothing_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_FirstNameNothing_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_SecondNameJustSpace_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_FirstNameJustSpace_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_SecondNameNull_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_FirstNameNull_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEquals_CornerCase_FirstNameJust1Letter_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"t"</expr></argument>, <argument><expr>"test"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testisEncodeEqualsSecondNameJust1Letter_ReturnsFalse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr>"t"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="line">// ***** END REGION - TEST SUPPORT METHODS</comment>

    <comment type="line">// ***** BEGIN REGION - TEST GET MRA ENCODING</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_HARPER_HRPR</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HRPR"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"HARPER"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_SMITH_to_SMTH</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SMTH"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Smith"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_SMYTH_to_SMYTH</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"SMYTH"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"Smyth"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_Space_to_Nothing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_NoSpace_to_Nothing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_Null_to_Nothing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testGetEncoding_One_Letter_to_Nothing</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr>"E"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompareNameNullSpace_ReturnsFalseSuccessfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name>getStringEncoder</name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompareNameSameNames_ReturnsFalseSuccessfully</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name>getStringEncoder</name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"John"</expr></argument>, <argument><expr>"John"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ***** END REGION - TEST GET MRA ENCODING</comment>

    <comment type="line">// ***** BEGIN REGION - TEST GET MRA COMPARISONS</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SMITH_SMYTH_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"smith"</expr></argument>, <argument><expr>"smyth"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_BURNS_BOURNE_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Burns"</expr></argument>, <argument><expr>"Bourne"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_ShortNames_AL_ED_WorksButNoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Al"</expr></argument>, <argument><expr>"Ed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_CATHERINE_KATHRYN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Catherine"</expr></argument>, <argument><expr>"Kathryn"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_BRIAN_BRYAN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Brian"</expr></argument>, <argument><expr>"Bryan"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SEAN_SHAUN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"SÃ©an"</expr></argument>, <argument><expr>"Shaun"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_COLM_COLIN_WithAccentsAndSymbolsAndSpaces_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"CÃ³lm.   "</expr></argument>, <argument><expr>"C-olÃ­n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_STEPHEN_STEVEN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Stephen"</expr></argument>, <argument><expr>"Steven"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_STEVEN_STEFAN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Steven"</expr></argument>, <argument><expr>"Stefan"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_STEPHEN_STEFAN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Stephen"</expr></argument>, <argument><expr>"Stefan"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SAM_SAMUEL_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Sam"</expr></argument>, <argument><expr>"Samuel"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_MICKY_MICHAEL_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Micky"</expr></argument>, <argument><expr>"Michael"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_OONA_OONAGH_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Oona"</expr></argument>, <argument><expr>"Oonagh"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SOPHIE_SOFIA_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Sophie"</expr></argument>, <argument><expr>"Sofia"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_FRANCISZEK_FRANCES_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Franciszek"</expr></argument>, <argument><expr>"Frances"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_TOMASZ_TOM_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Tomasz"</expr></argument>, <argument><expr>"tom"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SmallInput_CARK_Kl_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Kl"</expr></argument>, <argument><expr>"Karl"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompareNameToSingleLetter_KARL_C_DoesNotMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Karl"</expr></argument>, <argument><expr>"C"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_ZACH_ZAKARIA_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Zach"</expr></argument>, <argument><expr>"Zacharia"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_KARL_ALESSANDRO_DoesNotMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Karl"</expr></argument>, <argument><expr>"Alessandro"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Forenames_UNA_OONAGH_ShouldSuccessfullyMatchButDoesNot</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Ãna"</expr></argument>, <argument><expr>"Oonagh"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Disappointing</comment>
    }</block></function>

    <comment type="line">// ***** Begin Region - Test Get Encoding - Surnames</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_OSULLIVAN_OSUILLEABHAIN_SuccessfulMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"O'Sullivan"</expr></argument>, <argument><expr>"Ã ' SÃºilleabhÃ¡in"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_LongSurnames_MORIARTY_OMUIRCHEARTAIGH_DoesNotSuccessfulMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Moriarty"</expr></argument>, <argument><expr>"OMuircheartaigh"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_LongSurnames_OMUIRCHEARTAIGH_OMIREADHAIGH_SuccessfulMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"o'muireadhaigh"</expr></argument>, <argument><expr>"Ã 'Muircheartaigh "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_COOPERFLYNN_SUPERLYN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Cooper-Flynn"</expr></argument>, <argument><expr>"Super-Lyn"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_HAILEY_HALLEY_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Hailey"</expr></argument>, <argument><expr>"Halley"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// **** BEGIN YIDDISH/SLAVIC SECTION ****</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_AUERBACH_UHRBACH_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Auerbach"</expr></argument>, <argument><expr>"Uhrbach"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_MOSKOWITZ_MOSKOVITZ_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Moskowitz"</expr></argument>, <argument><expr>"Moskovitz"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_LIPSHITZ_LIPPSZYC_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"LIPSHITZ"</expr></argument>, <argument><expr>"LIPPSZYC"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_LEWINSKY_LEVINSKI_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"LEWINSKY"</expr></argument>, <argument><expr>"LEVINSKI"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_SZLAMAWICZ_SHLAMOVITZ_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"SZLAMAWICZ"</expr></argument>, <argument><expr>"SHLAMOVITZ"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_ROSOCHOWACIEC_ROSOKHOVATSETS_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"R o s o ch o w a c ie c"</expr></argument>, <argument><expr>" R o s o k ho v a ts e ts"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surname_PRZEMYSL_PSHEMESHIL_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>" P rz e m y s l"</expr></argument>, <argument><expr>" P sh e m e sh i l"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// **** END YIDDISH/SLAVIC SECTION ****</comment>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_PETERSON_PETERS_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Peterson"</expr></argument>, <argument><expr>"Peters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_MCGOWAN_MCGEOGHEGAN_SuccessfullyMatched</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"McGowan"</expr></argument>, <argument><expr>"Mc Geoghegan"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SurnamesCornerCase_MURPHY_Space_NoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Murphy"</expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SurnamesCornerCase_MURPHY_NoSpace_NoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Murphy"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_SurnameCornerCase_Nulls_NoMatch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr><name>null</name></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Surnames_MURPHY_LYNCH_NoMatchExpected</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Murphy"</expr></argument>, <argument><expr>"Lynch"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Forenames_SEAN_JOHN_MatchExpected</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Sean"</expr></argument>, <argument><expr>"John"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <name>void</name></type> <name>testCompare_Forenames_SEAN_PETE_NoMatchExpected</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isEncodeEquals</name><argument_list>(<argument><expr>"Sean"</expr></argument>, <argument><expr>"Pete"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>MatchRatingApproachEncoder</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>MatchRatingApproachEncoder</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// ***** END REGION - TEST GET MRA COMPARISONS</comment>

}</block></class>
</unit>
