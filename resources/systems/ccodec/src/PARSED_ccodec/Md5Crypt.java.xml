<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\digest\Md5Crypt.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import <name><name>java</name>.<name>security</name>.<name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>Arrays</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Matcher</name></name>;</import>
<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>

<comment type="javadoc">/**
 * The libc crypt() "$1$" and Apache "$apr1$" MD5-based hash algorithm.
 * &lt;p&gt;
 * Based on the public domain ("beer-ware") C implementation from Poul-Henning Kamp which was found at: &lt;a
 * href="http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain"&gt;
 * crypt-md5.c @ freebsd.org&lt;/a&gt;&lt;br/&gt;
 * &lt;p&gt;
 * Source:
 *
 * &lt;pre&gt;
 * $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $
 * &lt;/pre&gt;
 * &lt;p&gt;
 * Conversion to Kotlin and from there to Java in 2012.
 * &lt;p&gt;
 * The C style comments are from the original C code, the ones with "//" from the port.
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @version $Id: Md5Crypt.java 1552861 2013-12-21 02:03:17Z ggregory $
 * @since 1.7
 */</comment>
<class><specifier>public</specifier> class <name>Md5Crypt</name> <block>{

    <comment type="javadoc">/** The Identifier of the Apache variant. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>APR1_PREFIX</name> =<init> <expr>"$apr1$"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The number of bytes of the final hash. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>BLOCKSIZE</name> =<init> <expr>16</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The Identifier of this crypt() variant. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>final</specifier> <name>String</name></type> <name>MD5_PREFIX</name> =<init> <expr>"$1$"</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/** The number of rounds of the big loop. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>ROUNDS</name> =<init> <expr>1000</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * See {@link #apr1Crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @return the hash value
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught. *
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>apr1Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>apr1Crypt</name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>APR1_PREFIX</name> + <call><name><name>B64</name>.<name>getRandomSalt</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * See {@link #apr1Crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @param salt An APR1 salt.
     * @return the hash value
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>apr1Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>, <param><decl><type><name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// to make the md5Crypt regex happy</comment>
        <if>if <condition>(<expr><name>salt</name> != <name>null</name> &amp;&amp; !<call><name><name>salt</name>.<name>startsWith</name></name><argument_list>(<argument><expr><name>APR1_PREFIX</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>salt</name> = <name>APR1_PREFIX</name> + <name>salt</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>APR1_PREFIX</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * See {@link #apr1Crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @return the hash value
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>apr1Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyBytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>apr1Crypt</name><argument_list>(<argument><expr><call><name><name>keyBytes</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates an Apache htpasswd compatible "$apr1$" MD5 based hash value.
     * &lt;p&gt;
     * The algorithm is identical to the crypt(3) "$1$" one but produces different outputs due to the different salt
     * prefix.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @param salt
     *            salt string including the prefix and optionally garbage at the end. Will be generated randomly if
     *            null.
     * @return the hash value
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>apr1Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>keyBytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>apr1Crypt</name><argument_list>(<argument><expr><call><name><name>keyBytes</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a libc6 crypt() compatible "$1$" hash value.
     * &lt;p&gt;
     * See {@link Crypt#crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @return the hash value
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>md5Crypt</name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>MD5_PREFIX</name> + <call><name><name>B64</name>.<name>getRandomSalt</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a libc crypt() compatible "$1$" MD5 based hash value.
     * &lt;p&gt;
     * See {@link Crypt#crypt(String, String)} for details.
     *
     * @param keyBytes
     *            plaintext string to hash.
     * @param salt
     *            salt string including the prefix and optionally garbage at the end. Will be generated randomly if
     *            null.
     * @return the hash value
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name>md5Crypt</name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>MD5_PREFIX</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Generates a libc6 crypt() "$1$" or Apache htpasswd "$apr1$" hash value.
     * &lt;p&gt;
     * See {@link Crypt#crypt(String, String)} or {@link #apr1Crypt(String, String)} for details.
     * 
     * @param keyBytes
     *            plaintext string to hash.
     * @param salt May be null.
     * @param prefix salt prefix
     * @return the hash value
     * @throws IllegalArgumentException
     *             if the salt does not match the allowed pattern
     * @throws RuntimeException
     *             when a {@link java.security.NoSuchAlgorithmException} is caught.
     */</comment>
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>String</name></type> <name>md5Crypt</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>keyBytes</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>salt</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>keyLen</name> =<init> <expr><name><name>keyBytes</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Extract the real salt from the given string which can be a complete hash string.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>saltString</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>salt</name> == <name>null</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>saltString</name> = <call><name><name>B64</name>.<name>getRandomSalt</name></name><argument_list>(<argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Pattern</name></type> <name>p</name> =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^" + <call><name><name>prefix</name>.<name>replace</name></name><argument_list>(<argument><expr>"$"</expr></argument>, <argument><expr>"\\$"</expr></argument>)</argument_list></call> + "([\\.\\/a-zA-Z0-9]{1,8}).*"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>m</name> =<init> <expr><call><name><name>p</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>m</name> == <name>null</name> || !<call><name><name>m</name>.<name>find</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr>new <call><name>IllegalArgumentException</name><argument_list>(<argument><expr>"Invalid salt value: " + <name>salt</name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if>
            <expr_stmt><expr><name>saltString</name> = <call><name><name>m</name>.<name>group</name></name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>byte</name><index>[]</index></type> <name>saltBytes</name> =<init> <expr><call><name><name>saltString</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MessageDigest</name></type> <name>ctx</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getMd5Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * The password first, since that is what is most unknown
         */</comment>
        <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Then our magic string
         */</comment>
        <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><call><name><name>prefix</name>.<name>getBytes</name></name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>UTF_8</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Then the raw salt
         */</comment>
        <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><name>saltBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Then just as many characters of the MD5(pw,salt,pw)
         */</comment>
        <decl_stmt><decl><type><name>MessageDigest</name></type> <name>ctx1</name> =<init> <expr><call><name><name>DigestUtils</name>.<name>getMd5Digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>saltBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>byte</name><index>[]</index></type> <name>finalb</name> =<init> <expr><call><name><name>ctx1</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name> =<init> <expr><name>keyLen</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>ii</name> &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><name>finalb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ii</name> &gt; 16 ? 16 : <name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ii</name> -= 16</expr>;</expr_stmt>
        }</block></while>

        <comment type="block">/*
         * Don't leave anything around in vm they could use.
         */</comment>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>finalb</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Then something really weird...
         */</comment>
        <expr_stmt><expr><name>ii</name> = <name>keyLen</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>j</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>ii</name> &gt; 0</expr>)</condition> <block>{
            <if>if <condition>(<expr>(<name>ii</name> &amp; 1) == 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ctx</name>.<name>update</name></name><argument_list>(<argument><expr><name><name>keyBytes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>ii</name> &gt;&gt;= 1</expr>;</expr_stmt>
        }</block></while>

        <comment type="block">/*
         * Now make the output string
         */</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>passwd</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><name>prefix</name> + <name>saltString</name> + "$"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>finalb</name> = <call><name><name>ctx</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * and now, just to make sure things don't run too fast On a 60 Mhz Pentium this takes 34 msec, so you would
         * need 30 seconds to build a 1000 entry dictionary...
         */</comment>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>ROUNDS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>ctx1</name> = <call><name><name>DigestUtils</name>.<name>getMd5Digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>i</name> &amp; 1) != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>finalb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><name>i</name> % 3 != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>saltBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>i</name> % 7 != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>(<name>i</name> &amp; 1) != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>finalb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ctx1</name>.<name>update</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>finalb</name> = <call><name><name>ctx1</name>.<name>digest</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line">// The following was nearly identical to the Sha2Crypt code.</comment>
        <comment type="line">// Again, the buflen is not really needed.</comment>
        <comment type="line">// int buflen = MD5_PREFIX.length() - 1 + salt_string.length() + 1 + BLOCKSIZE + 1;</comment>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>6</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>12</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>7</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>13</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>8</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>14</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>9</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>15</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr><name><name>finalb</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>10</expr>]</index></name></expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>5</expr>]</index></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>B64</name>.<name>b64from24bit</name></name><argument_list>(<argument><expr>(<name>byte</name>) 0</expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>, <argument><expr><name><name>finalb</name><index>[<expr>11</expr>]</index></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>passwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Don't leave anything around in vm they could use.
         */</comment>
        <comment type="line">// Is there a better way to do this with the JVM?</comment>
        <expr_stmt><expr><call><name><name>ctx</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ctx1</name>.<name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>keyBytes</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>saltBytes</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Arrays</name>.<name>fill</name></name><argument_list>(<argument><expr><name>finalb</name></expr></argument>, <argument><expr>(<name>byte</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>passwd</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
