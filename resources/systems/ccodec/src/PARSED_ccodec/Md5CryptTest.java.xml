<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\digest\Md5CryptTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>digest</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertNotNull</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>Charsets</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<class><specifier>public</specifier> class <name>Md5CryptTest</name> <block>{

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCtor</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr>new <call><name>Md5Crypt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// for code-coverage</comment>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptStrings</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// empty data</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$foo$9mS5ExwgIECGE5YKlD5o91"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>"$1$foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// salt gets cut at dollar sign</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$1234$ImZYBLmYC.rbBKg9ERxX70"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$1$1234"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$1234$ImZYBLmYC.rbBKg9ERxX70"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$1$1234$567"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$1234$ImZYBLmYC.rbBKg9ERxX70"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$1$1234$567$890"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// salt gets cut at maximum length</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$12345678$hj0uLpdidjPhbMMZeno8X/"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$1$1234567890123456"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$12345678$hj0uLpdidjPhbMMZeno8X/"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"secret"</expr></argument>, <argument><expr>"$1$123456789012345678"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptBytes</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// An empty Bytearray equals an empty String</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$foo$9mS5ExwgIECGE5YKlD5o91"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>new <name><name>byte</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"$1$foo"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// UTF-8 stores \u00e4 "a with diaeresis" as two bytes 0xc3 0xa4.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$./$52agTEQZs877L9jyJnCNZ1"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"t\u00e4st"</expr></argument>, <argument><expr>"$1$./$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ISO-8859-1 stores "a with diaeresis" as single byte 0xe4.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$./$J2UbKzGe0Cpe63WZAt6p//"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"t\u00e4st".<call><name>getBytes</name><argument_list>(<argument><expr><name><name>Charsets</name>.<name>ISO_8859_1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"$1$./$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptExplicitCall</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>(<argument><expr>"^\\$1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>null</name></expr></argument>)</argument_list></call>.<call><name>matches</name><argument_list>(<argument><expr>"^\\$1\\$[a-zA-Z0-9./]{0,8}\\$.{1,}$"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptLongInput</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"$1$1234$MoxekaNNUgfPRVqoeYjCD/"</expr></argument>, <argument><expr><call><name><name>Crypt</name>.<name>crypt</name></name><argument_list>(<argument><expr>"12345678901234567890"</expr></argument>, <argument><expr>"$1$1234"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = NullPointerException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptNullData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr>(<name><name>byte</name><index>[]</index></name>) <name>null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name><argument_list>(expected = IllegalArgumentException.class)</argument_list></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMd5CryptWithEmptySalt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Md5Crypt</name>.<name>md5Crypt</name></name><argument_list>(<argument><expr>"secret".<call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
