<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\MetaphoneTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>assertTrue</name></name>;</import>
<import>import static <name><name>org</name>.<name>junit</name>.<name>Assert</name>.<name>fail</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * @version $Id: MetaphoneTest.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>MetaphoneTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>Metaphone</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertIsMetaphoneEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>source</name></decl></param>, <param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>matches</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// match source to all matches</comment>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>matche</name> :<range> <expr><name>matches</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr>"Source: " + <name>source</name> + ", should have same Metaphone as: " + <name>matche</name></expr></argument>,
                       <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isMetaphoneEqual</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>matche</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">// match to each other</comment>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>matche</name> :<range> <expr><name>matches</name></expr></range></decl></init>) <block>{
            <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>matche2</name> :<range> <expr><name>matches</name></expr></range></decl></init>) <block>{
                <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isMetaphoneEqual</name><argument_list>(<argument><expr><name>matche</name></expr></argument>, <argument><expr><name>matche2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>assertMetaphoneEqual</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index><index>[]</index></name></type> <name>pairs</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>validateFixture</name></name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>pair</name> :<range> <expr><name>pairs</name></expr></range></decl></init>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name0</name> =<init> <expr><name><name>pair</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>name1</name> =<init> <expr><name><name>pair</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>failMsg</name> =<init> <expr>"Expected match between " + <name>name0</name> + " and " + <name>name1</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>failMsg</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isMetaphoneEqual</name><argument_list>(<argument><expr><name>name0</name></expr></argument>, <argument><expr><name>name1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><name>failMsg</name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>isMetaphoneEqual</name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>name0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>Metaphone</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Metaphone</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqual1</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertMetaphoneEqual</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index><index>[]</index></name> <block>{ <expr><block>{ <expr>"Case"</expr>, <expr>"case"</expr> }</block></expr>, <expr><block>{
                <expr>"CASE"</expr>, <expr>"Case"</expr> }</block></expr>, <expr><block>{
                <expr>"caSe"</expr>, <expr>"cAsE"</expr> }</block></expr>, <expr><block>{
                <expr>"quick"</expr>, <expr>"cookie"</expr> }</block></expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Matches computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqual2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertMetaphoneEqual</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index><index>[]</index></name> <block>{ <expr><block>{ <expr>"Lawrence"</expr>, <expr>"Lorenza"</expr> }</block></expr>, <expr><block>{
                <expr>"Gary"</expr>, <expr>"Cahra"</expr> }</block></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initial AE case.
     *
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualAero</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(<argument><expr>"Aero"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Eure"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initial WH case.
     *
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualWhite</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"White"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Wade"</expr>, <expr>"Wait"</expr>, <expr>"Waite"</expr>, <expr>"Wat"</expr>, <expr>"Whit"</expr>, <expr>"Wiatt"</expr>, <expr>"Wit"</expr>, <expr>"Wittie"</expr>, <expr>"Witty"</expr>, <expr>"Wood"</expr>, <expr>"Woodie"</expr>, <expr>"Woody"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initial A, not followed by an E case.
     *
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualAlbert</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(<argument><expr>"Albert"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Ailbert"</expr>, <expr>"Alberik"</expr>, <expr>"Albert"</expr>, <expr>"Alberto"</expr>, <expr>"Albrecht"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualGary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Gary"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"Cahra"</expr>,
                <expr>"Cara"</expr>,
                <expr>"Carey"</expr>,
                <expr>"Cari"</expr>,
                <expr>"Caria"</expr>,
                <expr>"Carie"</expr>,
                <expr>"Caro"</expr>,
                <expr>"Carree"</expr>,
                <expr>"Carri"</expr>,
                <expr>"Carrie"</expr>,
                <expr>"Carry"</expr>,
                <expr>"Cary"</expr>,
                <expr>"Cora"</expr>,
                <expr>"Corey"</expr>,
                <expr>"Cori"</expr>,
                <expr>"Corie"</expr>,
                <expr>"Correy"</expr>,
                <expr>"Corri"</expr>,
                <expr>"Corrie"</expr>,
                <expr>"Corry"</expr>,
                <expr>"Cory"</expr>,
                <expr>"Gray"</expr>,
                <expr>"Kara"</expr>,
                <expr>"Kare"</expr>,
                <expr>"Karee"</expr>,
                <expr>"Kari"</expr>,
                <expr>"Karia"</expr>,
                <expr>"Karie"</expr>,
                <expr>"Karrah"</expr>,
                <expr>"Karrie"</expr>,
                <expr>"Karry"</expr>,
                <expr>"Kary"</expr>,
                <expr>"Keri"</expr>,
                <expr>"Kerri"</expr>,
                <expr>"Kerrie"</expr>,
                <expr>"Kerry"</expr>,
                <expr>"Kira"</expr>,
                <expr>"Kiri"</expr>,
                <expr>"Kora"</expr>,
                <expr>"Kore"</expr>,
                <expr>"Kori"</expr>,
                <expr>"Korie"</expr>,
                <expr>"Korrie"</expr>,
                <expr>"Korry"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualJohn</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"John"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"Gena"</expr>,
                <expr>"Gene"</expr>,
                <expr>"Genia"</expr>,
                <expr>"Genna"</expr>,
                <expr>"Genni"</expr>,
                <expr>"Gennie"</expr>,
                <expr>"Genny"</expr>,
                <expr>"Giana"</expr>,
                <expr>"Gianna"</expr>,
                <expr>"Gina"</expr>,
                <expr>"Ginni"</expr>,
                <expr>"Ginnie"</expr>,
                <expr>"Ginny"</expr>,
                <expr>"Jaine"</expr>,
                <expr>"Jan"</expr>,
                <expr>"Jana"</expr>,
                <expr>"Jane"</expr>,
                <expr>"Janey"</expr>,
                <expr>"Jania"</expr>,
                <expr>"Janie"</expr>,
                <expr>"Janna"</expr>,
                <expr>"Jany"</expr>,
                <expr>"Jayne"</expr>,
                <expr>"Jean"</expr>,
                <expr>"Jeana"</expr>,
                <expr>"Jeane"</expr>,
                <expr>"Jeanie"</expr>,
                <expr>"Jeanna"</expr>,
                <expr>"Jeanne"</expr>,
                <expr>"Jeannie"</expr>,
                <expr>"Jen"</expr>,
                <expr>"Jena"</expr>,
                <expr>"Jeni"</expr>,
                <expr>"Jenn"</expr>,
                <expr>"Jenna"</expr>,
                <expr>"Jennee"</expr>,
                <expr>"Jenni"</expr>,
                <expr>"Jennie"</expr>,
                <expr>"Jenny"</expr>,
                <expr>"Jinny"</expr>,
                <expr>"Jo Ann"</expr>,
                <expr>"Jo-Ann"</expr>,
                <expr>"Jo-Anne"</expr>,
                <expr>"Joan"</expr>,
                <expr>"Joana"</expr>,
                <expr>"Joane"</expr>,
                <expr>"Joanie"</expr>,
                <expr>"Joann"</expr>,
                <expr>"Joanna"</expr>,
                <expr>"Joanne"</expr>,
                <expr>"Joeann"</expr>,
                <expr>"Johna"</expr>,
                <expr>"Johnna"</expr>,
                <expr>"Joni"</expr>,
                <expr>"Jonie"</expr>,
                <expr>"Juana"</expr>,
                <expr>"June"</expr>,
                <expr>"Junia"</expr>,
                <expr>"Junie"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initial KN case.
     *
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualKnight</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Knight"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"Hynda"</expr>,
                <expr>"Nada"</expr>,
                <expr>"Nadia"</expr>,
                <expr>"Nady"</expr>,
                <expr>"Nat"</expr>,
                <expr>"Nata"</expr>,
                <expr>"Natty"</expr>,
                <expr>"Neda"</expr>,
                <expr>"Nedda"</expr>,
                <expr>"Nedi"</expr>,
                <expr>"Netta"</expr>,
                <expr>"Netti"</expr>,
                <expr>"Nettie"</expr>,
                <expr>"Netty"</expr>,
                <expr>"Nita"</expr>,
                <expr>"Nydia"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualMary</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Mary"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"Mair"</expr>,
                <expr>"Maire"</expr>,
                <expr>"Mara"</expr>,
                <expr>"Mareah"</expr>,
                <expr>"Mari"</expr>,
                <expr>"Maria"</expr>,
                <expr>"Marie"</expr>,
                <expr>"Mary"</expr>,
                <expr>"Maura"</expr>,
                <expr>"Maure"</expr>,
                <expr>"Meara"</expr>,
                <expr>"Merrie"</expr>,
                <expr>"Merry"</expr>,
                <expr>"Mira"</expr>,
                <expr>"Moira"</expr>,
                <expr>"Mora"</expr>,
                <expr>"Moria"</expr>,
                <expr>"Moyra"</expr>,
                <expr>"Muire"</expr>,
                <expr>"Myra"</expr>,
                <expr>"Myrah"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualParis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(<argument><expr>"Paris"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Pearcy"</expr>, <expr>"Perris"</expr>, <expr>"Piercy"</expr>, <expr>"Pierz"</expr>, <expr>"Pryse"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualPeter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Peter"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Peadar"</expr>, <expr>"Peder"</expr>, <expr>"Pedro"</expr>, <expr>"Peter"</expr>, <expr>"Petr"</expr>, <expr>"Peyter"</expr>, <expr>"Pieter"</expr>, <expr>"Pietro"</expr>, <expr>"Piotr"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualRay</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(<argument><expr>"Ray"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Ray"</expr>, <expr>"Rey"</expr>, <expr>"Roi"</expr>, <expr>"Roy"</expr>, <expr>"Ruy"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualSusan</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Susan"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{
                <expr>"Siusan"</expr>,
                <expr>"Sosanna"</expr>,
                <expr>"Susan"</expr>,
                <expr>"Susana"</expr>,
                <expr>"Susann"</expr>,
                <expr>"Susanna"</expr>,
                <expr>"Susannah"</expr>,
                <expr>"Susanne"</expr>,
                <expr>"Suzann"</expr>,
                <expr>"Suzanna"</expr>,
                <expr>"Suzanne"</expr>,
                <expr>"Zuzana"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Initial WR case.
     *
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualWright</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(<argument><expr>"Wright"</expr></argument>, <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Rota"</expr>, <expr>"Rudd"</expr>, <expr>"Ryde"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Match data computed from http://www.lanw.com/java/phonetic/default.htm
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testIsMetaphoneEqualXalan</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertIsMetaphoneEqual</name></name><argument_list>(
            <argument><expr>"Xalan"</expr></argument>,
            <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Celene"</expr>, <expr>"Celina"</expr>, <expr>"Celine"</expr>, <expr>"Selena"</expr>, <expr>"Selene"</expr>, <expr>"Selina"</expr>, <expr>"Seline"</expr>, <expr>"Suellen"</expr>, <expr>"Xylina"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testMetaphone</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"HL"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"howl"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TSTN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"testing"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"The"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"KK"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"quick"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"BRN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"brown"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"FKS"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"fox"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"JMPT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"jumped"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"OFR"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"over"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"0"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"the"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"LS"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"lazy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>"TKS"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"dogs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWordEndingInMB</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"KM"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"COMB"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"TM"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"TOMB"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"WM"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"WOMB"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDiscardOfSCEOrSCIOrSCY</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"SNS"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SCIENCE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"SN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SCENE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"S"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SCY"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests (CODEC-57) Metaphone.metaphone(String) returns an empty string when passed the word "why"
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWhy</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// PHP returns "H". The original metaphone returns an empty string.</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"WHY"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testWordsWithCIA</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"XP"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"CIAPO"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTranslateOfSCHAndCH</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"SKTL"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SCHEDULE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"SKMT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SCHEMATIC"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"KRKT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"CHARACTER"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"TX"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"TEACH"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTranslateToJOfDGEOrDGIOrDGY</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"TJ"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"DODGY"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"TJ"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"DODGE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"AJMT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"ADGIEMTI"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDiscardOfSilentHAfterG</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"KNT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"GHENT"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"B"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"BAUGH"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDiscardOfSilentGN</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// NOTE: This does not test for silent GN, but for starting with GN</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"N"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"GNU"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// NOTE: Trying to test for GNED, but expected code does not appear to execute</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"SNT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SIGNED"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testPHTOF</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"FX"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"PHISH"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSHAndSIOAndSIAToX</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"XT"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"SHOT"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"OTXN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"ODSIAN"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"PLXN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"PULSION"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTIOAndTIAToX</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"OX"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"OTIA"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"PRXN"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"PORTION"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTCH</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"RX"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"RETCH"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"WX"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"WATCH"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testExceedLength</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// should be AKSKS, but istruncated by Max Code Length</comment>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"AKSK"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"AXEAXE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSetMaxLengthWithTruncation</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// should be AKSKS, but istruncated by Max Code Length</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>setMaxCodeLen</name><argument_list>( <argument><expr>6</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>( <argument><expr>"AKSKSK"</expr></argument>, <argument><expr><call><name><name>this</name>.<name>getStringEncoder</name></name><argument_list>()</argument_list></call>.<call><name>metaphone</name><argument_list>(<argument><expr>"AXEAXEAXE"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier>public</specifier> <name>void</name></type> <name>validateFixture</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index><index>[]</index></name></type> <name>pairs</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>pairs</name>.<name>length</name></name> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Test fixture is empty"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name><name>pairs</name>.<name>length</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr><name><name>pairs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>length</name> != 2</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>fail</name><argument_list>(<argument><expr>"Error in test fixture in the data array at index " + <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

}</block></class>
</unit>
