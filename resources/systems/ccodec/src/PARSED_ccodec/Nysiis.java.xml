<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\main\java\org\apache\commons\codec\language\Nysiis.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>java</name>.<name>util</name>.<name>regex</name>.<name>Pattern</name></name>;</import>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoder</name></name>;</import>

<comment type="javadoc">/**
 * Encodes a string into a NYSIIS value. NYSIIS is an encoding used to relate similar names, but can also be used as a
 * general purpose scheme to find word with similar phonemes.
 * &lt;p&gt;
 * NYSIIS features an accuracy increase of 2.7% over the traditional Soundex algorithm.
 * &lt;p&gt;
 * Algorithm description:
 * &lt;pre&gt;
 * 1. Transcode first characters of name
 *   1a. MAC -&gt;   MCC
 *   1b. KN  -&gt;   NN
 *   1c. K   -&gt;   C
 *   1d. PH  -&gt;   FF
 *   1e. PF  -&gt;   FF
 *   1f. SCH -&gt;   SSS
 * 2. Transcode last characters of name
 *   2a. EE, IE          -&gt;   Y
 *   2b. DT,RT,RD,NT,ND  -&gt;   D
 * 3. First character of key = first character of name
 * 4. Transcode remaining characters by following these rules, incrementing by one character each time
 *   4a. EV  -&gt;   AF  else A,E,I,O,U -&gt; A
 *   4b. Q   -&gt;   G
 *   4c. Z   -&gt;   S
 *   4d. M   -&gt;   N
 *   4e. KN  -&gt;   N   else K -&gt; C
 *   4f. SCH -&gt;   SSS
 *   4g. PH  -&gt;   FF
 *   4h. H   -&gt;   If previous or next is nonvowel, previous
 *   4i. W   -&gt;   If previous is vowel, previous
 *   4j. Add current to key if current != last key character
 * 5. If last character is S, remove it
 * 6. If last characters are AY, replace with Y
 * 7. If last character is A, remove it
 * 8. Collapse all strings of repeated characters
 * 9. Add original first character of name as first character of key
 * &lt;/pre&gt;
 * &lt;p&gt;
 * This class is immutable and thread-safe.
 *
 * @see &lt;a href="http://en.wikipedia.org/wiki/NYSIIS"&gt;NYSIIS on Wikipedia&lt;/a&gt;
 * @see &lt;a href="http://www.dropby.com/NYSIIS.html"&gt;NYSIIS on dropby.com&lt;/a&gt;
 * @see Soundex
 * @since 1.7
 * @version $Id: Nysiis.java 1429868 2013-01-07 16:08:05Z ggregory $
 */</comment>
<class><specifier>public</specifier> class <name>Nysiis</name> <super><implements>implements <name>StringEncoder</name></implements></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_A</name>   =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'A'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_AF</name>  =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'A'</expr>, <expr>'F'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_C</name>   =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'C'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_FF</name>  =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'F'</expr>, <expr>'F'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_G</name>   =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'G'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_N</name>   =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'N'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_NN</name>  =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'N'</expr>, <expr>'N'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_S</name>   =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'S'</expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name><index>[]</index></type> <name>CHARS_SSS</name> =<init> <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr>'S'</expr>, <expr>'S'</expr>, <expr>'S'</expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_MAC</name>    =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^MAC"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_KN</name>     =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^KN"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_K</name>      =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^K"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_PH_PF</name>  =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^(PH|PF)"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_SCH</name>    =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"^SCH"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_EE_IE</name>  =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"(EE|IE)$"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>Pattern</name></type> <name>PAT_DT_ETC</name> =<init> <expr><call><name><name>Pattern</name>.<name>compile</name></name><argument_list>(<argument><expr>"(DT|RT|RD|NT|ND)$"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>char</name></type> <name>SPACE</name> =<init> <expr>' '</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> <name>int</name></type> <name>TRUE_LENGTH</name> =<init> <expr>6</expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Tests if the given character is a vowel.
     *
     * @param c
     *            the character to test
     * @return {@code true} if the character is a vowel, {@code false} otherwise
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>boolean</name></type> <name>isVowel</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><name>c</name> == 'A' || <name>c</name> == 'E' || <name>c</name> == 'I' || <name>c</name> == 'O' || <name>c</name> == 'U'</expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Transcodes the remaining parts of the String. The method operates on a sliding window, looking at 4 characters at
     * a time: [i-1, i, i+1, i+2].
     *
     * @param prev
     *            the previous character
     * @param curr
     *            the current character
     * @param next
     *            the next character
     * @param aNext
     *            the after next character
     * @return a transcoded array of characters, starting from the current position
     */</comment>
    <function><type><specifier>private</specifier> <specifier>static</specifier> <name>char</name><index>[]</index></type> <name>transcodeRemaining</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>char</name></type> <name>prev</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>curr</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>next</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>char</name></type> <name>aNext</name></decl></param>)</parameter_list> <block>{
        <comment type="line">// 1. EV -&gt; AF</comment>
        <if>if <condition>(<expr><name>curr</name> == 'E' &amp;&amp; <name>next</name> == 'V'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_AF</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// A, E, I, O, U -&gt; A</comment>
        <if>if <condition>(<expr><call><name>isVowel</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_A</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// 2. Q -&gt; G, Z -&gt; S, M -&gt; N</comment>
        <if>if <condition>(<expr><name>curr</name> == 'Q'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_G</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>curr</name> == 'Z'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_S</name></expr>;</return>
        }</block></then> <else>else <if>if <condition>(<expr><name>curr</name> == 'M'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_N</name></expr>;</return>
        }</block></then></if></else></if></else></if>

        <comment type="line">// 3. KN -&gt; NN else K -&gt; C</comment>
        <if>if <condition>(<expr><name>curr</name> == 'K'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>next</name> == 'N'</expr>)</condition><then> <block>{
                <return>return <expr><name>CHARS_NN</name></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>CHARS_C</name></expr>;</return>
            }</block></else></if>
        }</block></then></if>

        <comment type="line">// 4. SCH -&gt; SSS</comment>
        <if>if <condition>(<expr><name>curr</name> == 'S' &amp;&amp; <name>next</name> == 'C' &amp;&amp; <name>aNext</name> == 'H'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_SSS</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// PH -&gt; FF</comment>
        <if>if <condition>(<expr><name>curr</name> == 'P' &amp;&amp; <name>next</name> == 'H'</expr>)</condition><then> <block>{
            <return>return <expr><name>CHARS_FF</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// 5. H -&gt; If previous or next is a non vowel, previous.</comment>
        <if>if <condition>(<expr><name>curr</name> == 'H' &amp;&amp; (!<call><name>isVowel</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> || !<call><name>isVowel</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <return>return <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr><name>prev</name></expr> }</block></expr>;</return>
        }</block></then></if>

        <comment type="line">// 6. W -&gt; If previous is vowel, previous.</comment>
        <if>if <condition>(<expr><name>curr</name> == 'W' &amp;&amp; <call><name>isVowel</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr><name>prev</name></expr> }</block></expr>;</return>
        }</block></then></if>

        <return>return <expr>new <name><name>char</name><index>[]</index></name> <block>{ <expr><name>curr</name></expr> }</block></expr>;</return>
    }</block></function>

    <comment type="javadoc">/** Indicates the strict mode. */</comment>
    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>boolean</name></type> <name>strict</name></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Creates an instance of the {@link Nysiis} encoder with strict mode (original form),
     * i.e. encoded strings have a maximum length of 6.
     */</comment>
    <constructor><specifier>public</specifier> <name>Nysiis</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Create an instance of the {@link Nysiis} encoder with the specified strict mode:
     *
     * &lt;ul&gt;
     *  &lt;li&gt;{@code true}: encoded strings have a maximum length of 6&lt;/li&gt;
     *  &lt;li&gt;{@code false}: encoded strings may have arbitrary length&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param strict
     *            the strict mode
     */</comment>
    <constructor><specifier>public</specifier> <name>Nysiis</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>strict</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name>.<name>strict</name></name> = <name>strict</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="javadoc">/**
     * Encodes an Object using the NYSIIS algorithm. This method is provided in order to satisfy the requirements of the
     * Encoder interface, and will throw an {@link EncoderException} if the supplied object is not of type
     * {@link String}.
     *
     * @param obj
     *            Object to encode
     * @return An object (or a {@link String}) containing the NYSIIS code which corresponds to the given String.
     * @throws EncoderException
     *            if the parameter supplied is not of a {@link String}
     * @throws IllegalArgumentException
     *            if a character is not mapped
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>Object</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr>!(<name>obj</name> <name>instanceof</name> <name>String</name>)</expr>)</condition><then> <block>{
            <throw>throw <expr>new <call><name>EncoderException</name><argument_list>(<argument><expr>"Parameter supplied to Nysiis encode is not of type java.lang.String"</expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name>.<name>nysiis</name></name><argument_list>(<argument><expr>(<name>String</name>) <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Encodes a String using the NYSIIS algorithm.
     *
     * @param str
     *            A String object to encode
     * @return A Nysiis code corresponding to the String supplied
     * @throws IllegalArgumentException
     *            if a character is not mapped
     */</comment>
    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <name>String</name></type> <name>encode</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name>.<name>nysiis</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Indicates the strict mode for this {@link Nysiis} encoder.
     *
     * @return {@code true} if the encoder is configured for strict mode, {@code false} otherwise
     */</comment>
    <function><type><specifier>public</specifier> <name>boolean</name></type> <name>isStrict</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name>.<name>strict</name></name></expr>;</return>
    }</block></function>

    <comment type="javadoc">/**
     * Retrieves the NYSIIS code for a given String object.
     *
     * @param str
     *            String to encode using the NYSIIS algorithm
     * @return A NYSIIS code for the String supplied
     */</comment>
    <function><type><specifier>public</specifier> <name>String</name></type> <name>nysiis</name><parameter_list>(<param><decl><type><name>String</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>str</name> == <name>null</name></expr>)</condition><then> <block>{
            <return>return <expr><name>null</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Use the same clean rules as Soundex</comment>
        <expr_stmt><expr><name>str</name> = <call><name><name>SoundexUtils</name>.<name>clean</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>str</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// Translate first characters of name:</comment>
        <comment type="line">// MAC -&gt; MCC, KN -&gt; NN, K -&gt; C, PH | PF -&gt; FF, SCH -&gt; SSS</comment>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_MAC</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"MCC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_KN</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"NN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_K</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"C"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_PH_PF</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"FF"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_SCH</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"SSS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Translate last characters of name:</comment>
        <comment type="line">// EE -&gt; Y, IE -&gt; Y, DT | RT | RD | NT | ND -&gt; D</comment>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_EE_IE</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"Y"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>str</name> = <call><name><name>PAT_DT_ETC</name>.<name>matcher</name></name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>.<call><name>replaceFirst</name><argument_list>(<argument><expr>"D"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// First character of key = first character of name.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>key</name> =<init> <expr>new <call><name>StringBuilder</name><argument_list>(<argument><expr><call><name><name>str</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>key</name>.<name>append</name></name><argument_list>(<argument><expr><call><name><name>str</name>.<name>charAt</name></name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Transcode remaining characters, incrementing by one character each time</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>chars</name> =<init> <expr><call><name><name>str</name>.<name>toCharArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> =<init> <expr><name><name>chars</name>.<name>length</name></name></expr></init></decl>;</decl_stmt>

        <for>for (<init><decl><type><name>int</name></type> <name>i</name> =<init> <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>next</name> =<init> <expr><name>i</name> &lt; <name>len</name> - 1 ? <name><name>chars</name><index>[<expr><name>i</name> + 1</expr>]</index></name> : <name>SPACE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>aNext</name> =<init> <expr><name>i</name> &lt; <name>len</name> - 2 ? <name><name>chars</name><index>[<expr><name>i</name> + 2</expr>]</index></name> : <name>SPACE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name><index>[]</index></type> <name>transcoded</name> =<init> <expr><call><name>transcodeRemaining</name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr></argument>, <argument><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>aNext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name>.<name>arraycopy</name></name><argument_list>(<argument><expr><name>transcoded</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>transcoded</name>.<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// only append the current char to the key if it is different from the last one</comment>
            <if>if <condition>(<expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name> != <name><name>chars</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>key</name>.<name>append</name></name><argument_list>(<argument><expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 1</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>lastChar</name> =<init> <expr><call><name><name>key</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If last character is S, remove it.</comment>
            <if>if <condition>(<expr><name>lastChar</name> == 'S'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>key</name>.<name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastChar</name> = <call><name><name>key</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> &gt; 2</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>last2Char</name> =<init> <expr><call><name><name>key</name>.<name>charAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// If last characters are AY, replace with Y.</comment>
                <if>if <condition>(<expr><name>last2Char</name> == 'A' &amp;&amp; <name>lastChar</name> == 'Y'</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>key</name>.<name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

            <comment type="line">// If last character is A, remove it.</comment>
            <if>if <condition>(<expr><name>lastChar</name> == 'A'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>key</name>.<name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>key</name>.<name>length</name></name><argument_list>()</argument_list></call> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name> =<init> <expr><call><name><name>key</name>.<name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>this</name>.<name>isStrict</name></name><argument_list>()</argument_list></call> ? <call><name><name>string</name>.<name>substring</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>Math</name>.<name>min</name></name><argument_list>(<argument><expr><name>TRUE_LENGTH</name></expr></argument>, <argument><expr><call><name><name>string</name>.<name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> : <name>string</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
