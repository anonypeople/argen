<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="C:\Users\David\IdeaProjects\arem\resources\systems\ccodec\src\test\java\org\apache\commons\codec\language\NysiisTest.java"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>language</name></name>;</package>

<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>EncoderException</name></name>;</import>
<import>import <name><name>org</name>.<name>apache</name>.<name>commons</name>.<name>codec</name>.<name>StringEncoderAbstractTest</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Assert</name></name>;</import>
<import>import <name><name>org</name>.<name>junit</name>.<name>Test</name></name>;</import>

<comment type="javadoc">/**
 * Tests {@link Nysiis}
 *
 * @since 1.7
 * @version $Id: NysiisTest.java 1438145 2013-01-24 19:49:46Z sebb $
 */</comment>
<class><specifier>public</specifier> class <name>NysiisTest</name> <super><extends>extends <name><name>StringEncoderAbstractTest</name><argument_list>&lt;<argument><name>Nysiis</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><type><specifier>private</specifier> <specifier>final</specifier> <name>Nysiis</name></type> <name>fullNysiis</name> =<init> <expr>new <call><name>Nysiis</name><argument_list>(<argument><expr>false</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="javadoc">/**
     * Takes an array of String pairs where each pair's first element is the input and the second element the expected
     * encoding.
     *
     * @param testValues
     *            an array of String pairs where each pair's first element is the input and the second element the
     *            expected encoding.
     * @throws EncoderException
     */</comment>
    <function><type><specifier>private</specifier> <name>void</name></type> <name>assertEncodings</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name>...</type> <name>testValues</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name><index>[]</index></type> <name>arr</name> :<range> <expr><name>testValues</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Problem with " + <name><name>arr</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name><name>this</name>.<name>fullNysiis</name>.<name>encode</name></name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <name>Nysiis</name></type> <name>createStringEncoder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr>new <call><name>Nysiis</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier>private</specifier> <name>void</name></type> <name>encodeAll</name><parameter_list>(<param><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>strings</name></decl></param>, <param><decl><type><specifier>final</specifier> <name>String</name></type> <name>expectedEncoding</name></decl></param>)</parameter_list> <block>{
        <for>for (<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name> :<range> <expr><name>strings</name></expr></range></decl></init>) <block>{
            <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"Problem with " + <name>string</name></expr></argument>, <argument><expr><name>expectedEncoding</name></expr></argument>, <argument><expr><call><name>getStringEncoder</name><argument_list>()</argument_list></call>.<call><name>encode</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testBran</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>encodeAll</name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Brian"</expr>, <expr>"Brown"</expr>, <expr>"Brun"</expr> }</block></expr></argument>, <argument><expr>"BRAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testCap</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Capp"</expr>, <expr>"Cope"</expr>, <expr>"Copp"</expr>, <expr>"Kipp"</expr> }</block></expr></argument>, <argument><expr>"CAP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDad</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Data Quality and Record Linkage Techniques P.121 claims this is DAN,</comment>
        <comment type="line">// but it should be DAD, verified also with dropby.com</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Dent"</expr> }</block></expr></argument>, <argument><expr>"DAD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDan</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Dane"</expr>, <expr>"Dean"</expr>, <expr>"Dionne"</expr> }</block></expr></argument>, <argument><expr>"DAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests data gathered from around the internet.
     *
     * @see &lt;a href="http://www.dropby.com/NYSIISTextStrings.html"&gt;http://www.dropby.com/NYSIISTextStrings.html&lt;/a&gt;
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testDropBy</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <comment type="line">// Explanation of differences between this implementation and the one at dropby.com is</comment>
        <comment type="line">// prepended to the test string. The referenced rules refer to the outlined steps the</comment>
        <comment type="line">// class description for Nysiis.</comment>

        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <comment type="line">// 1. Transcode first characters of name</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"MACINTOSH"</expr>, <expr>"MCANT"</expr> }</block></expr></argument>,
                <comment type="line">// violates 4j: the second N should not be added, as the first</comment>
                <comment type="line">//              key char is already a N</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"KNUTH"</expr>, <expr>"NAT"</expr> }</block></expr></argument>,           <comment type="line">// Original: NNAT; modified: NATH</comment>
                <comment type="line">// O and E are transcoded to A because of rule 4a</comment>
                <comment type="line">// H also to A because of rule 4h</comment>
                <comment type="line">// the N gets mysteriously lost, maybe because of a wrongly implemented rule 4h</comment>
                <comment type="line">// that skips the next char in such a case?</comment>
                <comment type="line">// the remaining A is removed because of rule 7</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"KOEHN"</expr>, <expr>"CAN"</expr> }</block></expr></argument>,           <comment type="line">// Original: C</comment>
                <comment type="line">// violates 4j: see also KNUTH</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"PHILLIPSON"</expr>, <expr>"FALAPSAN"</expr> }</block></expr></argument>, <comment type="line">// Original: FFALAP[SAN]</comment>
                <comment type="line">// violates 4j: see also KNUTH</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"PFEISTER"</expr>, <expr>"FASTAR"</expr> }</block></expr></argument>,     <comment type="line">// Original: FFASTA[R]</comment>
                <comment type="line">// violates 4j: see also KNUTH</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"SCHOENHOEFT"</expr>, <expr>"SANAFT"</expr> }</block></expr></argument>,  <comment type="line">// Original: SSANAF[T]</comment>
                <comment type="line">// 2. Transcode last characters of name:</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"MCKEE"</expr>, <expr>"MCY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"MACKIE"</expr>, <expr>"MCY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"HEITSCHMIDT"</expr>, <expr>"HATSNAD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"BART"</expr>, <expr>"BAD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"HURD"</expr>, <expr>"HAD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"HUNT"</expr>, <expr>"HAD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"WESTERLUND"</expr>, <expr>"WASTARLAD"</expr> }</block></expr></argument>,
                <comment type="line">// 4. Transcode remaining characters by following these rules,</comment>
                <comment type="line">//    incrementing by one character each time:</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"CASSTEVENS"</expr>, <expr>"CASTAFAN"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"VASQUEZ"</expr>, <expr>"VASG"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"FRAZIER"</expr>, <expr>"FRASAR"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"BOWMAN"</expr>, <expr>"BANAN"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"MCKNIGHT"</expr>, <expr>"MCNAGT"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"RICKERT"</expr>, <expr>"RACAD"</expr> }</block></expr></argument>,
                <comment type="line">// violates 5: the last S is not removed</comment>
                <comment type="line">// when comparing to DEUTS, which is phonetically similar</comment>
                <comment type="line">// the result it also DAT, which is correct for DEUTSCH too imo</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"DEUTSCH"</expr>, <expr>"DAT"</expr> }</block></expr></argument>,         <comment type="line">// Original: DATS</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"WESTPHAL"</expr>, <expr>"WASTFAL"</expr> }</block></expr></argument>,
                <comment type="line">// violates 4h: the H should be transcoded to S and thus ignored as</comment>
                <comment type="line">// the first key character is also S</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"SHRIVER"</expr>, <expr>"SRAVAR"</expr> }</block></expr></argument>,      <comment type="line">// Original: SHRAVA[R]</comment>
                <comment type="line">// same as KOEHN, the L gets mysteriously lost</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"KUHL"</expr>, <expr>"CAL"</expr> }</block></expr></argument>,            <comment type="line">// Original: C</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"RAWSON"</expr>, <expr>"RASAN"</expr> }</block></expr></argument>,
                <comment type="line">// If last character is S, remove it</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"JILES"</expr>, <expr>"JAL"</expr> }</block></expr></argument>,
                <comment type="line">// violates 6: if the last two characters are AY, remove A</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"CARRAWAY"</expr>, <expr>"CARY"</expr> }</block></expr></argument>,       <comment type="line">// Original: CARAY</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"YAMADA"</expr>, <expr>"YANAD"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testFal</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Phil"</expr> }</block></expr></argument>, <argument><expr>"FAL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests data gathered from around the internets.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testOthers</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"O'Daniel"</expr>, <expr>"ODANAL"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"O'Donnel"</expr>, <expr>"ODANAL"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Cory"</expr>, <expr>"CARY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Corey"</expr>, <expr>"CARY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Kory"</expr>, <expr>"CARY"</expr> }</block></expr></argument>,
                <comment type="line">//</comment>
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"FUZZY"</expr>, <expr>"FASY"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 1: Translate first characters of name: MAC â MCC, KN â N, K â C, PH, PF â FF, SCH â SSS
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"MACX"</expr>, <expr>"MCX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"KNX"</expr>, <expr>"NX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"KX"</expr>, <expr>"CX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"PHX"</expr>, <expr>"FX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"PFX"</expr>, <expr>"FX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"SCHX"</expr>, <expr>"SX"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 2: Translate last characters of name: EE â Y, IE â Y, DT, RT, RD, NT, ND â D
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XEE"</expr>, <expr>"XY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XIE"</expr>, <expr>"XY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XDT"</expr>, <expr>"XD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XRT"</expr>, <expr>"XD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XRD"</expr>, <expr>"XD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XNT"</expr>, <expr>"XD"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XND"</expr>, <expr>"XD"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 4.1: EV â AF else A, E, I, O, U â A
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule4Dot1</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XEV"</expr>, <expr>"XAF"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XAX"</expr>, <expr>"XAX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XEX"</expr>, <expr>"XAX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XIX"</expr>, <expr>"XAX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XOX"</expr>, <expr>"XAX"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XUX"</expr>, <expr>"XAX"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 4.2: Q â G, Z â S, M â N
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule4Dot2</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XQ"</expr>, <expr>"XG"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XZ"</expr>, <expr>"X"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XM"</expr>, <expr>"XN"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 5: If last character is S, remove it.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule5</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XS"</expr>, <expr>"X"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XSS"</expr>, <expr>"X"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 6: If last characters are AY, replace with Y.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule6</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XAY"</expr>, <expr>"XY"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XAYS"</expr>, <expr>"XY"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Rules 5, 6</comment>
    }</block></function>

    <comment type="javadoc">/**
     * Tests rule 7: If last character is A, remove it.
     *
     * @throws EncoderException
     */</comment>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testRule7</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>EncoderException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>assertEncodings</name></name><argument_list>(
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XA"</expr>, <expr>"X"</expr> }</block></expr></argument>,
                <argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"XAS"</expr>, <expr>"X"</expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Rules 5, 7</comment>
    }</block></function>
    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSnad</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Data Quality and Record Linkage Techniques P.121 claims this is SNAT,</comment>
        <comment type="line">// but it should be SNAD</comment>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Schmidt"</expr> }</block></expr></argument>, <argument><expr>"SNAD"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSnat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Smith"</expr>, <expr>"Schmit"</expr> }</block></expr></argument>, <argument><expr>"SNAT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testSpecialBranches</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Kobwick"</expr> }</block></expr></argument>, <argument><expr>"CABWAC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Kocher"</expr> }</block></expr></argument>, <argument><expr>"CACAR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Fesca"</expr> }</block></expr></argument>, <argument><expr>"FASC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Shom"</expr> }</block></expr></argument>, <argument><expr>"SAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Ohlo"</expr> }</block></expr></argument>, <argument><expr>"OL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Uhu"</expr> }</block></expr></argument>, <argument><expr>"UH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Um"</expr> }</block></expr></argument>, <argument><expr>"UN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTranan</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name>.<name>encodeAll</name></name><argument_list>(<argument><expr>new <name><name>String</name><index>[]</index></name> <block>{ <expr>"Trueman"</expr>, <expr>"Truman"</expr> }</block></expr></argument>, <argument><expr>"TRANAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <name>void</name></type> <name>testTrueVariant</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Nysiis</name></type> <name>encoder</name> =<init> <expr>new <call><name>Nysiis</name><argument_list>(<argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>encoded</name> =<init> <expr><call><name><name>encoder</name>.<name>encode</name></name><argument_list>(<argument><expr>"WESTERLUND"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertTrue</name></name><argument_list>(<argument><expr><call><name><name>encoded</name>.<name>length</name></name><argument_list>()</argument_list></call> &lt;= 6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assert</name>.<name>assertEquals</name></name><argument_list>(<argument><expr>"WASTAR"</expr></argument>, <argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
